--------------------------------------------------------------------------------
Profile data file 'callgrind.out.97267' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 35676827733
Trigger: Program termination
Profiled target:  ./build/kissat Benchmark_test/test.cnf (PID 97267, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                       
--------------------------------------------------------------------------------
236,412,912,997 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                       file:function
--------------------------------------------------------------------------------
46,466,288,256 (19.65%)  build/../src/deduce.c:kissat_deduce_first_uip_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
21,691,132,779 ( 9.18%)  build/../src/proplit.h:search_propagate_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
21,494,650,450 ( 9.09%)  build/../src/check.c:checker_propagate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 7,557,519,871 ( 3.20%)  build/../src/inlineassign.h:kissat_fast_assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 5,668,280,834 ( 2.40%)  build/../src/check.c:checker_assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 4,761,934,092 ( 2.01%)  build/../src/arena.c:kissat_clause_in_arena [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 4,754,757,466 ( 2.01%)  build/../src/fastel.c:fast_forward_subsumed [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 4,341,320,860 ( 1.84%)  build/../src/inlineassign.h:kissat_assignment_level [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 4,071,921,954 ( 1.72%)  build/../src/inlinevector.h:kissat_push_vectors [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 3,206,957,152 ( 1.36%)  build/../src/check.c:checker_backtrack [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 3,196,603,633 ( 1.35%)  build/../src/proplit.h:probing_propagate_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,799,646,124 ( 1.18%)  build/../src/inline.h:kissat_unchecked_dereference_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,731,745,885 ( 1.16%)  build/../src/kitten.c:propagate_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,666,549,172 ( 1.13%)  build/../src/inline.h:kissat_dereference_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,605,600,646 ( 1.10%)  build/../src/proplit.h:kissat_watch_large_delayed [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,565,239,524 ( 1.09%)  build/../src/utilities.h:kissat_align_w2rd [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,142,027,013 ( 0.91%)  build/../src/backtrack.c:unassign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,073,756,846 ( 0.88%)  build/../src/check.c:checker_watches [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 2,002,126,539 ( 0.85%)  build/../src/fastassign.h:kissat_fast_assign_reference [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,989,211,140 ( 0.84%)  build/../src/clause.h:kissat_bytes_of_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,944,444,578 ( 0.82%)  build/../src/backtrack.c:kissat_backtrack_without_updating_phases [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,589,657,494 ( 0.67%)  build/../src/deduce.c:analyze_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,484,092,395 ( 0.63%)  build/../src/arena.h:kissat_align_ward [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,468,667,483 ( 0.62%)  build/../src/utilities.h:kissat_cache_lines [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,458,811,939 ( 0.62%)  build/../src/bump.c:sort_bump [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,427,399,066 ( 0.60%)  build/../src/vector.c:kissat_resize_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,426,389,900 ( 0.60%)  build/../src/inlinevector.h:kissat_size_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,372,503,240 ( 0.58%)  build/../src/inlinevector.h:kissat_begin_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,360,668,288 ( 0.58%)  build/../src/inlinevector.h:kissat_dec_usable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,360,444,020 ( 0.58%)  build/../src/watch.h:kissat_blocking_watch [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,346,725,662 ( 0.57%)  build/../src/factor.c:next_factor [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,274,261,044 ( 0.54%)  build/../src/inline.h:kissat_push_blocking_watch [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,221,895,168 ( 0.52%)  build/../src/inlinevector.h:kissat_end_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,197,738,378 ( 0.51%)  build/../src/utilities.h:kissat_aligned_word [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,195,285,694 ( 0.51%)  build/../src/kitten.c:assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,190,483,523 ( 0.50%)  build/../src/utilities.h:kissat_aligned_pointer [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,170,259,740 ( 0.50%)  build/../src/proplit.h:kissat_delay_watching_large [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,159,867,552 ( 0.49%)  build/../src/kitten.c:watch_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,155,233,483 ( 0.49%)  build/../src/kitten.c:decide [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,099,157,948 ( 0.46%)  build/../src/watch.h:kissat_large_watch [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,094,408,286 ( 0.46%)  build/../src/substitute.c:substitute_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,052,747,659 ( 0.45%)  build/../src/resolve.c:generate_resolvents [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,026,772,096 ( 0.43%)  build/../src/heap.h:kissat_heap_contains [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
 1,015,988,316 ( 0.43%)  build/../src/inlineheap.h:kissat_update_heap [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   985,233,110 ( 0.42%)  build/../src/kitten.c:kitten_clause_with_id_and_exception [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   964,014,090 ( 0.41%)  build/../src/kitten.c:unassign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   963,441,878 ( 0.41%)  build/../src/check.c:sort_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   922,051,484 ( 0.39%)  build/../src/check.c:watch_checker_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   888,072,737 ( 0.38%)  build/../src/kitten.c:propagate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   882,535,926 ( 0.37%)  build/../src/inlineheap.h:kissat_bubble_up [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   833,139,852 ( 0.35%)  build/../src/kitten.c:import_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   808,148,124 ( 0.34%)  build/../src/inline.h:kissat_export_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   789,654,143 ( 0.33%)  build/../src/inlineheap.h:kissat_bubble_down [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   763,572,770 ( 0.32%)  build/../src/restart.c:kissat_restart_mab [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   756,473,735 ( 0.32%)  build/../src/backtrack.c:add_unassigned_variable_back_to_queue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   755,051,570 ( 0.32%)  build/../src/clause.h:kissat_actual_bytes_of_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   739,023,635 ( 0.31%)  build/../src/shrink.c:shrink_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   701,190,310 ( 0.30%)  build/../src/substitute.c:determine_representatives [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   683,498,114 ( 0.29%)  build/../src/minimize.c:minimize_literal'2 [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   645,187,536 ( 0.27%)  build/../src/kitten.c:reset_assumptions [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   642,742,410 ( 0.27%)  build/../src/backtrack.c:add_unassigned_variable_back_to_heap [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   616,334,731 ( 0.26%)  build/../src/heap.h:kissat_get_heap_score [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   585,468,900 ( 0.25%)  build/../src/kitten.c:kitten_value [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   578,668,324 ( 0.24%)  build/../src/inline.h:kissat_push_analyzed [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   577,971,347 ( 0.24%)  build/../src/check.c:unwatch_checker_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   569,778,975 ( 0.24%)  build/../src/sort.c:move_smallest_literal_to_front [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   565,138,733 ( 0.24%)  build/../src/propsearch.c:search_propagate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   562,805,516 ( 0.24%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
   551,021,717 ( 0.23%)  build/../src/kitten.c:flip_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   533,613,634 ( 0.23%)  build/../src/sweep.c:sweep_repr [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   528,683,651 ( 0.22%)  build/../src/inlinequeue.h:kissat_move_to_front [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   524,950,921 ( 0.22%)  build/../src/fastassign.h:kissat_fast_binary_assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   506,885,824 ( 0.21%)  build/../src/analyze.c:kissat_reset_only_analyzed_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   499,144,149 ( 0.21%)  build/../src/minimize.c:minimized_index [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   492,554,004 ( 0.21%)  build/../src/inlinequeue.h:kissat_enqueue_links [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   488,360,405 ( 0.21%)  build/../src/shrink.c:shrink_block [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   484,495,444 ( 0.20%)  build/../src/inlinequeue.h:kissat_dequeue_links [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   483,368,149 ( 0.20%)  build/../src/inlinevector.h:kissat_empty_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   481,372,569 ( 0.20%)  build/../src/kitten.c:new_original_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   460,994,163 ( 0.19%)  build/../src/check.c:simplify_imported [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   457,878,221 ( 0.19%)  build/../src/factor.c:connect_clauses_to_factor [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   452,228,257 ( 0.19%)  build/../src/factor.c:factorize_next [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   447,722,051 ( 0.19%)  build/../src/inline.h:kissat_inlined_connect_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   432,154,170 ( 0.18%)  build/../src/forward.c:forward_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   432,114,768 ( 0.18%)  build/../src/sweep.c:sweep_refine_partition [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   423,227,409 ( 0.18%)  build/../src/watch.c:kissat_watch_large_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   417,383,121 ( 0.18%)  build/../src/congruence.c:check_implied [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   411,868,223 ( 0.17%)  build/../src/clause.h:kissat_next_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   406,551,571 ( 0.17%)  build/../src/shrink.c:shrink_along_large [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   391,398,284 ( 0.17%)  build/../src/kitten.c:kitten_clear [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   390,765,222 ( 0.17%)  build/../src/kitten.c:dereference_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   390,529,487 ( 0.17%)  build/../src/bump.c:move_analyzed_variables_to_front_of_queue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   383,985,816 ( 0.16%)  build/../src/check.c:import_internal_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   376,082,327 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
   370,835,934 ( 0.16%)  ./stdlib/./stdlib/random.c:random [/usr/lib/x86_64-linux-gnu/libc.so.6]
   363,612,420 ( 0.15%)  build/../src/watch.c:kissat_flush_large_watches [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   359,022,764 ( 0.15%)  build/../src/check.c:import_external_checker [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   345,504,633 ( 0.15%)  build/../src/check.c:check_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   344,737,774 ( 0.15%)  build/../src/minimize.c:minimize_reference'2 [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   327,423,457 ( 0.14%)  build/../src/statistics.c:kissat_check_statistics [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   325,924,348 ( 0.14%)  build/../src/sort.c:kissat_sort_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   321,747,020 ( 0.14%)  build/../src/inline.h:kissat_push_removable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   310,020,745 ( 0.13%)  build/../src/congruence.c:init_xor_gate_extraction [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   306,504,177 ( 0.13%)  build/../src/check.c:satisfied_or_trivial_imported [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   305,268,393 ( 0.13%)  build/../src/sweep.c:sweep_reference [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   299,482,848 ( 0.13%)  build/../src/inlinevector.h:kissat_add_usable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   293,787,300 ( 0.12%)  build/../src/statistics.h:kissat_add_kitten_ticks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   289,781,424 ( 0.12%)  build/../src/congruence.c:sort_pairs [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   288,305,524 ( 0.12%)  build/../src/vivify.c:count_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   275,202,930 ( 0.12%)  build/../src/sweep.c:add_literal_to_environment [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   261,208,545 ( 0.11%)  build/../src/shrink.c:shrink_along_reason [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   260,939,270 ( 0.11%)  build/../src/check.c:hash_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   260,092,858 ( 0.11%)  build/../src/ifthenelse.c:get_ternary_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   249,136,058 ( 0.11%)  build/../src/substitute.c:substitute_binaries [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   247,243,077 ( 0.10%)  build/../src/check.c:less_unsigned [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   240,623,570 ( 0.10%)  build/../src/terminate.h:kissat_terminated [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   222,898,937 ( 0.09%)  build/../src/vector.c:kissat_enlarge_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   220,973,059 ( 0.09%)  build/../src/analyze.c:sort_deduced_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   218,669,673 ( 0.09%)  build/../src/congruence.c:forward_subsume_matching_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   216,519,002 ( 0.09%)  build/../src/kitten.c:completely_backtrack_to_root_level [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   214,111,560 ( 0.09%)  build/../src/check.c:import_internal_checker [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   214,056,985 ( 0.09%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
   211,912,586 ( 0.09%)  build/../src/vivify.c:count_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   211,407,224 ( 0.09%)  build/../src/kitten.c:update_search [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   208,092,864 ( 0.09%)  build/../src/bump.c:bump_analyzed_variable_score [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   206,538,950 ( 0.09%)  build/../src/inlinequeue.h:kissat_update_queue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   203,983,472 ( 0.09%)  build/../src/fastel.c:can_fast_resolve_large_large [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   200,150,080 ( 0.08%)  build/../src/vivify.c:schedule_vivification_candidates [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   196,592,595 ( 0.08%)  build/../src/transitive.c:transitive_reduce [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   195,849,169 ( 0.08%)  build/../src/inline.h:kissat_push_large_watch [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   195,009,004 ( 0.08%)  build/../src/parse.c:parse_dimacs [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   193,797,836 ( 0.08%)  build/../src/watch.c:kissat_flush_large_connected [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   191,281,141 ( 0.08%)  build/../src/collect.c:sparse_sweep_garbage_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   180,947,088 ( 0.08%)  build/../src/collect.c:flush_watched_clauses_by_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   180,137,310 ( 0.08%)  build/../src/check.c:insert_imported [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   178,729,865 ( 0.08%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
   177,628,800 ( 0.08%)  build/../src/statistics.h:kissat_add_kitten_propagations [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   174,346,570 ( 0.07%)  build/../src/kitten.c:enqueue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   173,067,341 ( 0.07%)  build/../src/congruence.c:init_ite_gate_extraction [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   171,606,298 ( 0.07%)  build/../src/analyze.c:reset_removable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   170,149,752 ( 0.07%)  build/../src/check.c:use_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   170,003,758 ( 0.07%)  build/../src/sweep.c:sweep_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   168,288,098 ( 0.07%)  build/../src/shrink.c:mark_shrinkable_as_removable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   165,901,709 ( 0.07%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
   160,843,997 ( 0.07%)  build/../src/backbone.c:backbone_propagate_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   154,194,380 ( 0.07%)  build/../src/fastel.c:flush_occurrences [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   152,574,159 ( 0.06%)  build/../src/vivify.c:vivify_deduce [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   150,700,692 ( 0.06%)  build/../src/kitten.c:kitten_compute_clausal_core [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   145,804,720 ( 0.06%)  build/../src/vector.c:fix_vector_pointers_after_moving_stack [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   145,689,762 ( 0.06%)  build/../src/check.c:match_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   144,004,935 ( 0.06%)  build/../src/internal.c:kissat_add [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   136,478,891 ( 0.06%)  build/../src/kitten.c:next_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   136,377,437 ( 0.06%)  build/../src/ifthenelse.c:kissat_find_if_then_else_gate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   135,240,859 ( 0.06%)  build/../src/congruence.c:find_binary [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   134,082,924 ( 0.06%)  build/../src/deduce.c:mark_clause_as_used [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   133,810,910 ( 0.06%)  build/../src/congruence.c:extract_xor_gates_with_base_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   131,813,504 ( 0.06%)  build/../src/check.c:reduce_hash [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   130,600,979 ( 0.06%)  build/../src/walk.c:break_value [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   128,070,630 ( 0.05%)  build/../src/statistics.h:kissat_inc_kitten_decisions [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   126,993,022 ( 0.05%)  build/../src/congruence.c:find_large_xor_side_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   124,352,882 ( 0.05%)  build/../src/watch.c:kissat_connect_irredundant_large_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   120,909,564 ( 0.05%)  build/../src/check.c:find_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   120,102,142 ( 0.05%)  build/../src/inline.h:kissat_map_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   120,018,663 ( 0.05%)  build/../src/congruence.c:copy_conditional_equivalences [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   119,447,801 ( 0.05%)  build/../src/dense.c:flush_large_watches [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   119,398,896 ( 0.05%)  build/../src/minimize.c:minimize_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   119,171,060 ( 0.05%)  build/../src/vivify.c:simplify_vivification_candidate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   116,059,247 ( 0.05%)  build/../src/kitten.c:connect_new_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   115,897,180 ( 0.05%)  build/../src/kitten.c:kitten_solve [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   112,664,329 ( 0.05%)  build/../src/kitten.c:analyze [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   111,174,350 ( 0.05%)  build/../src/backbone.c:compute_backbone [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   108,990,570 ( 0.05%)  build/../src/statistics.h:kissat_inc_search_ticks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   107,835,651 ( 0.05%)  build/../src/proprobe.c:kissat_probing_propagate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   105,819,570 ( 0.04%)  build/../src/kitten.c:kitten_flip_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   104,422,647 ( 0.04%)  build/../src/bump.c:bump_analyzed_variable_scores [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   102,502,156 ( 0.04%)  build/../src/transitive.c:prioritize_binaries [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   101,606,461 ( 0.04%)  build/../src/sweep.c:sweep_variable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
   101,255,256 ( 0.04%)  build/../src/kitten.c:init_queue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    99,315,734 ( 0.04%)  build/../src/check.c:use_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    99,118,084 ( 0.04%)  build/../src/transitive.c:less_stable_transitive [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    98,090,207 ( 0.04%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    97,761,422 ( 0.04%)  build/../src/check.c:mark_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    97,761,422 ( 0.04%)  build/../src/check.c:unmark_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    95,473,261 ( 0.04%)  build/../src/allocate.c:inc_bytes [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    95,312,066 ( 0.04%)  build/../src/backbone.c:check_large_clauses_watched_after_binary_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    90,718,032 ( 0.04%)  build/../src/check.c:large_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    90,454,597 ( 0.04%)  build/../src/inline.h:kissat_push_poisoned [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    90,054,602 ( 0.04%)  build/../src/shrink.c:next_block [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    88,294,270 ( 0.04%)  ./stdlib/./stdlib/rand.c:rand [/usr/lib/x86_64-linux-gnu/libc.so.6]
    88,001,791 ( 0.04%)  build/../src/eliminate.c:variable_score [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    87,287,732 ( 0.04%)  build/../src/vivify.c:vivify_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    86,634,365 ( 0.04%)  build/../src/congruence.c:inc_lits [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    86,274,497 ( 0.04%)  build/../src/inline.h:kissat_reference_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    85,616,840 ( 0.04%)  build/../src/congruence.c:extract_and_gates_with_base_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    84,974,705 ( 0.04%)  build/../src/factor.c:eagerly_remove_watch [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    83,485,266 ( 0.04%)  build/../src/kitten.c:backtrack [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    83,125,805 ( 0.04%)  build/../src/congruence.c:parity_lits [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    81,904,976 ( 0.03%)  build/../src/promote.h:kissat_recompute_glue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    81,789,509 ( 0.03%)  build/../src/inline.h:kissat_mark_added_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    79,971,788 ( 0.03%)  build/../src/check.c:remove_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    78,961,905 ( 0.03%)  build/../src/allocate.c:dec_bytes [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    78,585,360 ( 0.03%)  build/../src/kitten.c:new_reference [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    78,544,185 ( 0.03%)  build/../src/minimize.c:minimize_binary [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    78,377,244 ( 0.03%)  build/../src/vivify.c:more_occurrences [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    78,023,040 ( 0.03%)  build/../src/congruence.c:extract_binaries [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    77,934,422 ( 0.03%)  build/../src/kitten.c:kitten_shrink_to_clausal_core [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    77,101,760 ( 0.03%)  build/../src/kitten.c:is_learned_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    73,295,115 ( 0.03%)  build/../src/resolve.c:occurrences_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    72,855,712 ( 0.03%)  build/../src/kitten.c:enlarge_internal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    72,357,109 ( 0.03%)  build/../src/stack.c:kissat_stack_enlarge [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    72,339,894 ( 0.03%)  build/../src/kitten.c:new_learned_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    71,472,325 ( 0.03%)  build/../src/sweep.c:init_backbone_and_partition [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    70,295,044 ( 0.03%)  build/../src/analyze.c:analyze_reason_side_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    70,247,284 ( 0.03%)  ./malloc/./malloc/malloc.c:realloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    69,029,304 ( 0.03%)  build/../src/shrink.c:reset_shrinkable [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    67,539,995 ( 0.03%)  build/../src/minimize.c:minimize_reference [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    67,209,246 ( 0.03%)  build/../src/vivify.c:vivify_sort_lits_by_counts [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    66,657,276 ( 0.03%)  build/../src/transitive.c:less_focused_transitive [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    65,663,444 ( 0.03%)  build/../src/congruence.c:rank_litpair [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    65,306,405 ( 0.03%)  build/../src/kitten.c:dequeue [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    64,205,900 ( 0.03%)  build/../src/statistics.h:kissat_add_allocated_current [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    63,201,175 ( 0.03%)  build/../src/transitive.c:transitive_assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    62,241,590 ( 0.03%)  build/../src/kitten.c:is_core_klause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    62,187,044 ( 0.03%)  build/../src/allocate.c:kissat_free [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    61,938,976 ( 0.03%)  build/../src/reorder.c:compute_weights [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    61,647,434 ( 0.03%)  build/../src/walk.c:connect_large_counters [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    61,250,195 ( 0.03%)  build/../src/check.c:insert_imported_if_not_simplified [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    61,147,495 ( 0.03%)  build/../src/check.c:new_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    61,016,009 ( 0.03%)  build/../src/statistics.h:kissat_sub_allocated_current [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    60,136,428 ( 0.03%)  build/../src/factor.c:first_factor [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    59,410,134 ( 0.03%)  build/../src/backbone.c:backbone_propagate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    59,024,076 ( 0.02%)  build/../src/resolve.c:watch_to_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    56,866,088 ( 0.02%)  build/../src/backbone.c:backbone_assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    56,188,221 ( 0.02%)  ./malloc/./malloc/malloc.c:_int_realloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    55,116,196 ( 0.02%)  build/../src/random.h:kissat_pick_random [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    54,010,068 ( 0.02%)  build/../src/allocate.c:kissat_realloc [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    54,008,385 ( 0.02%)  build/../src/statistics.h:kissat_inc_jumped_reasons [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    53,858,560 ( 0.02%)  build/../src/allocate.c:kissat_malloc [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    52,565,967 ( 0.02%)  build/../src/transitive.c:transitive_backtrack [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    51,543,520 ( 0.02%)  build/../src/check.c:bucket_redundant [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    51,241,400 ( 0.02%)  build/../src/forward.c:forward_marked_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    50,773,040 ( 0.02%)  ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    50,734,751 ( 0.02%)  build/../src/definition.c:kissat_find_definition [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    50,561,916 ( 0.02%)  build/../src/congruence.c:extract_condeq_pairs [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    49,755,404 ( 0.02%)  build/../src/check.c:remove_line_if_not_redundant [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    49,261,707 ( 0.02%)  build/../src/congruence.c:search_condeq [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    49,213,408 ( 0.02%)  build/../src/check.c:unwatch_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    48,724,548 ( 0.02%)  build/../src/minimize.c:kissat_reset_poisoned [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    48,431,943 ( 0.02%)  build/../src/inlineassign.h:kissat_assign [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    48,425,255 ( 0.02%)  build/../src/congruence.c:hash_lits [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    48,144,602 ( 0.02%)  build/../src/forward.c:forward_subsumed_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    47,460,930 ( 0.02%)  build/../src/congruence.c:find_repr [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    47,301,985 ( 0.02%)  build/../src/vector.c:kissat_defrag_vectors [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    46,994,039 ( 0.02%)  build/../src/dense.c:resume_watching_large_clauses_after_elimination [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    46,261,884 ( 0.02%)  build/../src/analyze.c:mark_reason_side_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    46,051,240 ( 0.02%)  build/../src/inlineheap.h:kissat_push_heap [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    45,500,400 ( 0.02%)  build/../src/shrink.c:shrink_along_binary [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    45,185,587 ( 0.02%)  build/../src/sweep.c:flip_partition_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    45,163,906 ( 0.02%)  build/../src/congruence.c:less_litpair [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    44,331,436 ( 0.02%)  build/../src/sweep.c:clear_sweeper [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    44,133,778 ( 0.02%)  build/../src/fastel.c:resolvents_limited [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    43,712,428 ( 0.02%)  build/../src/forward.c:find_forward_subsumption_candidates [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    43,496,266 ( 0.02%)  build/../src/forward.c:connect_subsuming [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    42,166,807 ( 0.02%)  build/../src/sweep.c:flip_backbone_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    42,099,300 ( 0.02%)  build/../src/statistics.h:kissat_inc_kitten_ticks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    41,459,375 ( 0.02%)  ./malloc/./malloc/malloc.c:malloc_consolidate [/usr/lib/x86_64-linux-gnu/libc.so.6]
    40,443,645 ( 0.02%)  build/../src/check.c:kissat_check_and_add_internal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    40,350,628 ( 0.02%)  build/../src/minimize.c:kissat_minimize_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    39,619,062 ( 0.02%)  build/../src/congruence.c:check_ternary [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    39,127,964 ( 0.02%)  build/../src/gates.c:get_antecedents [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    39,105,690 ( 0.02%)  build/../src/factor.c:clear_nounted [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    38,772,414 ( 0.02%)  build/../src/kitten.c:reset_core [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    38,381,043 ( 0.02%)  build/../src/sweep.c:sweep_binary [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    38,222,362 ( 0.02%)  build/../src/inline.h:kissat_mark_removed_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    37,785,746 ( 0.02%)  build/../src/fastel.c:can_fast_resolve [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    37,127,285 ( 0.02%)  build/../src/kitten.c:inconsistent [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    36,807,675 ( 0.02%)  build/../src/backbone.c:schedule_backbone_candidates [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    36,220,788 ( 0.02%)  build/../src/kitten.c:kitten_randomize_phases [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    36,091,043 ( 0.02%)  build/../src/ands.c:kissat_find_and_gate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    36,027,237 ( 0.02%)  build/../src/learn.c:eagerly_subsume_last_learned [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    35,708,026 ( 0.02%)  ???:0x000000000010c5b0 [???]
    35,460,770 ( 0.01%)  build/../src/congruence.c:check_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    35,353,426 ( 0.01%)  build/../src/inlineheap.h:kissat_pop_max_heap [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    35,317,708 ( 0.01%)  ???:0x000000000010c4e0 [???]
    35,273,190 ( 0.01%)  build/../src/statistics.h:kissat_inc_kitten_flip [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    35,159,688 ( 0.01%)  build/../src/backbone.c:backbone_backtrack [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    35,074,624 ( 0.01%)  build/../src/kitten.c:shuffle_katches_stack [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    34,809,596 ( 0.01%)  build/../src/shrink.c:push_literals_of_block [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    34,266,582 ( 0.01%)  build/../src/vivify.c:worse_candidate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    34,026,954 ( 0.01%)  build/../src/transitive.c:sort_stable_transitive [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    32,817,899 ( 0.01%)  build/../src/import.c:import_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    32,702,830 ( 0.01%)  build/../src/kitten.c:shuffle_katches_array [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    32,411,624 ( 0.01%)  build/../src/check.c:kissat_remove_checker_internal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    32,159,676 ( 0.01%)  build/../src/congruence.c:connect_occurrence [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    31,817,042 ( 0.01%)  build/../src/congruence.c:check_lits_sorted [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    30,821,944 ( 0.01%)  build/../src/kitten.c:begin_klauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    30,376,160 ( 0.01%)  build/../src/statistics.h:kissat_add_factor_ticks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    30,306,568 ( 0.01%)  build/../src/kitten.c:end_klauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    30,238,336 ( 0.01%)  build/../src/shrink.c:shrunken_block [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    30,184,825 ( 0.01%)  build/../src/proplit.h:propagate_literal_beyond_conflicts [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    29,747,430 ( 0.01%)  build/../src/check.c:bytes_line [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    29,655,866 ( 0.01%)  build/../src/fastel.c:can_fast_resolve_binary_large [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    29,366,950 ( 0.01%)  build/../src/compact.c:map_idx [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    28,926,836 ( 0.01%)  build/../src/gates.c:kissat_mark_binaries [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    28,807,111 ( 0.01%)  build/../src/congruence.c:find_units [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    28,591,110 ( 0.01%)  build/../src/minimize.c:kissat_minimize_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    28,348,460 ( 0.01%)  build/../src/reorder.c:less_stable_order [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    28,283,378 ( 0.01%)  build/../src/dense.c:resume_watching_irredundant_binaries [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    27,689,122 ( 0.01%)  build/../src/kitten.c:shuffle_katches [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    27,680,890 ( 0.01%)  build/../src/congruence.c:check_xor_gate_implied [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    27,530,992 ( 0.01%)  build/../src/fastel.c:do_fast_resolve_binary_large [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    27,011,103 ( 0.01%)  build/../src/random.h:kissat_next_random64 [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    26,825,064 ( 0.01%)  build/../src/congruence.c:new_gate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    26,726,383 ( 0.01%)  build/../src/eliminate.c:update_variable_score [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    25,858,226 ( 0.01%)  build/../src/minimize.c:minimize_binary'2 [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    25,281,195 ( 0.01%)  build/../src/kitten.c:move_to_front [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    25,274,113 ( 0.01%)  build/../src/heap.c:kissat_enlarge_heap [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    25,050,084 ( 0.01%)  build/../src/shrink.c:kissat_shrink_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    24,982,354 ( 0.01%)  build/../src/analyze.c:analyze_reason_side_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    24,799,522 ( 0.01%)  build/../src/watch.h:kissat_binary_watch [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    24,745,748 ( 0.01%)  build/../src/clause.c:new_large_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    24,489,166 ( 0.01%)  build/../src/vivify.c:vivify_round [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    24,479,541 ( 0.01%)  build/../src/kitten.c:kitten_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,820,226 ( 0.01%)  build/../src/phases.c:save_phases [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,769,369 ( 0.01%)  build/../src/utilities.h:kissat_is_power_of_two [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,506,143 ( 0.01%)  build/../src/inlinevector.h:kissat_offset_vector [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,359,530 ( 0.01%)  build/../src/statistics.h:kissat_inc_eliminate_resolutions [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,154,500 ( 0.01%)  build/../src/statistics.h:kissat_add_forward_checks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,154,500 ( 0.01%)  build/../src/statistics.h:kissat_add_forward_steps [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,154,500 ( 0.01%)  build/../src/statistics.h:kissat_add_subsumption_checks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,151,887 ( 0.01%)  build/../src/congruence.c:index_gate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    23,130,627 ( 0.01%)  build/../src/inline.h:kissat_fixed [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    22,807,753 ( 0.01%)  build/../src/flags.c:activate_literal [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    22,741,824 ( 0.01%)  build/../src/analyze.c:sort_levels [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    22,374,153 ( 0.01%)  build/../src/congruence.c:extract_and_gates [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,757,883 ( 0.01%)  build/../src/factor.c:update_candidate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,690,524 ( 0.01%)  build/../src/transitive.c:sort_focused_transitive [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,527,589 ( 0.01%)  build/../src/forward.c:forward_subsume_all_clauses [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,475,560 ( 0.01%)  build/../src/statistics.h:kissat_add_ticks [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,368,842 ( 0.01%)  build/../src/clause.c:init_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,045,034 ( 0.01%)  build/../src/congruence.c:find_remaining_and_gate [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    21,033,553 ( 0.01%)  build/../src/substitute.c:add_representative_equivalences [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    20,618,663 ( 0.01%)  build/../src/congruence.c:sort_lits [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    20,303,142 ( 0.01%)  build/../src/arena.c:kissat_allocate_clause [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    19,598,310 ( 0.01%)  build/../src/statistics.h:kissat_inc_sweep_flip_backbone [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    19,584,916 ( 0.01%)  build/../src/forward.c:sort_forward_subsumption_candidates [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    19,513,600 ( 0.01%)  build/../src/flags.c:kissat_mark_added_literals [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    19,395,064 ( 0.01%)  build/../src/forward.c:get_size_of_reference [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]
    19,259,773 ( 0.01%)  build/../src/definition.c:traverse_definition_core [/home/noc/SatSolver/kissat/kissat_reset/build/kissat]

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/heap.h
--------------------------------------------------------------------------------
Ir                   

-- line 22 ----------------------------------------
          .             unsigned *pos;
          .           };
          .           
          .           struct kissat;
          .           
          .           void kissat_resize_heap (struct kissat *, heap *, unsigned size);
          .           void kissat_release_heap (struct kissat *, heap *);
          .           
196,377,240 ( 0.08%)  static inline bool kissat_heap_contains (heap *heap, unsigned idx) {
732,206,236 ( 0.31%)    return idx < heap->vars && !DISCONTAINED (heap->pos[idx]);
 98,188,620 ( 0.04%)  }
          .           
          .           static inline unsigned kissat_get_heap_pos (const heap *heap,
          .                                                       unsigned idx) {
          .             return idx < heap->vars ? heap->pos[idx] : DISCONTAIN;
          .           }
          .           
          .           static inline double kissat_get_heap_score (const heap *heap,
129,925,468 ( 0.05%)                                              unsigned idx) {
388,965,162 ( 0.16%)    return idx < heap->vars ? heap->score[idx] : 0.0;
 97,444,101 ( 0.04%)  }
          .           
  1,419,186 ( 0.00%)  static inline bool kissat_empty_heap (heap *heap) {
  2,838,372 ( 0.00%)    return EMPTY_STACK (heap->stack);
    946,124 ( 0.00%)  }
          .           
         30 ( 0.00%)  static inline size_t kissat_size_heap (heap *heap) {
         70 ( 0.00%)    return SIZE_STACK (heap->stack);
         20 ( 0.00%)  }
          .           
  1,364,228 ( 0.00%)  static inline unsigned kissat_max_heap (heap *heap) {
  2,046,342 ( 0.00%)    assert (!kissat_empty_heap (heap));
  3,751,627 ( 0.00%)  => build/../src/heap.h:kissat_empty_heap (341,057x)
  3,069,513 ( 0.00%)    return PEEK_STACK (heap->stack, 0);
    682,114 ( 0.00%)  }
          .           
          .           void kissat_rescale_heap (struct kissat *, heap *heap, double factor);
          .           
          .           void kissat_enlarge_heap (struct kissat *, heap *, unsigned new_vars);
          .           
          8 ( 0.00%)  static inline double kissat_max_score_on_heap (heap *heap) {
         10 ( 0.00%)    if (!heap->tainted)
          .               return 0;
          8 ( 0.00%)    assert (heap->vars);
          6 ( 0.00%)    const double *const score = heap->score;
         14 ( 0.00%)    const double *const end = score + heap->vars;
          6 ( 0.00%)    double res = score[0];
    169,870 ( 0.00%)    for (const double *p = score + 1; p != end; p++)
    254,836 ( 0.00%)      res = MAX (res, *p);
          2 ( 0.00%)    return res;
          8 ( 0.00%)  }
          .           
          .           #ifndef NDEBUG
          .           void kissat_dump_heap (heap *);
          .           #endif
          .           
          .           #ifndef NDEBUG
          .           void kissat_check_heap (heap *);
          .           #else
-- line 79 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/walk.c
--------------------------------------------------------------------------------
Ir                  

-- line 19 ----------------------------------------
         .           #define LD_MAX_WALK_REF 31
         .           #define MAX_WALK_REF ((1u << LD_MAX_WALK_REF) - 1)
         .           
         .           struct tagged {
         .             unsigned ref : LD_MAX_WALK_REF;
         .             bool binary : 1;
         .           };
         .           
 1,384,224 ( 0.00%)  static inline tagged make_tagged (bool binary, unsigned ref) {
   692,112 ( 0.00%)    assert (ref <= MAX_WALK_REF);
 3,460,560 ( 0.00%)    tagged res = {.binary = binary, .ref = ref};
   230,704 ( 0.00%)    return res;
   461,408 ( 0.00%)  }
         .           
         .           struct counter {
         .             unsigned count;
         .             unsigned pos;
         .           };
         .           
         .           // clang-format off
         .           typedef STACK (double) doubles;
-- line 39 ----------------------------------------
-- line 77 ----------------------------------------
         .               uint64_t flipped;
         .               unsigned minimum;
         .             } report;
         .           #endif
         .           };
         .           
         .           static const unsigned *dereference_literals (kissat *solver, walker *walker,
         .                                                        unsigned counter_ref,
   836,632 ( 0.00%)                                               unsigned *size_ptr) {
   418,316 ( 0.00%)    assert (counter_ref < walker->clauses);
   732,053 ( 0.00%)    tagged tagged = walker->refs[counter_ref];
         .             unsigned const *lits;
   418,316 ( 0.00%)    if (tagged.binary) {
    69,396 ( 0.00%)      const unsigned binary_ref = tagged.ref;
   439,508 ( 0.00%)      lits = PEEK_STACK (*walker->binaries, binary_ref).lits;
    69,396 ( 0.00%)      *size_ptr = 2;
         .             } else {
   244,341 ( 0.00%)      const reference clause_ref = tagged.ref;
   488,682 ( 0.00%)      clause *c = kissat_dereference_clause (solver, clause_ref);
11,148,015 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (81,447x)
   325,788 ( 0.00%)      *size_ptr = c->size;
   244,341 ( 0.00%)      lits = c->lits;
         .             }
   104,579 ( 0.00%)    return lits;
   209,158 ( 0.00%)  }
         .           
         .           static void push_unsat (kissat *solver, walker *walker, counter *counters,
   427,251 ( 0.00%)                          unsigned counter_ref) {
   155,364 ( 0.00%)    assert (counter_ref < walker->clauses);
   194,205 ( 0.00%)    counter *counter = counters + counter_ref;
   388,410 ( 0.00%)    assert (SIZE_STACK (walker->unsat) <= UINT_MAX);
   388,410 ( 0.00%)    counter->pos = SIZE_STACK (walker->unsat);
   505,206 ( 0.00%)    PUSH_STACK (walker->unsat, counter_ref);
    13,954 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (21x)
         .           #ifdef LOGGING
         .             unsigned size;
         .             const unsigned *const lits =
   271,887 ( 0.00%)        dereference_literals (solver, walker, counter_ref, &size);
 5,819,487 ( 0.00%)  => build/../src/walk.c:dereference_literals (38,841x)
   233,046 ( 0.00%)    LOGLITS (size, lits, "pushed unsatisfied[%u]", counter->pos);
         .           #endif
   233,046 ( 0.00%)  }
         .           
         .           static bool pop_unsat (kissat *solver, walker *walker, counter *counters,
   462,060 ( 0.00%)                         unsigned counter_ref, unsigned pos) {
   154,020 ( 0.00%)    assert (walker->current);
   154,020 ( 0.00%)    assert (counter_ref < walker->clauses);
   269,535 ( 0.00%)    assert (counters[counter_ref].pos == pos);
   462,060 ( 0.00%)    assert (walker->current == SIZE_STACK (walker->unsat));
   577,575 ( 0.00%)    const unsigned other_counter_ref = POP_STACK (walker->unsat);
   192,525 ( 0.00%)    walker->current--;
    38,505 ( 0.00%)    bool res = false;
   115,515 ( 0.00%)    if (counter_ref != other_counter_ref) {
   152,220 ( 0.00%)      assert (other_counter_ref < walker->clauses);
   190,275 ( 0.00%)      counter *other_counter = counters + other_counter_ref;
   228,330 ( 0.00%)      assert (other_counter->pos == walker->current);
   152,220 ( 0.00%)      assert (pos < other_counter->pos);
   114,165 ( 0.00%)      other_counter->pos = pos;
   646,935 ( 0.00%)      POKE_STACK (walker->unsat, pos, other_counter_ref);
    38,055 ( 0.00%)      res = true;
         .             }
         .           #ifdef LOGGING
         .             unsigned size;
         .             const unsigned *const lits =
   269,535 ( 0.00%)        dereference_literals (solver, walker, counter_ref, &size);
 5,768,071 ( 0.00%)  => build/../src/walk.c:dereference_literals (38,505x)
   231,030 ( 0.00%)    LOGLITS (size, lits, "popped unsatisfied[%u]", pos);
         .           #else
         .             (void) solver;
         .           #endif
    38,505 ( 0.00%)    return res;
   192,525 ( 0.00%)  }
         .           
         .           static double cbvals[][2] = {{0.0, 2.00}, {3.0, 2.50}, {4.0, 2.85},
         .                                        {5.0, 3.70}, {6.0, 5.10}, {7.0, 7.40}};
         .           
         5 ( 0.00%)  static double fit_cbval (double size) {
         1 ( 0.00%)    const size_t num_cbvals = sizeof cbvals / sizeof *cbvals;
         1 ( 0.00%)    size_t i = 0;
        13 ( 0.00%)    while (i + 2 < num_cbvals &&
        28 ( 0.00%)           (cbvals[i][0] > size || cbvals[i + 1][0] < size))
         1 ( 0.00%)      i++;
        13 ( 0.00%)    const double x2 = cbvals[i + 1][0], x1 = cbvals[i][0];
        13 ( 0.00%)    const double y2 = cbvals[i + 1][1], y1 = cbvals[i][1];
         6 ( 0.00%)    const double dx = x2 - x1, dy = y2 - y1;
         6 ( 0.00%)    assert (dx);
         7 ( 0.00%)    const double res = dy * (size - x1) / dx + y1;
         4 ( 0.00%)    assert (res > 0);
         2 ( 0.00%)    return res;
         3 ( 0.00%)  }
         .           
        10 ( 0.00%)  static void init_score_table (walker *walker) {
         6 ( 0.00%)    kissat *solver = walker->solver;
         .           
        23 ( 0.00%)    const double cb = (GET (walks) & 1) ? fit_cbval (walker->size) : 2.0;
       103 ( 0.00%)  => build/../src/walk.c:fit_cbval (1x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         6 ( 0.00%)    const double base = 1 / cb;
         .           
         .             double next;
         2 ( 0.00%)    unsigned exponents = 0;
    16,614 ( 0.00%)    for (next = 1; next; next *= base)
     1,844 ( 0.00%)      exponents++;
         .           
        16 ( 0.00%)    walker->table = kissat_malloc (solver, exponents * sizeof (double));
       985 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (2x)
         .           
         2 ( 0.00%)    unsigned i = 0;
         .             double epsilon;
    16,618 ( 0.00%)    for (epsilon = next = 1; next; next = epsilon * base)
    22,128 ( 0.00%)      walker->table[i++] = epsilon = next;
         .           
         6 ( 0.00%)    assert (i == exponents);
         6 ( 0.00%)    walker->exponents = exponents;
         6 ( 0.00%)    walker->epsilon = epsilon;
         .           
        34 ( 0.00%)    kissat_phase (solver, "walk", GET (walks),
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           "CB %.2f with inverse %.2f as base", cb, base);
        34 ( 0.00%)    kissat_phase (solver, "walk", GET (walks), "table size %u and epsilon %g",
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           exponents, epsilon);
         6 ( 0.00%)  }
         .           
   108,940 ( 0.00%)  static unsigned currently_unsatified (walker *walker) {
   190,645 ( 0.00%)    return SIZE_STACK (walker->unsat);
    54,470 ( 0.00%)  }
         .           
        12 ( 0.00%)  static void import_decision_phases (walker *walker) {
         6 ( 0.00%)    kissat *solver = walker->solver;
         8 ( 0.00%)    INC (walk_decisions);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_walk_decisions (2x)
         6 ( 0.00%)    const flags *const flags = solver->flags;
         6 ( 0.00%)    value *values = solver->values;
        20 ( 0.00%)    walker->best_values = kissat_calloc (solver, VARS, 1);
    45,426 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (2x)
         6 ( 0.00%)    value *best_values = walker->best_values;
         .           #ifndef QUIET
         2 ( 0.00%)    unsigned imported = 0;
         .           #endif
   177,548 ( 0.00%)    for (all_variables (idx)) {
   399,447 ( 0.00%)      if (!flags[idx].active)
     2,282 ( 0.00%)        continue;
   252,606 ( 0.00%)      value value = kissat_decide_phase (solver, idx);
 3,914,930 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/decide.c:kissat_decide_phase (42,101x)
    84,202 ( 0.00%)      assert (value);
   210,505 ( 0.00%)      best_values[idx] = value;
   294,707 ( 0.00%)      const unsigned lit = LIT (idx);
   336,808 ( 0.00%)      const unsigned not_lit = NOT (lit);
   210,505 ( 0.00%)      values[lit] = value;
   336,808 ( 0.00%)      values[not_lit] = -value;
         .           #ifndef QUIET
    42,101 ( 0.00%)      imported++;
         .           #endif
   252,606 ( 0.00%)      LOG ("copied %s decision phase %d", LOGVAR (idx), (int) value);
         .             }
        66 ( 0.00%)    kissat_phase (solver, "walk", GET (walks),
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           "imported %u decision phases %.0f%%", imported,
         4 ( 0.00%)                  kissat_percent (imported, solver->active));
         8 ( 0.00%)  }
         .           
        12 ( 0.00%)  static unsigned connect_binary_counters (walker *walker) {
         6 ( 0.00%)    kissat *solver = walker->solver;
         6 ( 0.00%)    value *values = solver->values;
         6 ( 0.00%)    tagged *refs = walker->refs;
         6 ( 0.00%)    watches *all_watches = solver->watches;
         6 ( 0.00%)    counter *counters = walker->counters;
         .           
        24 ( 0.00%)    assert (SIZE_STACK (*walker->binaries) <= UINT_MAX);
        20 ( 0.00%)    const unsigned size = SIZE_STACK (*walker->binaries);
         8 ( 0.00%)    litpair *binaries = BEGIN_STACK (*walker->binaries);
         4 ( 0.00%)    unsigned unsat = 0, counter_ref = 0;
         .           
    98,626 ( 0.00%)    for (unsigned binary_ref = 0; binary_ref < size; binary_ref++) {
   123,270 ( 0.00%)      const litpair *const litpair = binaries + binary_ref;
    73,962 ( 0.00%)      const unsigned first = litpair->lits[0];
    73,962 ( 0.00%)      const unsigned second = litpair->lits[1];
   246,540 ( 0.00%)      assert (first < LITS), assert (second < LITS);
   123,270 ( 0.00%)      const value first_value = values[first];
   123,270 ( 0.00%)      const value second_value = values[second];
    98,616 ( 0.00%)      if (!first_value || !second_value)
         .                 continue;
    98,616 ( 0.00%)      assert (counter_ref < walker->clauses);
   221,886 ( 0.00%)      refs[counter_ref] = make_tagged (true, binary_ref);
   665,658 ( 0.00%)  => build/../src/walk.c:make_tagged (24,654x)
   147,924 ( 0.00%)      watches *first_watches = all_watches + first;
   147,924 ( 0.00%)      watches *second_watches = all_watches + second;
   147,924 ( 0.00%)      kissat_push_large_watch (solver, first_watches, counter_ref);
17,641,622 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_large_watch (24,654x)
   147,924 ( 0.00%)      kissat_push_large_watch (solver, second_watches, counter_ref);
10,118,108 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_large_watch (24,654x)
   197,232 ( 0.00%)      const unsigned count = (first_value > 0) + (second_value > 0);
   123,270 ( 0.00%)      counter *counter = counters + counter_ref;
    73,962 ( 0.00%)      counter->count = count;
    49,308 ( 0.00%)      if (!count) {
     5,898 ( 0.00%)        push_unsat (solver, walker, counters, counter_ref);
   126,899 ( 0.00%)  => build/../src/walk.c:push_unsat (983x)
       983 ( 0.00%)        unsat++;
         .               }
    49,308 ( 0.00%)      counter_ref++;
         .             }
        70 ( 0.00%)    kissat_phase (solver, "walk", GET (walks),
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           "initially %u unsatisfied binary clauses %.0f%% out of %u",
         .                           unsat, kissat_percent (unsat, counter_ref), counter_ref);
         .           #ifdef QUIET
         .             (void) unsat;
         .           #endif
        24 ( 0.00%)    walker->size += 2.0 * counter_ref;
         2 ( 0.00%)    return counter_ref;
         6 ( 0.00%)  }
         .           
        14 ( 0.00%)  static void connect_large_counters (walker *walker, unsigned counter_ref) {
         6 ( 0.00%)    kissat *solver = walker->solver;
         8 ( 0.00%)    assert (!solver->level);
         6 ( 0.00%)    const value *const original_values = walker->original_values;
         6 ( 0.00%)    const value *const local_search_values = solver->values;
         6 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
         6 ( 0.00%)    counter *counters = walker->counters;
         6 ( 0.00%)    tagged *refs = walker->refs;
         .           
         2 ( 0.00%)    unsigned unsat = 0;
         2 ( 0.00%)    unsigned large = 0;
         .           
         8 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
       308 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (2x)
         .           
 2,162,854 ( 0.00%)    for (all_clauses (c)) {
14,724,072 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (240,316x)
 1,441,896 ( 0.00%)      if (last_irredundant && c > last_irredundant)
         2 ( 0.00%)        break;
 1,201,570 ( 0.00%)      if (c->garbage)
    60,080 ( 0.00%)        continue;
 1,051,370 ( 0.00%)      if (c->redundant)
     8,122 ( 0.00%)        continue;
   206,213 ( 0.00%)      bool continue_with_next_clause = false;
 8,393,069 ( 0.00%)      for (all_literals_in_clause (lit, c)) {
 3,786,090 ( 0.00%)        const value value = original_values[lit];
 1,514,436 ( 0.00%)        if (value <= 0)
   757,055 ( 0.00%)          continue;
       978 ( 0.00%)        LOGCLS (c, "%s satisfied", LOGLIT (lit));
       815 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
   255,804 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (163x)
       815 ( 0.00%)        assert (c->garbage);
       163 ( 0.00%)        continue_with_next_clause = true;
       163 ( 0.00%)        break;
         .               }
   412,426 ( 0.00%)      if (continue_with_next_clause)
       163 ( 0.00%)        continue;
   206,050 ( 0.00%)      large++;
 1,442,350 ( 0.00%)      assert (kissat_clause_in_arena (solver, c));
19,288,552 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_clause_in_arena (206,050x)
   824,200 ( 0.00%)      reference clause_ref = (ward *) c - arena;
   618,150 ( 0.00%)      assert (clause_ref <= MAX_WALK_REF);
   824,200 ( 0.00%)      assert (counter_ref < walker->clauses);
 1,854,450 ( 0.00%)      refs[counter_ref] = make_tagged (false, clause_ref);
 5,563,350 ( 0.00%)  => build/../src/walk.c:make_tagged (206,050x)
   412,100 ( 0.00%)      unsigned count = 0, size = 0;
 8,388,574 ( 0.00%)      for (all_literals_in_clause (lit, c)) {
 3,784,160 ( 0.00%)        const value value = local_search_values[lit];
 1,516,386 ( 0.00%)        if (!value) {
    16,332 ( 0.00%)          assert (original_values[lit] < 0);
     2,722 ( 0.00%)          continue;
         .                 }
 8,295,210 ( 0.00%)        watches *watches = &WATCHES (lit);
 4,524,660 ( 0.00%)        kissat_push_large_watch (solver, watches, counter_ref);
136,032,580 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_large_watch (754,110x)
   754,110 ( 0.00%)        size++;
 1,508,220 ( 0.00%)        if (value > 0)
   726,850 ( 0.00%)          count++;
         .               }
 1,236,300 ( 0.00%)      counter *counter = walker->counters + counter_ref;
   618,150 ( 0.00%)      counter->count = count;
         .           
   412,100 ( 0.00%)      if (!count) {
     4,356 ( 0.00%)        push_unsat (solver, walker, counters, counter_ref);
   190,235 ( 0.00%)  => build/../src/walk.c:push_unsat (726x)
       726 ( 0.00%)        unsat++;
         .               }
   206,050 ( 0.00%)      counter_ref++;
 2,472,600 ( 0.00%)      walker->size += size;
         .             }
        70 ( 0.00%)    kissat_phase (solver, "walk", GET (walks),
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           "initially %u unsatisfied large clauses %.0f%% out of %u",
         .                           unsat, kissat_percent (unsat, large), large);
         .           #ifdef QUIET
         .             (void) large;
         .             (void) unsat;
         .           #endif
         8 ( 0.00%)  }
         .           
         .           #ifndef QUIET
         .           
        12 ( 0.00%)  static void report_initial_minimum (kissat *solver, walker *walker) {
         8 ( 0.00%)    walker->report.minimum = walker->minimum;
        16 ( 0.00%)    kissat_very_verbose (solver, "initial minimum of %u unsatisfied clauses",
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         .                                  walker->minimum);
         6 ( 0.00%)  }
         .           
         .           static void report_minimum (const char *type, kissat *solver,
        14 ( 0.00%)                              walker *walker) {
        12 ( 0.00%)    assert (walker->minimum <= walker->report.minimum);
        22 ( 0.00%)    kissat_very_verbose (solver,
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         .                                  "%s minimum of %u unsatisfied clauses after %" PRIu64
         .                                  " flipped literals",
         .                                  type, walker->minimum, walker->flipped);
         8 ( 0.00%)    walker->report.minimum = walker->minimum;
         6 ( 0.00%)  }
         .           #else
         .           #define report_initial_minimum(...) \
         .             do { \
         .             } while (0)
         .           #define report_minimum(...) \
         .             do { \
         .             } while (0)
         .           #endif
         .           
         .           static void init_walker (kissat *solver, walker *walker,
        18 ( 0.00%)                           litpairs *binaries) {
        12 ( 0.00%)    uint64_t clauses = BINIRR_CLAUSES;
         6 ( 0.00%)    assert (clauses <= MAX_WALK_REF);
         .           
        10 ( 0.00%)    memset (walker, 0, sizeof *walker);
        56 ( 0.00%)  => ???:0x000000000010c5b0 (2x)
         .           
         6 ( 0.00%)    walker->solver = solver;
         8 ( 0.00%)    walker->clauses = clauses;
         6 ( 0.00%)    walker->binaries = binaries;
        14 ( 0.00%)    walker->random = solver->random ^ solver->statistics.walks;
         .           
         8 ( 0.00%)    walker->original_values = solver->values;
        22 ( 0.00%)    solver->values = kissat_calloc (solver, LITS, 1);
    90,218 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (2x)
         .           
         6 ( 0.00%)    import_decision_phases (walker);
 6,560,839 ( 0.00%)  => build/../src/walk.c:import_decision_phases (2x)
         .           
        16 ( 0.00%)    walker->counters = kissat_malloc (solver, clauses * sizeof (counter));
       778 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (2x)
        16 ( 0.00%)    walker->refs = kissat_malloc (solver, clauses * sizeof (tagged));
       884 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (2x)
         .           
        16 ( 0.00%)    assert (!walker->size);
         8 ( 0.00%)    const unsigned counter_ref = connect_binary_counters (walker);
30,926,346 ( 0.01%)  => build/../src/walk.c:connect_binary_counters (2x)
        10 ( 0.00%)    connect_large_counters (walker, counter_ref);
237,702,519 ( 0.10%)  => build/../src/walk.c:connect_large_counters (2x)
         .           
        18 ( 0.00%)    walker->current = walker->initial = currently_unsatified (walker);
        26 ( 0.00%)  => build/../src/walk.c:currently_unsatified (2x)
         .           
        72 ( 0.00%)    kissat_phase (solver, "walk", GET (walks),
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           "initially %u unsatisfied irredundant clauses %.0f%% "
         .                           "out of %" PRIu64,
         4 ( 0.00%)                  walker->initial, kissat_percent (walker->initial, clauses),
         .                           clauses);
         .           
        28 ( 0.00%)    walker->size = kissat_average (walker->size, clauses);
        34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (2x)
        32 ( 0.00%)    kissat_phase (solver, "walk", GET (walks), "average clause size %.2f",
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           walker->size);
         .           
         8 ( 0.00%)    walker->minimum = walker->current;
         6 ( 0.00%)    init_score_table (walker);
    58,695 ( 0.00%)  => build/../src/walk.c:init_score_table (2x)
         .           
        10 ( 0.00%)    report_initial_minimum (solver, walker);
       128 ( 0.00%)  => build/../src/walk.c:report_initial_minimum (2x)
        12 ( 0.00%)  }
         .           
        16 ( 0.00%)  static void init_walker_limit (kissat *solver, walker *walker) {
       276 ( 0.00%)    SET_EFFORT_LIMIT (limit, walk, walk_steps);
    13,569 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (16x)
       188 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4x)
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         6 ( 0.00%)    walker->limit = limit;
         4 ( 0.00%)    walker->flipped = 0;
         .           #ifndef QUIET
         8 ( 0.00%)    walker->start = solver->statistics.walk_steps;
         4 ( 0.00%)    walker->report.minimum = UINT_MAX;
         4 ( 0.00%)    walker->report.flipped = 0;
         .           #endif
        12 ( 0.00%)  }
         .           
        10 ( 0.00%)  static void release_walker (walker *walker) {
         6 ( 0.00%)    kissat *solver = walker->solver;
        18 ( 0.00%)    kissat_dealloc (solver, walker->table, walker->exponents,
       502 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
         .                             sizeof (double));
         6 ( 0.00%)    unsigned clauses = walker->clauses;
        14 ( 0.00%)    kissat_dealloc (solver, walker->refs, clauses, sizeof (tagged));
       515 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        14 ( 0.00%)    kissat_dealloc (solver, walker->counters, clauses, sizeof (counter));
       556 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        48 ( 0.00%)    RELEASE_STACK (walker->unsat);
       452 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        48 ( 0.00%)    RELEASE_STACK (walker->scores);
       464 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        48 ( 0.00%)    RELEASE_STACK (walker->trail);
       553 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        20 ( 0.00%)    kissat_free (solver, solver->values, LITS);
       472 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (2x)
        18 ( 0.00%)    kissat_free (solver, walker->best_values, VARS);
       431 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (2x)
        48 ( 0.00%)    RELEASE_STACK (walker->unsat);
        26 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
         8 ( 0.00%)    solver->values = walker->original_values;
         6 ( 0.00%)  }
         .           
         .           static unsigned break_value (kissat *solver, walker *walker, value *values,
   662,168 ( 0.00%)                               unsigned lit) {
   496,626 ( 0.00%)    assert (values[lit] < 0);
   662,168 ( 0.00%)    const unsigned not_lit = NOT (lit);
   910,481 ( 0.00%)    watches *watches = &WATCHES (not_lit);
    82,771 ( 0.00%)    unsigned steps = 1;
    82,771 ( 0.00%)    unsigned res = 0;
29,130,255 ( 0.01%)    for (all_binary_large_watches (watch, *watches)) {
   662,168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (82,771x)
   662,168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (82,771x)
 3,913,152 ( 0.00%)      steps++;
19,565,760 ( 0.01%)      assert (!watch.type.binary);
11,739,456 ( 0.00%)      reference counter_ref = watch.large.ref;
15,652,608 ( 0.01%)      assert (counter_ref < walker->clauses);
23,478,912 ( 0.01%)      counter *counter = walker->counters + counter_ref;
23,478,912 ( 0.01%)      res += (counter->count == 1);
         .             }
   496,626 ( 0.00%)    ADD (walk_steps, steps);
 1,655,420 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_walk_steps (82,771x)
         .           #ifdef NDEBUG
         .             (void) values;
         .           #endif
    82,771 ( 0.00%)    return res;
   165,542 ( 0.00%)  }
         .           
   413,855 ( 0.00%)  static double scale_score (walker *walker, unsigned breaks) {
   331,084 ( 0.00%)    if (breaks < walker->exponents)
   579,397 ( 0.00%)      return walker->table[breaks];
         .             else
         .               return walker->epsilon;
   331,084 ( 0.00%)  }
         .           
   245,097 ( 0.00%)  static unsigned pick_literal (kissat *solver, walker *walker) {
   326,796 ( 0.00%)    assert (walker->current == SIZE_STACK (walker->unsat));
   326,796 ( 0.00%)    const unsigned pos = walker->flipped++ % walker->current;
   462,961 ( 0.00%)    const unsigned counter_ref = PEEK_STACK (walker->unsat, pos);
         .             unsigned size;
         .             const unsigned *const lits =
   190,631 ( 0.00%)        dereference_literals (solver, walker, counter_ref, &size);
 4,160,963 ( 0.00%)  => build/../src/walk.c:dereference_literals (27,233x)
         .           
   163,398 ( 0.00%)    LOGLITS (size, lits, "picked unsatisfied[%u]", pos);
   163,398 ( 0.00%)    assert (EMPTY_STACK (walker->scores));
         .           
    81,699 ( 0.00%)    value *values = solver->values;
         .           
    54,466 ( 0.00%)    double sum = 0;
    27,233 ( 0.00%)    unsigned picked_lit = INVALID_LIT;
         .           
   163,398 ( 0.00%)    const unsigned *const end_of_lits = lits + size;
   494,646 ( 0.00%)    for (const unsigned *p = lits; p != end_of_lits; p++) {
   248,436 ( 0.00%)      const unsigned lit = *p;
   496,872 ( 0.00%)      if (!values[lit])
        41 ( 0.00%)        continue;
   165,542 ( 0.00%)      picked_lit = lit;
   579,397 ( 0.00%)      const unsigned breaks = break_value (solver, walker, values, lit);
133,580,735 ( 0.06%)  => build/../src/walk.c:break_value (82,771x)
   579,397 ( 0.00%)      const double score = scale_score (walker, breaks);
 1,655,420 ( 0.00%)  => build/../src/walk.c:scale_score (82,771x)
   331,084 ( 0.00%)      assert (score > 0);
   496,626 ( 0.00%)      LOG ("literal %s breaks %u score %g", LOGLIT (lit), breaks, score);
 1,076,192 ( 0.00%)      PUSH_STACK (walker->scores, score);
     5,934 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (13x)
   331,084 ( 0.00%)      sum += score;
         .             }
    54,466 ( 0.00%)    assert (picked_lit != INVALID_LIT);
   108,932 ( 0.00%)    assert (0 < sum);
         .           
   163,398 ( 0.00%)    const double random = kissat_pick_double (&walker->random);
 1,307,184 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_pick_double (27,233x)
   190,631 ( 0.00%)    assert (0 <= random), assert (random < 1);
         .           
    81,699 ( 0.00%)    const double threshold = sum * random;
   163,398 ( 0.00%)    LOG ("score sum %g and random threshold %g", sum, threshold);
         .           
         .             // assert (threshold < sum); // NOT TRUE!!!!
         .           
    81,699 ( 0.00%)    double *scores = BEGIN_STACK (walker->scores);
         .           #ifdef LOGGING
    54,466 ( 0.00%)    double picked_score = 0;
         .           #endif
         .           
    54,466 ( 0.00%)    sum = 0;
         .           
   254,298 ( 0.00%)    for (const unsigned *p = lits; p != end_of_lits; p++) {
   149,874 ( 0.00%)      const unsigned lit = *p;
   299,748 ( 0.00%)      if (!values[lit])
         9 ( 0.00%)        continue;
   249,745 ( 0.00%)      const double score = *scores++;
   149,847 ( 0.00%)      sum += score;
   149,847 ( 0.00%)      if (threshold < sum) {
    54,466 ( 0.00%)        picked_lit = lit;
         .           #ifdef LOGGING
    54,466 ( 0.00%)        picked_score = score;
         .           #endif
    27,233 ( 0.00%)        break;
         .               }
         .             }
    54,466 ( 0.00%)    assert (picked_lit != INVALID_LIT);
   163,398 ( 0.00%)    LOG ("picked literal %s with score %g", LOGLIT (picked_lit),
         .                  picked_score);
         .           
   108,932 ( 0.00%)    CLEAR_STACK (walker->scores);
         .           
    27,233 ( 0.00%)    return picked_lit;
   136,165 ( 0.00%)  }
         .           
         .           static void break_clauses (kissat *solver, walker *walker,
   217,864 ( 0.00%)                             const value *const values, unsigned flipped) {
         .           #ifdef LOGGING
    27,233 ( 0.00%)    unsigned broken = 0;
         .           #endif
   217,864 ( 0.00%)    const unsigned not_flipped = NOT (flipped);
   163,398 ( 0.00%)    assert (values[not_flipped] < 0);
   163,398 ( 0.00%)    LOG ("breaking one-satisfied clauses containing negated flipped literal "
         .                  "%s",
         .                  LOGLIT (not_flipped));
   299,563 ( 0.00%)    watches *watches = &WATCHES (not_flipped);
    81,699 ( 0.00%)    counter *counters = walker->counters;
    27,233 ( 0.00%)    unsigned steps = 1;
 2,742,663 ( 0.00%)    for (all_binary_large_watches (watch, *watches)) {
   217,864 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (27,233x)
   217,864 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (27,233x)
   310,110 ( 0.00%)      steps++;
 1,550,550 ( 0.00%)      assert (!watch.type.binary);
   930,330 ( 0.00%)      const unsigned counter_ref = watch.large.ref;
 1,240,440 ( 0.00%)      assert (counter_ref < walker->clauses);
 1,550,550 ( 0.00%)      counter *counter = counters + counter_ref;
 1,240,440 ( 0.00%)      assert (counter->count);
 2,790,990 ( 0.00%)      if (--counter->count)
   272,978 ( 0.00%)        continue;
   222,792 ( 0.00%)      push_unsat (solver, walker, counters, counter_ref);
 8,313,132 ( 0.00%)  => build/../src/walk.c:push_unsat (37,132x)
         .           #ifdef LOGGING
    74,264 ( 0.00%)      broken++;
         .           #endif
         .             }
   163,398 ( 0.00%)    LOG ("broken %u one-satisfied clauses containing "
         .                  "negated flipped literal %s",
         .                  broken, LOGLIT (not_flipped));
   163,398 ( 0.00%)    ADD (walk_steps, steps);
   544,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_walk_steps (27,233x)
         .           #ifdef NDEBUG
         .             (void) values;
         .           #endif
    81,699 ( 0.00%)  }
         .           
         .           static void make_clauses (kissat *solver, walker *walker,
   217,864 ( 0.00%)                            const value *const values, unsigned flipped) {
   163,398 ( 0.00%)    assert (values[flipped] > 0);
   163,398 ( 0.00%)    LOG ("making unsatisfied clauses containing flipped literal %s",
         .                  LOGLIT (flipped));
   299,563 ( 0.00%)    watches *watches = &WATCHES (flipped);
    81,699 ( 0.00%)    counter *counters = walker->counters;
    27,233 ( 0.00%)    unsigned steps = 1;
         .           #ifdef LOGGING
    27,233 ( 0.00%)    unsigned made = 0;
         .           #endif
 2,756,796 ( 0.00%)    for (all_binary_large_watches (watch, *watches)) {
   217,864 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (27,233x)
   217,864 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (27,233x)
   312,129 ( 0.00%)      steps++;
 1,560,645 ( 0.00%)      assert (!watch.type.binary);
   936,387 ( 0.00%)      const unsigned counter_ref = watch.large.ref;
 1,248,516 ( 0.00%)      assert (counter_ref < walker->clauses);
 1,560,645 ( 0.00%)      counter *counter = counters + counter_ref;
 1,248,516 ( 0.00%)      assert (counter->count < UINT_MAX);
 2,184,903 ( 0.00%)      if (counter->count++)
   273,624 ( 0.00%)        continue;
   423,555 ( 0.00%)      if (pop_unsat (solver, walker, counters, counter_ref, counter->pos))
10,447,681 ( 0.00%)  => build/../src/walk.c:pop_unsat (38,505x)
    38,055 ( 0.00%)        steps++;
         .           #ifdef LOGGING
    77,010 ( 0.00%)      made++;
         .           #endif
         .             }
   163,398 ( 0.00%)    LOG ("made %u unsatisfied clauses containing flipped literal %s", made,
         .                  LOGLIT (flipped));
   163,398 ( 0.00%)    ADD (walk_steps, steps);
   544,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_walk_steps (27,233x)
         .           #ifdef NDEBUG
         .             (void) values;
         .           #endif
    81,699 ( 0.00%)  }
         .           
         .           static void save_all_values (kissat *solver, walker *walker) {
         .             assert (EMPTY_STACK (walker->trail));
         .             assert (walker->best_trail_pos == INVALID_BEST_TRAIL_POS);
         .             LOG ("copying all values as best phases since trail is invalid");
         .             const value *const current_values = solver->values;
         .             value *best_values = walker->best_values;
         .             for (all_variables (idx)) {
-- line 614 ----------------------------------------
-- line 616 ----------------------------------------
         .               const value value = current_values[lit];
         .               if (value)
         .                 best_values[idx] = value;
         .             }
         .             LOG ("reset best trail position to 0");
         .             walker->best_trail_pos = 0;
         .           }
         .           
        24 ( 0.00%)  static void save_walker_trail (kissat *solver, walker *walker, bool keep) {
         .           #if defined(LOGGING) || !defined(NDEBUG)
        12 ( 0.00%)    assert (walker->best_trail_pos != INVALID_BEST_TRAIL_POS);
        30 ( 0.00%)    assert (SIZE_STACK (walker->trail) <= UINT_MAX);
        24 ( 0.00%)    const unsigned size_trail = SIZE_STACK (walker->trail);
        12 ( 0.00%)    assert (walker->best_trail_pos <= size_trail);
        15 ( 0.00%)    const unsigned kept = size_trail - walker->best_trail_pos;
        18 ( 0.00%)    LOG ("saving %u values of flipped literals on trail of size %u",
         .                  walker->best_trail_pos, size_trail);
         .           #else
         .             (void) solver;
         .           #endif
         9 ( 0.00%)    value *best_values = walker->best_values;
         9 ( 0.00%)    unsigned *begin = BEGIN_STACK (walker->trail);
        21 ( 0.00%)    const unsigned *const best = begin + walker->best_trail_pos;
    47,126 ( 0.00%)    for (const unsigned *p = begin; p != best; p++) {
    35,331 ( 0.00%)      const unsigned lit = *p;
   135,091 ( 0.00%)      const value value = NEGATED (lit) ? -1 : 1;
    94,216 ( 0.00%)      const unsigned idx = IDX (lit);
    58,885 ( 0.00%)      best_values[idx] = value;
         .             }
        12 ( 0.00%)    if (!keep) {
         6 ( 0.00%)      LOG ("no need to shift and keep remaining %u literals", kept);
         1 ( 0.00%)      return;
         .             }
        12 ( 0.00%)    LOG ("flushed %u literals %.0f%% from trail", walker->best_trail_pos,
         .                  kissat_percent (walker->best_trail_pos, size_trail));
         6 ( 0.00%)    const unsigned *const end = END_STACK (walker->trail);
         4 ( 0.00%)    unsigned *q = begin;
     4,004 ( 0.00%)    for (const unsigned *p = best; p != end; p++)
     5,988 ( 0.00%)      *q++ = *p;
        18 ( 0.00%)    assert ((size_t) (end - q) == walker->best_trail_pos);
        14 ( 0.00%)    assert ((size_t) (q - begin) == kept);
        30 ( 0.00%)    SET_END_OF_STACK (walker->trail, q);
        12 ( 0.00%)    LOG ("keeping %u literals %.0f%% on trail", kept,
         .                  kissat_percent (kept, size_trail));
        12 ( 0.00%)    LOG ("reset best trail position to 0");
         6 ( 0.00%)    walker->best_trail_pos = 0;
         6 ( 0.00%)  }
         .           
         .           static void push_flipped (kissat *solver, walker *walker,
   217,864 ( 0.00%)                            unsigned flipped) {
   108,932 ( 0.00%)    if (walker->best_trail_pos == INVALID_BEST_TRAIL_POS) {
    63,492 ( 0.00%)      LOG ("not pushing flipped %s to already invalid trail",
         .                    LOGLIT (flipped));
    63,492 ( 0.00%)      assert (EMPTY_STACK (walker->trail));
         .             } else {
   166,510 ( 0.00%)      assert (SIZE_STACK (walker->trail) <= UINT_MAX);
   133,208 ( 0.00%)      const unsigned size_trail = SIZE_STACK (walker->trail);
    66,604 ( 0.00%)      assert (walker->best_trail_pos <= size_trail);
    83,255 ( 0.00%)      const unsigned limit = VARS / 4 + 1;
    33,302 ( 0.00%)      assert (limit < INVALID_BEST_TRAIL_POS);
    49,953 ( 0.00%)      if (size_trail < limit) {
   216,762 ( 0.00%)        PUSH_STACK (walker->trail, flipped);
    67,911 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (26x)
    99,888 ( 0.00%)        LOG ("pushed flipped %s to trail which now has size %u",
         .                      LOGLIT (flipped), size_trail + 1);
        12 ( 0.00%)      } else if (walker->best_trail_pos) {
        12 ( 0.00%)        LOG ("trail reached limit %u but has best position %u", limit,
         .                      walker->best_trail_pos);
        12 ( 0.00%)        save_walker_trail (solver, walker, true);
   328,028 ( 0.00%)  => build/../src/walk.c:save_walker_trail (2x)
        26 ( 0.00%)        PUSH_STACK (walker->trail, flipped);
        20 ( 0.00%)        assert (SIZE_STACK (walker->trail) <= UINT_MAX);
        12 ( 0.00%)        LOG ("pushed flipped %s to trail which now has size %zu",
         .                      LOGLIT (flipped), SIZE_STACK (walker->trail));
         .               } else {
         6 ( 0.00%)        LOG ("trail reached limit %u without best position", limit);
         4 ( 0.00%)        CLEAR_STACK (walker->trail);
         6 ( 0.00%)        LOG ("not pushing %s to invalidated trail", LOGLIT (flipped));
         2 ( 0.00%)        walker->best_trail_pos = INVALID_BEST_TRAIL_POS;
         6 ( 0.00%)        LOG ("best trail position becomes invalid");
         .               }
         .             }
   108,932 ( 0.00%)  }
         .           
   190,631 ( 0.00%)  static void flip_literal (kissat *solver, walker *walker, unsigned flip) {
   163,398 ( 0.00%)    LOG ("flipping literal %s", LOGLIT (flip));
    81,699 ( 0.00%)    value *values = solver->values;
   136,165 ( 0.00%)    const value value = values[flip];
    54,466 ( 0.00%)    assert (value < 0);
   217,864 ( 0.00%)    values[flip] = -value;
   326,796 ( 0.00%)    values[NOT (flip)] = value;
   163,398 ( 0.00%)    make_clauses (solver, walker, values, flip);
25,437,733 ( 0.01%)  => build/../src/walk.c:make_clauses (27,233x)
   163,398 ( 0.00%)    break_clauses (solver, walker, values, flip);
23,826,374 ( 0.01%)  => build/../src/walk.c:break_clauses (27,233x)
   136,165 ( 0.00%)    walker->current = currently_unsatified (walker);
   354,029 ( 0.00%)  => build/../src/walk.c:currently_unsatified (27,233x)
    81,699 ( 0.00%)  }
         .           
     4,758 ( 0.00%)  static void update_best (kissat *solver, walker *walker) {
     4,758 ( 0.00%)    assert (walker->current < walker->minimum);
     3,172 ( 0.00%)    walker->minimum = walker->current;
         .           #ifndef QUIET
     3,172 ( 0.00%)    int verbosity = kissat_verbosity (solver);
    21,411 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_verbosity (793x)
     2,379 ( 0.00%)    bool report = (verbosity > 2);
     1,586 ( 0.00%)    if (verbosity == 2) {
         .               if (walker->flipped / 2 >= walker->report.flipped)
         .                 report = true;
         .               else if (walker->minimum < 5 || walker->report.minimum == UINT_MAX ||
         .                        walker->minimum <= walker->report.minimum / 2)
         .                 report = true;
         .               if (report) {
         .                 walker->report.minimum = walker->minimum;
         .                 walker->report.flipped = walker->flipped;
         .               }
         .             }
     1,586 ( 0.00%)    if (report)
         .               report_minimum ("new", solver, walker);
         .           #endif
     3,172 ( 0.00%)    if (walker->best_trail_pos == INVALID_BEST_TRAIL_POS)
         .               save_all_values (solver, walker);
         .             else {
     7,930 ( 0.00%)      assert (SIZE_STACK (walker->trail) < INVALID_BEST_TRAIL_POS);
     7,930 ( 0.00%)      walker->best_trail_pos = SIZE_STACK (walker->trail);
     4,758 ( 0.00%)      LOG ("new best trail position %u", walker->best_trail_pos);
         .             }
     2,379 ( 0.00%)  }
         .           
   190,631 ( 0.00%)  static void local_search_step (kissat *solver, walker *walker) {
   108,932 ( 0.00%)    assert (walker->current);
   108,932 ( 0.00%)    INC (flipped);
   408,495 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_flipped (27,233x)
   108,932 ( 0.00%)    assert (walker->flipped < UINT64_MAX);
   136,165 ( 0.00%)    walker->flipped++;
   163,398 ( 0.00%)    LOG ("starting local search flip %" PRIu64 " with %u unsatisfied clauses",
         .                  GET (flipped), walker->current);
   163,398 ( 0.00%)    unsigned lit = pick_literal (solver, walker);
150,548,308 ( 0.06%)  => build/../src/walk.c:pick_literal (27,233x)
   163,398 ( 0.00%)    flip_literal (solver, walker, lit);
51,333,815 ( 0.02%)  => build/../src/walk.c:flip_literal (27,233x)
   163,398 ( 0.00%)    push_flipped (solver, walker, lit);
 1,808,251 ( 0.00%)  => build/../src/walk.c:push_flipped (27,233x)
   163,398 ( 0.00%)    if (walker->current < walker->minimum)
     3,965 ( 0.00%)      update_best (solver, walker);
    68,991 ( 0.00%)  => build/../src/walk.c:update_best (793x)
   163,398 ( 0.00%)    LOG ("ending local search step %" PRIu64 " with %u unsatisfied clauses",
         .                  GET (flipped), walker->current);
   108,932 ( 0.00%)  }
         .           
        14 ( 0.00%)  static void local_search_round (walker *walker) {
         6 ( 0.00%)    kissat *solver = walker->solver;
         .           #ifndef QUIET
         6 ( 0.00%)    const unsigned before = walker->minimum;
         .           #endif
         6 ( 0.00%)    statistics *statistics = &solver->statistics;
   272,354 ( 0.00%)    while (walker->minimum && walker->limit > statistics->walk_steps) {
   299,563 ( 0.00%)      if (TERMINATED (walk_terminated_1))
   599,126 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (27,233x)
         .                 break;
   136,165 ( 0.00%)      local_search_step (solver, walker);
205,914,737 ( 0.09%)  => build/../src/walk.c:local_search_step (27,233x)
         .             }
         .           #ifndef QUIET
        12 ( 0.00%)    report_minimum ("last", solver, walker);
       148 ( 0.00%)  => build/../src/walk.c:report_minimum (2x)
        12 ( 0.00%)    assert (statistics->walk_steps >= walker->start);
        14 ( 0.00%)    const uint64_t steps = statistics->walk_steps - walker->start;
         .             // clang-format off
        16 ( 0.00%)    kissat_very_verbose (solver,
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         .               "walking ends with %u unsatisfied clauses", walker->current);
        50 ( 0.00%)    kissat_very_verbose (solver,
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
        34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (2x)
         .               "flipping %" PRIu64 " literals took %" PRIu64 " steps (%.2f per flipped)",
         4 ( 0.00%)      walker->flipped, steps, kissat_average (steps, walker->flipped));
         .             // clang-format on
         6 ( 0.00%)    const unsigned after = walker->minimum;
        52 ( 0.00%)    kissat_phase (
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                 solver, "walk", GET (walks), "%s minimum %u after %" PRIu64 " flips",
         .                 after < before ? "new" : "unchanged", after, walker->flipped);
         .           #endif
        12 ( 0.00%)  }
         .           
        10 ( 0.00%)  static void export_best_values (walker *walker) {
         6 ( 0.00%)    kissat *const solver = walker->solver;
         6 ( 0.00%)    const value *const best = walker->best_values;
         6 ( 0.00%)    value *const saved = solver->phases.saved;
         .             assert (sizeof *saved == 1);
         .             assert (sizeof *best == 1);
        16 ( 0.00%)    memcpy (saved, best, VARS);
    44,435 ( 0.00%)  => ???:0x000000000010c650 (2x)
         6 ( 0.00%)  }
         .           
        12 ( 0.00%)  static bool save_final_minimum (walker *walker) {
         6 ( 0.00%)    kissat *solver = walker->solver;
         .           
        12 ( 0.00%)    assert (walker->minimum <= walker->initial);
        12 ( 0.00%)    if (walker->minimum == walker->initial) {
         .               kissat_phase (solver, "walk", GET (walks),
         .                             "no improvement thus keeping saved phases");
         .               return false;
         .             }
         .           
        32 ( 0.00%)    kissat_phase (solver, "walk", GET (walks),
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_walks (2x)
         .                           "saving improved assignment of %u unsatisfied clauses",
         .                           walker->minimum);
         .           
        12 ( 0.00%)    if (!walker->best_trail_pos ||
         4 ( 0.00%)        walker->best_trail_pos == INVALID_BEST_TRAIL_POS)
         6 ( 0.00%)      LOG ("minimum already saved");
         .             else
         6 ( 0.00%)      save_walker_trail (solver, walker, false);
    52,926 ( 0.00%)  => build/../src/walk.c:save_walker_trail (1x)
         .           
         6 ( 0.00%)    export_best_values (walker);
    44,485 ( 0.00%)  => build/../src/walk.c:export_best_values (2x)
         8 ( 0.00%)    INC (walk_improved);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_walk_improved (2x)
         .           
         2 ( 0.00%)    return true;
         6 ( 0.00%)  }
         .           
         .           #ifdef CHECK_WALK
         .           
         .           static void check_walk (kissat *solver, unsigned expected) {
         .             unsigned unsatisfied = 0;
         .             watches *all_watches = solver->watches;
         .             const value *const saved = solver->phases.saved;
         .             for (all_literals (lit)) {
-- line 825 ----------------------------------------
-- line 878 ----------------------------------------
         .             }
         .             LOG ("expected %u unsatisfied", expected);
         .             LOG ("actually %u unsatisfied", unsatisfied);
         .             assert (expected == unsatisfied);
         .           }
         .           
         .           #endif
         .           
        16 ( 0.00%)  static void walking_phase (kissat *solver) {
         8 ( 0.00%)    INC (walks);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_walks (2x)
         .             litpairs irredundant;
        10 ( 0.00%)    INIT_STACK (irredundant);
        10 ( 0.00%)    kissat_enter_dense_mode (solver, &irredundant);
20,842,111 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (2x)
         .             walker walker;
        12 ( 0.00%)    init_walker (solver, &walker, &irredundant);
275,341,195 ( 0.12%)  => build/../src/walk.c:init_walker (2x)
        10 ( 0.00%)    init_walker_limit (solver, &walker);
    14,173 ( 0.00%)  => build/../src/walk.c:init_walker_limit (2x)
         6 ( 0.00%)    local_search_round (&walker);
207,222,625 ( 0.09%)  => build/../src/walk.c:local_search_round (2x)
         .           #ifdef CHECK_WALK
         .             bool improved =
         .           #endif
         6 ( 0.00%)        save_final_minimum (&walker);
    97,665 ( 0.00%)  => build/../src/walk.c:save_final_minimum (2x)
         .           #ifdef CHECK_WALK
         .             unsigned expected = walker.minimum;
         .           #endif
         6 ( 0.00%)    release_walker (&walker);
     4,283 ( 0.00%)  => build/../src/walk.c:release_walker (2x)
        10 ( 0.00%)    kissat_resume_sparse_mode (solver, false, &irredundant);
184,945,648 ( 0.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (2x)
        30 ( 0.00%)    RELEASE_STACK (irredundant);
       556 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
         .           #if CHECK_WALK
         .             if (improved)
         .               check_walk (solver, expected);
         .           #endif
        12 ( 0.00%)  }
         .           
        20 ( 0.00%)  bool kissat_walking (kissat *solver) {
        12 ( 0.00%)    reference last_irredundant = solver->last_irredundant;
         8 ( 0.00%)    if (last_irredundant == INVALID_REF)
         .               last_irredundant = SIZE_STACK (solver->arena);
         .           
        12 ( 0.00%)    if (last_irredundant > MAX_WALK_REF) {
         .               kissat_extremely_verbose (solver,
         .                                         "can not walk since last "
         .                                         "irredundant clause reference %u too large",
         .                                         last_irredundant);
         .               return false;
         .             }
         .           
        24 ( 0.00%)    uint64_t clauses = BINIRR_CLAUSES;
        12 ( 0.00%)    if (clauses > MAX_WALK_REF) {
         .               kissat_extremely_verbose (solver,
         .                                         "can not walk due to "
         .                                         "way too many irredundant clauses %" PRIu64,
         .                                         clauses);
         .               return false;
         .             }
         .           
         4 ( 0.00%)    return true;
         8 ( 0.00%)  }
         .           
        10 ( 0.00%)  void kissat_walk (kissat *solver) {
         8 ( 0.00%)    assert (!solver->level);
        10 ( 0.00%)    assert (!solver->inconsistent);
        10 ( 0.00%)    assert (kissat_propagated (solver));
        48 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (2x)
        10 ( 0.00%)    assert (kissat_walking (solver));
        50 ( 0.00%)  => build/../src/walk.c:kissat_walking (2x)
         .           
         6 ( 0.00%)    reference last_irredundant = solver->last_irredundant;
         4 ( 0.00%)    if (last_irredundant == INVALID_REF)
         .               last_irredundant = SIZE_STACK (solver->arena);
         .           
         6 ( 0.00%)    if (last_irredundant > MAX_WALK_REF) {
         .               kissat_phase (solver, "walk", GET (walks),
         .                             "last irredundant clause reference %u too large",
         .                             last_irredundant);
         .               return;
         .             }
         .           
        12 ( 0.00%)    uint64_t clauses = BINIRR_CLAUSES;
         6 ( 0.00%)    if (clauses > MAX_WALK_REF) {
         .               kissat_phase (solver, "walk", GET (walks),
         .                             "way too many irredundant clauses %" PRIu64, clauses);
         .               return;
         .             }
         .           
         8 ( 0.00%)    if (GET_OPTION (warmup))
         6 ( 0.00%)      kissat_warmup (solver);
131,403,453 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/warmup.c:kissat_warmup (2x)
         .           
        24 ( 0.00%)    STOP_SEARCH_AND_START_SIMPLIFIER (walking);
       560 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop_search_and_start_simplifier (2x)
         6 ( 0.00%)    walking_phase (solver);
688,468,422 ( 0.29%)  => build/../src/walk.c:walking_phase (2x)
        24 ( 0.00%)    STOP_SIMPLIFIER_AND_RESUME_SEARCH (walking);
       562 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop_simplifier_and_resume_search (2x)
         4 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/statistics.c
--------------------------------------------------------------------------------
Ir                   

-- line 8 ----------------------------------------
          .           #include "tiers.h"
          .           #include "utilities.h"
          .           
          .           #include <inttypes.h>
          .           #include <stdbool.h>
          .           #include <stdio.h>
          .           #include <string.h>
          .           
          5 ( 0.00%)  void kissat_print_glue_usage (kissat *solver) {
          3 ( 0.00%)    const int64_t stable = solver->statistics.clauses_used_stable;
          3 ( 0.00%)    const int64_t focused = solver->statistics.clauses_used_focused;
          2 ( 0.00%)    if (!stable && !focused)
          .               printf ("c no clauses used at all\n");
          .             else {
          2 ( 0.00%)      if (focused)
          4 ( 0.00%)        kissat_print_tier_usage_statistics (solver, false);
     26,124 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/tiers.c:kissat_print_tier_usage_statistics (1x)
          4 ( 0.00%)      if (focused && stable)
          3 ( 0.00%)        printf ("c\n");
        333 ( 0.00%)  => ???:0x000000000010c840 (1x)
          2 ( 0.00%)      if (stable)
          4 ( 0.00%)        kissat_print_tier_usage_statistics (solver, true);
     40,820 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/tiers.c:kissat_print_tier_usage_statistics (1x)
          .             }
          3 ( 0.00%)    fflush (stdout);
         68 ( 0.00%)  => ???:0x000000000010c750 (1x)
          3 ( 0.00%)  }
          .           
          .           // clang-format off
          .           
          .           void
          .           kissat_statistics_print (kissat * solver, bool verbose)
          9 ( 0.00%)  {
          3 ( 0.00%)    statistics *statistics = &solver->statistics;
          .           
          3 ( 0.00%)    const double time = kissat_process_time ();
         51 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resources.c:kissat_process_time (1x)
          3 ( 0.00%)    size_t variables = solver->statistics.variables_original;
          .           #ifdef METRICS
          7 ( 0.00%)    const double rss = kissat_maximum_resident_set_size ();
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resources.c:kissat_maximum_resident_set_size (1x)
          .           #endif
          .           
          .           /*------------------------------------------------------------------------*/
          .           
          .           #define RELATIVE(FIRST,SECOND) \
          .             kissat_average (statistics->FIRST, statistics->SECOND)
          .           
          .           /*------------------------------------------------------------------------*/
-- line 50 ----------------------------------------
-- line 328 ----------------------------------------
          .           #define PCNT_WALKS(NAME) \
          .             PERCENT (NAME, walks)
          .           
          .           #define COUNTER(NAME,VERBOSE,OTHER,UNITS,TYPE) \
          .             if (verbose || !VERBOSE || (VERBOSE == 1 && statistics->NAME)) \
          .               PRINT_STAT (#NAME, statistics->NAME, OTHER(NAME), UNITS, TYPE);
          .           #define IGNORE(...)
          .           
     12,053 ( 0.00%)    METRICS_COUNTERS_AND_STATISTICS
    697,172 ( 0.00%)  => ???:0x000000000010c4c0 (347x)
     45,688 ( 0.00%)  => ???:0x000000000010c7a0 (347x)
     33,294 ( 0.00%)  => ???:0x000000000010c740 (173x)
      4,556 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (134x)
        663 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (39x)
          .           
          .           #undef COUNTER
          .           #undef METRIC
          .           #undef STATISTIC
          .           
          3 ( 0.00%)    fflush (stdout);
         68 ( 0.00%)  => ???:0x000000000010c750 (1x)
          3 ( 0.00%)  }
          .           
          .           // clang-format on
          .           
          .           #elif defined(NDEBUG)
          .           int kissat_statistics_dummy_to_avoid_warning;
          .           #endif
          .           
          .           /*------------------------------------------------------------------------*/
          .           
          .           #ifndef NDEBUG
          .           
          .           #include "inlinevector.h"
          .           
        230 ( 0.00%)  void kissat_check_statistics (kissat *solver) {
        184 ( 0.00%)    if (solver->inconsistent)
          .               return;
          .           
         46 ( 0.00%)    size_t redundant = 0;
         46 ( 0.00%)    size_t irredundant = 0;
         46 ( 0.00%)    size_t arena_garbage = 0;
          .           
 49,365,388 ( 0.02%)    for (all_clauses (c)) {
334,153,878 ( 0.14%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (5,484,992x)
 27,647,223 ( 0.01%)      if (c->garbage) {
    889,052 ( 0.00%)        arena_garbage += kissat_actual_bytes_of_clause (c);
 10,847,048 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_actual_bytes_of_clause (222,263x)
    222,263 ( 0.00%)        continue;
          .               }
 26,313,645 ( 0.01%)      if (c->redundant)
    268,194 ( 0.00%)        redundant++;
          .               else
  5,128,632 ( 0.00%)        irredundant++;
          .             }
          .           
         46 ( 0.00%)    size_t binary = 0;
          .           
        184 ( 0.00%)    if (solver->watching) {
  9,437,804 ( 0.00%)      for (all_literals (lit)) {
 25,952,696 ( 0.01%)        watches *watches = &WATCHES (lit);
          .           
149,139,802 ( 0.06%)        for (all_binary_blocking_watches (watch, *watches)) {
 18,874,688 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (2,359,336x)
 18,874,688 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (2,359,336x)
 31,093,070 ( 0.01%)          if (watch.type.binary) {
  1,963,618 ( 0.00%)            binary++;
          .                   }
          .                 }
          .               }
          .             } else {
          .               for (all_literals (lit)) {
          .                 watches *watches = &WATCHES (lit);
          .           
          .                 for (all_binary_large_watches (watch, *watches)) {
          .                   if (watch.type.binary) {
          .                     binary++;
          .                   }
          .                 }
          .               }
          .             }
          .           
        184 ( 0.00%)    assert (!(binary & 1));
        138 ( 0.00%)    binary /= 2;
          .           
        138 ( 0.00%)    statistics *statistics = &solver->statistics;
        184 ( 0.00%)    assert (statistics->clauses_binary == binary);
        184 ( 0.00%)    assert (statistics->clauses_redundant == redundant);
        184 ( 0.00%)    assert (statistics->clauses_irredundant == irredundant);
          .           #ifdef METRICS
        184 ( 0.00%)    assert (statistics->arena_garbage == arena_garbage);
          .           #else
          .             (void) arena_garbage;
          .           #endif
         92 ( 0.00%)  }
          .           
          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/deduce.c
--------------------------------------------------------------------------------
Ir                      

             .           #include "deduce.h"
             .           #include "inline.h"
             .           #include "promote.h"
             .           #include "strengthen.h"
             .           
       713,160 ( 0.00%)  static inline void recompute_and_promote (kissat *solver, clause *c) {
       713,160 ( 0.00%)    assert (c->redundant);
       570,528 ( 0.00%)    const unsigned old_glue = c->glue;
       998,424 ( 0.00%)    const unsigned new_glue = kissat_recompute_glue (solver, c, old_glue);
    77,005,669 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.h:kissat_recompute_glue (142,632x)
       427,896 ( 0.00%)    if (new_glue < old_glue)
        38,778 ( 0.00%)      kissat_promote_clause (solver, c, new_glue);
       718,363 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.c:kissat_promote_clause (6,463x)
       427,896 ( 0.00%)  }
             .           
    42,222,020 ( 0.02%)  static inline void mark_clause_as_used (kissat *solver, clause *c) {
    59,110,828 ( 0.03%)    if (!c->redundant)
     8,301,772 ( 0.00%)      return;
       570,528 ( 0.00%)    INC (clauses_used);
     2,139,480 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_used (142,632x)
       570,528 ( 0.00%)    c->used = MAX_USED;
       855,792 ( 0.00%)    LOGCLS (c, "using");
       713,160 ( 0.00%)    recompute_and_promote (solver, c);
    81,613,874 ( 0.03%)  => build/../src/deduce.c:recompute_and_promote (142,632x)
       998,424 ( 0.00%)    unsigned glue = MIN (c->glue, MAX_GLUE_USED);
     2,567,376 ( 0.00%)    solver->statistics.used[solver->stable].glue[glue]++;
       570,528 ( 0.00%)    if (solver->stable)
       425,460 ( 0.00%)      INC (clauses_used_stable);
     1,276,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_used_stable (85,092x)
             .             else
       287,700 ( 0.00%)      INC (clauses_used_focused);
       863,100 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_used_focused (57,540x)
    16,888,808 ( 0.01%)  }
             .           
       101,850 ( 0.00%)  bool kissat_recompute_and_promote (kissat *solver, clause *c) {
        84,875 ( 0.00%)    assert (c->redundant);
        67,900 ( 0.00%)    const unsigned old_glue = c->glue;
       118,825 ( 0.00%)    const unsigned new_glue = kissat_recompute_glue (solver, c, old_glue);
     4,902,665 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.h:kissat_recompute_glue (16,975x)
        50,925 ( 0.00%)    if (new_glue >= old_glue)
        32,900 ( 0.00%)      return false;
         3,150 ( 0.00%)    kissat_promote_clause (solver, c, new_glue);
        57,550 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.c:kissat_promote_clause (525x)
           525 ( 0.00%)    return true;
        33,950 ( 0.00%)  }
             .           
             .           static inline bool analyze_literal (kissat *solver, assigned *all_assigned,
   145,615,701 ( 0.06%)                                      frame *frames, unsigned lit) {
   249,626,916 ( 0.11%)    assert (VALUE (lit) < 0);
   166,417,944 ( 0.07%)    const unsigned idx = IDX (lit);
   124,813,458 ( 0.05%)    assigned *a = all_assigned + idx;
    62,406,729 ( 0.03%)    const unsigned level = a->level;
    41,604,486 ( 0.02%)    if (!level)
       215,730 ( 0.00%)      return false;
   103,471,890 ( 0.04%)    solver->antecedent_size++;
   103,471,890 ( 0.04%)    if (a->analyzed)
    18,760,668 ( 0.01%)      return false;
    67,884,264 ( 0.03%)    LOG ("analyzing literal %s", LOGLIT (lit));
    67,884,264 ( 0.03%)    kissat_push_analyzed (solver, all_assigned, idx);
   543,200,446 ( 0.23%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (11,314,044x)
    45,256,176 ( 0.02%)    assert (level <= solver->level);
             .           #if defined(LOGGING) || !defined(NDEBUG)
   147,082,728 ( 0.06%)    PUSH_STACK (solver->resolvent, lit);
        17,978 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (12x)
             .           #endif
    56,570,220 ( 0.02%)    solver->resolvent_size++;
    45,256,176 ( 0.02%)    if (level == solver->level)
    18,848,720 ( 0.01%)      return true;
     9,448,420 ( 0.00%)    assert (a->analyzed);
    24,565,983 ( 0.01%)    PUSH_STACK (solver->clause, lit);
         6,467 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (7x)
    11,338,104 ( 0.00%)    LOG ("learned literal %s", LOGLIT (lit));
    17,007,156 ( 0.01%)    frame *f = frames + level;
    13,227,788 ( 0.01%)    if (f->used++)
     3,390,686 ( 0.00%)      return false;
     1,166,046 ( 0.00%)    LOG ("pulling in decision level %u", level);
     2,526,524 ( 0.00%)    PUSH_STACK (solver->levels, level);
         3,176 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (7x)
       194,341 ( 0.00%)    return false;
    41,604,486 ( 0.02%)  }
             .           
       143,628 ( 0.00%)  clause *kissat_deduce_first_uip_clause (kissat *solver, clause *conflict) {
       215,442 ( 0.00%)    START (deduce);
       143,628 ( 0.00%)    assert (EMPTY_STACK (solver->analyzed));
       143,628 ( 0.00%)    assert (EMPTY_STACK (solver->levels));
       143,628 ( 0.00%)    assert (EMPTY_STACK (solver->clause));
             .           #if defined(LOGGING) || !defined(NDEBUG)
        95,752 ( 0.00%)    CLEAR_STACK (solver->resolvent);
             .           #endif
        95,752 ( 0.00%)    if (conflict->size > 2)
       108,725 ( 0.00%)      mark_clause_as_used (solver, conflict);
     3,819,150 ( 0.00%)  => build/../src/deduce.c:mark_clause_as_used (21,745x)
       287,256 ( 0.00%)    PUSH_STACK (solver->clause, INVALID_LIT);
        47,876 ( 0.00%)    solver->antecedent_size = 0;
        47,876 ( 0.00%)    solver->resolvent_size = 0;
        47,876 ( 0.00%)    unsigned unresolved_on_current_level = 0, conflict_size = 0;
        71,814 ( 0.00%)    assigned *all_assigned = solver->assigned;
        71,814 ( 0.00%)    frame *frames = BEGIN_STACK (solver->frames);
     1,305,932 ( 0.00%)    for (all_literals_in_clause (lit, conflict)) {
     1,623,192 ( 0.00%)      assert (VALUE (lit) < 0);
     2,705,320 ( 0.00%)      if (LEVEL (lit))
       135,007 ( 0.00%)        conflict_size++;
     1,082,128 ( 0.00%)      if (analyze_literal (solver, all_assigned, frames, lit))
    21,031,856 ( 0.01%)  => build/../src/deduce.c:analyze_literal (135,266x)
        86,928 ( 0.00%)        unresolved_on_current_level++;
             .             }
        47,876 ( 0.00%)    assert (unresolved_on_current_level > 1);
       143,628 ( 0.00%)    LOG ("starting with %u unresolved literals on current decision level",
             .                  unresolved_on_current_level);
       143,628 ( 0.00%)    assert (solver->antecedent_size == solver->resolvent_size);
       143,628 ( 0.00%)    LOGRES2 ("initial");
       119,690 ( 0.00%)    const bool otfs = GET_OPTION (otfs);
        71,814 ( 0.00%)    unsigned const *t = END_ARRAY (solver->trail);
        23,938 ( 0.00%)    unsigned uip = INVALID_LIT;
        23,938 ( 0.00%)    unsigned resolved = 0;
        23,938 ( 0.00%)    assigned *a = 0;
             .             for (;;) {
             .               do {
   127,647,112 ( 0.05%)        assert (t > BEGIN_ARRAY (solver->trail));
   127,647,112 ( 0.05%)        uip = *--t;
   574,412,004 ( 0.24%)        a = ASSIGNED (uip);
   248,010,834 ( 0.10%)      } while (!a->analyzed || a->level != solver->level);
    18,845,678 ( 0.01%)      if (unresolved_on_current_level == 1)
        23,494 ( 0.00%)        break;
    37,597,380 ( 0.02%)      assert (a->reason != DECISION_REASON);
    56,396,070 ( 0.02%)      assert (a->level == solver->level);
    18,798,690 ( 0.01%)      solver->antecedent_size = 1;
     9,399,345 ( 0.00%)      resolved++;
    46,996,725 ( 0.02%)      if (a->binary) {
     2,930,058 ( 0.00%)        const unsigned other = a->reason;
     5,860,116 ( 0.00%)        LOGBINARY (uip, other, "resolving %s reason", LOGLIT (uip));
     7,813,488 ( 0.00%)        if (analyze_literal (solver, all_assigned, frames, other))
    69,151,424 ( 0.03%)  => build/../src/deduce.c:analyze_literal (976,686x)
       427,064 ( 0.00%)          unresolved_on_current_level++;
             .               } else {
    25,267,977 ( 0.01%)        const reference ref = a->reason;
    50,535,954 ( 0.02%)        LOGREF (ref, "resolving %s reason", LOGLIT (uip));
    50,535,954 ( 0.02%)        clause *reason = kissat_dereference_clause (solver, ref);
 1,152,009,919 ( 0.49%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (8,422,659x)
   323,130,535 ( 0.14%)        for (all_literals_in_clause (lit, reason))
   143,409,723 ( 0.06%)          if (lit != uip &&
   118,141,746 ( 0.05%)              analyze_literal (solver, all_assigned, frames, lit))
 2,042,702,281 ( 0.86%)  => build/../src/deduce.c:analyze_literal (19,690,291x)
     9,123,900 ( 0.00%)            unresolved_on_current_level++;
    42,113,295 ( 0.02%)        mark_clause_as_used (solver, reason);
   216,156,608 ( 0.09%)  => build/../src/deduce.c:mark_clause_as_used (8,422,659x)
             .               }
    18,798,690 ( 0.01%)      assert (unresolved_on_current_level > 0);
     9,399,345 ( 0.00%)      unresolved_on_current_level--;
    56,396,070 ( 0.02%)      LOG ("after resolving %s there are %u literals left "
             .                    "on current decision level",
             .                    LOGLIT (uip), unresolved_on_current_level);
    37,597,380 ( 0.02%)      assert (solver->resolvent_size > 0);
    46,996,725 ( 0.02%)      solver->resolvent_size--;
             .           #if defined(LOGGING) || !defined(NDEBUG)
    56,396,070 ( 0.02%)      LOG2 ("actual antecedent size %u", solver->antecedent_size);
43,899,132,834 (18.57%)      REMOVE_STACK (unsigned, solver->resolvent, NOT (uip));
   122,191,485 ( 0.05%)      assert (SIZE_STACK (solver->resolvent) == solver->resolvent_size);
    56,396,070 ( 0.02%)      LOGRES2 ("new");
             .           #endif
    73,224,994 ( 0.03%)      if (otfs && solver->antecedent_size > 2 &&
    33,657,848 ( 0.01%)          solver->resolvent_size < solver->antecedent_size) {
         3,108 ( 0.00%)        assert (!a->binary);
         3,552 ( 0.00%)        assert (solver->antecedent_size && solver->resolvent_size + 1);
         3,108 ( 0.00%)        clause *reason = kissat_dereference_clause (solver, a->reason);
        60,392 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (444x)
         3,108 ( 0.00%)        assert (!reason->garbage);
         3,108 ( 0.00%)        clause *res = kissat_on_the_fly_strengthen (solver, reason, uip);
    43,105,715 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/strengthen.c:kissat_on_the_fly_strengthen (444x)
         1,156 ( 0.00%)        if (resolved == 1 && solver->resolvent_size < conflict_size) {
           105 ( 0.00%)          assert (!conflict->garbage);
            30 ( 0.00%)          assert (conflict_size > 2);
            90 ( 0.00%)          kissat_on_the_fly_subsume (solver, res, conflict);
       118,218 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/strengthen.c:kissat_on_the_fly_subsume (15x)
             .                 }
         3,996 ( 0.00%)        STOP (deduce);
           888 ( 0.00%)        return res;
             .               }
             .             }
        46,988 ( 0.00%)    assert (uip != INVALID_LIT);
       140,964 ( 0.00%)    LOG ("first unique implication point %s (1st UIP)", LOGLIT (uip));
       258,434 ( 0.00%)    assert (PEEK_STACK (solver->clause, 0) == INVALID_LIT);
       375,904 ( 0.00%)    POKE_STACK (solver->clause, 0, NOT (uip));
       140,964 ( 0.00%)    LOGTMP ("deduced not yet minimized 1st UIP");
       117,470 ( 0.00%)    if (!solver->probing)
       305,422 ( 0.00%)      ADD (literals_deduced, SIZE_STACK (solver->clause));
       469,880 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_deduced (23,494x)
       211,446 ( 0.00%)    STOP (deduce);
        23,494 ( 0.00%)    return 0;
        47,876 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/random.h
--------------------------------------------------------------------------------
Ir                 

-- line 2 ----------------------------------------
        .           #define _random_h_INCLUDED
        .           
        .           #include <assert.h>
        .           #include <stdbool.h>
        .           #include <stdint.h>
        .           
        .           typedef uint64_t generator;
        .           
4,264,911 ( 0.00%)  static inline uint64_t kissat_next_random64 (generator *rng) {
8,529,822 ( 0.00%)    *rng *= 6364136223846793005ul;
8,529,822 ( 0.00%)    *rng += 1442695040888963407ul;
2,843,274 ( 0.00%)    return *rng;
2,843,274 ( 0.00%)  }
        .           
3,622,676 ( 0.00%)  static inline unsigned kissat_next_random32 (generator *rng) {
3,622,676 ( 0.00%)    return kissat_next_random64 (rng) >> 32;
17,207,711 ( 0.01%)  => build/../src/random.h:kissat_next_random64 (905,669x)
1,811,338 ( 0.00%)  }
        .           
        .           static inline unsigned kissat_pick_random (generator *rng, unsigned l,
6,468,228 ( 0.00%)                                             unsigned r) {
3,234,114 ( 0.00%)    assert (l <= r);
3,234,114 ( 0.00%)    if (l == r)
  434,822 ( 0.00%)      return l;
2,581,881 ( 0.00%)    const unsigned delta = r - l;
3,442,508 ( 0.00%)    const unsigned tmp = kissat_next_random32 (rng);
24,958,183 ( 0.01%)  => build/../src/random.h:kissat_next_random32 (860,627x)
7,745,643 ( 0.00%)    const double fraction = tmp / 4294967296.0;
6,024,389 ( 0.00%)    assert (0 <= fraction), assert (fraction < 1);
7,745,643 ( 0.00%)    const unsigned scaled = delta * fraction;
2,581,881 ( 0.00%)    assert (scaled < delta);
3,442,508 ( 0.00%)    const unsigned res = l + scaled;
5,163,762 ( 0.00%)    assert (l <= res), assert (res < r);
  860,627 ( 0.00%)    return res;
2,156,076 ( 0.00%)  }
        .           
        .           static inline bool kissat_pick_bool (generator *rng) {
        .             return kissat_pick_random (rng, 0, 2);
        .           }
        .           
  108,932 ( 0.00%)  static inline double kissat_pick_double (generator *rng) {
  326,796 ( 0.00%)    return kissat_next_random32 (rng) / 4294967296.0;
  789,757 ( 0.00%)  => build/../src/random.h:kissat_next_random32 (27,233x)
   81,699 ( 0.00%)  }
        .           
        .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/clause.h
--------------------------------------------------------------------------------
Ir                   

-- line 42 ----------------------------------------
          .           #define END_LITS(C) (BEGIN_LITS (C) + (C)->size)
          .           
          .           #define all_literals_in_clause(LIT, C) \
          .             unsigned LIT, \
          .                 *LIT##_PTR = BEGIN_LITS (C), *const LIT##_END = END_LITS (C); \
          .             LIT##_PTR != LIT##_END && ((LIT = *LIT##_PTR), true); \
          .             ++LIT##_PTR
          .           
530,456,304 ( 0.22%)  static inline size_t kissat_bytes_of_clause (unsigned size) {
795,684,456 ( 0.34%)    const size_t res = sizeof (clause) + (size - 3) * sizeof (unsigned);
397,842,228 ( 0.17%)    return kissat_align_ward (res);
3,255,537,280 ( 1.38%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.h:kissat_align_ward (132,614,076x)
265,228,152 ( 0.11%)  }
          .           
129,140,316 ( 0.05%)  static inline size_t kissat_actual_bytes_of_clause (clause *c) {
258,280,632 ( 0.11%)    unsigned const *p = END_LITS (c);
161,425,395 ( 0.07%)    if (c->shrunken)
 12,494,753 ( 0.01%)      while (*p++ != INVALID_LIT)
          .                 ;
129,140,316 ( 0.05%)    return kissat_align_ward ((char *) p - (char *) c);
793,794,639 ( 0.34%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.h:kissat_align_ward (32,285,079x)
 64,570,158 ( 0.03%)  }
          .           
126,728,684 ( 0.05%)  static inline clause *kissat_next_clause (clause *c) {
126,728,684 ( 0.05%)    word bytes = kissat_actual_bytes_of_clause (c);
1,519,668,960 ( 0.64%)  => build/../src/clause.h:kissat_actual_bytes_of_clause (31,682,171x)
 95,046,513 ( 0.04%)    return (clause *) ((char *) c + bytes);
 63,364,342 ( 0.03%)  }
          .           
          .           struct kissat;
          .           
          .           void kissat_new_binary_clause (struct kissat *, unsigned, unsigned);
          .           void kissat_new_unwatched_binary_clause (struct kissat *, unsigned,
          .                                                    unsigned);
          .           
          .           reference kissat_new_original_clause (struct kissat *);
-- line 74 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/proplit.h
--------------------------------------------------------------------------------
Ir                     

            .           #include <valgrind/callgrind.h>
            .           static inline void kissat_watch_large_delayed (kissat *solver,
  299,869,304 ( 0.13%)                                                 watches *all_watches,
  171,353,888 ( 0.07%)                                                 unsigneds *delayed) {
  171,353,888 ( 0.07%)    assert (all_watches == solver->watches);
  128,515,416 ( 0.05%)    assert (delayed == &solver->delayed);
  128,515,416 ( 0.05%)    const unsigned *const end_delayed = END_STACK (*delayed);
  236,368,310 ( 0.10%)    unsigned const *d = BEGIN_STACK (*delayed);
  108,357,370 ( 0.05%)    while (d != end_delayed) {
   65,014,422 ( 0.03%)      const unsigned lit = *d++;
  108,357,370 ( 0.05%)      assert (d != end_delayed);
  108,357,370 ( 0.05%)      const watch watch = {.raw = *d++};
  108,357,370 ( 0.05%)      assert (!watch.type.binary);
  130,028,844 ( 0.06%)      assert (lit < LITS);
   65,014,422 ( 0.03%)      watches *const lit_watches = all_watches + lit;
  108,357,370 ( 0.05%)      assert (d != end_delayed);
   65,014,422 ( 0.03%)      const reference ref = *d++;
  130,028,844 ( 0.06%)      const unsigned blocking = watch.blocking.lit;
            .               LOGREF3 (ref, "watching %s blocking %s in", LOGLIT (lit),
  130,028,844 ( 0.06%)               LOGLIT (blocking));
4,848,155,928 ( 2.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (21,671,474x)
            .               kissat_push_blocking_watch (solver, lit_watches, blocking, ref);
  171,353,888 ( 0.07%)    }
  171,353,888 ( 0.07%)    CLEAR_STACK (*delayed);
            .           }
            .           
            .           static inline void
  173,371,792 ( 0.07%)  kissat_delay_watching_large (kissat *solver, unsigneds *const delayed,
   86,685,896 ( 0.04%)                               unsigned lit, unsigned other, reference ref) {
  498,443,902 ( 0.21%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_blocking_watch (21,671,474x)
  281,729,174 ( 0.12%)    const watch watch = kissat_blocking_watch (other);
          698 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
  281,729,222 ( 0.12%)    PUSH_STACK (*delayed, lit);
       19,963 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (5x)
  281,729,234 ( 0.12%)    PUSH_STACK (*delayed, watch.raw);
       14,226 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (6x)
   65,014,422 ( 0.03%)    PUSH_STACK (*delayed, ref);
            .           }
            .           
            .           static inline clause *PROPAGATE_LITERAL (kissat *solver,
            .           #if defined(PROBING_PROPAGATION)
            .                                                    const clause *const ignore,
  219,485,216 ( 0.09%)  #endif
  171,353,888 ( 0.07%)                                           const unsigned lit) {
  257,030,832 ( 0.11%)    assert (solver->watching);
  514,061,664 ( 0.22%)    LOG (PROPAGATION_TYPE " propagating %s", LOGLIT (lit));
  257,030,832 ( 0.11%)    assert (VALUE (lit) > 0);
            .             assert (EMPTY_STACK (solver->delayed));
  128,515,416 ( 0.05%)  
  128,515,416 ( 0.05%)    watches *const all_watches = solver->watches;
  128,515,416 ( 0.05%)    ward *const arena = BEGIN_STACK (solver->arena);
  128,515,416 ( 0.05%)    assigned *const assigned = solver->assigned;
            .             value *const values = solver->values;
  342,707,776 ( 0.14%)  
            .             const unsigned not_lit = NOT (lit);
  214,192,360 ( 0.09%)  
  257,030,832 ( 0.11%)    assert (not_lit < LITS);
            .             watches *watches = all_watches + not_lit;
  257,030,832 ( 0.11%)  
      336,808 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (42,101x)
  257,030,832 ( 0.11%)    watch *const begin_watches = BEGIN_WATCHES (*watches);
      336,808 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (42,101x)
            .             const watch *const end_watches = END_WATCHES (*watches);
   85,676,944 ( 0.04%)  
   85,676,944 ( 0.04%)    watch *q = begin_watches;
            .             const watch *p = q;
  128,515,416 ( 0.05%)  
  257,030,832 ( 0.11%)    unsigneds *const delayed = &solver->delayed;
            .             assert (EMPTY_STACK (*delayed));
  171,353,888 ( 0.07%)  
      505,212 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (42,101x)
  257,030,832 ( 0.11%)    const size_t size_watches = SIZE_WATCHES (*watches);
    1,236,126 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (42,101x)
  342,707,776 ( 0.14%)    uint64_t ticks = 1 + kissat_cache_lines (size_watches, sizeof (watch));
  257,030,832 ( 0.11%)    const unsigned idx = IDX (lit);
  128,515,416 ( 0.05%)    struct assigned *const a = assigned + idx;
  128,515,416 ( 0.05%)    const bool probing = solver->probing;
   42,838,472 ( 0.02%)    const unsigned level = a->level;
            .             clause *res = 0;
  769,707,053 ( 0.33%)  
1,994,812,990 ( 0.84%)    while (p != end_watches) {
  598,443,897 ( 0.25%)      const watch head = *q++ = *p++;
  997,406,495 ( 0.42%)      const unsigned blocking = head.blocking.lit;
  997,406,495 ( 0.42%)      assert (VALID_INTERNAL_LITERAL (blocking));
  598,443,897 ( 0.25%)      const value blocking_value = values[blocking];
            .               const bool binary = head.type.binary;
  797,925,196 ( 0.34%)      watch tail;
1,822,700,350 ( 0.77%)      if (!binary)
  398,962,598 ( 0.17%)        tail = *q++ = *p++;
  140,679,732 ( 0.06%)      if (blocking_value > 0)
  142,049,698 ( 0.06%)        continue;
   16,609,198 ( 0.01%)      if (binary) {
       18,960 ( 0.00%)        if (blocking_value < 0) {
          540 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_binary_conflict (18x)
            .                   res = kissat_binary_conflict (solver, not_lit, blocking);
        2,688 ( 0.00%)  #ifndef CONTINUE_PROPAGATING_AFTER_CONFLICT
            .                   break;
            .           #endif
   16,603,786 ( 0.01%)        } else {
   99,622,716 ( 0.04%)          assert (!blocking_value);
    1,799,086 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/fastassign.h:kissat_fast_binary_assign (6,930x)
            .                   CALLGRIND_START_INSTRUMENTATION;
   16,603,786 ( 0.01%)          kissat_fast_binary_assign (solver, probing, level, values, assigned,
            .                                              blocking, not_lit);
            .                   ticks++;
  125,440,500 ( 0.05%)          CALLGRIND_STOP_INSTRUMENTATION;
  627,202,500 ( 0.27%)        }
  376,321,500 ( 0.16%)      } else {
   62,720,250 ( 0.03%)        const reference ref = tail.raw;
  313,601,250 ( 0.13%)        assert (ref < SIZE_STACK (solver->arena));
       11,824 ( 0.00%)        clause *const c = (clause *) (arena + ref);
       11,824 ( 0.00%)        ticks++;
            .                 if (c->garbage) {
  188,125,278 ( 0.08%)          q -= 2;
  501,667,408 ( 0.21%)          continue;
  438,958,982 ( 0.19%)        }
  313,542,130 ( 0.13%)        unsigned *const lits = BEGIN_LITS (c);
  188,125,278 ( 0.08%)        const unsigned other = lits[0] ^ lits[1] ^ not_lit;
  188,125,278 ( 0.08%)        assert (lits[0] != lits[1]);
  313,542,130 ( 0.13%)        assert (VALID_INTERNAL_LITERAL (other));
  125,416,852 ( 0.05%)        assert (not_lit != other);
   58,210,490 ( 0.02%)        assert (lit != other);
    5,821,049 ( 0.00%)        const value other_value = values[other];
            .                 if (other_value > 0) {
  398,211,639 ( 0.17%)          q[-2].blocking.lit = other;
  398,211,639 ( 0.17%)          continue;
  284,436,885 ( 0.12%)        }
  170,662,131 ( 0.07%)        const unsigned *const end_lits = lits + c->size;
   56,887,377 ( 0.02%)        unsigned *const searched = lits + c->searched;
   56,887,377 ( 0.02%)        assert (c->lits + 2 <= searched);
  559,623,549 ( 0.24%)        assert (searched < end_lits);
  200,443,455 ( 0.08%)        unsigned *r, replacement = INVALID_LIT;
  334,072,425 ( 0.14%)        value replacement_value = -1;
  334,072,425 ( 0.14%)        for (r = searched; r != end_lits; r++) {
  133,628,970 ( 0.06%)          replacement = *r;
   21,169,206 ( 0.01%)          assert (VALID_INTERNAL_LITERAL (replacement));
            .                   replacement_value = values[replacement];
  113,774,754 ( 0.05%)          if (replacement_value >= 0)
  302,522,332 ( 0.13%)            break;
   14,466,228 ( 0.01%)        }
   24,110,380 ( 0.01%)        if (replacement_value < 0) {
   24,110,380 ( 0.01%)          for (r = lits + 2; r != searched; r++) {
    9,644,152 ( 0.00%)            replacement = *r;
      502,268 ( 0.00%)            assert (VALID_INTERNAL_LITERAL (replacement));
            .                     replacement_value = values[replacement];
            .                     if (replacement_value >= 0)
            .                       break;
  113,774,754 ( 0.05%)          }
  130,028,844 ( 0.06%)        }
   43,342,948 ( 0.02%)  
  130,028,844 ( 0.06%)        if (replacement_value >= 0) {
   21,671,474 ( 0.01%)          c->searched = r - lits;
   65,014,422 ( 0.03%)          assert (replacement != INVALID_LIT);
   86,685,896 ( 0.04%)          LOGREF3 (ref, "unwatching %s in", LOGLIT (not_lit));
  151,700,318 ( 0.06%)          q -= 2;
   65,014,422 ( 0.03%)          lits[0] = other;
  173,371,792 ( 0.07%)          lits[1] = replacement;
    3,552,626 ( 0.00%)  => build/../src/proplit.h:kissat_delay_watching_large (46,138x)
            .                   assert (lits[0] != lits[1]);
   43,342,948 ( 0.02%)          *r = not_lit;
   70,431,806 ( 0.03%)          CALLGRIND_START_INSTRUMENTATION;
      114,350 ( 0.00%)          kissat_delay_watching_large (solver, delayed, replacement, other,
      114,350 ( 0.00%)                                       ref);
      114,350 ( 0.00%)          ticks++;
            .                   CALLGRIND_STOP_INSTRUMENTATION;
      105,003 ( 0.00%)        } else if (other_value) {
      174,150 ( 0.00%)          assert (replacement_value < 0);
       58,050 ( 0.00%)          assert (blocking_value < 0);
            .                   assert (other_value < 0);
            .           #if defined(PROBING_PROPAGATION)
      168,900 ( 0.00%)          if (c == ignore) {
       56,894 ( 0.00%)            LOGREF (ref, "conflicting but ignored");
            .                     continue;
       27,556 ( 0.00%)          }
            .           #endif
            .                   LOGREF (ref, "conflicting");
   70,317,456 ( 0.03%)          res = c;
            .           #ifndef CONTINUE_PROPAGATING_AFTER_CONFLICT
    9,565,206 ( 0.00%)          break;
      202,458 ( 0.00%)  #endif
       33,743 ( 0.00%)        } else {
            .                   assert (replacement_value < 0);
            .           #if defined(PROBING_PROPAGATION)
  351,249,850 ( 0.15%)          if (c == ignore) {
   17,671,179 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/fastassign.h:kissat_fast_assign_reference (34,281x)
            .                     LOGREF (ref, "forcing %s but ignored", LOGLIT (other));
   70,249,970 ( 0.03%)            continue;
            .                   }
            .           #endif
            .                   CALLGRIND_START_INSTRUMENTATION;
  257,030,832 ( 0.11%)          kissat_fast_assign_reference (solver, values, assigned, other, ref,
            .                                                 c);
  172,287,389 ( 0.07%)          ticks++;
    2,489,336 ( 0.00%)          CALLGRIND_STOP_INSTRUMENTATION;
  685,415,552 ( 0.29%)        }
    2,891,498 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (42,101x)
      336,808 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (42,101x)
            .               }
  257,030,832 ( 0.11%)    }
   14,323,631 ( 0.01%)  => build/../src/proplit.h:kissat_watch_large_delayed (42,101x)
            .             solver->ticks += ticks;
   42,838,472 ( 0.02%)  
   85,676,944 ( 0.04%)    while (p != end_watches)
            .               *q++ = *p++;
            .             SET_END_OF_WATCHES (*watches, q);
            .           
    2,028,152 ( 0.00%)    kissat_watch_large_delayed (solver, all_watches, delayed);
      579,472 ( 0.00%)  
            .             return res;
       95,044 ( 0.00%)  }
      356,415 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_conflicts (23,761x)
            .           
      120,976 ( 0.00%)  static inline void kissat_update_conflicts_and_trail (kissat *solver,
            6 ( 0.00%)                                                        clause *conflict,
            2 ( 0.00%)                                                        bool flush) {
            7 ( 0.00%)    if (conflict) {
          137 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_empty (1x)
            4 ( 0.00%)  #ifndef PROBING_PROPAGATION
            .               INC (conflicts);
    1,559,696 ( 0.00%)  #endif
          459 ( 0.00%)      if (!solver->level) {
       13,464 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/trail.c:kissat_flush_trail (153x)
      869,208 ( 0.00%)        LOG (PROPAGATION_TYPE " propagation on root-level failed");
            .                 solver->inconsistent = true;
            .                 CHECK_AND_ADD_EMPTY ();
            .                 ADD_EMPTY_TO_PROOF ();
            .               }
            .             } else if (flush && !solver->level && solver->unflushed)
            .               kissat_flush_trail (solver);
            .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/forward.c
--------------------------------------------------------------------------------
Ir                  

-- line 6 ----------------------------------------
         .           #include "rank.h"
         .           #include "report.h"
         .           #include "sort.h"
         .           #include "terminate.h"
         .           
         .           #include <inttypes.h>
         .           
         .           static size_t remove_duplicated_binaries_with_literal (kissat *solver,
   407,676 ( 0.00%)                                                         unsigned lit) {
   747,406 ( 0.00%)    watches *watches = &WATCHES (lit);
   203,838 ( 0.00%)    value *marks = solver->marks;
   203,838 ( 0.00%)    flags *flags = solver->flags;
         .           
   543,568 ( 0.00%)    watch *begin = BEGIN_WATCHES (*watches), *q = begin;
   543,568 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (67,946x)
   543,568 ( 0.00%)    const watch *const end = END_WATCHES (*watches), *p = q;
   543,568 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (67,946x)
         .           
   405,215 ( 0.00%)    while (p != end) {
   444,770 ( 0.00%)      const watch watch = *q++ = *p++;
   177,908 ( 0.00%)      assert (watch.type.binary);
   133,431 ( 0.00%)      const unsigned other = watch.binary.lit;
   533,724 ( 0.00%)      struct flags *f = flags + IDX (other);
   266,862 ( 0.00%)      if (!f->active)
       284 ( 0.00%)        continue;
   266,010 ( 0.00%)      if (!f->subsume)
     1,923 ( 0.00%)        continue;
   212,060 ( 0.00%)      const value marked = marks[other];
    84,824 ( 0.00%)      if (marked) {
        26 ( 0.00%)        q--;
        78 ( 0.00%)        if (lit < other) {
        78 ( 0.00%)          kissat_delete_binary (solver, lit, other);
    26,279 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (13x)
        65 ( 0.00%)          INC (duplicated);
       195 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_duplicated (13x)
         .                 }
         .               } else {
   339,088 ( 0.00%)        const unsigned not_other = NOT (other);
   254,316 ( 0.00%)        if (marks[not_other]) {
         6 ( 0.00%)          LOGBINARY (lit, other,
         .                              "duplicate hyper unary resolution on %s "
         .                              "first antecedent",
         .                              LOGLIT (other));
         6 ( 0.00%)          LOGBINARY (lit, not_other,
         .                              "duplicate hyper unary resolution on %s "
         .                              "second antecedent",
         .                              LOGLIT (not_other));
        13 ( 0.00%)          PUSH_STACK (solver->delayed, lit);
         .                 }
   211,930 ( 0.00%)        marks[other] = 1;
         .               }
         .             }
         .           
   585,480 ( 0.00%)    for (const watch *r = begin; r != q; r++)
   311,157 ( 0.00%)      marks[r->binary.lit] = 0;
         .           
   203,838 ( 0.00%)    if (q == end)
   135,844 ( 0.00%)      return 0;
         .           
        96 ( 0.00%)    size_t removed = end - q;
       384 ( 0.00%)    SET_END_OF_WATCHES (*watches, q);
       192 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (24x)
     2,732 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (24x)
       144 ( 0.00%)    LOG ("removed %zu watches with literal %s", removed, LOGLIT (lit));
         .           
        24 ( 0.00%)    return removed;
   135,892 ( 0.00%)  }
         .           
        10 ( 0.00%)  static void remove_all_duplicated_binary_clauses (kissat *solver) {
        12 ( 0.00%)    LOG ("removing all duplicated irredundant binary clauses");
         .           #if !defined(QUIET) || !defined(NDEBUG)
         2 ( 0.00%)    size_t removed = 0;
         .           #endif
        12 ( 0.00%)    assert (EMPTY_STACK (solver->delayed));
         .           
         6 ( 0.00%)    const flags *const all_flags = solver->flags;
         .           
   207,872 ( 0.00%)    for (all_variables (idx)) {
   259,820 ( 0.00%)      const flags *const flags = all_flags + idx;
   311,784 ( 0.00%)      if (!flags->active)
    19,648 ( 0.00%)        continue;
   252,840 ( 0.00%)      if (!flags->subsume)
     8,167 ( 0.00%)        continue;
   237,811 ( 0.00%)      const unsigned int lit = LIT (idx);
   271,784 ( 0.00%)      const unsigned int not_lit = NOT (lit);
         .           #if !defined(QUIET) || !defined(NDEBUG)
    33,973 ( 0.00%)      removed +=
         .           #endif
   169,865 ( 0.00%)          remove_duplicated_binaries_with_literal (solver, lit);
 3,802,327 ( 0.00%)  => build/../src/forward.c:remove_duplicated_binaries_with_literal (33,973x)
         .           #if !defined(QUIET) || !defined(NDEBUG)
    67,946 ( 0.00%)      removed +=
         .           #endif
   169,865 ( 0.00%)          remove_duplicated_binaries_with_literal (solver, not_lit);
 4,669,577 ( 0.00%)  => build/../src/forward.c:remove_duplicated_binaries_with_literal (33,973x)
         .             }
         8 ( 0.00%)    assert (!(removed & 1));
         .           
        16 ( 0.00%)    size_t units = SIZE_STACK (solver->delayed);
         4 ( 0.00%)    if (units) {
         6 ( 0.00%)      LOG ("found %zu hyper unary resolved units", units);
         3 ( 0.00%)      const value *const values = solver->values;
        17 ( 0.00%)      for (all_stack (unsigned, unit, solver->delayed)) {
         .           
         5 ( 0.00%)        const value value = values[unit];
         2 ( 0.00%)        if (value > 0) {
         .                   LOG ("skipping satisfied resolved unit %s", LOGLIT (unit));
         .                   continue;
         .                 }
         2 ( 0.00%)        if (value < 0) {
         .                   LOG ("found falsified resolved unit %s", LOGLIT (unit));
         .                   CHECK_AND_ADD_EMPTY ();
         .                   ADD_EMPTY_TO_PROOF ();
         .                   solver->inconsistent = true;
         .                   break;
         .                 }
         6 ( 0.00%)        LOG ("new resolved unit clause %s", LOGLIT (unit));
         6 ( 0.00%)        kissat_learned_unit (solver, unit);
     2,853 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (1x)
         .               }
         4 ( 0.00%)      CLEAR_STACK (solver->delayed);
         5 ( 0.00%)      if (!solver->inconsistent)
         3 ( 0.00%)        kissat_flush_units_while_connected (solver);
       772 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/eliminate.c:kissat_flush_units_while_connected (1x)
         .             }
         .           
        23 ( 0.00%)    REPORT (!removed && !units, '2');
    29,496 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (2x)
         6 ( 0.00%)  }
         .           
         .           static void find_forward_subsumption_candidates (kissat *solver,
        12 ( 0.00%)                                                   references *candidates) {
         6 ( 0.00%)    const unsigned clslim = GET_OPTION (subsumeclslim);
         .           
         6 ( 0.00%)    const value *const values = solver->values;
         6 ( 0.00%)    const flags *const flags = solver->flags;
         .           
         8 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
       308 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (2x)
         .           
 2,139,900 ( 0.00%)    for (all_clauses (c)) {
14,468,711 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (237,765x)
 1,426,590 ( 0.00%)      if (last_irredundant && c > last_irredundant)
         1 ( 0.00%)        break;
 1,188,820 ( 0.00%)      if (c->garbage)
    19,570 ( 0.00%)        continue;
   911,916 ( 0.00%)      c->subsume = false;
 1,139,895 ( 0.00%)      if (c->redundant)
    11,964 ( 0.00%)        continue;
   887,988 ( 0.00%)      if (c->size > clslim)
         .                 continue;
   887,988 ( 0.00%)      assert (c->size > 2);
   221,997 ( 0.00%)      unsigned subsume = 0;
 9,085,821 ( 0.00%)      for (all_literals_in_clause (lit, c)) {
 6,581,808 ( 0.00%)        const unsigned idx = IDX (lit);
 4,113,630 ( 0.00%)        const struct flags *f = flags + idx;
 4,113,630 ( 0.00%)        if (f->subsume)
   711,914 ( 0.00%)          subsume++;
 4,936,356 ( 0.00%)        if (values[lit] > 0) {
     4,824 ( 0.00%)          LOGCLS (c, "satisfied by %s", LOGLIT (lit));
     4,020 ( 0.00%)          kissat_mark_clause_as_garbage (solver, c);
   943,225 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (804x)
     4,020 ( 0.00%)          assert (c->garbage);
       804 ( 0.00%)          break;
         .                 }
         .               }
 1,109,985 ( 0.00%)      if (c->garbage)
     1,608 ( 0.00%)        continue;
   442,386 ( 0.00%)      if (subsume < 2)
    34,701 ( 0.00%)        continue;
 1,118,952 ( 0.00%)      const unsigned ref = kissat_reference_clause (solver, c);
21,003,736 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (186,492x)
 2,611,296 ( 0.00%)      PUSH_STACK (*candidates, ref);
 1,066,819 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (34x)
         .             }
         6 ( 0.00%)  }
         .           
         .           static inline unsigned
 4,475,784 ( 0.00%)  get_size_of_reference (kissat *solver, ward *const arena, reference ref) {
 7,459,640 ( 0.00%)    assert (ref < SIZE_STACK (solver->arena));
 4,475,784 ( 0.00%)    const clause *const c = (clause *) (arena + ref);
         .             (void) solver;
 1,491,928 ( 0.00%)    return c->size;
 1,491,928 ( 0.00%)  }
         .           
         .           #define GET_SIZE_OF_REFERENCE(REF) \
         .             get_size_of_reference (solver, arena, (REF))
         .           
         .           static void sort_forward_subsumption_candidates (kissat *solver,
        26 ( 0.00%)                                                   references *candidates) {
         6 ( 0.00%)    reference *references = BEGIN_STACK (*candidates);
        16 ( 0.00%)    size_t size = SIZE_STACK (*candidates);
         6 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
19,584,840 ( 0.01%)    RADIX_SORT (reference, unsigned, size, references, GET_SIZE_OF_REFERENCE);
19,395,064 ( 0.01%)  => build/../src/forward.c:get_size_of_reference (745,964x)
   745,940 ( 0.00%)  => ???:0x000000000010c650 (2x)
     1,058 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (2x)
       468 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (2x)
       272 ( 0.00%)  => ???:0x000000000010c5b0 (2x)
        22 ( 0.00%)  }
         .           
         .           static inline bool forward_literal (kissat *solver, unsigned lit,
         .                                               bool binaries, unsigned *remove,
12,393,603 ( 0.01%)                                      unsigned limit) {
15,147,737 ( 0.01%)    watches *watches = &WATCHES (lit);
 5,508,268 ( 0.00%)    const size_t size_watches = SIZE_WATCHES (*watches);
16,524,804 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,377,067x)
         .           
 2,754,134 ( 0.00%)    if (!size_watches)
   438,684 ( 0.00%)      return false;
         .           
 3,473,175 ( 0.00%)    if (size_watches > limit)
         .               return false;
         .           
 9,261,800 ( 0.00%)    watch *begin = BEGIN_WATCHES (*watches), *q = begin;
 9,261,800 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,157,725x)
 9,261,800 ( 0.00%)    const watch *const end = END_WATCHES (*watches), *p = q;
 9,261,800 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,157,725x)
         .           
 6,946,350 ( 0.00%)    uint64_t steps = 1 + kissat_cache_lines (size_watches, sizeof (watch));
34,731,750 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (1,157,725x)
 1,157,725 ( 0.00%)    uint64_t checks = 0;
         .           
 3,473,175 ( 0.00%)    const value *const values = solver->values;
 3,473,175 ( 0.00%)    const value *const marks = solver->marks;
 3,473,175 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
         .           
 1,157,725 ( 0.00%)    bool subsume = false;
         .           
20,534,959 ( 0.01%)    while (p != end) {
49,347,700 ( 0.02%)      const watch watch = *q++ = *p++;
         .           
19,739,080 ( 0.01%)      if (watch.type.binary) {
12,093,944 ( 0.01%)        if (!binaries)
 2,005,136 ( 0.00%)          continue;
         .           
 3,055,050 ( 0.00%)        const unsigned other = watch.binary.lit;
 6,110,100 ( 0.00%)        if (marks[other]) {
    28,134 ( 0.00%)          LOGBINARY (lit, other, "forward subsuming");
     4,689 ( 0.00%)          subsume = true;
     4,689 ( 0.00%)          break;
         .                 } else {
 8,109,288 ( 0.00%)          const unsigned not_other = NOT (other);
 6,081,966 ( 0.00%)          if (marks[not_other]) {
    35,406 ( 0.00%)            LOGBINARY (lit, other, "forward %s strengthener", LOGLIT (other));
    23,604 ( 0.00%)            assert (!subsume);
    17,703 ( 0.00%)            *remove = not_other;
     5,901 ( 0.00%)            break;
         .                   }
         .                 }
         .               } else {
 5,733,852 ( 0.00%)        const reference ref = watch.large.ref;
19,112,840 ( 0.01%)        assert (ref < SIZE_STACK (solver->arena));
11,467,704 ( 0.00%)        clause *d = (clause *) (arena + ref);
 1,911,284 ( 0.00%)        steps++;
         .           
 9,556,420 ( 0.00%)        if (d->garbage) {
         .                   q--;
         .                   continue;
         .                 }
         .           
 1,911,284 ( 0.00%)        checks++;
 1,911,284 ( 0.00%)        subsume = true;
         .           
 1,911,284 ( 0.00%)        unsigned candidate = INVALID_LIT;
         .           
42,608,439 ( 0.02%)        for (all_literals_in_clause (other, d)) {
18,466,326 ( 0.01%)          if (marks[other])
   755,001 ( 0.00%)            continue;
11,613,600 ( 0.00%)          const value value = values[other];
 4,645,440 ( 0.00%)          if (value < 0)
     1,509 ( 0.00%)            continue;
 4,642,422 ( 0.00%)          if (value > 0) {
         .                     LOGCLS (d, "satisfied by %s", LOGLIT (other));
         .                     kissat_mark_clause_as_garbage (solver, d);
         .                     assert (d->garbage);
         .                     candidate = INVALID_LIT;
         .                     subsume = false;
         .                     break;
         .                   }
 9,284,844 ( 0.00%)          if (!subsume) {
   827,662 ( 0.00%)            assert (candidate != INVALID_LIT);
   413,831 ( 0.00%)            candidate = INVALID_LIT;
   413,831 ( 0.00%)            break;
         .                   }
 1,907,380 ( 0.00%)          subsume = false;
15,259,040 ( 0.01%)          const unsigned not_other = NOT (other);
11,444,280 ( 0.00%)          if (!marks[not_other]) {
 2,974,772 ( 0.00%)            assert (candidate == INVALID_LIT);
 1,487,386 ( 0.00%)            break;
         .                   }
 1,259,982 ( 0.00%)          candidate = not_other;
         .                 }
         .           
 9,556,420 ( 0.00%)        if (d->garbage) {
         .                   assert (!subsume);
         .                   q--;
         .                   break;
         .                 }
         .           
 3,822,568 ( 0.00%)        if (subsume) {
    23,424 ( 0.00%)          LOGCLS (d, "forward subsuming");
     7,808 ( 0.00%)          assert (subsume);
     3,904 ( 0.00%)          break;
         .                 }
         .           
 3,814,760 ( 0.00%)        if (candidate != INVALID_LIT) {
    36,978 ( 0.00%)          LOGCLS (d, "forward %s strengthener", LOGLIT (candidate));
    24,652 ( 0.00%)          *remove = candidate;
         .                 }
         .               }
         .             }
         .           
 3,473,175 ( 0.00%)    if (p != q) {
         .               while (p != end)
         .                 *q++ = *p++;
         .           
         .               SET_END_OF_WATCHES (*watches, q);
         .             }
         .           
 6,946,350 ( 0.00%)    ADD (subsumption_checks, checks);
23,154,500 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_subsumption_checks (1,157,725x)
 6,946,350 ( 0.00%)    ADD (forward_checks, checks);
23,154,500 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_forward_checks (1,157,725x)
 6,946,350 ( 0.00%)    ADD (forward_steps, steps);
23,154,500 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_forward_steps (1,157,725x)
         .           
 1,157,725 ( 0.00%)    return subsume;
 2,754,134 ( 0.00%)  }
         .           
         .           static inline bool forward_marked_clause (kissat *solver, clause *c,
 1,118,952 ( 0.00%)                                            unsigned *remove) {
   559,476 ( 0.00%)    const unsigned limit = GET_OPTION (subsumeocclim);
   559,476 ( 0.00%)    const flags *const flags = solver->flags;
   745,968 ( 0.00%)    INC (forward_steps);
 2,797,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_forward_steps (186,492x)
         .           
 7,626,027 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
 5,557,736 ( 0.00%)      const unsigned idx = IDX (lit);
 6,252,453 ( 0.00%)      if (!flags[idx].active)
     1,887 ( 0.00%)        continue;
         .           
 8,313,960 ( 0.00%)      assert (!VALUE (lit));
         .           
 7,621,130 ( 0.00%)      if (forward_literal (solver, lit, true, remove, limit))
304,772,430 ( 0.13%)  => build/../src/forward.c:forward_literal (692,830x)
    17,186 ( 0.00%)        return true;
         .           
12,316,266 ( 0.01%)      if (forward_literal (solver, NOT (lit), false, remove, limit))
266,625,394 ( 0.11%)  => build/../src/forward.c:forward_literal (684,237x)
         .                 return true;
         .             }
   177,899 ( 0.00%)    return false;
   372,984 ( 0.00%)  }
         .           
         .           static bool forward_subsumed_clause (kissat *solver, clause *c,
         .                                                bool *strengthened,
 2,051,412 ( 0.00%)                                       unsigneds *new_binaries) {
 1,305,444 ( 0.00%)    assert (!c->garbage);
   745,968 ( 0.00%)    LOGCLS2 (c, "trying to forward subsume");
         .           
   559,476 ( 0.00%)    value *marks = solver->marks;
   559,476 ( 0.00%)    const value *const values = solver->values;
   372,984 ( 0.00%)    unsigned non_false = 0, unit = INVALID_LIT;
         .           
 7,814,042 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
 3,583,330 ( 0.00%)      const value value = values[lit];
 1,433,332 ( 0.00%)      if (value < 0)
     2,069 ( 0.00%)        continue;
 1,429,194 ( 0.00%)      if (value > 0) {
         .                 LOGCLS (c, "satisfied by %s", LOGLIT (lit));
         .                 kissat_mark_clause_as_garbage (solver, c);
         .                 assert (c->garbage);
         .                 break;
         .               }
 2,858,388 ( 0.00%)      marks[lit] = 1;
 3,572,985 ( 0.00%)      if (non_false++)
 1,584,315 ( 0.00%)        unit ^= lit;
         .               else
   372,984 ( 0.00%)        unit = lit;
         .             }
         .           
 1,305,444 ( 0.00%)    if (c->garbage || non_false <= 1)
         .               for (all_literals_in_clause (lit, c))
         .                 marks[lit] = 0;
         .           
   932,460 ( 0.00%)    if (c->garbage)
         .               return false;
         .           
   372,984 ( 0.00%)    if (!non_false) {
         .               LOGCLS (c, "found falsified clause");
         .               CHECK_AND_ADD_EMPTY ();
         .               ADD_EMPTY_TO_PROOF ();
         .               solver->inconsistent = true;
         .               return false;
         .             }
         .           
   372,984 ( 0.00%)    if (non_false == 1) {
         .               assert (VALID_INTERNAL_LITERAL (unit));
         .               LOG ("new remaining non-false literal unit clause %s", LOGLIT (unit));
         .               kissat_learned_unit (solver, unit);
         .               kissat_mark_clause_as_garbage (solver, c);
         .               kissat_flush_units_while_connected (solver);
         .               return false;
         .             }
         .           
   186,492 ( 0.00%)    unsigned remove = INVALID_LIT;
 1,305,444 ( 0.00%)    const bool subsume = forward_marked_clause (solver, c, &remove);
625,436,604 ( 0.26%)  => build/../src/forward.c:forward_marked_clause (186,492x)
         .           
 8,530,708 ( 0.00%)    for (all_literals_in_clause (lit, c))
 2,866,664 ( 0.00%)      marks[lit] = 0;
         .           
   372,984 ( 0.00%)    if (subsume) {
    51,558 ( 0.00%)      LOGCLS (c, "forward subsumed");
    42,965 ( 0.00%)      kissat_mark_clause_as_garbage (solver, c);
32,864,020 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (8,593x)
    34,372 ( 0.00%)      INC (subsumed);
   128,895 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_subsumed (8,593x)
    42,965 ( 0.00%)      INC (forward_subsumed);
   128,895 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_forward_subsumed (8,593x)
   533,697 ( 0.00%)    } else if (remove != INVALID_LIT) {
    12,240 ( 0.00%)      *strengthened = true;
    24,480 ( 0.00%)      INC (strengthened);
    91,800 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_strengthened (6,120x)
    24,480 ( 0.00%)      INC (forward_strengthened);
    91,800 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_forward_strengthened (6,120x)
    36,720 ( 0.00%)      LOGCLS (c, "forward strengthening by removing %s in", LOGLIT (remove));
    12,240 ( 0.00%)      if (non_false == 2) {
         .                 unit ^= remove;
         .                 assert (VALID_INTERNAL_LITERAL (unit));
         .                 LOG ("forward strengthened unit clause %s", LOGLIT (unit));
         .                 kissat_learned_unit (solver, unit);
         .                 kissat_mark_clause_as_garbage (solver, c);
         .                 kissat_flush_units_while_connected (solver);
         .                 LOGCLS (c, "%s satisfied", LOGLIT (unit));
         .               } else {
    24,480 ( 0.00%)        SHRINK_CLAUSE_IN_PROOF (c, remove, INVALID_LIT);
    61,200 ( 0.00%)        CHECK_SHRINK_CLAUSE (c, remove, INVALID_LIT);
75,630,832 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_shrink_clause (6,120x)
    30,600 ( 0.00%)        kissat_mark_removed_literal (solver, remove);
   234,210 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (6,120x)
    12,240 ( 0.00%)        if (non_false > 3) {
    12,948 ( 0.00%)          unsigned *lits = c->lits;
     4,316 ( 0.00%)          unsigned new_size = 0;
   175,716 ( 0.00%)          for (unsigned i = 0; i < c->size; i++) {
   179,784 ( 0.00%)            const unsigned lit = lits[i];
    89,892 ( 0.00%)            if (remove == lit)
     8,632 ( 0.00%)              continue;
   128,240 ( 0.00%)            const value value = values[lit];
    51,296 ( 0.00%)            if (value < 0)
         3 ( 0.00%)              continue;
    51,290 ( 0.00%)            assert (!value);
   230,805 ( 0.00%)            lits[new_size++] = lit;
   153,870 ( 0.00%)            kissat_mark_added_literal (solver, lit);
 1,333,611 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (25,645x)
         .                   }
    17,264 ( 0.00%)          assert (new_size == non_false - 1);
     8,632 ( 0.00%)          assert (new_size > 2);
    25,896 ( 0.00%)          if (!c->shrunken) {
    16,884 ( 0.00%)            c->shrunken = true;
    33,768 ( 0.00%)            lits[c->size - 1] = INVALID_LIT;
         .                   }
    12,948 ( 0.00%)          c->size = new_size;
     8,632 ( 0.00%)          c->searched = 2;
    17,264 ( 0.00%)          c->subsume = true;
    25,896 ( 0.00%)          LOGCLS (c, "forward strengthened");
         .                 } else {
     3,608 ( 0.00%)          assert (non_false == 3);
    10,824 ( 0.00%)          LOGCLS (c, "garbage");
    12,628 ( 0.00%)          assert (!c->garbage);
     7,216 ( 0.00%)          const size_t bytes = kissat_actual_bytes_of_clause (c);
    86,651 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_actual_bytes_of_clause (1,804x)
    10,824 ( 0.00%)          ADD (arena_garbage, bytes);
    36,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_arena_garbage (1,804x)
     7,216 ( 0.00%)          c->garbage = true;
     3,608 ( 0.00%)          unsigned first = INVALID_LIT, second = INVALID_LIT;
    64,979 ( 0.00%)          for (all_literals_in_clause (lit, c)) {
    16,251 ( 0.00%)            if (lit == remove)
     1,804 ( 0.00%)              continue;
    18,065 ( 0.00%)            const value value = values[lit];
     7,226 ( 0.00%)            if (value < 0)
         5 ( 0.00%)              continue;
     7,216 ( 0.00%)            assert (!value);
     7,216 ( 0.00%)            if (first == INVALID_LIT)
     5,412 ( 0.00%)              first = lit;
         .                     else {
     3,608 ( 0.00%)              assert (second == INVALID_LIT);
     3,608 ( 0.00%)              second = lit;
         .                     }
    21,648 ( 0.00%)            kissat_mark_added_literal (solver, lit);
   187,871 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (3,608x)
         .                   }
     3,608 ( 0.00%)          assert (first != INVALID_LIT);
     3,608 ( 0.00%)          assert (second != INVALID_LIT);
    10,824 ( 0.00%)          LOGBINARY (first, second, "forward strengthened");
    10,824 ( 0.00%)          kissat_watch_other (solver, first, second);
   263,384 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_other (1,804x)
    10,824 ( 0.00%)          kissat_watch_other (solver, second, first);
   263,384 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_other (1,804x)
     3,608 ( 0.00%)          assert (new_binaries);
     7,216 ( 0.00%)          assert (solver->statistics.clauses_irredundant);
     9,020 ( 0.00%)          solver->statistics.clauses_irredundant--;
     7,216 ( 0.00%)          assert (solver->statistics.clauses_binary < UINT64_MAX);
     9,020 ( 0.00%)          solver->statistics.clauses_binary++;
    23,692 ( 0.00%)          PUSH_STACK (*new_binaries, first);
   537,283 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (20x)
    23,452 ( 0.00%)          PUSH_STACK (*new_binaries, second);
         .                 }
         .               }
         .             }
         .           
   186,492 ( 0.00%)    return subsume;
   932,460 ( 0.00%)  }
         .           
 1,232,665 ( 0.00%)  static void connect_subsuming (kissat *solver, unsigned occlim, clause *c) {
 1,232,665 ( 0.00%)    assert (!c->garbage);
         .           
   176,095 ( 0.00%)    unsigned min_lit = INVALID_LIT;
   176,095 ( 0.00%)    size_t min_occs = MAX_SIZE_T;
         .           
   528,285 ( 0.00%)    const flags *const all_flags = solver->flags;
         .           
   176,095 ( 0.00%)    bool subsume = true;
         .           
 6,848,497 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
 4,907,072 ( 0.00%)      const unsigned idx = IDX (lit);
 3,066,920 ( 0.00%)      const flags *const flags = all_flags + idx;
 3,680,304 ( 0.00%)      if (!flags->active)
     3,456 ( 0.00%)        continue;
 3,669,936 ( 0.00%)      if (!flags->subsume) {
    21,654 ( 0.00%)        subsume = false;
    21,654 ( 0.00%)        break;
         .               }
 6,490,022 ( 0.00%)      watches *watches = &WATCHES (lit);
 2,360,008 ( 0.00%)      const size_t occs = SIZE_WATCHES (*watches);
 7,080,024 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (590,002x)
 2,458,289 ( 0.00%)      if (min_lit != INVALID_LIT && occs > min_occs)
   250,259 ( 0.00%)        continue;
   679,486 ( 0.00%)      min_lit = lit;
 1,019,229 ( 0.00%)      min_occs = occs;
         .             }
   704,380 ( 0.00%)    if (!subsume)
    43,308 ( 0.00%)      return;
         .           
   463,323 ( 0.00%)    if (min_occs > occlim)
         .               return;
   926,646 ( 0.00%)    LOG ("connecting %s with %zu occurrences", LOGLIT (min_lit), min_occs);
   926,646 ( 0.00%)    const reference ref = kissat_reference_clause (solver, c);
17,409,909 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (154,441x)
 1,081,087 ( 0.00%)    kissat_connect_literal (solver, min_lit, ref);
23,166,774 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_connect_literal (154,441x)
   352,190 ( 0.00%)  }
         .           
        20 ( 0.00%)  static bool forward_subsume_all_clauses (kissat *solver) {
         .             references candidates;
        10 ( 0.00%)    INIT_STACK (candidates);
         .           
        10 ( 0.00%)    find_forward_subsumption_candidates (solver, &candidates);
81,195,227 ( 0.03%)  => build/../src/forward.c:find_forward_subsumption_candidates (2x)
         .           #ifndef QUIET
        10 ( 0.00%)    size_t scheduled = SIZE_STACK (candidates);
        64 ( 0.00%)    kissat_phase (
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_forward_subsumptions (2x)
         .                 solver, "forward", GET (forward_subsumptions),
         .                 "scheduled %zu irredundant clauses %.0f%%", scheduled,
         4 ( 0.00%)        kissat_percent (scheduled, solver->statistics.clauses_irredundant));
         .           #endif
        10 ( 0.00%)    sort_forward_subsumption_candidates (solver, &candidates);
39,727,718 ( 0.02%)  => build/../src/forward.c:sort_forward_subsumption_candidates (2x)
         .           
         4 ( 0.00%)    const reference *const end_of_candidates = END_STACK (candidates);
         4 ( 0.00%)    reference *p = BEGIN_STACK (candidates);
         .           
         .           #ifndef QUIET
         2 ( 0.00%)    size_t subsumed = 0;
         2 ( 0.00%)    size_t strengthened = 0;
         2 ( 0.00%)    size_t checked = 0;
         .           #endif
         6 ( 0.00%)    const unsigned occlim = GET_OPTION (subsumeocclim);
         .           
         .             unsigneds new_binaries;
        10 ( 0.00%)    INIT_STACK (new_binaries);
         .           
         .             {
       276 ( 0.00%)      SET_EFFORT_LIMIT (steps_limit, forward, forward_steps);
    13,416 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (16x)
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
       188 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4x)
         .           
         6 ( 0.00%)      ward *arena = BEGIN_STACK (solver->arena);
         .           
   559,486 ( 0.00%)      while (p != end_of_candidates) {
   745,968 ( 0.00%)        if (solver->statistics.forward_steps > steps_limit)
         .                   break;
 2,051,412 ( 0.00%)        if (TERMINATED (forward_terminated_1))
 4,102,824 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (186,492x)
         .                   break;
   932,460 ( 0.00%)        reference ref = *p++;
 1,118,952 ( 0.00%)        clause *c = (clause *) (arena + ref);
 1,305,444 ( 0.00%)        assert (kissat_clause_in_arena (solver, c));
17,460,388 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_clause_in_arena (186,492x)
 1,305,444 ( 0.00%)        assert (!c->garbage);
         .           #ifndef QUIET
   186,492 ( 0.00%)        checked++;
         .           #endif
   186,492 ( 0.00%)        bool not_subsumed_but_strengthened = false;
 1,491,936 ( 0.00%)        if (forward_subsumed_clause (
785,459,922 ( 0.33%)  => build/../src/forward.c:forward_subsumed_clause (186,492x)
         .                         solver, c, &not_subsumed_but_strengthened, &new_binaries)) {
         .           #ifndef QUIET
    17,186 ( 0.00%)          subsumed++;
         .           #endif
   533,697 ( 0.00%)        } else if (not_subsumed_but_strengthened) {
         .           #ifndef QUIET
     6,120 ( 0.00%)          strengthened++;
         .           #endif
         .                 }
   745,968 ( 0.00%)        if (solver->inconsistent)
         .                   break;
 1,305,444 ( 0.00%)        if (!c->garbage)
 1,056,570 ( 0.00%)          connect_subsuming (solver, occlim, c);
91,152,973 ( 0.04%)  => build/../src/forward.c:connect_subsuming (176,095x)
         .               }
         .             }
         .           #ifndef QUIET
         4 ( 0.00%)    if (subsumed)
       106 ( 0.00%)      kissat_phase (solver, "forward", GET (forward_subsumptions),
       136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_forward_subsumptions (2x)
         .                             "subsumed %zu clauses %.2f%% of %zu checked %.0f%%",
         .                             subsumed, kissat_percent (subsumed, checked), checked,
         .                             kissat_percent (checked, scheduled));
         4 ( 0.00%)    if (strengthened)
       106 ( 0.00%)      kissat_phase (solver, "forward", GET (forward_subsumptions),
       136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_forward_subsumptions (2x)
         .                             "strengthened %zu clauses %.2f%% of %zu checked %.0f%%",
         .                             strengthened, kissat_percent (strengthened, checked),
         .                             checked, kissat_percent (checked, scheduled));
         4 ( 0.00%)    if (!subsumed && !strengthened)
         .               kissat_phase (solver, "forward", GET (forward_subsumptions),
         .                             "no clause subsumed nor strengthened "
         .                             "out of %zu checked %.0f%%",
         .                             checked, kissat_percent (checked, scheduled));
         .           #endif
         6 ( 0.00%)    struct flags *flags = solver->flags;
         .           
   207,872 ( 0.00%)    for (all_variables (idx))
   363,748 ( 0.00%)      flags[idx].subsume = false;
         .           
         6 ( 0.00%)    ward *arena = BEGIN_STACK (solver->arena);
         2 ( 0.00%)    unsigned reactivated = 0;
         .           #ifndef QUIET
         2 ( 0.00%)    size_t remain = 0;
         .           #endif
   559,488 ( 0.00%)    for (reference *q = BEGIN_STACK (candidates); q != end_of_candidates;
   186,492 ( 0.00%)         q++) {
   559,476 ( 0.00%)      const reference ref = *q;
 1,118,952 ( 0.00%)      clause *c = (clause *) (arena + ref);
 1,305,444 ( 0.00%)      assert (kissat_clause_in_arena (solver, c));
17,460,652 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_clause_in_arena (186,492x)
   932,460 ( 0.00%)      if (c->garbage)
    20,794 ( 0.00%)        continue;
 1,584,855 ( 0.00%)      if (q < p && !c->subsume)
   171,779 ( 0.00%)        continue;
         .           #ifndef QUIET
     4,316 ( 0.00%)      remain++;
         .           #endif
   244,255 ( 0.00%)      for (all_literals_in_clause (lit, c)) {
   205,160 ( 0.00%)        const unsigned idx = IDX (lit);
   128,225 ( 0.00%)        struct flags *f = flags + idx;
   128,225 ( 0.00%)        if (f->subsume)
    20,532 ( 0.00%)          continue;
    30,678 ( 0.00%)        LOGCLS (c,
         .                         "reactivating subsume flag of %s "
         .                         "in remaining or strengthened",
         .                         LOGVAR (idx));
    20,452 ( 0.00%)        f->subsume = true;
    10,226 ( 0.00%)        assert (reactivated < UINT_MAX);
    10,226 ( 0.00%)        reactivated++;
         .               }
         .             }
         .           
     7,226 ( 0.00%)    while (!EMPTY_STACK (new_binaries)) {
         .               unsigned lits[2];
    18,040 ( 0.00%)      lits[1] = POP_STACK (new_binaries);
    18,040 ( 0.00%)      lits[0] = POP_STACK (new_binaries);
    18,040 ( 0.00%)      for (unsigned i = 0; i < 2; i++) {
    10,824 ( 0.00%)        const unsigned lit = lits[i];
    28,864 ( 0.00%)        const unsigned idx = IDX (lit);
    18,040 ( 0.00%)        struct flags *f = flags + idx;
    18,040 ( 0.00%)        if (f->subsume)
     1,823 ( 0.00%)          continue;
    10,710 ( 0.00%)        LOGBINARY (lits[0], lits[1],
         .                            "reactivating subsume flag of %s "
         .                            "in strengthened binary clause",
         .                            LOGVAR (idx));
     7,140 ( 0.00%)        f->subsume = true;
     3,570 ( 0.00%)        assert (reactivated < UINT_MAX);
     3,570 ( 0.00%)        reactivated++;
         .               }
         .             }
        30 ( 0.00%)    RELEASE_STACK (new_binaries);
       486 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
         .           
        50 ( 0.00%)    kissat_very_verbose (solver,
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         .                                  "marked %u variables %.0f%% to be reconsidered "
         .                                  "in next forward subsumption",
         .                                  reactivated,
         4 ( 0.00%)                         kissat_percent (reactivated, solver->active));
         .           #ifndef QUIET
         4 ( 0.00%)    if (remain)
        68 ( 0.00%)      kissat_phase (solver, "forward", GET (forward_subsumptions),
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_forward_subsumptions (2x)
         .                             "%zu unchecked clauses remain %.0f%%", remain,
         .                             kissat_percent (remain, scheduled));
         .             else
         .               kissat_phase (solver, "forward", GET (forward_subsumptions),
         .                             "all %zu scheduled clauses checked", scheduled);
         .           #endif
        30 ( 0.00%)    RELEASE_STACK (candidates);
   256,299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        16 ( 0.00%)    REPORT (!subsumed, 's');
    58,915 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (2x)
         .           
         .             bool completed;
         8 ( 0.00%)    if (solver->inconsistent)
         .               completed = true;
         4 ( 0.00%)    else if (reactivated)
         4 ( 0.00%)      completed = false;
         .             else
         .               completed = true;
         .           #ifndef QUIET
        20 ( 0.00%)    kissat_very_verbose (solver, "forward subsumption considered %scomplete",
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         .                                  completed ? "" : "in");
         .           #endif
         2 ( 0.00%)    return completed;
        16 ( 0.00%)  }
         .           
        10 ( 0.00%)  bool kissat_forward_subsume_during_elimination (kissat *solver) {
        28 ( 0.00%)    START (subsume);
       192 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (2x)
        18 ( 0.00%)    START (forward);
         8 ( 0.00%)    assert (GET_OPTION (forward));
         8 ( 0.00%)    INC (forward_subsumptions);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_forward_subsumptions (2x)
        10 ( 0.00%)    assert (!solver->watching);
         6 ( 0.00%)    remove_all_duplicated_binary_clauses (solver);
10,516,558 ( 0.00%)  => build/../src/forward.c:remove_all_duplicated_binary_clauses (2x)
         2 ( 0.00%)    bool complete = true;
        10 ( 0.00%)    if (!solver->inconsistent)
         8 ( 0.00%)      complete = forward_subsume_all_clauses (solver);
1,058,417,811 ( 0.45%)  => build/../src/forward.c:forward_subsume_all_clauses (2x)
        18 ( 0.00%)    STOP (forward);
        28 ( 0.00%)    STOP (subsume);
       228 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (2x)
         2 ( 0.00%)    return complete;
         4 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/arena.h
--------------------------------------------------------------------------------
Ir                   

-- line 30 ----------------------------------------
          .           void kissat_shrink_arena (struct kissat *);
          .           
          .           #if !defined(NDEBUG) || defined(LOGGING)
          .           
          .           bool kissat_clause_in_arena (const struct kissat *, const struct clause *);
          .           
          .           #endif
          .           
659,596,620 ( 0.28%)  static inline word kissat_align_ward (word w) {
          .           #ifdef COMPACT
          .             return kissat_align_word (w);
          .           #else
494,697,465 ( 0.21%)    return kissat_align_w2rd (w);
2,565,239,524 ( 1.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_align_w2rd (164,899,155x)
          .           #endif
329,798,310 ( 0.14%)  }
          .           
          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/inline.h
--------------------------------------------------------------------------------
Ir                     

-- line 7 ----------------------------------------
            .           #ifdef METRICS
            .           
            .           static inline size_t kissat_allocated (kissat *solver) {
            .             return solver->statistics.allocated_current;
            .           }
            .           
            .           #endif
            .           
      261,476 ( 0.00%)  static inline bool kissat_propagated (kissat *solver) {
      392,214 ( 0.00%)    assert (BEGIN_ARRAY (solver->trail) <= solver->propagate);
      392,214 ( 0.00%)    assert (solver->propagate <= END_ARRAY (solver->trail));
      392,214 ( 0.00%)    return solver->propagate == END_ARRAY (solver->trail);
      130,738 ( 0.00%)  }
            .           
          159 ( 0.00%)  static inline bool kissat_trail_flushed (kissat *solver) {
          689 ( 0.00%)    return !solver->unflushed && EMPTY_ARRAY (solver->trail);
          106 ( 0.00%)  }
            .           
          582 ( 0.00%)  static inline void kissat_reset_propagate (kissat *solver) {
          776 ( 0.00%)    solver->propagate = BEGIN_ARRAY (solver->trail);
          582 ( 0.00%)  }
            .           
    4,278,085 ( 0.00%)  static inline value kissat_fixed (kissat *solver, unsigned lit) {
    4,278,085 ( 0.00%)    assert (lit < LITS);
    5,133,702 ( 0.00%)    const value res = solver->values[lit];
    1,711,234 ( 0.00%)    if (!res)
    1,280,260 ( 0.00%)      return 0;
    4,309,740 ( 0.00%)    if (LEVEL (lit))
      425,600 ( 0.00%)      return 0;
        2,687 ( 0.00%)    return res;
    1,711,234 ( 0.00%)  }
            .           
            .           static inline void kissat_mark_removed_literal (kissat *solver,
    5,037,200 ( 0.00%)                                                  unsigned lit) {
    8,059,520 ( 0.00%)    const unsigned idx = IDX (lit);
   10,074,400 ( 0.00%)    flags *flags = FLAGS (idx);
    5,037,200 ( 0.00%)    if (flags->fixed)
       34,898 ( 0.00%)      return;
    6,807,794 ( 0.00%)    if (!flags->eliminate) {
      462,588 ( 0.00%)      LOG ("marking %s to be eliminated", LOGVAR (idx));
      308,392 ( 0.00%)      flags->eliminate = true;
      385,490 ( 0.00%)      INC (variables_eliminate);
    1,156,470 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_variables_eliminate (77,098x)
            .             }
    2,014,880 ( 0.00%)  }
            .           
            .           static inline void kissat_mark_added_literal (kissat *solver,
    7,399,280 ( 0.00%)                                                unsigned lit) {
   11,838,848 ( 0.01%)    const unsigned idx = IDX (lit);
   14,798,560 ( 0.01%)    flags *flags = FLAGS (idx);
    8,879,136 ( 0.00%)    if (!flags->subsume) {
      376,662 ( 0.00%)      LOG ("marking %s to forward subsume", LOGVAR (idx));
      251,108 ( 0.00%)      flags->subsume = true;
      251,108 ( 0.00%)      INC (variables_subsume);
      941,655 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_variables_subsume (62,777x)
            .             }
   17,758,272 ( 0.01%)    const unsigned bit = 1u << NEGATED (lit);
   11,838,848 ( 0.01%)    if (!(flags->factor & bit)) {
    2,492,149 ( 0.00%)      flags->factor |= bit;
      879,582 ( 0.00%)      LOG ("marking literal %s to factor", LOGLIT (lit));
      586,388 ( 0.00%)      INC (literals_factor);
    2,198,955 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_literals_factor (146,597x)
            .             }
    4,439,568 ( 0.00%)  }
            .           
            .           static inline void
   61,847,106 ( 0.03%)  kissat_push_large_watch (kissat *solver, watches *watches, reference ref) {
   41,231,404 ( 0.02%)    const watch watch = kissat_large_watch (ref);
  237,080,573 ( 0.10%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_large_watch (10,307,851x)
   61,847,106 ( 0.03%)    PUSH_WATCHES (*watches, watch);
  952,453,896 ( 0.40%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (10,307,851x)
   30,923,553 ( 0.01%)  }
            .           
            .           static inline void kissat_push_binary_watch (kissat *solver,
            .                                                        watches *watches,
    2,933,172 ( 0.00%)                                               unsigned other) {
    1,955,448 ( 0.00%)    const watch watch = kissat_binary_watch (other);
   10,754,964 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (488,862x)
    2,933,172 ( 0.00%)    PUSH_WATCHES (*watches, watch);
  109,374,037 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (488,862x)
    1,466,586 ( 0.00%)  }
            .           
            .           static inline void kissat_push_blocking_watch (kissat *solver,
            .                                                          watches *watches,
            .                                                          unsigned blocking,
  262,347,862 ( 0.11%)                                                 reference ref) {
  149,913,064 ( 0.06%)    assert (solver->watching);
  149,913,064 ( 0.06%)    const watch head = kissat_blocking_watch (blocking);
  862,000,118 ( 0.36%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_blocking_watch (37,478,266x)
  224,869,596 ( 0.10%)    PUSH_WATCHES (*watches, head);
2,824,812,444 ( 1.19%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (37,478,266x)
  149,913,064 ( 0.06%)    const watch tail = kissat_large_watch (ref);
  862,000,118 ( 0.36%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_large_watch (37,478,266x)
  224,869,596 ( 0.10%)    PUSH_WATCHES (*watches, tail);
2,706,246,616 ( 1.14%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (37,478,266x)
  112,434,798 ( 0.05%)  }
            .           
            .           static inline void kissat_watch_other (kissat *solver, unsigned lit,
    3,422,034 ( 0.00%)                                         unsigned other) {
    2,933,172 ( 0.00%)    LOGBINARY (lit, other, "watching %s blocking %s in", LOGLIT (lit),
            .                        LOGLIT (other));
    5,377,482 ( 0.00%)    watches *watches = &WATCHES (lit);
    2,933,172 ( 0.00%)    kissat_push_binary_watch (solver, watches, other);
  129,417,379 ( 0.05%)  => build/../src/inline.h:kissat_push_binary_watch (488,862x)
    1,955,448 ( 0.00%)  }
            .           
            .           static inline void kissat_watch_binary (kissat *solver, unsigned a,
    1,455,762 ( 0.00%)                                          unsigned b) {
    1,455,762 ( 0.00%)    kissat_watch_other (solver, a, b);
   76,418,292 ( 0.03%)  => build/../src/inline.h:kissat_watch_other (242,627x)
    1,455,762 ( 0.00%)    kissat_watch_other (solver, b, a);
   69,093,627 ( 0.03%)  => build/../src/inline.h:kissat_watch_other (242,627x)
      727,881 ( 0.00%)  }
            .           
            .           static inline void kissat_watch_blocking (kissat *solver, unsigned lit,
            .                                                     unsigned blocking,
    2,100,864 ( 0.00%)                                            reference ref) {
    1,050,432 ( 0.00%)    assert (solver->watching);
    1,575,648 ( 0.00%)    LOGREF3 (ref, "watching %s blocking %s in", LOGLIT (lit),
            .                      LOGLIT (blocking));
    2,888,688 ( 0.00%)    watches *watches = &WATCHES (lit);
    1,575,648 ( 0.00%)    kissat_push_blocking_watch (solver, watches, blocking, ref);
   81,193,008 ( 0.03%)  => build/../src/inline.h:kissat_push_blocking_watch (262,608x)
    1,050,432 ( 0.00%)  }
            .           
            .           static inline void kissat_unwatch_blocking (kissat *solver, unsigned lit,
       42,192 ( 0.00%)                                              reference ref) {
       28,128 ( 0.00%)    assert (solver->watching);
       42,192 ( 0.00%)    LOGREF3 (ref, "unwatching %s in", LOGLIT (lit));
       77,352 ( 0.00%)    watches *watches = &WATCHES (lit);
       42,192 ( 0.00%)    kissat_remove_blocking_watch (solver, watches, ref);
    2,148,038 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_remove_blocking_watch (7,032x)
       21,096 ( 0.00%)  }
            .           
            .           static inline void kissat_disconnect_binary (kissat *solver, unsigned lit,
       62,946 ( 0.00%)                                               unsigned other) {
       52,455 ( 0.00%)    assert (!solver->watching);
      115,401 ( 0.00%)    watches *watches = &WATCHES (lit);
       41,964 ( 0.00%)    const watch watch = kissat_binary_watch (other);
      230,802 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (10,491x)
       62,946 ( 0.00%)    REMOVE_WATCHES (*watches, watch);
    8,468,803 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_remove_from_vector (10,491x)
       31,473 ( 0.00%)  }
            .           
            .           static inline void
            .           kissat_disconnect_reference (kissat *solver, unsigned lit, reference ref) {
            .             assert (!solver->watching);
            .             LOGREF3 (ref, "disconnecting %s in", LOGLIT (lit));
            .             const watch watch = kissat_large_watch (ref);
            .             watches *watches = &WATCHES (lit);
            .             REMOVE_WATCHES (*watches, watch);
            .           }
            .           
            .           static inline void kissat_watch_reference (kissat *solver, unsigned a,
      895,027 ( 0.00%)                                             unsigned b, reference ref) {
      511,444 ( 0.00%)    assert (solver->watching);
      767,166 ( 0.00%)    kissat_watch_blocking (solver, a, b, ref);
   40,030,485 ( 0.02%)  => build/../src/inline.h:kissat_watch_blocking (127,861x)
      767,166 ( 0.00%)    kissat_watch_blocking (solver, b, a, ref);
   49,606,178 ( 0.02%)  => build/../src/inline.h:kissat_watch_blocking (127,861x)
      383,583 ( 0.00%)  }
            .           
            .           static inline void kissat_connect_literal (kissat *solver, unsigned lit,
    1,001,784 ( 0.00%)                                             reference ref) {
      834,820 ( 0.00%)    assert (!solver->watching);
    1,001,784 ( 0.00%)    LOGREF3 (ref, "connecting %s in", LOGLIT (lit));
    1,836,604 ( 0.00%)    watches *watches = &WATCHES (lit);
    1,001,784 ( 0.00%)    kissat_push_large_watch (solver, watches, ref);
   48,506,888 ( 0.02%)  => build/../src/inline.h:kissat_push_large_watch (166,964x)
      500,892 ( 0.00%)  }
            .           
            .           static inline clause *kissat_unchecked_dereference_clause (kissat *solver,
  636,283,210 ( 0.27%)                                                             reference ref) {
1,908,849,630 ( 0.81%)    return (clause *) &PEEK_STACK (solver->arena, ref);
  254,513,284 ( 0.11%)  }
            .           
            .           static inline clause *kissat_dereference_clause (kissat *solver,
  634,892,660 ( 0.27%)                                                   reference ref) {
  761,871,192 ( 0.32%)    clause *res = kissat_unchecked_dereference_clause (solver, ref);
2,793,527,704 ( 1.18%)  => build/../src/inline.h:kissat_unchecked_dereference_clause (126,978,532x)
  888,849,724 ( 0.38%)    assert (kissat_clause_in_arena (solver, res));
11,877,678,288 ( 5.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_clause_in_arena (126,978,532x)
  126,978,532 ( 0.05%)    return res;
  253,957,064 ( 0.11%)  }
            .           
            .           static inline reference kissat_reference_clause (kissat *solver,
   22,703,815 ( 0.01%)                                                   const clause *c) {
   31,785,341 ( 0.01%)    assert (kissat_clause_in_arena (solver, c));
  425,790,202 ( 0.18%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_clause_in_arena (4,540,763x)
   22,703,815 ( 0.01%)    return (ward *) c - BEGIN_STACK (solver->arena);
    9,081,526 ( 0.00%)  }
            .           
            .           static inline void kissat_inlined_connect_clause (kissat *solver,
            .                                                             watches *all_watches,
            .                                                             clause *c,
   19,235,783 ( 0.01%)                                                    reference ref) {
   13,739,845 ( 0.01%)    assert (!solver->watching);
   19,235,783 ( 0.01%)    assert (ref == kissat_reference_clause (solver, c));
  309,875,133 ( 0.13%)  => build/../src/inline.h:kissat_reference_clause (2,747,969x)
   19,235,783 ( 0.01%)    assert (c == kissat_dereference_clause (solver, ref));
  375,826,389 ( 0.16%)  => build/../src/inline.h:kissat_dereference_clause (2,747,969x)
  106,581,818 ( 0.05%)    for (all_literals_in_clause (lit, c)) {
   46,687,345 ( 0.02%)      assert (!solver->watching);
   56,024,814 ( 0.02%)      LOGREF3 (ref, "connecting %s in", LOGLIT (lit));
   46,687,345 ( 0.02%)      assert (lit < LITS);
   56,024,814 ( 0.02%)      watches *lit_watches = all_watches + lit;
   56,024,814 ( 0.02%)      kissat_push_large_watch (solver, lit_watches, ref);
1,173,084,440 ( 0.50%)  => build/../src/inline.h:kissat_push_large_watch (9,337,469x)
            .             }
    8,243,907 ( 0.00%)  }
            .           
            .           static inline void kissat_watch_clause (kissat *solver, clause *c) {
            .             assert (c->searched < c->size);
            .             const reference ref = kissat_reference_clause (solver, c);
            .             kissat_watch_reference (solver, c->lits[0], c->lits[1], ref);
            .           }
            .           
   65,761,565 ( 0.03%)  static inline int kissat_export_literal (kissat *solver, unsigned ilit) {
  105,218,504 ( 0.04%)    const unsigned iidx = IDX (ilit);
   26,304,626 ( 0.01%)    assert (iidx < (unsigned) INT_MAX);
  223,589,321 ( 0.09%)    int elit = PEEK_STACK (solver->export, iidx);
   26,304,626 ( 0.01%)    if (!elit)
       57,120 ( 0.00%)      return 0;
  118,113,777 ( 0.05%)    if (NEGATED (ilit))
    6,513,911 ( 0.00%)      elit = -elit;
  196,856,295 ( 0.08%)    assert (VALID_EXTERNAL_LITERAL (elit));
   13,123,753 ( 0.01%)    return elit;
   26,304,626 ( 0.01%)  }
            .           
            .           static inline unsigned kissat_map_literal (kissat *solver, unsigned ilit,
   18,300,989 ( 0.01%)                                             bool map) {
   10,457,708 ( 0.00%)    if (!map)
    1,310,948 ( 0.00%)      return ilit;
   11,753,718 ( 0.00%)    int elit = kissat_export_literal (solver, ilit);
  119,803,345 ( 0.05%)  => build/../src/inline.h:kissat_export_literal (1,958,953x)
    3,917,906 ( 0.00%)    if (!elit)
       57,120 ( 0.00%)      return INVALID_LIT;
   13,512,751 ( 0.01%)    const unsigned eidx = ABS (elit);
   30,886,288 ( 0.01%)    const import *const import = &PEEK_STACK (solver->import, eidx);
    7,721,572 ( 0.00%)    if (import->eliminated)
      117,892 ( 0.00%)      return INVALID_LIT;
    5,614,341 ( 0.00%)    unsigned mlit = import->lit;
    3,742,894 ( 0.00%)    if (elit < 0)
    5,607,714 ( 0.00%)      mlit = NOT (mlit);
    1,871,447 ( 0.00%)    return mlit;
    5,228,854 ( 0.00%)  }
            .           
          236 ( 0.00%)  static inline clause *kissat_last_irredundant_clause (kissat *solver) {
          118 ( 0.00%)    return (solver->last_irredundant == INVALID_REF)
            .                        ? 0
          531 ( 0.00%)               : kissat_dereference_clause (solver, solver->last_irredundant);
        8,083 ( 0.00%)  => build/../src/inline.h:kissat_dereference_clause (59x)
          118 ( 0.00%)  }
            .           
            .           static inline clause *kissat_binary_conflict (kissat *solver, unsigned a,
       23,718 ( 0.00%)                                                unsigned b) {
       23,718 ( 0.00%)    LOGBINARY (a, b, "conflicting");
       11,859 ( 0.00%)    clause *res = &solver->conflict;
        7,906 ( 0.00%)    res->size = 2;
       11,859 ( 0.00%)    unsigned *lits = res->lits;
       11,859 ( 0.00%)    lits[0] = a;
       15,812 ( 0.00%)    lits[1] = b;
        3,953 ( 0.00%)    return res;
        7,906 ( 0.00%)  }
            .           
            .           static inline void kissat_push_analyzed (kissat *solver, assigned *assigned,
   72,333,534 ( 0.03%)                                           unsigned idx) {
   48,222,356 ( 0.02%)    assert (idx < VARS);
   72,333,534 ( 0.03%)    struct assigned *a = assigned + idx;
   72,333,534 ( 0.03%)    assert (!a->analyzed);
   48,222,356 ( 0.02%)    a->analyzed = true;
  156,722,709 ( 0.07%)    PUSH_STACK (solver->analyzed, idx);
      126,282 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (4x)
   72,333,534 ( 0.03%)    LOG2 ("%s analyzed", LOGVAR (idx));
   36,166,767 ( 0.02%)  }
            .           
            .           static inline bool kissat_analyzed (kissat *solver) {
            .             return !EMPTY_STACK (solver->analyzed);
            .           }
            .           
            .           static inline void
   39,397,572 ( 0.02%)  kissat_push_removable (kissat *solver, assigned *assigned, unsigned idx) {
   26,265,048 ( 0.01%)    assert (idx < VARS);
   39,397,572 ( 0.02%)    struct assigned *a = assigned + idx;
   45,963,834 ( 0.02%)    assert (!a->removable);
   26,265,048 ( 0.01%)    a->removable = true;
   85,361,588 ( 0.04%)    PUSH_STACK (solver->removable, idx);
       66,968 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (14x)
   39,397,572 ( 0.02%)    LOG2 ("%s removable", LOGVAR (idx));
   19,698,786 ( 0.01%)  }
            .           
            .           static inline void kissat_push_poisoned (kissat *solver, assigned *assigned,
   11,076,054 ( 0.00%)                                           unsigned idx) {
    7,384,036 ( 0.00%)    assert (idx < VARS);
   11,076,054 ( 0.00%)    struct assigned *a = assigned + idx;
   12,922,063 ( 0.01%)    assert (!a->poisoned);
    7,384,036 ( 0.00%)    a->poisoned = true;
   23,998,273 ( 0.01%)    PUSH_STACK (solver->poisoned, idx);
       16,799 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (12x)
   11,076,054 ( 0.00%)    LOG2 ("%s poisoned", LOGVAR (idx));
    5,538,027 ( 0.00%)  }
            .           
            .           static inline void
            .           kissat_push_shrinkable (kissat *solver, assigned *assigned, unsigned idx) {
            .             assert (idx < VARS);
            .             struct assigned *a = assigned + idx;
            .             assert (!a->shrinkable);
            .             a->shrinkable = true;
            .             PUSH_STACK (solver->shrinkable, idx);
            .             LOG2 ("%s shrinkable", LOGVAR (idx));
            .           }
            .           
    2,072,841 ( 0.00%)  static inline int kissat_checking (kissat *solver) {
            .           #ifndef NDEBUG
            .           #ifdef NOPTIONS
            .             (void) solver;
            .           #endif
    1,381,894 ( 0.00%)    return GET_OPTION (check);
            .           #else
            .             (void) solver;
            .             return 0;
            .           #endif
    1,381,894 ( 0.00%)  }
            .           
    3,909,054 ( 0.00%)  static inline bool kissat_logging (kissat *solver) {
            .           #ifdef LOGGING
            .           #ifdef NOPTIONS
            .             (void) solver;
            .           #endif
    5,212,072 ( 0.00%)    return GET_OPTION (log) > 0;
            .           #else
            .             (void) solver;
            .             return false;
            .           #endif
    2,606,036 ( 0.00%)  }
            .           
    2,063,013 ( 0.00%)  static inline bool kissat_proving (kissat *solver) {
            .           #ifdef NPROOFS
            .             (void) solver;
            .             return false;
            .           #else
    2,750,684 ( 0.00%)    return solver->proof != 0;
            .           #endif
    1,375,342 ( 0.00%)  }
            .           
       13,104 ( 0.00%)  static inline bool kissat_checking_or_proving (kissat *solver) {
       26,208 ( 0.00%)    return kissat_checking (solver) || kissat_proving (solver);
       22,932 ( 0.00%)  => build/../src/inline.h:kissat_checking (3,276x)
        6,552 ( 0.00%)  }
            .           
            .           #if !defined(NDEBUG) || !defined(NPROOFS)
            .           #define CHECKING_OR_PROVING
            .           #endif
            .           
            .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/eliminate.c
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .           #include "resolve.h"
         .           #include "terminate.h"
         .           #include "trail.h"
         .           #include "weaken.h"
         .           
         .           #include <inttypes.h>
         .           #include <math.h>
         .           
   387,508 ( 0.00%)  bool kissat_eliminating (kissat *solver) {
   484,385 ( 0.00%)    if (!solver->enabled.eliminate)
         .               return false;
   290,631 ( 0.00%)    statistics *statistics = &solver->statistics;
   387,508 ( 0.00%)    if (!statistics->clauses_irredundant)
         .               return false;
   290,631 ( 0.00%)    const uint64_t conflicts = statistics->conflicts;
   387,508 ( 0.00%)    if (solver->last.conflicts.reduce == conflicts)
     1,178 ( 0.00%)      return false;
   288,864 ( 0.00%)    limits *limits = &solver->limits;
   385,152 ( 0.00%)    if (limits->eliminate.conflicts > conflicts)
   192,574 ( 0.00%)      return false;
         4 ( 0.00%)    if (limits->eliminate.variables.eliminate <
         2 ( 0.00%)        statistics->variables_eliminate)
         2 ( 0.00%)      return true;
         .             if (limits->eliminate.variables.subsume < statistics->variables_subsume)
         .               return true;
         .             return false;
   193,754 ( 0.00%)  }
         .           
 3,259,315 ( 0.00%)  static inline double variable_score (kissat *solver, unsigned idx) {
 4,563,041 ( 0.00%)    const unsigned lit = LIT (idx);
 5,214,904 ( 0.00%)    const unsigned not_lit = NOT (lit);
 2,607,452 ( 0.00%)    size_t occlim = GET_OPTION (eliminateocclim);
 8,474,219 ( 0.00%)    size_t pos = SIZE_WATCHES (WATCHES (lit));
 7,822,356 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (651,863x)
 8,474,219 ( 0.00%)    size_t neg = SIZE_WATCHES (WATCHES (not_lit));
 7,822,356 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (651,863x)
 1,955,589 ( 0.00%)    if (pos > occlim)
       286 ( 0.00%)      pos = occlim;
 1,955,589 ( 0.00%)    if (neg > occlim)
         .               neg = occlim;
 5,214,904 ( 0.00%)    double prod = pos * neg;
 5,866,767 ( 0.00%)    double sum = pos + neg;
 9,126,082 ( 0.00%)    double occlim2 = occlim * (double) occlim;
 1,955,589 ( 0.00%)    assert (prod <= occlim2);
 1,955,589 ( 0.00%)    double score = prod - sum;
 1,955,589 ( 0.00%)    assert (score <= occlim2);
         .             double relevancy;
 2,607,452 ( 0.00%)    if (solver->stable)
         .               relevancy = kissat_get_heap_score (&solver->scores, idx);
         .             else
13,037,260 ( 0.01%)      relevancy = LINK (idx).stamp;
 2,607,452 ( 0.00%)    double res = relevancy + score - occlim2;
 3,911,178 ( 0.00%)    LOG ("variable score of %s computed as "
         .                  "%g = %g + (%zu*%zu - %zu - %zu) - %g"
         .                  " = %g + %g - %g",
         .                  LOGVAR (idx), res, relevancy, pos, neg, pos, neg, occlim2, relevancy,
         .                  score, occlim2);
 1,303,726 ( 0.00%)    return res;
 1,955,589 ( 0.00%)  }
         .           
         .           static inline void update_variable_score (kissat *solver, heap *schedule,
 3,911,178 ( 0.00%)                                            unsigned idx) {
 2,607,452 ( 0.00%)    assert (schedule->size);
 2,607,452 ( 0.00%)    assert (schedule == &solver->schedule);
 4,563,041 ( 0.00%)    double new_score = variable_score (solver, idx);
103,646,503 ( 0.04%)  => build/../src/eliminate.c:variable_score (651,863x)
 3,911,178 ( 0.00%)    LOG ("new score %g for variable %s", new_score, LOGVAR (idx));
 7,170,493 ( 0.00%)    kissat_update_heap (solver, schedule, idx, -new_score);
76,869,276 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (651,863x)
 1,955,589 ( 0.00%)  }
         .           
   128,586 ( 0.00%)  void kissat_update_variable_score (kissat *solver, unsigned idx) {
   150,017 ( 0.00%)    update_variable_score (solver, &solver->schedule, idx);
 6,300,714 ( 0.00%)  => build/../src/eliminate.c:update_variable_score (21,431x)
    64,293 ( 0.00%)  }
         .           
         .           static inline void update_after_adding_stack (kissat *solver,
   302,335 ( 0.00%)                                                unsigneds *stack) {
   302,335 ( 0.00%)    assert (!solver->probing);
   181,401 ( 0.00%)    heap *schedule = &solver->schedule;
   241,868 ( 0.00%)    if (!schedule->size)
         .               return;
 2,990,683 ( 0.00%)    for (all_stack (unsigned, lit, *stack))
 4,431,167 ( 0.00%)      update_variable_score (solver, schedule, IDX (lit));
124,858,679 ( 0.05%)  => build/../src/eliminate.c:update_variable_score (340,859x)
   120,934 ( 0.00%)  }
         .           
         .           static inline void update_after_removing_variable (kissat *solver,
 1,453,675 ( 0.00%)                                                     unsigned idx) {
   872,205 ( 0.00%)    heap *schedule = &solver->schedule;
 1,162,940 ( 0.00%)    if (!schedule->size)
        24 ( 0.00%)      return;
 1,453,615 ( 0.00%)    assert (!solver->probing);
 1,744,338 ( 0.00%)    flags *f = solver->flags + idx;
 1,453,615 ( 0.00%)    if (f->fixed)
     1,150 ( 0.00%)      return;
 2,027,011 ( 0.00%)    assert (!f->eliminated);
 1,737,438 ( 0.00%)    update_variable_score (solver, schedule, idx);
76,082,769 ( 0.03%)  => build/../src/eliminate.c:update_variable_score (289,573x)
 2,316,584 ( 0.00%)    if (!kissat_heap_contains (schedule, idx))
 6,034,181 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (289,573x)
   327,964 ( 0.00%)      kissat_push_heap (solver, schedule, idx);
14,730,333 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_push_heap (46,852x)
   581,470 ( 0.00%)  }
         .           
         .           static inline void update_after_removing_clause (kissat *solver, clause *c,
   399,102 ( 0.00%)                                                   unsigned except) {
   266,068 ( 0.00%)    if (!solver->schedule.size)
         .               return;
   332,585 ( 0.00%)    assert (c->garbage);
 3,212,324 ( 0.00%)    for (all_literals_in_clause (lit, c))
 1,198,951 ( 0.00%)      if (lit != except)
 2,998,200 ( 0.00%)        update_after_removing_variable (solver, IDX (lit));
86,930,968 ( 0.04%)  => build/../src/eliminate.c:update_after_removing_variable (249,850x)
   133,034 ( 0.00%)  }
         .           
         .           void kissat_eliminate_binary (kissat *solver, unsigned lit,
    73,437 ( 0.00%)                                unsigned other) {
    62,946 ( 0.00%)    kissat_disconnect_binary (solver, other, lit);
 9,066,790 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_disconnect_binary (10,491x)
    62,946 ( 0.00%)    kissat_delete_binary (solver, lit, other);
19,832,798 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (10,491x)
   125,892 ( 0.00%)    update_after_removing_variable (solver, IDX (other));
 4,958,846 ( 0.00%)  => build/../src/eliminate.c:update_after_removing_variable (10,491x)
    31,473 ( 0.00%)  }
         .           
   465,619 ( 0.00%)  void kissat_eliminate_clause (kissat *solver, clause *c, unsigned lit) {
   332,585 ( 0.00%)    kissat_mark_clause_as_garbage (solver, c);
219,869,807 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (66,517x)
   399,102 ( 0.00%)    update_after_removing_clause (solver, c, lit);
95,471,232 ( 0.04%)  => build/../src/eliminate.c:update_after_removing_clause (66,517x)
   199,551 ( 0.00%)  }
         .           
        12 ( 0.00%)  static unsigned schedule_variables (kissat *solver) {
        12 ( 0.00%)    LOG ("initializing variable schedule");
         8 ( 0.00%)    assert (!solver->schedule.size);
         .           
        16 ( 0.00%)    kissat_resize_heap (solver, &solver->schedule, solver->vars);
   708,708 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_resize_heap (2x)
         .           
         6 ( 0.00%)    flags *all_flags = solver->flags;
         .           
         2 ( 0.00%)    size_t scheduled = 0;
   207,872 ( 0.00%)    for (all_variables (idx)) {
   259,820 ( 0.00%)      flags *flags = all_flags + idx;
   311,784 ( 0.00%)      if (!flags->active)
    19,650 ( 0.00%)        continue;
   294,973 ( 0.00%)      if (!flags->eliminate)
    11,789 ( 0.00%)        continue;
   182,100 ( 0.00%)      LOG ("scheduling %s", LOGVAR (idx));
    30,350 ( 0.00%)      scheduled++;
   182,100 ( 0.00%)      update_after_removing_variable (solver, idx);
20,072,115 ( 0.01%)  => build/../src/eliminate.c:update_after_removing_variable (30,350x)
         .             }
        12 ( 0.00%)    assert (scheduled == kissat_size_heap (&solver->schedule));
        24 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_size_heap (2x)
         .           #ifndef QUIET
         8 ( 0.00%)    size_t active = solver->active;
        66 ( 0.00%)    kissat_phase (solver, "eliminate", GET (eliminations),
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_eliminations (2x)
         .                           "scheduled %zu variables %.0f%%", scheduled,
         .                           kissat_percent (scheduled, active));
         .           #endif
         2 ( 0.00%)    return scheduled;
         6 ( 0.00%)  }
         .           
   488,820 ( 0.00%)  void kissat_flush_units_while_connected (kissat *solver) {
   293,292 ( 0.00%)    const unsigned *propagate = solver->propagate;
   293,292 ( 0.00%)    const unsigned *end_trail = END_ARRAY (solver->trail);
   293,292 ( 0.00%)    assert (propagate <= end_trail);
   391,056 ( 0.00%)    const size_t units = end_trail - propagate;
   195,528 ( 0.00%)    if (!units)
   195,518 ( 0.00%)      return;
         .           #ifdef LOGGING
        30 ( 0.00%)    LOG ("propagating and flushing %zu units", units);
         .           #endif
        30 ( 0.00%)    if (!kissat_dense_propagate (solver))
    27,622 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/propdense.c:kissat_dense_propagate (5x)
         .               return;
        30 ( 0.00%)    LOG ("marking and flushing unit satisfied clauses");
         .           
        15 ( 0.00%)    end_trail = END_ARRAY (solver->trail);
        52 ( 0.00%)    while (propagate != end_trail) {
        45 ( 0.00%)      const unsigned unit = *propagate++;
        99 ( 0.00%)      watches *unit_watches = &WATCHES (unit);
        72 ( 0.00%)      watch *begin = BEGIN_WATCHES (*unit_watches), *q = begin;
        72 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (9x)
        72 ( 0.00%)      const watch *const end = END_WATCHES (*unit_watches), *p = q;
        72 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (9x)
        27 ( 0.00%)      if (begin == end)
         .                 continue;
        54 ( 0.00%)      LOG ("marking %s satisfied clauses as garbage", LOGLIT (unit));
       204 ( 0.00%)      while (p != end) {
       590 ( 0.00%)        const watch watch = *q++ = *p++;
       236 ( 0.00%)        if (watch.type.binary) {
       150 ( 0.00%)          const unsigned other = watch.binary.lit;
       350 ( 0.00%)          if (!solver->values[other])
       572 ( 0.00%)            update_after_removing_variable (solver, IDX (other));
    17,383 ( 0.00%)  => build/../src/eliminate.c:update_after_removing_variable (44x)
         .                 } else {
        27 ( 0.00%)          const reference ref = watch.large.ref;
        54 ( 0.00%)          clause *c = kissat_dereference_clause (solver, ref);
     1,233 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (9x)
        63 ( 0.00%)          if (!c->garbage)
        30 ( 0.00%)            kissat_eliminate_clause (solver, c, unit);
    13,610 ( 0.00%)  => build/../src/eliminate.c:kissat_eliminate_clause (5x)
        45 ( 0.00%)          assert (c->garbage);
         9 ( 0.00%)          q--;
         .                 }
         .               }
        27 ( 0.00%)      assert (q <= end);
        36 ( 0.00%)      size_t flushed = end - q;
        18 ( 0.00%)      if (!flushed)
         7 ( 0.00%)        continue;
        12 ( 0.00%)      LOG ("flushing %zu references satisfied by %s", flushed, LOGLIT (unit));
        32 ( 0.00%)      SET_END_OF_WATCHES (*unit_watches, q);
       221 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (2x)
        16 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (2x)
         .             }
   195,528 ( 0.00%)  }
         .           
    35,035 ( 0.00%)  static void connect_resolvents (kissat *solver) {
    21,021 ( 0.00%)    const value *const values = solver->values;
    42,042 ( 0.00%)    assert (EMPTY_STACK (solver->clause));
     7,007 ( 0.00%)    bool satisfied = false;
         .           #ifdef LOGGING
     7,007 ( 0.00%)    uint64_t added = 0;
         .           #endif
 2,879,352 ( 0.00%)    for (all_stack (unsigned, other, solver->resolvents)) {
   863,119 ( 0.00%)      if (other == INVALID_LIT) {
   120,934 ( 0.00%)        if (satisfied)
         .                   satisfied = false;
         .                 else {
   362,802 ( 0.00%)          LOGTMP ("temporary resolvent");
   483,736 ( 0.00%)          const size_t size = SIZE_STACK (solver->clause);
   120,934 ( 0.00%)          if (!size) {
         .                     assert (!solver->inconsistent);
         .                     LOG ("resolved empty clause");
         .                     CHECK_AND_ADD_EMPTY ();
         .                     ADD_EMPTY_TO_PROOF ();
         .                     solver->inconsistent = true;
         .                     break;
   120,934 ( 0.00%)          } else if (size == 1) {
         .                     const unsigned unit = PEEK_STACK (solver->clause, 0);
         .                     LOG ("resolved unit clause %s", LOGLIT (unit));
         .                     kissat_learned_unit (solver, unit);
         .                   } else {
   120,934 ( 0.00%)            assert (size > 1);
   181,401 ( 0.00%)            (void) kissat_new_irredundant_clause (solver);
692,120,407 ( 0.29%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (60,467x)
   362,802 ( 0.00%)            update_after_adding_stack (solver, &solver->clause);
133,429,402 ( 0.06%)  => build/../src/eliminate.c:update_after_adding_stack (60,467x)
         .           #ifdef LOGGING
    60,467 ( 0.00%)            added++;
         .           #endif
         .                   }
         .                 }
   302,335 ( 0.00%)        CLEAR_STACK (solver->clause);
 1,363,436 ( 0.00%)      } else if (!satisfied) {
 1,704,295 ( 0.00%)        const value value = values[other];
   681,718 ( 0.00%)        if (value > 0) {
         .                   LOGTMP ("now %s satisfied resolvent", LOGLIT (other));
         .                   satisfied = true;
   681,718 ( 0.00%)        } else if (value < 0)
         .                   LOG2 ("dropping now falsified literal %s", LOGLIT (other));
         .                 else
 4,431,167 ( 0.00%)          PUSH_STACK (solver->clause, other);
         .               }
         .             }
    42,042 ( 0.00%)    LOG ("added %" PRIu64 " new clauses", added);
    28,028 ( 0.00%)    CLEAR_STACK (solver->resolvents);
    21,021 ( 0.00%)  }
         .           
    42,042 ( 0.00%)  static void weaken_clauses (kissat *solver, unsigned lit) {
    56,056 ( 0.00%)    const unsigned not_lit = NOT (lit);
         .           
    21,021 ( 0.00%)    const value *const values = solver->values;
    42,042 ( 0.00%)    assert (!values[lit]);
         .           
    77,077 ( 0.00%)    watches *pos_watches = &WATCHES (lit);
         .           
   373,807 ( 0.00%)    for (all_binary_large_watches (watch, *pos_watches)) {
    56,056 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (7,007x)
    56,056 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (7,007x)
   131,450 ( 0.00%)      if (watch.type.binary) {
     5,790 ( 0.00%)        const unsigned other = watch.binary.lit;
     9,650 ( 0.00%)        const value value = values[other];
     3,860 ( 0.00%)        if (value <= 0)
    11,580 ( 0.00%)          kissat_weaken_binary (solver, lit, other);
   661,965 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_binary (1,930x)
    13,510 ( 0.00%)        kissat_eliminate_binary (solver, lit, other);
 5,690,056 ( 0.00%)  => build/../src/eliminate.c:kissat_eliminate_binary (1,930x)
         .               } else {
    91,350 ( 0.00%)        const reference ref = watch.large.ref;
   182,700 ( 0.00%)        clause *c = kissat_dereference_clause (solver, ref);
 4,162,306 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (30,450x)
   152,250 ( 0.00%)        if (c->garbage)
         .                   continue;
    30,450 ( 0.00%)        bool satisfied = false;
 1,372,336 ( 0.00%)        for (all_literals_in_clause (other, c)) {
   653,990 ( 0.00%)          const value value = values[other];
   261,596 ( 0.00%)          if (value <= 0)
   130,798 ( 0.00%)            continue;
         .                   satisfied = true;
         .                   break;
         .                 }
   121,800 ( 0.00%)        if (!satisfied)
   182,700 ( 0.00%)          kissat_weaken_clause (solver, lit, c);
23,002,107 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_clause (30,450x)
   182,700 ( 0.00%)        LOGCLS (c, "removing %s", LOGLIT (lit));
   213,150 ( 0.00%)        kissat_eliminate_clause (solver, c, lit);
135,373,571 ( 0.06%)  => build/../src/eliminate.c:kissat_eliminate_clause (30,450x)
         .               }
         .             }
    35,035 ( 0.00%)    RELEASE_WATCHES (*pos_watches);
   869,955 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_release_vector (7,007x)
         .           
    77,077 ( 0.00%)    watches *neg_watches = &WATCHES (not_lit);
         .           
    35,035 ( 0.00%)    bool optimize = !GET_OPTION (incremental);
   458,311 ( 0.00%)    for (all_binary_large_watches (watch, *neg_watches)) {
    56,056 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (7,007x)
    56,056 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (7,007x)
   186,198 ( 0.00%)      if (watch.type.binary) {
    25,170 ( 0.00%)        const unsigned other = watch.binary.lit;
    41,950 ( 0.00%)        const value value = values[other];
    33,560 ( 0.00%)        if (!optimize && value <= 0)
         .                   kissat_weaken_binary (solver, not_lit, other);
    58,730 ( 0.00%)        kissat_eliminate_binary (solver, not_lit, other);
28,350,773 ( 0.01%)  => build/../src/eliminate.c:kissat_eliminate_binary (8,390x)
         .               } else {
   108,186 ( 0.00%)        const reference ref = watch.large.ref;
   216,372 ( 0.00%)        clause *d = kissat_dereference_clause (solver, ref);
 4,928,230 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (36,062x)
   180,310 ( 0.00%)        if (d->garbage)
         .                   continue;
    36,062 ( 0.00%)        bool satisfied = false;
 1,839,780 ( 0.00%)        for (all_literals_in_clause (other, d)) {
   927,750 ( 0.00%)          const value value = values[other];
   371,100 ( 0.00%)          if (value <= 0)
   185,550 ( 0.00%)            continue;
         .                   satisfied = true;
         .                   break;
         .                 }
   144,248 ( 0.00%)        if (!optimize && !satisfied)
         .                   kissat_weaken_clause (solver, not_lit, d);
   216,372 ( 0.00%)        LOGCLS (d, "removing %s", LOGLIT (not_lit));
   252,434 ( 0.00%)        kissat_eliminate_clause (solver, d, not_lit);
181,350,715 ( 0.08%)  => build/../src/eliminate.c:kissat_eliminate_clause (36,062x)
         .               }
         .             }
    56,056 ( 0.00%)    if (optimize && !EMPTY_WATCHES (*neg_watches))
    77,077 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_empty_vector (7,007x)
    35,035 ( 0.00%)      kissat_weaken_unit (solver, not_lit);
 1,322,272 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_unit (7,007x)
    35,035 ( 0.00%)    RELEASE_WATCHES (*neg_watches);
   867,928 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_release_vector (7,007x)
         .           
    21,021 ( 0.00%)    kissat_flush_units_while_connected (solver);
   168,168 ( 0.00%)  => build/../src/eliminate.c:kissat_flush_units_while_connected (7,007x)
    21,021 ( 0.00%)  }
         .           
         5 ( 0.00%)  static void try_to_eliminate_all_variables_again (kissat *solver) {
         6 ( 0.00%)    LOG ("trying to elimination all variables again");
         3 ( 0.00%)    flags *all_flags = solver->flags;
   103,936 ( 0.00%)    for (all_variables (idx)) {
   129,910 ( 0.00%)      flags *flags = all_flags + idx;
   103,928 ( 0.00%)      flags->eliminate = true;
         .             }
         2 ( 0.00%)    solver->limits.eliminate.variables.eliminate = 0;
         3 ( 0.00%)  }
         .           
         7 ( 0.00%)  static void set_next_elimination_bound (kissat *solver, bool complete) {
         3 ( 0.00%)    const unsigned max_bound = GET_OPTION (eliminatebound);
         3 ( 0.00%)    const unsigned current_bound =
         .                 solver->bounds.eliminate.additional_clauses;
         3 ( 0.00%)    assert (current_bound <= max_bound);
         .           
         2 ( 0.00%)    if (complete) {
         3 ( 0.00%)      if (current_bound == max_bound) {
         .                 kissat_phase (solver, "eliminate", GET (eliminations),
         .                               "completed maximum elimination bound %u",
         .                               current_bound);
         .                 limits *limits = &solver->limits;
         .                 statistics *statistics = &solver->statistics;
         .                 limits->eliminate.variables.eliminate =
         .                     statistics->variables_eliminate;
         .                 limits->eliminate.variables.subsume = statistics->variables_subsume;
         .           #ifndef QUIET
         .                 bool first = !solver->bounds.eliminate.max_bound_completed++;
         .                 REPORT (!first, first ? '!' : ':');
         .           #endif
         .               } else {
         1 ( 0.00%)        const unsigned next_bound =
         3 ( 0.00%)            !current_bound ? 1 : MIN (2 * current_bound, max_bound);
        17 ( 0.00%)        kissat_phase (solver, "eliminate", GET (eliminations),
        43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (1x)
         7 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_eliminations (1x)
         .                               "completed elimination bound %u next %u", current_bound,
         .                               next_bound);
         3 ( 0.00%)        solver->bounds.eliminate.additional_clauses = next_bound;
         3 ( 0.00%)        try_to_eliminate_all_variables_again (solver);
   337,793 ( 0.00%)  => build/../src/eliminate.c:try_to_eliminate_all_variables_again (1x)
         5 ( 0.00%)        REPORT (0, '^');
    29,155 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (1x)
         .               }
         .             } else
         .               kissat_phase (solver, "eliminate", GET (eliminations),
         .                             "incomplete elimination bound %u", current_bound);
         4 ( 0.00%)  }
         .           
   562,140 ( 0.00%)  static bool can_eliminate_variable (kissat *solver, unsigned idx) {
   936,900 ( 0.00%)    flags *flags = FLAGS (idx);
         .           
   562,140 ( 0.00%)    if (!flags->active)
         8 ( 0.00%)      return false;
   655,802 ( 0.00%)    if (!flags->eliminate)
        20 ( 0.00%)      return false;
         .           
    93,676 ( 0.00%)    return true;
   187,380 ( 0.00%)  }
         .           
   421,542 ( 0.00%)  static bool eliminate_variable (kissat *solver, unsigned idx) {
   281,028 ( 0.00%)    LOG ("next elimination candidate %s", LOGVAR (idx));
         .           #ifdef LOGGING
   187,352 ( 0.00%)    if (GET_OPTION (log))
         .               (void) variable_score (solver, idx);
         .           #endif
         .           
   234,190 ( 0.00%)    assert (!solver->inconsistent);
   327,866 ( 0.00%)    assert (can_eliminate_variable (solver, idx));
 1,498,816 ( 0.00%)  => build/../src/eliminate.c:can_eliminate_variable (46,838x)
         .           
   281,028 ( 0.00%)    LOG ("marking %s as not removed", LOGVAR (idx));
   562,056 ( 0.00%)    FLAGS (idx)->eliminate = false;
         .           
         .             unsigned lit;
   421,542 ( 0.00%)    if (!kissat_generate_resolvents (solver, idx, &lit))
6,461,754,080 ( 2.73%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resolve.c:kissat_generate_resolvents (46,838x)
    79,662 ( 0.00%)      return false;
    21,021 ( 0.00%)    connect_resolvents (solver);
840,595,096 ( 0.36%)  => build/../src/eliminate.c:connect_resolvents (7,007x)
    35,035 ( 0.00%)    if (!solver->inconsistent)
    35,035 ( 0.00%)      weaken_clauses (solver, lit);
397,010,450 ( 0.17%)  => build/../src/eliminate.c:weaken_clauses (7,007x)
    28,028 ( 0.00%)    INC (eliminated);
   105,105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_eliminated (7,007x)
    35,035 ( 0.00%)    kissat_mark_eliminated_variable (solver, idx);
 5,160,527 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_eliminated_variable (7,007x)
    28,028 ( 0.00%)    if (solver->gate_eliminated) {
    25,688 ( 0.00%)      INC (gates_eliminated);
    96,330 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_gates_eliminated (6,422x)
         .           #ifdef METRICS
    32,110 ( 0.00%)      assert (*solver->gate_eliminated < UINT64_MAX);
    44,954 ( 0.00%)      *solver->gate_eliminated += 1;
         .           #endif
         .             }
     7,007 ( 0.00%)    return true;
   234,190 ( 0.00%)  }
         .           
         7 ( 0.00%)  static void eliminate_variables (kissat *solver) {
         8 ( 0.00%)    kissat_very_verbose (solver,
        43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (1x)
         .                                  "trying to eliminate variables with bound %u",
         .                                  solver->bounds.eliminate.additional_clauses);
         5 ( 0.00%)    assert (!solver->inconsistent);
         .           #ifndef QUIET
         3 ( 0.00%)    unsigned before = solver->active;
         1 ( 0.00%)    unsigned eliminated = 0;
         1 ( 0.00%)    uint64_t tried = 0;
         .           #endif
         1 ( 0.00%)    unsigned last_round_eliminated = 0;
         .           
       138 ( 0.00%)    SET_EFFORT_LIMIT (resolution_limit, eliminate, eliminate_resolutions);
     6,630 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (8x)
        43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (1x)
        94 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (2x)
         .           
         .             bool complete;
         1 ( 0.00%)    int round = 0;
         .           
         5 ( 0.00%)    const bool forward = GET_OPTION (forward);
         .           
         1 ( 0.00%)    for (;;) {
         2 ( 0.00%)      round++;
        12 ( 0.00%)      LOG ("starting new elimination round %d", round);
         .           
         4 ( 0.00%)      if (forward) {
         6 ( 0.00%)        unsigned *propagate = solver->propagate;
         8 ( 0.00%)        complete = kissat_forward_subsume_during_elimination (solver);
1,068,934,979 ( 0.45%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/forward.c:kissat_forward_subsume_during_elimination (2x)
         8 ( 0.00%)        if (solver->inconsistent)
         .                   break;
         6 ( 0.00%)        kissat_flush_large_connected (solver);
18,740,802 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_large_connected (2x)
         6 ( 0.00%)        kissat_connect_irredundant_large_clauses (solver);
214,067,960 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_connect_irredundant_large_clauses (2x)
         6 ( 0.00%)        solver->propagate = propagate;
         6 ( 0.00%)        kissat_flush_units_while_connected (solver);
     1,732 ( 0.00%)  => build/../src/eliminate.c:kissat_flush_units_while_connected (2x)
         8 ( 0.00%)        if (solver->inconsistent)
         .                   break;
         .               } else {
         .                 kissat_connect_irredundant_large_clauses (solver);
         .                 complete = true;
         .               }
         .           
         .           #ifndef QUIET
         .               const unsigned last_round_scheduled =
         .           #endif
         8 ( 0.00%)          schedule_variables (solver);
22,281,619 ( 0.01%)  => build/../src/eliminate.c:schedule_variables (2x)
        50 ( 0.00%)      kissat_very_verbose (
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
         .                   solver,
         .                   "scheduled %u variables %.0f%% to eliminate "
         .                   "in round %d",
         .                   last_round_scheduled,
         4 ( 0.00%)          kissat_percent (last_round_scheduled, solver->active), round);
         .           
         2 ( 0.00%)      unsigned last_round_eliminated = 0;
         .           
   327,982 ( 0.00%)      while (!solver->inconsistent &&
   234,270 ( 0.00%)             !kissat_empty_heap (&solver->schedule)) {
   515,394 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_empty_heap (46,854x)
   515,372 ( 0.00%)        if (TERMINATED (eliminate_terminated_1)) {
 1,030,744 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (46,852x)
         .                   complete = false;
         .                   break;
         .                 }
   327,964 ( 0.00%)        unsigned idx = kissat_pop_max_heap (solver, &solver->schedule);
44,840,875 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_pop_max_heap (46,852x)
   374,816 ( 0.00%)        if (!can_eliminate_variable (solver, idx))
 1,499,250 ( 0.00%)  => build/../src/eliminate.c:can_eliminate_variable (46,852x)
        14 ( 0.00%)          continue;
   140,514 ( 0.00%)        statistics *s = &solver->statistics;
   187,352 ( 0.00%)        if (s->eliminate_resolutions > resolution_limit) {
         .                   kissat_extremely_verbose (
         .                       solver,
         .                       "eliminate round %u hits "
         .                       "resolution limit %" PRIu64 " at %" PRIu64 " resolutions",
         .                       round, resolution_limit, s->eliminate_resolutions);
         .                   complete = false;
         .                   break;
         .                 }
         .           #ifndef QUIET
    46,838 ( 0.00%)        tried++;
         .           #endif
   327,866 ( 0.00%)        if (eliminate_variable (solver, idx))
7,709,542,801 ( 3.26%)  => build/../src/eliminate.c:eliminate_variable (46,838x)
     7,007 ( 0.00%)          last_round_eliminated++;
   187,352 ( 0.00%)        if (solver->inconsistent)
         .                   break;
   140,514 ( 0.00%)        kissat_flush_units_while_connected (solver);
 1,184,887 ( 0.00%)  => build/../src/eliminate.c:kissat_flush_units_while_connected (46,838x)
         .               }
         .           
         4 ( 0.00%)      if (last_round_eliminated) {
         2 ( 0.00%)        complete = false;
         .           #ifndef QUIET
         4 ( 0.00%)        eliminated += last_round_eliminated;
         .           #endif
         .               }
         .           
        10 ( 0.00%)      if (!solver->inconsistent) {
         6 ( 0.00%)        kissat_flush_large_connected (solver);
27,505,859 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_large_connected (2x)
         6 ( 0.00%)        kissat_dense_collect (solver);
56,168,851 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/collect.c:kissat_dense_collect (2x)
         .               }
         .           
        70 ( 0.00%)      kissat_phase (
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
       102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_eliminations (2x)
         .                   solver, "eliminate", GET (eliminations),
         .                   "eliminated %u variables %.0f%% in round %u", last_round_eliminated,
         .                   kissat_percent (last_round_eliminated, last_round_scheduled),
         .                   round);
        16 ( 0.00%)      REPORT (!last_round_eliminated, 'e');
    58,803 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (2x)
         .           
         8 ( 0.00%)      if (solver->inconsistent)
         .                 break;
        12 ( 0.00%)      kissat_release_heap (solver, &solver->schedule);
    11,009 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_release_heap (2x)
         4 ( 0.00%)      if (complete)
         .                 break;
         8 ( 0.00%)      if (round == GET_OPTION (eliminaterounds))
         2 ( 0.00%)        break;
         4 ( 0.00%)      if (solver->statistics.eliminate_resolutions > resolution_limit)
         .                 break;
        11 ( 0.00%)      if (TERMINATED (eliminate_terminated_2))
        22 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (1x)
         .                 break;
         .             }
         .           
         5 ( 0.00%)    const unsigned remain = kissat_size_heap (&solver->schedule);
        12 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_size_heap (1x)
         6 ( 0.00%)    kissat_release_heap (solver, &solver->schedule);
       109 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_release_heap (1x)
         .           #ifndef QUIET
        45 ( 0.00%)    kissat_very_verbose (solver,
        51 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (1x)
        68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
         .                                  "eliminated %u variables %.0f%% of %" PRIu64 " tried"
         .                                  " (%u remain %.0f%%)",
         .                                  eliminated, kissat_percent (eliminated, tried),
         .                                  tried, remain,
         2 ( 0.00%)                         kissat_percent (remain, solver->active));
        39 ( 0.00%)    kissat_phase (solver, "eliminate", GET (eliminations),
        34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (1x)
        51 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (1x)
         7 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_eliminations (1x)
         .                           "eliminated %u variables %.0f%% out of %u in %d rounds",
         .                           eliminated, kissat_percent (eliminated, before), before,
         .                           round);
         .           #endif
         5 ( 0.00%)    if (!solver->inconsistent) {
         8 ( 0.00%)      const bool complete = !remain && !last_round_eliminated;
         5 ( 0.00%)      set_next_elimination_bound (solver, complete);
   367,055 ( 0.00%)  => build/../src/eliminate.c:set_next_elimination_bound (1x)
         4 ( 0.00%)      if (!complete) {
         .                 const flags *end = solver->flags + VARS;
         .           #ifndef QUIET
         .                 unsigned dropped = 0;
         .           #endif
         .                 for (struct flags *f = solver->flags; f != end; f++)
         .                   if (f->eliminate) {
         .                     f->eliminate = false;
         .           #ifndef QUIET
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
         .                     dropped++;
         .           #endif
         .                   }
         .           
         .                 kissat_very_verbose (solver, "dropping %u eliminate candidates",
         .                                      dropped);
         .               }
         .             }
         6 ( 0.00%)  }
         .           
         5 ( 0.00%)  static void init_map_and_kitten (kissat *solver) {
         4 ( 0.00%)    if (!GET_OPTION (definitions))
         .               return;
         4 ( 0.00%)    assert (!solver->kitten);
         6 ( 0.00%)    solver->kitten = kitten_embedded (solver);
       483 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_embedded (1x)
         2 ( 0.00%)  }
         .           
         5 ( 0.00%)  static void reset_map_and_kitten (kissat *solver) {
         4 ( 0.00%)    if (solver->kitten) {
         4 ( 0.00%)      kitten_release (solver->kitten);
 1,225,814 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_release (1x)
         2 ( 0.00%)      solver->kitten = 0;
         .             }
         3 ( 0.00%)  }
         .           
         6 ( 0.00%)  static void eliminate (kissat *solver) {
         3 ( 0.00%)    kissat_backtrack_propagate_and_flush_trail (solver);
   726,017 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_propagate_and_flush_trail (1x)
         5 ( 0.00%)    assert (!solver->inconsistent);
        12 ( 0.00%)    STOP_SEARCH_AND_START_SIMPLIFIER (eliminate);
       280 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop_search_and_start_simplifier (1x)
        16 ( 0.00%)    kissat_phase (solver, "eliminate", GET (eliminations),
        43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (1x)
         7 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_eliminations (1x)
         .                           "elimination limit of %" PRIu64 " conflicts hit",
         .                           solver->limits.eliminate.conflicts);
         3 ( 0.00%)    init_map_and_kitten (solver);
       504 ( 0.00%)  => build/../src/eliminate.c:init_map_and_kitten (1x)
         4 ( 0.00%)    kissat_enter_dense_mode (solver, 0);
15,823,898 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (1x)
         3 ( 0.00%)    eliminate_variables (solver);
9,169,578,598 ( 3.88%)  => build/../src/eliminate.c:eliminate_variables (1x)
         5 ( 0.00%)    kissat_resume_sparse_mode (solver, true, 0);
119,813,777 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (1x)
         3 ( 0.00%)    reset_map_and_kitten (solver);
 1,225,832 ( 0.00%)  => build/../src/eliminate.c:reset_map_and_kitten (1x)
         3 ( 0.00%)    kissat_check_statistics (solver);
15,264,772 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_check_statistics (1x)
        12 ( 0.00%)    STOP_SIMPLIFIER_AND_RESUME_SEARCH (eliminate);
       280 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop_simplifier_and_resume_search (1x)
         4 ( 0.00%)  }
         .           
         7 ( 0.00%)  int kissat_eliminate (kissat *solver) {
         5 ( 0.00%)    assert (!solver->inconsistent);
         4 ( 0.00%)    INC (eliminations);
        15 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_eliminations (1x)
         3 ( 0.00%)    eliminate (solver);
9,322,434,087 ( 3.94%)  => build/../src/eliminate.c:eliminate (1x)
         3 ( 0.00%)    kissat_classify (solver);
       207 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/classify.c:kissat_classify (1x)
        86 ( 0.00%)    UPDATE_CONFLICT_LIMIT (eliminate, eliminations, NLOG2N, true);
     1,668 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (2x)
       244 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_scale_delta (1x)
       160 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_nlogpown (1x)
        43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (1x)
         7 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_eliminations (1x)
         4 ( 0.00%)    solver->last.ticks.eliminate = solver->statistics.search_ticks;
         5 ( 0.00%)    return solver->inconsistent ? 20 : 0;
         5 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/watch.h
--------------------------------------------------------------------------------
Ir                   

-- line 68 ----------------------------------------
          .           
          .           static inline litpair kissat_litpair (unsigned lit, unsigned other) {
          .             litpair res;
          .             res.lits[0] = lit < other ? lit : other;
          .             res.lits[1] = lit < other ? other : lit;
          .             return res;
          .           }
          .           
  4,509,004 ( 0.00%)  static inline watch kissat_binary_watch (unsigned lit) {
          .             watch res;
  9,018,008 ( 0.00%)    res.binary.lit = lit;
  3,381,753 ( 0.00%)    res.binary.binary = true;
  4,509,004 ( 0.00%)    assert (res.type.binary);
  1,127,251 ( 0.00%)    return res;
  2,254,502 ( 0.00%)  }
          .           
191,157,904 ( 0.08%)  static inline watch kissat_large_watch (reference ref) {
          .             watch res;
382,315,808 ( 0.16%)    res.large.ref = ref;
143,368,428 ( 0.06%)    res.large.binary = false;
238,947,380 ( 0.10%)    assert (!res.type.binary);
 47,789,476 ( 0.02%)    return res;
 95,578,952 ( 0.04%)  }
          .           
236,598,960 ( 0.10%)  static inline watch kissat_blocking_watch (unsigned lit) {
          .             watch res;
473,197,920 ( 0.20%)    res.blocking.lit = lit;
177,449,220 ( 0.08%)    res.blocking.binary = false;
295,748,700 ( 0.13%)    assert (!res.type.binary);
 59,149,740 ( 0.03%)    return res;
118,299,480 ( 0.05%)  }
          .           
          .           #define EMPTY_WATCHES(W) kissat_empty_vector (&W)
          .           #define SIZE_WATCHES(W) kissat_size_vector (&W)
          .           
          .           #define PUSH_WATCHES(W, E) \
          .             do { \
          .               assert (sizeof (E) == sizeof (unsigned)); \
          .               kissat_push_vectors (solver, &(W), (E).raw); \
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/learn.c
--------------------------------------------------------------------------------
Ir                 

        .           #include "learn.h"
        .           #include "backtrack.h"
        .           #include "inline.h"
        .           #include "reluctant.h"
        .           
        .           #include <inttypes.h>
        .           
   94,980 ( 0.00%)  static unsigned backjump_limit (struct kissat *solver) {
        .           #ifdef NOPTIONS
        .             (void) solver;
        .           #endif
   94,980 ( 0.00%)    return GET_OPTION (chrono) ? (unsigned) GET_OPTION (chronolevels)
   71,235 ( 0.00%)                               : UINT_MAX;
   47,490 ( 0.00%)  }
        .           
  142,470 ( 0.00%)  unsigned kissat_determine_new_level (kissat *solver, unsigned jump) {
   94,980 ( 0.00%)    assert (solver->level);
   94,980 ( 0.00%)    const unsigned back = solver->level - 1;
   71,235 ( 0.00%)    assert (jump <= back);
        .           
   71,235 ( 0.00%)    const unsigned delta = back - jump;
   94,980 ( 0.00%)    const unsigned limit = backjump_limit (solver);
  308,685 ( 0.00%)  => build/../src/learn.c:backjump_limit (23,745x)
        .           
        .             unsigned res;
        .           
   47,490 ( 0.00%)    if (!delta) {
   32,598 ( 0.00%)      res = jump;
   97,794 ( 0.00%)      LOG ("using identical backtrack and jump level %u", res);
   22,338 ( 0.00%)    } else if (delta > limit) {
      138 ( 0.00%)      res = back;
      414 ( 0.00%)      LOG ("backjumping over %u levels (%u - %u) considered inefficient",
        .                    delta, back, jump);
      414 ( 0.00%)      LOG ("backtracking chronologically to backtrack level %u", res);
      345 ( 0.00%)      INC (chronological);
    1,035 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_chronological (69x)
        .             } else {
   14,754 ( 0.00%)      res = jump;
   44,262 ( 0.00%)      LOG ("backjumping over %u levels (%u - %u) considered efficient", delta,
        .                    back, jump);
   44,262 ( 0.00%)      LOG ("backjumping non-chronologically to jump level %u", res);
        .             }
   23,745 ( 0.00%)    return res;
   47,490 ( 0.00%)  }
        .           
      258 ( 0.00%)  static void learn_unit (kissat *solver, unsigned not_uip) {
      473 ( 0.00%)    assert (not_uip == PEEK_STACK (solver->clause, 0));
      258 ( 0.00%)    LOG ("learned unit clause %s triggers iteration", LOGLIT (not_uip));
      215 ( 0.00%)    const unsigned new_level = kissat_determine_new_level (solver, 0);
    2,597 ( 0.00%)  => build/../src/learn.c:kissat_determine_new_level (43x)
      215 ( 0.00%)    kissat_backtrack_after_conflict (solver, new_level);
11,165,656 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_after_conflict (43x)
      215 ( 0.00%)    kissat_learned_unit (solver, not_uip);
18,121,405 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (43x)
      215 ( 0.00%)    if (!solver->probing) {
       86 ( 0.00%)      solver->iterating = true;
      172 ( 0.00%)      INC (iterations);
      645 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_iterations (43x)
        .             }
      129 ( 0.00%)  }
        .           
    3,822 ( 0.00%)  static void learn_binary (kissat *solver, unsigned not_uip) {
    8,281 ( 0.00%)    const unsigned other = PEEK_STACK (solver->clause, 1);
   12,103 ( 0.00%)    const unsigned jump_level = LEVEL (other);
        .             const unsigned new_level =
    3,822 ( 0.00%)        kissat_determine_new_level (solver, jump_level);
   35,989 ( 0.00%)  => build/../src/learn.c:kissat_determine_new_level (637x)
    3,185 ( 0.00%)    kissat_backtrack_after_conflict (solver, new_level);
85,825,651 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_after_conflict (637x)
        .           #ifndef NDEBUG
        .             const reference ref =
        .           #endif
    3,185 ( 0.00%)        kissat_new_redundant_clause (solver, 1);
86,156,440 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_redundant_clause (637x)
    1,274 ( 0.00%)    assert (ref == INVALID_REF);
    3,822 ( 0.00%)    kissat_assign_binary (solver, not_uip, other);
  176,774 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_assign_binary (637x)
    1,911 ( 0.00%)  }
        .           
  114,070 ( 0.00%)  static void insert_last_learned (kissat *solver, reference ref) {
   45,628 ( 0.00%)    const reference *const end =
  136,884 ( 0.00%)        solver->last_learned + GET_OPTION (eagersubsume);
   45,628 ( 0.00%)    reference prev = ref;
  524,722 ( 0.00%)    for (reference *p = solver->last_learned; p != end; p++) {
  273,768 ( 0.00%)      reference tmp = *p;
  273,768 ( 0.00%)      *p = prev;
  182,512 ( 0.00%)      prev = tmp;
        .             }
   91,256 ( 0.00%)  }
        .           
        .           static reference learn_reference (kissat *solver, unsigned not_uip,
  159,698 ( 0.00%)                                    unsigned glue) {
   91,256 ( 0.00%)    assert (solver->level > 1);
  182,512 ( 0.00%)    assert (SIZE_STACK (solver->clause) > 2);
   68,442 ( 0.00%)    unsigned *lits = BEGIN_STACK (solver->clause);
   91,256 ( 0.00%)    assert (lits[0] == not_uip);
   68,442 ( 0.00%)    unsigned *q = lits + 1;
   68,442 ( 0.00%)    unsigned jump_lit = *q;
  433,466 ( 0.00%)    unsigned jump_level = LEVEL (jump_lit);
   68,442 ( 0.00%)    const unsigned *const end = END_STACK (solver->clause);
   91,256 ( 0.00%)    const unsigned backtrack_level = solver->level - 1;
   68,442 ( 0.00%)    assigned *all_assigned = solver->assigned;
1,972,404 ( 0.00%)    for (unsigned *p = lits + 2; p != end; p++) {
1,342,419 ( 0.00%)      const unsigned lit = *p;
3,579,784 ( 0.00%)      const unsigned idx = IDX (lit);
3,132,311 ( 0.00%)      const unsigned level = all_assigned[idx].level;
1,342,419 ( 0.00%)      if (jump_level >= level)
  447,473 ( 0.00%)        continue;
        .               jump_level = level;
        .               jump_lit = lit;
        .               q = p;
        .               if (level == backtrack_level)
        .                 break;
        .             }
   91,256 ( 0.00%)    *q = lits[1];
   91,256 ( 0.00%)    lits[1] = jump_lit;
  136,884 ( 0.00%)    const reference ref = kissat_new_redundant_clause (solver, glue);
23,886,732,820 (10.10%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_redundant_clause (22,814x)
   45,628 ( 0.00%)    assert (ref != INVALID_REF);
  136,884 ( 0.00%)    clause *c = kissat_dereference_clause (solver, ref);
3,103,282 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (22,814x)
   91,256 ( 0.00%)    c->used = MAX_USED;
        .             const unsigned new_level =
  136,884 ( 0.00%)        kissat_determine_new_level (solver, jump_level);
1,203,279 ( 0.00%)  => build/../src/learn.c:kissat_determine_new_level (22,814x)
  114,070 ( 0.00%)    kissat_backtrack_after_conflict (solver, new_level);
4,917,075,489 ( 2.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_after_conflict (22,814x)
  136,884 ( 0.00%)    kissat_assign_reference (solver, not_uip, ref, c);
26,886,801 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_assign_reference (22,814x)
   22,814 ( 0.00%)    return ref;
   45,628 ( 0.00%)  }
        .           
  164,563 ( 0.00%)  void kissat_update_learned (kissat *solver, unsigned glue, unsigned size) {
  117,545 ( 0.00%)    assert (!solver->probing);
   94,036 ( 0.00%)    INC (clauses_learned);
  352,635 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_learned (23,509x)
  141,054 ( 0.00%)    LOG ("learned[%" PRIu64 "] clause glue %u size %u", GET (clauses_learned),
        .                  glue, size);
   94,036 ( 0.00%)    if (solver->stable)
   61,840 ( 0.00%)      kissat_tick_reluctant (&solver->reluctant);
  448,728 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/reluctant.c:kissat_tick_reluctant (15,460x)
  141,054 ( 0.00%)    ADD (literals_learned, size);
  470,180 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_learned (23,509x)
        .           #ifndef QUIET
  611,234 ( 0.00%)    UPDATE_AVERAGE (size, size);
2,092,301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/smooth.c:kissat_update_smooth (23,509x)
        .           #endif
  611,234 ( 0.00%)    UPDATE_AVERAGE (fast_glue, glue);
2,092,301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/smooth.c:kissat_update_smooth (23,509x)
  611,234 ( 0.00%)    UPDATE_AVERAGE (slow_glue, glue);
2,092,301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/smooth.c:kissat_update_smooth (23,509x)
   70,527 ( 0.00%)  }
        .           
    7,024 ( 0.00%)  static void flush_last_learned (kissat *solver) {
    5,268 ( 0.00%)    reference *q = solver->last_learned;
   15,804 ( 0.00%)    const reference *const end = q + GET_OPTION (eagersubsume), *p = q;
   28,096 ( 0.00%)    while (p != end) {
   35,120 ( 0.00%)      reference ref = *p++;
   14,048 ( 0.00%)      if (ref != INVALID_REF)
   22,900 ( 0.00%)        *q++ = ref;
        .             }
   14,356 ( 0.00%)    while (q != end)
    9,776 ( 0.00%)      *q++ = INVALID_REF;
    7,024 ( 0.00%)  }
        .           
  117,470 ( 0.00%)  static void eagerly_subsume_last_learned (kissat *solver) {
   70,482 ( 0.00%)    value *marks = solver->marks;
3,695,866 ( 0.00%)    for (all_stack (unsigned, lit, solver->clause)) {
2,966,508 ( 0.00%)      assert (!marks[lit]);
1,977,672 ( 0.00%)      marks[lit] = 1;
        .             }
  187,952 ( 0.00%)    unsigned clause_size = SIZE_STACK (solver->clause);
   23,494 ( 0.00%)    unsigned subsumed = 0;
   70,482 ( 0.00%)    reference *p = solver->last_learned;
  164,458 ( 0.00%)    const reference *const end = p + GET_OPTION (eagersubsume);
  375,904 ( 0.00%)    while (p != end) {
  469,880 ( 0.00%)      reference ref = *p++;
  187,952 ( 0.00%)      if (ref == INVALID_REF)
    1,133 ( 0.00%)        continue;
  557,058 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
12,630,103 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (92,843x)
  464,215 ( 0.00%)      if (c->garbage)
       90 ( 0.00%)        continue;
  649,271 ( 0.00%)      if (!c->redundant)
        .                 continue;
  278,259 ( 0.00%)      unsigned c_size = c->size;
  278,259 ( 0.00%)      if (c_size <= clause_size)
   48,629 ( 0.00%)        continue;
  176,496 ( 0.00%)      LOGCLS2 (c, "trying to eagerly subsume");
   88,248 ( 0.00%)      unsigned needed = clause_size;
   88,248 ( 0.00%)      unsigned remain = c_size;
6,881,586 ( 0.00%)      for (all_literals_in_clause (lit, c)) {
6,055,876 ( 0.00%)        if (marks[lit] && !--needed)
        .                   break;
3,645,884 ( 0.00%)        else if (--remain < needed)
   41,849 ( 0.00%)          break;
        .               }
   88,248 ( 0.00%)      if (needed)
   41,849 ( 0.00%)        continue;
   13,650 ( 0.00%)      LOGCLS (c, "eagerly subsumed");
   11,375 ( 0.00%)      kissat_mark_clause_as_garbage (solver, c);
26,076,232 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (2,275x)
    6,825 ( 0.00%)      p[-1] = INVALID_REF;
    2,275 ( 0.00%)      subsumed++;
    9,100 ( 0.00%)      INC (eagerly_subsumed);
   34,125 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_eagerly_subsumed (2,275x)
        .             }
4,190,284 ( 0.00%)    for (all_stack (unsigned, lit, solver->clause))
1,977,672 ( 0.00%)      marks[lit] = 0;
   46,988 ( 0.00%)    if (subsumed)
    5,268 ( 0.00%)      flush_last_learned (solver);
  159,416 ( 0.00%)  => build/../src/learn.c:flush_last_learned (1,756x)
   70,482 ( 0.00%)  }
        .           
        .           #if MLR
        .           void kissat_feature_vector (kissat *solver, double *features) {
        .               features[0] = 1.0;
        .               features[1] = solver->mlr.prevLbd1;
        .               features[2] = solver->mlr.prevLbd2;
        .               features[3] = solver->mlr.prevLbd3;
        .               features[4] = solver->mlr.prevLbd1 * solver->mlr.prevLbd2;
-- line 196 ----------------------------------------
-- line 213 ----------------------------------------
        .                   double m_hat = solver->mlr.m[i] / (1 - pow(beta1, solver->mlr.t));
        .                   double v_hat = solver->mlr.v[i] / (1 - pow(beta2, solver->mlr.t));
        .           
        .                   solver->mlr.theta[i] -= alpha * m_hat / (sqrt(v_hat) + epsilon);
        .               }
        .           }
        .           #endif
        .           
  117,470 ( 0.00%)  void kissat_learn_clause (kissat *solver) {
  234,940 ( 0.00%)    const unsigned not_uip = PEEK_STACK (solver->clause, 0);
  187,952 ( 0.00%)    const unsigned size = SIZE_STACK (solver->clause);
  187,952 ( 0.00%)    const size_t glue = SIZE_STACK (solver->levels);
   70,482 ( 0.00%)    assert (glue <= UINT_MAX);
        .           
        .           #if MLR
        .             double nextLbd = glue;
        .             solver->mlr.conflictsSinceLastRestart++;
        .           
        .             // Update mu and m2 (variance-related statistics)
        .             const int conflicts_count = GET (clauses_learned) + 1; 
        .             double delta = nextLbd - solver->mlr.mu;
-- line 233 ----------------------------------------
-- line 251 ----------------------------------------
        .                 // Update LBD history
        .                 solver->mlr.prevLbd3 = solver->mlr.prevLbd2;
        .                 solver->mlr.prevLbd2 = solver->mlr.prevLbd1;
        .                 solver->mlr.prevLbd1 = nextLbd;
        .                 // LOG ("mylog: error:%f, predict:%f, actual: %f", error,predict,nextLbd);
        .             }
        .           #endif
        .           
  117,470 ( 0.00%)    if (!solver->probing)
  164,458 ( 0.00%)      kissat_update_learned (solver, glue, size);
10,260,446 ( 0.00%)  => build/../src/learn.c:kissat_update_learned (23,494x)
   46,988 ( 0.00%)    assert (size > 0);
   23,494 ( 0.00%)    reference ref = INVALID_REF;
   46,988 ( 0.00%)    if (size == 1)
      258 ( 0.00%)      learn_unit (solver, not_uip);
29,292,539 ( 0.01%)  => build/../src/learn.c:learn_unit (43x)
   46,902 ( 0.00%)    else if (size == 2)
    3,822 ( 0.00%)      learn_binary (solver, not_uip);
172,236,259 ( 0.07%)  => build/../src/learn.c:learn_binary (637x)
        .             else
  182,512 ( 0.00%)      ref = learn_reference (solver, not_uip, glue);
28,849,259,579 (12.20%)  => build/../src/learn.c:learn_reference (22,814x)
   93,976 ( 0.00%)    if (GET_OPTION (eagersubsume)) {
   70,482 ( 0.00%)      eagerly_subsume_last_learned (solver);
74,927,113 ( 0.03%)  => build/../src/learn.c:eagerly_subsume_last_learned (23,494x)
   46,988 ( 0.00%)      if (ref != INVALID_REF)
  114,070 ( 0.00%)        insert_last_learned (solver, ref);
1,688,236 ( 0.00%)  => build/../src/learn.c:insert_last_learned (22,814x)
        .             }
   70,482 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/compact.c
--------------------------------------------------------------------------------
Ir                 

-- line 2 ----------------------------------------
        .           #include "inline.h"
        .           #include "inlineheap.h"
        .           #include "print.h"
        .           #include "resize.h"
        .           
        .           #include <string.h>
        .           
        .           static void reimport_literal (kissat *solver, unsigned eidx,
  434,119 ( 0.00%)                                unsigned mlit) {
  992,272 ( 0.00%)    import *import = &PEEK_STACK (solver->import, eidx);
  248,068 ( 0.00%)    assert (import->imported);
  310,085 ( 0.00%)    assert (!import->eliminated);
  372,102 ( 0.00%)    LOG ("reimporting external variable %u as internal literal %u (was %u)",
        .                  eidx, mlit, import->lit);
  186,051 ( 0.00%)    import->lit = mlit;
  186,051 ( 0.00%)  }
        .           
       21 ( 0.00%)  unsigned kissat_compact_literals (kissat *solver, unsigned *mfixed_ptr) {
       12 ( 0.00%)    INC (compacted);
       45 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_compacted (3x)
        .           #if !defined(QUIET) || !defined(NDEBUG)
        9 ( 0.00%)    const unsigned active = solver->active;
        .           #ifndef QUIET
       12 ( 0.00%)    const unsigned inactive = solver->vars - active;
       99 ( 0.00%)    kissat_phase (solver, "compact", GET (compacted),
      153 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (3x)
      102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (3x)
       21 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_compacted (3x)
        .                           "compacting garbage collection "
        .                           "(%u inactive variables %.2f%%)",
        6 ( 0.00%)                  inactive, kissat_percent (inactive, solver->vars));
        .           #endif
        .           #endif
        .           #ifdef LOGGING
       15 ( 0.00%)    assert (!solver->compacting);
        6 ( 0.00%)    solver->compacting = true;
        .           #endif
        3 ( 0.00%)    unsigned mfixed = INVALID_LIT;
        3 ( 0.00%)    unsigned vars = 0;
  353,516 ( 0.00%)    for (all_variables (iidx)) {
  883,730 ( 0.00%)      const flags *const flags = FLAGS (iidx);
  441,865 ( 0.00%)      if (flags->eliminated)
   53,662 ( 0.00%)        continue;
  430,794 ( 0.00%)      const unsigned ilit = LIT (iidx);
        .               unsigned mlit;
  307,710 ( 0.00%)      if (flags->fixed) {
   10,392 ( 0.00%)        const value value = kissat_fixed (solver, ilit);
   71,012 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_fixed (1,732x)
    3,464 ( 0.00%)        assert (value);
    3,464 ( 0.00%)        if (mfixed == INVALID_LIT) {
       27 ( 0.00%)          mlit = mfixed = LIT (vars);
       18 ( 0.00%)          LOG2 ("first fixed %u mapped to %u assigned to %d", ilit, mfixed,
        .                         value);
        6 ( 0.00%)          if (value < 0)
        6 ( 0.00%)            mfixed = NOT (mfixed);
       18 ( 0.00%)          LOG2 ("all other fixed mapped to %u", mfixed);
        6 ( 0.00%)          vars++;
    3,458 ( 0.00%)        } else if (value < 0) {
   10,776 ( 0.00%)          mlit = NOT (mfixed);
    8,082 ( 0.00%)          LOG2 ("negatively fixed %u mapped to %u", ilit, mlit);
        .                 } else {
      764 ( 0.00%)          mlit = mfixed;
    2,292 ( 0.00%)          LOG2 ("positively fixed %u mapped to %u", ilit, mlit);
        .                 }
  299,050 ( 0.00%)      } else if (flags->active) {
  299,050 ( 0.00%)        assert (flags->active);
  418,670 ( 0.00%)        mlit = LIT (vars);
  358,860 ( 0.00%)        LOG2 ("remapping %u to %u", ilit, mlit);
  119,620 ( 0.00%)        vars++;
        .               } else {
        .                 const int elit = PEEK_STACK (solver->export, iidx);
        .                 if (elit) {
        .                   const unsigned eidx = ABS (elit);
        .                   import *import = &PEEK_STACK (solver->import, eidx);
        .                   assert (import->imported);
        .                   assert (!import->eliminated);
        .                   import->imported = false;
        .                   LOG2 ("external variable %d not imported anymore", eidx);
        .                   POKE_STACK (solver->export, iidx, 0);
        .                 } else
        .                   LOG2 ("skipping inactive %u", ilit);
        .                 continue;
        .               }
  184,626 ( 0.00%)      assert (mlit <= ilit);
  553,878 ( 0.00%)      assert (mlit != NOT (ilit));
  184,626 ( 0.00%)      if (mlit == ilit)
      122 ( 0.00%)        continue;
1,044,140 ( 0.00%)      const int elit = PEEK_STACK (solver->export, iidx);
  429,940 ( 0.00%)      const unsigned eidx = ABS (elit);
  122,840 ( 0.00%)      if (elit < 0)
        .                 mlit = NOT (mlit);
  429,940 ( 0.00%)      reimport_literal (solver, eidx, mlit);
2,702,480 ( 0.00%)  => build/../src/compact.c:reimport_literal (61,420x)
        .             }
        9 ( 0.00%)    *mfixed_ptr = mfixed;
       18 ( 0.00%)    LOG ("compacting to %u variables %.2f%% from %u", vars,
        .                  kissat_percent (vars, solver->vars), solver->vars);
       21 ( 0.00%)    assert (vars == active || vars == active + 1);
        3 ( 0.00%)    return vars;
        9 ( 0.00%)  }
        .           
        .           static void compact_literal (kissat *solver, unsigned dst_lit,
  417,837 ( 0.00%)                               unsigned src_lit) {
  179,073 ( 0.00%)    assert (dst_lit < src_lit);
  537,219 ( 0.00%)    assert (dst_lit != NOT (src_lit));
  477,528 ( 0.00%)    const unsigned dst_idx = IDX (dst_lit);
  477,528 ( 0.00%)    const unsigned src_idx = IDX (src_lit);
  179,073 ( 0.00%)    assert (dst_idx != src_idx);
  358,146 ( 0.00%)    LOG ("mapping old internal literal %u to %u", src_lit, dst_lit);
  835,674 ( 0.00%)    solver->assigned[dst_idx] = solver->assigned[src_idx];
  716,292 ( 0.00%)    solver->flags[dst_idx] = solver->flags[src_idx];
        .           
  596,910 ( 0.00%)    solver->phases.best[dst_idx] = solver->phases.best[src_idx];
  596,910 ( 0.00%)    solver->phases.saved[dst_idx] = solver->phases.saved[src_idx];
  596,910 ( 0.00%)    solver->phases.target[dst_idx] = solver->phases.target[src_idx];
        .           
  477,528 ( 0.00%)    const unsigned not_src_lit = NOT (src_lit);
  477,528 ( 0.00%)    const unsigned not_dst_lit = NOT (dst_lit);
  596,910 ( 0.00%)    solver->values[dst_lit] = solver->values[src_lit];
  596,910 ( 0.00%)    solver->values[not_dst_lit] = solver->values[not_src_lit];
  179,073 ( 0.00%)  }
        .           
2,579,988 ( 0.00%)  static unsigned map_idx (kissat *solver, unsigned iidx) {
7,309,966 ( 0.00%)    int elit = PEEK_STACK (solver->export, iidx);
  859,996 ( 0.00%)    if (!elit)
  155,954 ( 0.00%)      return INVALID_IDX;
  704,042 ( 0.00%)    assert (elit);
2,464,147 ( 0.00%)    const unsigned eidx = ABS (elit);
  704,042 ( 0.00%)    assert (eidx);
5,632,336 ( 0.00%)    import *import = &PEEK_STACK (solver->import, eidx);
1,408,084 ( 0.00%)    assert (import->imported);
1,408,084 ( 0.00%)    if (import->eliminated)
        .               return INVALID_IDX;
1,056,063 ( 0.00%)    const unsigned mlit = import->lit;
2,816,168 ( 0.00%)    const unsigned midx = IDX (mlit);
1,056,063 ( 0.00%)    assert (midx <= iidx);
  352,021 ( 0.00%)    return midx;
  859,996 ( 0.00%)  }
        .           
       15 ( 0.00%)  static void compact_queue (kissat *solver) {
       18 ( 0.00%)    LOG ("compacting queue");
        9 ( 0.00%)    links *links = solver->links, *l;
       12 ( 0.00%)    unsigned *p = &solver->queue.first, prev = DISCONNECT;
        6 ( 0.00%)    solver->queue.stamp = 0;
  538,311 ( 0.00%)    for (unsigned idx; !DISCONNECTED (idx = *p); p = &l->next) {
  358,860 ( 0.00%)      const unsigned midx = map_idx (solver, idx);
4,605,370 ( 0.00%)  => build/../src/compact.c:map_idx (59,810x)
  119,620 ( 0.00%)      assert (midx != INVALID_IDX);
  538,290 ( 0.00%)      l = links + idx;
  179,430 ( 0.00%)      l->prev = prev;
  538,290 ( 0.00%)      l->stamp = ++solver->queue.stamp;
  239,240 ( 0.00%)      if (idx == solver->queue.search.idx) {
        9 ( 0.00%)        solver->queue.search.idx = midx;
       12 ( 0.00%)        solver->queue.search.stamp = l->stamp;
        .               }
  299,050 ( 0.00%)      *p = prev = midx;
        .             }
        9 ( 0.00%)    solver->queue.last = prev;
        6 ( 0.00%)    *p = DISCONNECT;
  353,516 ( 0.00%)    for (all_variables (idx)) {
  530,238 ( 0.00%)      const unsigned midx = map_idx (solver, idx);
5,433,841 ( 0.00%)  => build/../src/compact.c:map_idx (88,373x)
  176,746 ( 0.00%)      if (midx == INVALID_IDX)
   28,560 ( 0.00%)        continue;
1,256,073 ( 0.00%)      links[midx] = links[idx];
        .             }
       12 ( 0.00%)  }
        .           
       18 ( 0.00%)  static void compact_stack (kissat *solver, unsigneds *stack) {
        9 ( 0.00%)    unsigned *q = BEGIN_STACK (*stack);
        9 ( 0.00%)    const unsigned *const end = END_STACK (*stack);
  300,578 ( 0.00%)    for (const unsigned *p = q; p != end; p++) {
  225,420 ( 0.00%)      const unsigned idx = *p;
  450,840 ( 0.00%)      const unsigned midx = map_idx (solver, idx);
4,784,644 ( 0.00%)  => build/../src/compact.c:map_idx (75,140x)
  150,280 ( 0.00%)      if (midx == INVALID_IDX)
   20,857 ( 0.00%)        continue;
  325,698 ( 0.00%)      *q++ = midx;
        .             }
       45 ( 0.00%)    SET_END_OF_STACK (*stack, q);
       36 ( 0.00%)    SHRINK_STACK (*stack);
    1,092 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_shrink_stack (3x)
        9 ( 0.00%)  }
        .           
        .           static void compact_scores (kissat *solver, heap *old_scores,
       33 ( 0.00%)                              unsigned vars) {
       18 ( 0.00%)    LOG ("compacting scores");
        .           
        .             heap new_scores;
       15 ( 0.00%)    memset (&new_scores, 0, sizeof new_scores);
       42 ( 0.00%)  => ???:0x000000000010c5b0 (3x)
       18 ( 0.00%)    kissat_resize_heap (solver, &new_scores, vars);
  617,947 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_resize_heap (3x)
        .           
       12 ( 0.00%)    if (old_scores->tainted) {
       18 ( 0.00%)      LOG ("copying scores of tainted old scores heap");
  353,519 ( 0.00%)      for (all_variables (idx)) {
  530,238 ( 0.00%)        const unsigned midx = map_idx (solver, idx);
5,433,841 ( 0.00%)  => build/../src/compact.c:map_idx (88,373x)
  176,746 ( 0.00%)        if (midx == INVALID_IDX)
   28,560 ( 0.00%)          continue;
  418,691 ( 0.00%)        const double score = kissat_get_heap_score (old_scores, idx);
1,136,447 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (59,813x)
  538,317 ( 0.00%)        kissat_update_heap (solver, &new_scores, midx, score);
11,352,288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (59,813x)
        .               }
        .             } else
        .               LOG ("no need to copy scores of old untainted scores heap");
        .           
       18 ( 0.00%)    LOG ("now pushing mapped literals onto new heap");
  409,453 ( 0.00%)    for (all_stack (unsigned, idx, old_scores->stack)) {
  350,934 ( 0.00%)      const unsigned midx = map_idx (solver, idx);
4,503,653 ( 0.00%)  => build/../src/compact.c:map_idx (58,489x)
  116,978 ( 0.00%)      if (midx == INVALID_IDX)
        .                 continue;
  350,934 ( 0.00%)      kissat_push_heap (solver, &new_scores, midx);
8,991,414 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_push_heap (58,489x)
        .             }
        .           
       15 ( 0.00%)    kissat_release_heap (solver, old_scores);
    2,367 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_release_heap (3x)
       45 ( 0.00%)    *old_scores = new_scores;
       21 ( 0.00%)  }
        .           
       15 ( 0.00%)  static void compact_trail (kissat *solver) {
       18 ( 0.00%)    LOG ("compacting trail");
       24 ( 0.00%)    const size_t size = SIZE_ARRAY (solver->trail);
   90,375 ( 0.00%)    for (size_t i = 0; i < size; i++) {
  361,440 ( 0.00%)      const unsigned ilit = PEEK_ARRAY (solver->trail, i);
  158,130 ( 0.00%)      const unsigned mlit = kissat_map_literal (solver, ilit, true);
2,701,044 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (22,590x)
   45,180 ( 0.00%)      assert (mlit != INVALID_LIT);
  361,440 ( 0.00%)      POKE_ARRAY (solver->trail, i, mlit);
  180,720 ( 0.00%)      const unsigned idx = IDX (ilit);
  135,540 ( 0.00%)      assigned *a = solver->assigned + idx;
  158,130 ( 0.00%)      if (!a->binary)
   16,365 ( 0.00%)        continue;
   18,675 ( 0.00%)      const unsigned other = a->reason;
   31,125 ( 0.00%)      assert (VALID_INTERNAL_LITERAL (other));
   43,575 ( 0.00%)      const unsigned mother = kissat_map_literal (solver, other, true);
  729,560 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (6,225x)
   12,450 ( 0.00%)      assert (mother != INVALID_LIT);
   24,900 ( 0.00%)      a->reason = mother;
        .             }
       12 ( 0.00%)  }
        .           
       15 ( 0.00%)  static void compact_frames (kissat *solver) {
       18 ( 0.00%)    LOG ("compacting frames");
       33 ( 0.00%)    const size_t size = SIZE_STACK (solver->frames);
      499 ( 0.00%)    for (size_t level = 1; level < size; level++) {
    2,541 ( 0.00%)      frame *frame = &FRAME (level);
      363 ( 0.00%)      const unsigned ilit = frame->decision;
      847 ( 0.00%)      const unsigned mlit = kissat_map_literal (solver, ilit, true);
   14,594 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (121x)
      242 ( 0.00%)      assert (mlit != INVALID_LIT);
      363 ( 0.00%)      frame->decision = mlit;
        .             }
       12 ( 0.00%)  }
        .           
       18 ( 0.00%)  static void compact_export (kissat *solver, unsigned vars) {
       18 ( 0.00%)    LOG ("compacting export");
       24 ( 0.00%)    const size_t size = SIZE_STACK (solver->export);
        9 ( 0.00%)    assert (size <= UINT_MAX);
       15 ( 0.00%)    assert (size == solver->vars);
  353,507 ( 0.00%)    for (unsigned iidx = 0; iidx < size; iidx++) {
1,502,341 ( 0.00%)      const unsigned elit = PEEK_STACK (solver->export, iidx);
  176,746 ( 0.00%)      if (!elit)
   57,120 ( 0.00%)        continue;
  358,878 ( 0.00%)      const unsigned midx = map_idx (solver, iidx);
4,605,601 ( 0.00%)  => build/../src/compact.c:map_idx (59,813x)
  119,626 ( 0.00%)      if (midx == INVALID_IDX)
        .                 continue;
1,076,634 ( 0.00%)      POKE_STACK (solver->export, midx, elit);
        .             }
       54 ( 0.00%)    RESIZE_STACK (solver->export, vars);
       39 ( 0.00%)    SHRINK_STACK (solver->export);
      914 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_shrink_stack (3x)
        .           #ifndef NDEBUG
       33 ( 0.00%)    assert (SIZE_STACK (solver->export) == vars);
  239,267 ( 0.00%)    for (unsigned iidx = 0; iidx < vars; iidx++) {
1,016,821 ( 0.00%)      const int elit = PEEK_STACK (solver->export, iidx);
  897,195 ( 0.00%)      assert (VALID_EXTERNAL_LITERAL (elit));
  418,691 ( 0.00%)      const unsigned eidx = ABS (elit);
  957,008 ( 0.00%)      const import *const import = &PEEK_STACK (solver->import, eidx);
  239,252 ( 0.00%)      assert (import->imported);
  239,252 ( 0.00%)      if (import->eliminated)
        .                 continue;
  179,439 ( 0.00%)      unsigned mlit = import->lit;
  119,626 ( 0.00%)      if (elit < 0)
        .                 mlit = NOT (mlit);
  418,691 ( 0.00%)      const unsigned ilit = LIT (iidx);
  179,439 ( 0.00%)      assert (mlit == ilit);
        .             }
        .           #endif
       12 ( 0.00%)  }
        .           
       18 ( 0.00%)  static void compact_units (kissat *solver, unsigned mfixed) {
       18 ( 0.00%)    LOG ("compacting units (first fixed %u)", mfixed);
       21 ( 0.00%)    assert (kissat_fixed (solver, mfixed) > 0);
      123 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_fixed (3x)
   24,649 ( 0.00%)    for (all_stack (int, elit, solver->units)) {
   24,619 ( 0.00%)      const unsigned eidx = ABS (elit);
   34,011 ( 0.00%)      const unsigned mlit = elit < 0 ? NOT (mfixed) : mfixed;
   56,272 ( 0.00%)      const import *const import = &PEEK_STACK (solver->import, eidx);
   14,068 ( 0.00%)      assert (import->imported);
   17,585 ( 0.00%)      assert (!import->eliminated);
   10,551 ( 0.00%)      const unsigned ilit = import->lit;
   10,551 ( 0.00%)      if (mlit != ilit)
    3,582 ( 0.00%)        reimport_literal (solver, eidx, mlit);
   26,268 ( 0.00%)  => build/../src/compact.c:reimport_literal (597x)
        .             }
        9 ( 0.00%)  }
        .           
       18 ( 0.00%)  static void compact_best_and_target_values (kissat *solver, unsigned vars) {
        9 ( 0.00%)    const value *const best = solver->phases.best;
        9 ( 0.00%)    const value *const target = solver->phases.target;
        9 ( 0.00%)    const flags *const flags = solver->flags;
        .           
        3 ( 0.00%)    unsigned best_assigned = 0;
        3 ( 0.00%)    unsigned target_assigned = 0;
        .           
  239,267 ( 0.00%)    for (unsigned idx = 0; idx < vars; idx++) {
  538,317 ( 0.00%)      if (!flags[idx].active)
        3 ( 0.00%)        continue;
  358,860 ( 0.00%)      if (target[idx])
   33,881 ( 0.00%)        target_assigned++;
  358,860 ( 0.00%)      if (best[idx])
   65,330 ( 0.00%)        best_assigned++;
        .             }
        .           
       12 ( 0.00%)    if (solver->target_assigned != target_assigned) {
       12 ( 0.00%)      LOG ("compacting target assigned from %u to %u",
        .                    solver->target_assigned, target_assigned);
        6 ( 0.00%)      solver->target_assigned = target_assigned;
        .             }
        .           
       12 ( 0.00%)    if (solver->best_assigned != best_assigned) {
       12 ( 0.00%)      LOG ("compacting best assigned from %u to %u", solver->best_assigned,
        .                    best_assigned);
        6 ( 0.00%)      solver->best_assigned = best_assigned;
        .             }
        9 ( 0.00%)  }
        .           
        .           void kissat_finalize_compacting (kissat *solver, unsigned vars,
       21 ( 0.00%)                                   unsigned mfixed) {
       18 ( 0.00%)    LOG ("finalizing compacting");
       12 ( 0.00%)    assert (vars <= solver->vars);
        .           #ifdef LOGGING
       12 ( 0.00%)    assert (solver->compacting);
        .           #endif
       12 ( 0.00%)    if (vars == solver->vars) {
        .           #ifdef LOGGING
        .               solver->compacting = false;
        .               LOG ("number of variables does not change");
        .           #endif
        .               return;
        .             }
        .           
       12 ( 0.00%)    unsigned reduced = solver->vars - vars;
       18 ( 0.00%)    LOG ("compacted number of variables from %u to %u", solver->vars, vars);
        .           
        3 ( 0.00%)    bool first = true;
  353,516 ( 0.00%)    for (all_variables (iidx)) {
  883,730 ( 0.00%)      flags *flags = FLAGS (iidx);
  445,329 ( 0.00%)      if (flags->fixed && first)
        6 ( 0.00%)        first = false;
  530,220 ( 0.00%)      else if (!flags->active)
  456,960 ( 0.00%)        POKE_STACK (solver->export, iidx, 0);
        .             }
        .           
        9 ( 0.00%)    compact_trail (solver);
5,068,718 ( 0.00%)  => build/../src/compact.c:compact_trail (3x)
        .           
  353,516 ( 0.00%)    for (all_variables (iidx)) {
  618,611 ( 0.00%)      const unsigned ilit = LIT (iidx);
  618,611 ( 0.00%)      const unsigned mlit = kissat_map_literal (solver, ilit, true);
8,620,655 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (88,373x)
  356,185 ( 0.00%)      if (mlit != INVALID_LIT && ilit != mlit)
  358,146 ( 0.00%)        compact_literal (solver, mlit, ilit);
8,297,049 ( 0.00%)  => build/../src/compact.c:compact_literal (59,691x)
        .             }
        .           
        6 ( 0.00%)    if (mfixed != INVALID_LIT)
       15 ( 0.00%)      compact_units (solver, mfixed);
  222,345 ( 0.00%)  => build/../src/compact.c:compact_units (3x)
        .           
       33 ( 0.00%)    memset (solver->assigned + vars, 0, reduced * sizeof (assigned));
  457,017 ( 0.00%)  => ???:0x000000000010c5b0 (3x)
       30 ( 0.00%)    memset (solver->flags + vars, 0, reduced * sizeof (flags));
  114,297 ( 0.00%)  => ???:0x000000000010c5b0 (3x)
       36 ( 0.00%)    memset (solver->values + 2 * vars, 0, 2 * reduced * sizeof (value));
   57,177 ( 0.00%)  => ???:0x000000000010c5b0 (3x)
       45 ( 0.00%)    memset (solver->watches + 2 * vars, 0, 2 * reduced * sizeof (watches));
  913,977 ( 0.00%)  => ???:0x000000000010c5b0 (3x)
        .           
        9 ( 0.00%)    compact_queue (solver);
15,195,543 ( 0.01%)  => build/../src/compact.c:compact_queue (3x)
       18 ( 0.00%)    compact_stack (solver, &solver->sweep_schedule);
6,259,535 ( 0.00%)  => build/../src/compact.c:compact_stack (3x)
       21 ( 0.00%)    compact_scores (solver, SCORES, vars);
35,312,582 ( 0.01%)  => build/../src/compact.c:compact_scores (3x)
        9 ( 0.00%)    compact_frames (solver);
   19,527 ( 0.00%)  => build/../src/compact.c:compact_frames (3x)
       15 ( 0.00%)    compact_export (solver, vars);
13,156,270 ( 0.01%)  => build/../src/compact.c:compact_export (3x)
       15 ( 0.00%)    compact_best_and_target_values (solver, vars);
1,594,638 ( 0.00%)  => build/../src/compact.c:compact_best_and_target_values (3x)
        .           
        9 ( 0.00%)    solver->vars = vars;
        .           #ifdef LOGGING
        6 ( 0.00%)    solver->compacting = false;
        .           #endif
       12 ( 0.00%)    kissat_decrease_size (solver);
   12,422 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resize.c:kissat_decrease_size (3x)
        6 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/backtrack.c
--------------------------------------------------------------------------------
Ir                   

-- line 3 ----------------------------------------
          .           #include "inline.h"
          .           #include "inlineheap.h"
          .           #include "inlinequeue.h"
          .           #include "print.h"
          .           #include "proprobe.h"
          .           #include "propsearch.h"
          .           #include "trail.h"
          .           
262,289,022 ( 0.11%)  static inline void unassign (kissat *solver, value *values, unsigned lit) {
262,289,022 ( 0.11%)    LOG ("unassign %s", LOGLIT (lit));
262,289,022 ( 0.11%)    assert (values[lit] > 0);
349,718,696 ( 0.15%)    const unsigned not_lit = NOT (lit);
393,433,533 ( 0.17%)    values[lit] = values[not_lit] = 0;
262,289,022 ( 0.11%)    assert (solver->unassigned < VARS);
218,574,185 ( 0.09%)    solver->unassigned++;
131,144,511 ( 0.06%)  }
          .           
          .           static inline void add_unassigned_variable_back_to_queue (kissat *solver,
          .                                                                     links *links,
129,674,814 ( 0.05%)                                                            unsigned lit) {
108,062,345 ( 0.05%)    assert (!solver->stable);
172,899,752 ( 0.07%)    const unsigned idx = IDX (lit);
280,962,097 ( 0.12%)    if (links[idx].stamp > solver->queue.search.stamp)
     37,320 ( 0.00%)      kissat_update_queue (solver, links, idx);
    211,480 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinequeue.h:kissat_update_queue (6,220x)
 64,837,407 ( 0.03%)  }
          .           
          .           static inline void add_unassigned_variable_back_to_heap (kissat *solver,
          .                                                                    heap *scores,
132,614,208 ( 0.06%)                                                           unsigned lit) {
 88,409,472 ( 0.04%)    assert (solver->stable);
176,818,944 ( 0.07%)    const unsigned idx = IDX (lit);
176,818,944 ( 0.07%)    if (!kissat_heap_contains (scores, idx))
463,854,105 ( 0.20%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (22,102,368x)
  1,773,738 ( 0.00%)      kissat_push_heap (solver, scores, idx);
 87,817,566 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_push_heap (295,623x)
 66,307,104 ( 0.03%)  }
          .           
    124,520 ( 0.00%)  static void kissat_update_target_and_best_phases (kissat *solver) {
     99,616 ( 0.00%)    if (solver->probing)
          6 ( 0.00%)      return;
          .           
    124,505 ( 0.00%)    if (!solver->stable)
      9,313 ( 0.00%)      return;
          .           
     62,352 ( 0.00%)    const unsigned assigned = kissat_assigned (solver);
    280,584 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/internal.h:kissat_assigned (15,588x)
          .           #ifdef LOGGING
     93,528 ( 0.00%)    LOG ("updating target and best phases");
     93,528 ( 0.00%)    LOG ("currently %u variables assigned", assigned);
          .           #endif
          .           
     62,352 ( 0.00%)    if (solver->target_assigned < assigned) {
        536 ( 0.00%)      kissat_extremely_verbose (solver,
      2,881 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (67x)
          .                                         "updating target assigned "
          .                                         "trail height from %u to %u",
          .                                         solver->target_assigned, assigned);
        201 ( 0.00%)      solver->target_assigned = assigned;
        201 ( 0.00%)      kissat_save_target_phases (solver);
 17,120,083 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/phases.c:kissat_save_target_phases (67x)
        268 ( 0.00%)      INC (target_saved);
      1,005 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_target_saved (67x)
          .             }
          .           
     62,352 ( 0.00%)    if (solver->best_assigned < assigned) {
        184 ( 0.00%)      kissat_extremely_verbose (solver,
        989 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (23x)
          .                                         "updating best assigned "
          .                                         "trail height from %u to %u",
          .                                         solver->best_assigned, assigned);
         69 ( 0.00%)      solver->best_assigned = assigned;
         69 ( 0.00%)      kissat_save_best_phases (solver);
  6,701,943 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/phases.c:kissat_save_best_phases (23x)
        115 ( 0.00%)      INC (best_saved);
        345 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_best_saved (23x)
          .             }
     49,808 ( 0.00%)  }
          .           
          .           void kissat_backtrack_without_updating_phases (kissat *solver,
    819,330 ( 0.00%)                                                 unsigned new_level) {
    546,220 ( 0.00%)    assert (solver->level >= new_level);
    546,220 ( 0.00%)    if (solver->level == new_level)
     16,907 ( 0.00%)      return;
          .           
    717,888 ( 0.00%)    LOG ("backtracking to decision level %u", new_level);
          .           
  3,110,848 ( 0.00%)    frame *new_frame = &FRAME (new_level + 1);
  1,794,720 ( 0.00%)    SET_END_OF_STACK (solver->frames, new_frame);
          .           
    358,944 ( 0.00%)    value *values = solver->values;
    358,944 ( 0.00%)    unsigned *trail = BEGIN_ARRAY (solver->trail);
    837,536 ( 0.00%)    unsigned *new_end = trail + new_frame->trail;
    358,944 ( 0.00%)    assigned *assigned = solver->assigned;
          .           
    358,944 ( 0.00%)    unsigned *old_end = END_ARRAY (solver->trail);
    239,296 ( 0.00%)    unsigned unassigned = 0, reassigned = 0;
          .           
    239,296 ( 0.00%)    unsigned *q = new_end;
    478,592 ( 0.00%)    if (solver->stable) {
    320,580 ( 0.00%)      heap *scores = SCORES;
 89,312,372 ( 0.04%)      for (const unsigned *p = q; p != old_end; p++) {
 66,423,264 ( 0.03%)        const unsigned lit = *p;
177,128,704 ( 0.07%)        const unsigned idx = IDX (lit);
 88,564,352 ( 0.04%)        assert (idx < VARS);
132,846,528 ( 0.06%)        struct assigned *a = assigned + idx;
 66,423,264 ( 0.03%)        const unsigned level = a->level;
 66,423,264 ( 0.03%)        if (level <= new_level) {
    154,880 ( 0.00%)          const unsigned new_trail = q - trail;
    154,880 ( 0.00%)          assert (new_trail <= a->trail);
    116,160 ( 0.00%)          a->trail = new_trail;
    193,600 ( 0.00%)          *q++ = lit;
    232,320 ( 0.00%)          LOG ("reassign %s", LOGLIT (lit));
     77,440 ( 0.00%)          reassigned++;
          .                 } else {
132,614,208 ( 0.06%)          unassign (solver, values, lit);
1,083,016,032 ( 0.46%)  => build/../src/backtrack.c:unassign (22,102,368x)
132,614,208 ( 0.06%)          add_unassigned_variable_back_to_heap (solver, scores, lit);
1,194,414,081 ( 0.51%)  => build/../src/backtrack.c:add_unassigned_variable_back_to_heap (22,102,368x)
 22,102,368 ( 0.01%)          unassigned++;
          .                 }
          .               }
          .             } else {
     38,364 ( 0.00%)      links *links = solver->links;
 86,590,576 ( 0.04%)      for (const unsigned *p = q; p != old_end; p++) {
 64,885,386 ( 0.03%)        const unsigned lit = *p;
173,027,696 ( 0.07%)        const unsigned idx = IDX (lit);
 86,513,848 ( 0.04%)        assert (idx < VARS);
129,770,772 ( 0.05%)        struct assigned *a = assigned + idx;
 64,885,386 ( 0.03%)        const unsigned level = a->level;
 64,885,386 ( 0.03%)        if (level <= new_level) {
     63,972 ( 0.00%)          const unsigned new_trail = q - trail;
     63,972 ( 0.00%)          assert (new_trail <= a->trail);
     47,979 ( 0.00%)          a->trail = new_trail;
     79,965 ( 0.00%)          *q++ = lit;
     95,958 ( 0.00%)          LOG ("reassign %s", LOGLIT (lit));
     31,986 ( 0.00%)          reassigned++;
          .                 } else {
129,674,814 ( 0.05%)          unassign (solver, values, lit);
1,059,010,981 ( 0.45%)  => build/../src/backtrack.c:unassign (21,612,469x)
129,674,814 ( 0.05%)          add_unassigned_variable_back_to_queue (solver, links, lit);
756,685,215 ( 0.32%)  => build/../src/backtrack.c:add_unassigned_variable_back_to_queue (21,612,469x)
 21,612,469 ( 0.01%)          unassigned++;
          .                 }
          .               }
          .             }
  1,794,720 ( 0.00%)    SET_END_OF_ARRAY (solver->trail, q);
          .           
    358,944 ( 0.00%)    solver->level = new_level;
    717,888 ( 0.00%)    LOG ("unassigned %u literals", unassigned);
    717,888 ( 0.00%)    LOG ("reassigned %u literals", reassigned);
          .             (void) unassigned, (void) reassigned;
          .           
    478,592 ( 0.00%)    assert (new_end <= END_ARRAY (solver->trail));
    717,888 ( 0.00%)    LOG ("propagation will resume at trail position %zu",
          .                  (size_t) (new_end - trail));
    358,944 ( 0.00%)    solver->propagate = new_end;
          .           
    598,240 ( 0.00%)    assert (!solver->extended);
    273,110 ( 0.00%)  }
          .           
          .           void kissat_backtrack_in_consistent_state (kissat *solver,
      6,834 ( 0.00%)                                             unsigned new_level) {
      3,417 ( 0.00%)    kissat_update_target_and_best_phases (solver);
  1,175,218 ( 0.00%)  => build/../src/backtrack.c:kissat_update_target_and_best_phases (1,139x)
      5,695 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, new_level);
224,483,271 ( 0.09%)  => build/../src/backtrack.c:kissat_backtrack_without_updating_phases (1,139x)
      3,417 ( 0.00%)  }
          .           
    142,590 ( 0.00%)  void kissat_backtrack_after_conflict (kissat *solver, unsigned new_level) {
     95,060 ( 0.00%)    if (solver->level)
    166,355 ( 0.00%)      kissat_backtrack_without_updating_phases (solver, solver->level - 1);
4,510,359,963 ( 1.91%)  => build/../src/backtrack.c:kissat_backtrack_without_updating_phases (23,765x)
     71,295 ( 0.00%)    kissat_update_target_and_best_phases (solver);
 23,716,135 ( 0.01%)  => build/../src/backtrack.c:kissat_update_target_and_best_phases (23,765x)
    118,825 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, new_level);
505,874,016 ( 0.21%)  => build/../src/backtrack.c:kissat_backtrack_without_updating_phases (23,765x)
     71,295 ( 0.00%)  }
          .           
         65 ( 0.00%)  void kissat_backtrack_propagate_and_flush_trail (kissat *solver) {
         52 ( 0.00%)    if (solver->level) {
         40 ( 0.00%)      assert (solver->watching);
         40 ( 0.00%)      kissat_backtrack_in_consistent_state (solver, 0);
  9,850,917 ( 0.00%)  => build/../src/backtrack.c:kissat_backtrack_in_consistent_state (10x)
          .           #ifndef NDEBUG
         30 ( 0.00%)      clause *conflict =
          .           #endif
         38 ( 0.00%)          solver->probing ? kissat_probing_propagate (solver, 0, true)
        699 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (3x)
         21 ( 0.00%)                          : kissat_search_propagate (solver);
      2,092 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/propsearch.c:kissat_search_propagate (7x)
         20 ( 0.00%)      assert (!conflict);
          .             }
          .           
         65 ( 0.00%)    assert (kissat_propagated (solver));
        312 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (13x)
         65 ( 0.00%)    assert (kissat_trail_flushed (solver));
        234 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_trail_flushed (13x)
         39 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/inlinequeue.h
--------------------------------------------------------------------------------
Ir                   

          .           #ifndef _inlinequeue_h_INCLUDED
          .           #define _inlinequeue_h_INCLUDED
          .           
          .           #include "internal.h"
          .           #include "logging.h"
          .           
          .           static inline void kissat_update_queue (kissat *solver, const links *links,
 36,448,050 ( 0.02%)                                          unsigned idx) {
 18,224,025 ( 0.01%)    assert (!DISCONNECTED (idx));
 60,746,750 ( 0.03%)    const unsigned stamp = links[idx].stamp;
 36,448,050 ( 0.02%)    LOG ("queue updated to %s stamped %u", LOGVAR (idx), stamp);
 18,224,025 ( 0.01%)    solver->queue.search.idx = idx;
 18,224,025 ( 0.01%)    solver->queue.search.stamp = stamp;
 18,224,025 ( 0.01%)  }
          .           
          .           static inline void kissat_enqueue_links (kissat *solver, unsigned i,
 49,969,248 ( 0.02%)                                           links *links, queue *queue) {
 64,246,176 ( 0.03%)    struct links *p = links + i;
 28,553,856 ( 0.01%)    assert (DISCONNECTED (p->prev));
 28,553,856 ( 0.01%)    assert (DISCONNECTED (p->next));
 49,969,248 ( 0.02%)    const unsigned j = p->prev = queue->last;
 21,415,392 ( 0.01%)    queue->last = i;
 21,415,392 ( 0.01%)    if (DISCONNECTED (j))
          4 ( 0.00%)      queue->first = i;
          .             else {
 64,246,167 ( 0.03%)      struct links *l = links + j;
 28,553,852 ( 0.01%)      assert (DISCONNECTED (l->next));
 21,415,389 ( 0.01%)      l->next = i;
          .             }
 28,553,856 ( 0.01%)    if (queue->stamp == UINT_MAX) {
          .               kissat_reassign_queue_stamps (solver);
          .               assert (p->stamp == queue->stamp);
          .             } else
 64,246,176 ( 0.03%)      p->stamp = ++queue->stamp;
 21,415,392 ( 0.01%)  }
          .           
          .           static inline void kissat_dequeue_links (unsigned i, links *links,
 42,751,494 ( 0.02%)                                           queue *queue) {
 64,127,241 ( 0.03%)    struct links *l = links + i;
 42,751,494 ( 0.02%)    const unsigned j = l->prev, k = l->next;
 42,751,494 ( 0.02%)    l->prev = l->next = DISCONNECT;
 21,375,747 ( 0.01%)    if (DISCONNECTED (j)) {
         36 ( 0.00%)      assert (queue->first == i);
         36 ( 0.00%)      queue->first = k;
          .             } else {
 64,127,160 ( 0.03%)      struct links *p = links + j;
 28,500,960 ( 0.01%)      assert (p->next == i);
 21,375,720 ( 0.01%)      p->next = k;
          .             }
 21,375,747 ( 0.01%)    if (DISCONNECTED (k)) {
     10,708 ( 0.00%)      assert (queue->last == i);
      8,031 ( 0.00%)      queue->last = j;
          .             } else {
 64,103,148 ( 0.03%)      struct links *n = links + k;
 28,490,288 ( 0.01%)      assert (n->prev == i);
 21,367,716 ( 0.01%)      n->prev = j;
          .             }
 21,378,424 ( 0.01%)  }
          .           
    270,264 ( 0.00%)  static inline void kissat_enqueue (kissat *solver, unsigned idx) {
    180,176 ( 0.00%)    assert (idx < solver->vars);
    540,528 ( 0.00%)    links *links = solver->links, *l = links + idx;
    270,264 ( 0.00%)    l->prev = l->next = DISCONNECT;
    315,308 ( 0.00%)    kissat_enqueue_links (solver, idx, links, &solver->queue);
  3,108,024 ( 0.00%)  => build/../src/inlinequeue.h:kissat_enqueue_links (45,044x)
    270,264 ( 0.00%)    LOG ("enqueued %s stamped %u", LOGVAR (idx), l->stamp);
  1,081,056 ( 0.00%)    if (!VALUE (LIT (idx)))
    270,264 ( 0.00%)      kissat_update_queue (solver, links, idx);
  1,531,496 ( 0.00%)  => build/../src/inlinequeue.h:kissat_update_queue (45,044x)
          .             kissat_check_queue (solver);
    180,176 ( 0.00%)  }
          .           
    145,860 ( 0.00%)  static inline void kissat_dequeue (kissat *solver, unsigned idx) {
    116,688 ( 0.00%)    assert (idx < solver->vars);
    175,032 ( 0.00%)    LOG ("dequeued %s", LOGVAR (idx));
     87,516 ( 0.00%)    links *links = solver->links;
    116,688 ( 0.00%)    if (solver->queue.search.idx == idx) {
        180 ( 0.00%)      struct links *l = links + idx;
         60 ( 0.00%)      unsigned search = l->next;
         40 ( 0.00%)      if (search == DISCONNECT)
         60 ( 0.00%)        search = l->prev;
         40 ( 0.00%)      if (search == DISCONNECT) {
          .                 solver->queue.search.idx = DISCONNECT;
          .                 solver->queue.search.stamp = 0;
          .               } else
        120 ( 0.00%)        kissat_update_queue (solver, links, search);
        680 ( 0.00%)  => build/../src/inlinequeue.h:kissat_update_queue (20x)
          .             }
    204,204 ( 0.00%)    kissat_dequeue_links (idx, links, &solver->queue);
  1,983,528 ( 0.00%)  => build/../src/inlinequeue.h:kissat_dequeue_links (29,172x)
          .             kissat_check_queue (solver);
     87,516 ( 0.00%)  }
          .           
 42,560,520 ( 0.02%)  static inline void kissat_move_to_front (kissat *solver, unsigned idx) {
 21,280,260 ( 0.01%)    queue *queue = &solver->queue;
 21,280,260 ( 0.01%)    links *links = solver->links;
 28,373,680 ( 0.01%)    if (idx == queue->last) {
          .               assert (DISCONNECTED (links[idx].next));
          .               return;
          .             }
 28,373,680 ( 0.01%)    assert (idx < solver->vars);
163,148,660 ( 0.07%)    const value tmp = VALUE (LIT (idx));
 18,620,932 ( 0.01%)    if (tmp && queue->search.idx == idx) {
      1,360 ( 0.00%)      unsigned prev = links[idx].prev;
        408 ( 0.00%)      if (!DISCONNECTED (prev))
        952 ( 0.00%)        kissat_update_queue (solver, links, prev);
      4,624 ( 0.00%)  => build/../src/inlinequeue.h:kissat_update_queue (136x)
          .               else {
          .                 unsigned next = links[idx].next;
          .                 assert (!DISCONNECTED (next));
          .                 kissat_update_queue (solver, links, next);
          .               }
          .             }
 42,560,520 ( 0.02%)    kissat_dequeue_links (idx, links, queue);
482,352,496 ( 0.20%)  => build/../src/inlinequeue.h:kissat_dequeue_links (7,093,420x)
 42,560,520 ( 0.02%)    kissat_enqueue_links (solver, idx, links, queue);
489,445,980 ( 0.21%)  => build/../src/inlinequeue.h:kissat_enqueue_links (7,093,420x)
 42,560,520 ( 0.02%)    LOG ("moved-to-front %s stamped %u", LOGVAR (idx), LINK (idx).stamp);
 14,186,840 ( 0.01%)    if (!tmp)
 41,894,279 ( 0.02%)      kissat_update_queue (solver, links, idx);
203,486,498 ( 0.09%)  => build/../src/inlinequeue.h:kissat_update_queue (5,984,897x)
          .             kissat_check_queue (solver);
 21,280,260 ( 0.01%)  }
          .           
          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/fastassign.h
--------------------------------------------------------------------------------
Ir                   

-- line 3 ----------------------------------------
          .           
          .           #define FAST_ASSIGN
          .           
          .           #include "inline.h"
          .           #include "inlineassign.h"
          .           
          .           static inline void kissat_fast_binary_assign (
          .               kissat *solver, const bool probing, const unsigned level, value *values,
 83,020,660 ( 0.04%)      assigned *assigned, unsigned lit, unsigned other) {
 83,016,288 ( 0.04%)    if (GET_OPTION (jumpreasons) && level && solver->classification.bigbig) {
 54,510,560 ( 0.02%)      unsigned other_idx = IDX (other);
 40,882,920 ( 0.02%)      struct assigned *a = assigned + other_idx;
 34,069,100 ( 0.01%)      if (a->binary) {
 21,602,742 ( 0.01%)        LOGBINARY (lit, other, "jumping %s reason", LOGLIT (lit));
 14,401,828 ( 0.01%)        INC (jumped_reasons);
 54,006,855 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_jumped_reasons (3,600,457x)
 10,801,371 ( 0.00%)        other = a->reason;
          .               }
          .             }
107,926,858 ( 0.05%)    kissat_fast_assign (solver, probing, level, values, assigned, true, lit,
1,547,290,765 ( 0.65%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineassign.h:kissat_fast_assign (8,302,066x)
          .                                 other);
 49,812,396 ( 0.02%)    LOGBINARY (lit, other, "assign %s reason", LOGLIT (lit));
 24,906,198 ( 0.01%)  }
          .           
          .           static inline void
          .           kissat_fast_assign_reference (kissat *solver, value *values,
          .                                         assigned *assigned, unsigned lit,
316,125,243 ( 0.13%)                                reference ref, clause *reason) {
245,875,189 ( 0.10%)    assert (reason == kissat_dereference_clause (solver, ref));
4,806,322,635 ( 2.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (35,125,027x)
          .             const unsigned level =
316,125,243 ( 0.13%)        kissat_assignment_level (solver, values, assigned, lit, reason);
4,323,412,116 ( 1.83%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineassign.h:kissat_assignment_level (35,125,027x)
140,500,108 ( 0.06%)    assert (level <= solver->level);
 70,250,054 ( 0.03%)    assert (ref != DECISION_REASON);
 70,250,054 ( 0.03%)    assert (ref != UNIT_REASON);
526,875,405 ( 0.22%)    kissat_fast_assign (solver, solver->probing, level, values, assigned,
6,820,234,741 ( 2.88%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineassign.h:kissat_fast_assign (35,125,027x)
          .                                 false, lit, ref);
210,750,162 ( 0.09%)    LOGREF (ref, "assign %s reason", LOGLIT (lit));
105,375,081 ( 0.04%)  }
          .           
          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/propsearch.c
--------------------------------------------------------------------------------
Ir                   

-- line 5 ----------------------------------------
          .           
          .           #define PROPAGATE_LITERAL search_propagate_literal
          .           #define PROPAGATION_TYPE "search"
          .           
          .           #include "proplit.h"
          .           
          .           static inline void
          .           update_search_propagation_statistics (kissat *solver,
    609,330 ( 0.00%)                                        const unsigned *saved_propagate) {
    487,464 ( 0.00%)    assert (saved_propagate <= solver->propagate);
    609,330 ( 0.00%)    const unsigned propagated = solver->propagate - saved_propagate;
          .           
    731,196 ( 0.00%)    LOG ("propagated %u literals", propagated);
    731,196 ( 0.00%)    LOG ("propagation took %" PRIu64 " ticks", solver->ticks);
          .           
    731,196 ( 0.00%)    ADD (propagations, propagated);
  2,437,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_propagations (121,866x)
    853,062 ( 0.00%)    ADD (ticks, solver->ticks);
  2,437,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_ticks (121,866x)
          .           
    731,196 ( 0.00%)    ADD (search_propagations, propagated);
  2,437,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_search_propagations (121,866x)
    853,062 ( 0.00%)    ADD (search_ticks, solver->ticks);
  2,437,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_search_ticks (121,866x)
          .           
    487,464 ( 0.00%)    if (solver->stable) {
    339,786 ( 0.00%)      ADD (stable_propagations, propagated);
  1,132,620 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_stable_propagations (56,631x)
    396,417 ( 0.00%)      ADD (stable_ticks, solver->ticks);
  1,132,620 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_stable_ticks (56,631x)
          .             } else {
    391,410 ( 0.00%)      ADD (focused_propagations, propagated);
  1,304,700 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_focused_propagations (65,235x)
    456,645 ( 0.00%)      ADD (focused_ticks, solver->ticks);
  1,304,700 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_focused_ticks (65,235x)
          .             }
    422,229 ( 0.00%)  }
          .           
    609,330 ( 0.00%)  static clause *search_propagate (kissat *solver) {
    121,866 ( 0.00%)    clause *res = 0;
    365,598 ( 0.00%)    unsigned *propagate = solver->propagate;
225,779,108 ( 0.10%)    while (!res && propagate != END_ARRAY (solver->trail))
337,531,635 ( 0.14%)      res = search_propagate_literal (solver, *propagate++);
51,101,476,768 (21.62%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proplit.h:search_propagate_literal (37,503,515x)
    365,598 ( 0.00%)    solver->propagate = propagate;
    121,866 ( 0.00%)    return res;
    243,732 ( 0.00%)  }
          .           
    609,330 ( 0.00%)  clause *kissat_search_propagate (kissat *solver) {
    609,330 ( 0.00%)    assert (!solver->probing);
    487,464 ( 0.00%)    assert (solver->watching);
    609,330 ( 0.00%)    assert (!solver->inconsistent);
          .           
  1,096,794 ( 0.00%)    START (propagate);
          .           
    243,732 ( 0.00%)    solver->ticks = 0;
    365,598 ( 0.00%)    const unsigned *saved_propagate = solver->propagate;
    487,464 ( 0.00%)    clause *conflict = search_propagate (solver);
51,666,615,501 (21.85%)  => build/../src/propsearch.c:search_propagate (121,866x)
    609,330 ( 0.00%)    update_search_propagation_statistics (solver, saved_propagate);
 23,454,903 ( 0.01%)  => build/../src/propsearch.c:update_search_propagation_statistics (121,866x)
    731,196 ( 0.00%)    kissat_update_conflicts_and_trail (solver, conflict, true);
  2,605,072 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proplit.h:kissat_update_conflicts_and_trail (121,866x)
    338,776 ( 0.00%)    if (conflict && solver->randec) {
      1,233 ( 0.00%)      if (!--solver->randec)
         84 ( 0.00%)        kissat_very_verbose (solver, "last random decision conflict");
        516 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (12x)
        500 ( 0.00%)      else if (solver->randec == 1)
         84 ( 0.00%)        kissat_very_verbose (solver,
        516 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (12x)
          .                                      "one more random decision conflict to go");
          .               else
      1,469 ( 0.00%)        kissat_very_verbose (solver,
     82,490 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (113x)
      4,859 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (113x)
          .                                      "%s more random decision conflicts to go",
        226 ( 0.00%)                             FORMAT_COUNT (solver->randec));
          .             }
          .           
  1,096,794 ( 0.00%)    STOP (propagate);
          .           
    121,866 ( 0.00%)    return conflict;
    243,732 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/phases.c
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           
         .           #define increase_phases(NAME) \
         .             do { \
         .               assert (old_size < new_size); \
         .               realloc_phases (NAME); \
         .               memset (solver->phases.NAME + old_size, 0, new_size - old_size); \
         .             } while (0)
         .           
        24 ( 0.00%)  void kissat_increase_phases (kissat *solver, unsigned new_size) {
        12 ( 0.00%)    const unsigned old_size = solver->size;
        12 ( 0.00%)    assert (old_size < new_size);
        24 ( 0.00%)    LOG ("increasing phases from %u to %u", old_size, new_size);
        88 ( 0.00%)    increase_phases (best);
    87,819 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
    44,355 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (4x)
        88 ( 0.00%)    increase_phases (saved);
    87,819 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
    62,529 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (4x)
        88 ( 0.00%)    increase_phases (target);
    87,819 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
    70,785 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (4x)
        12 ( 0.00%)  }
         .           
        18 ( 0.00%)  void kissat_decrease_phases (kissat *solver, unsigned new_size) {
         9 ( 0.00%)    const unsigned old_size = solver->size;
         9 ( 0.00%)    assert (old_size > new_size);
        18 ( 0.00%)    LOG ("decreasing phases from %u to %u", old_size, new_size);
        27 ( 0.00%)    realloc_phases (best);
     1,183 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (3x)
        27 ( 0.00%)    realloc_phases (saved);
     1,140 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (3x)
        27 ( 0.00%)    realloc_phases (target);
     1,140 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (3x)
         9 ( 0.00%)  }
         .           
         .           #define release_phases(NAME, SIZE) \
         .             kissat_free (solver, solver->phases.NAME, SIZE)
         .           
         5 ( 0.00%)  void kissat_release_phases (kissat *solver) {
         3 ( 0.00%)    const unsigned size = solver->size;
         7 ( 0.00%)    release_phases (best, size);
       267 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
         7 ( 0.00%)    release_phases (saved, size);
       195 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
         7 ( 0.00%)    release_phases (target, size);
       195 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
         3 ( 0.00%)  }
         .           
       540 ( 0.00%)  static void save_phases (kissat *solver, value *phases) {
       270 ( 0.00%)    const value *const values = solver->values;
       540 ( 0.00%)    const value *const end = phases + VARS;
       180 ( 0.00%)    value const *v = values;
10,445,255 ( 0.00%)    for (value *p = phases, tmp; p != end; p++, v += 2)
10,444,715 ( 0.00%)      if ((tmp = *v))
 2,927,736 ( 0.00%)        *p = tmp;
       720 ( 0.00%)    assert (v == values + LITS);
       270 ( 0.00%)  }
         .           
       115 ( 0.00%)  void kissat_save_best_phases (kissat *solver) {
         .             assert (sizeof (value) == 1);
       138 ( 0.00%)    LOG ("saving %u best values", VARS);
       138 ( 0.00%)    save_phases (solver, solver->phases.best);
 6,701,483 ( 0.00%)  => build/../src/phases.c:save_phases (23x)
        69 ( 0.00%)  }
         .           
       335 ( 0.00%)  void kissat_save_target_phases (kissat *solver) {
         .             assert (sizeof (value) == 1);
       402 ( 0.00%)    LOG ("saving %u target values", VARS);
       402 ( 0.00%)    save_phases (solver, solver->phases.target);
17,118,743 ( 0.01%)  => build/../src/phases.c:save_phases (67x)
       201 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/statistics.h
--------------------------------------------------------------------------------
Ir                     

-- line 393 ----------------------------------------
            .             static inline uint64_t kissat_get_##NAME (statistics *statistics) { \
            .               (void) statistics; \
            .               return UINT64_MAX; \
            .             }
            .           
            .           /*------------------------------------------------------------------------*/
            .           // clang-format off
            .           
1,376,993,578 ( 0.58%)  METRICS_COUNTERS_AND_STATISTICS
            .           
            .           #undef COUNTER
            .           #undef IGNORE
            .           
            .           // clang-format on
            .           /*------------------------------------------------------------------------*/
            .           
            .           #define INC(NAME) kissat_inc_##NAME (&solver->statistics)
-- line 409 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/restart.c
--------------------------------------------------------------------------------
Ir                   

-- line 55 ----------------------------------------
          .             }
          .             return false;
          .           }
          .           #endif
          .           
          .           bool kissat_restarting (kissat *solver) {
          .             assert (solver->unassigned);
          .             if (!GET_OPTION (restart))
    490,085 ( 0.00%)      return false;
    392,068 ( 0.00%)    if (!solver->level)
    392,068 ( 0.00%)      return false;
          .             if (CONFLICTS < solver->limits.restart.conflicts)
    392,068 ( 0.00%)      return false;
        968 ( 0.00%)    if (solver->stable)
    585,198 ( 0.00%)      return kissat_reluctant_triggered (&solver->reluctant);
     67,890 ( 0.00%)    const double fast = AVERAGE (fast_glue);
    254,352 ( 0.00%)    const double slow = AVERAGE (slow_glue);
    205,055 ( 0.00%)    const double margin = (100.0 + GET_OPTION (restartmargin)) / 100.0;
    492,141 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/reluctant.h:kissat_reluctant_triggered (41,011x)
    338,655 ( 0.00%)    const double limit = margin * slow;
    338,655 ( 0.00%)    kissat_extremely_verbose (solver,
    203,193 ( 0.00%)                              "restart glue limit %g = "
     67,731 ( 0.00%)                              "%.02f * %g (slow glue) %c %g (fast glue)",
    449,300 ( 0.00%)                              limit, margin, slow,
  1,151,427 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (22,577x)
          .                                       (limit > fast    ? '>'
          .                                        : limit == fast ? '='
          .                                                        : '<'),
          .                                       fast);
          .             return (limit <= fast);
      7,840 ( 0.00%)  }
          .           
     67,731 ( 0.00%)  void kissat_update_focused_restart_limit (kissat *solver) {
    196,034 ( 0.00%)    assert (!solver->stable);
          .             limits *limits = &solver->limits;
      5,620 ( 0.00%)    uint64_t restarts = solver->statistics.restarts;
      5,620 ( 0.00%)    uint64_t delta = GET_OPTION (restartint);
      3,372 ( 0.00%)    if (restarts)
      3,372 ( 0.00%)      delta += kissat_logn (restarts) - 1;
      4,496 ( 0.00%)    limits->restart.conflicts = CONFLICTS + delta;
      2,248 ( 0.00%)    kissat_extremely_verbose (solver,
     23,583 ( 0.00%)                              "focused restart limit at %" PRIu64
    136,382 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_logn (1,123x)
      6,744 ( 0.00%)                              " after %" PRIu64 " conflicts ",
      8,992 ( 0.00%)                              limits->restart.conflicts, delta);
     48,332 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (1,124x)
          .           }
          .           
          .           static unsigned reuse_stable_trail (kissat *solver) {
      3,372 ( 0.00%)    const heap *const scores = SCORES;
          .             const unsigned next_idx = kissat_next_decision_variable (solver);
         45 ( 0.00%)    const double limit = kissat_get_heap_score (scores, next_idx);
         27 ( 0.00%)    unsigned level = solver->level, res = 0;
         36 ( 0.00%)    while (res < level) {
    171,541 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/decide.c:kissat_next_decision_variable (9x)
         63 ( 0.00%)      frame *f = &FRAME (res + 1);
        171 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (9x)
         36 ( 0.00%)      const unsigned idx = IDX (f->decision);
        133 ( 0.00%)      const double score = kissat_get_heap_score (scores, idx);
      1,040 ( 0.00%)      if (score <= limit)
        440 ( 0.00%)        break;
        280 ( 0.00%)      res++;
        760 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (40x)
        120 ( 0.00%)    }
          8 ( 0.00%)    return res;
         32 ( 0.00%)  }
          .           
          9 ( 0.00%)  static unsigned reuse_focused_trail (kissat *solver) {
         18 ( 0.00%)    const links *const links = solver->links;
          .             const unsigned next_idx = kissat_next_decision_variable (solver);
      5,600 ( 0.00%)    const unsigned limit = links[next_idx].stamp;
      3,360 ( 0.00%)    LOG ("next decision variable stamp %u", limit);
      4,480 ( 0.00%)    unsigned level = solver->level, res = 0;
    369,447 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/decide.c:kissat_next_decision_variable (1,120x)
     11,200 ( 0.00%)    while (res < level) {
      6,720 ( 0.00%)      frame *f = &FRAME (res + 1);
      4,480 ( 0.00%)      const unsigned idx = IDX (f->decision);
     38,123 ( 0.00%)      const unsigned score = links[idx].stamp;
    302,042 ( 0.00%)      if (score <= limit)
    127,787 ( 0.00%)        break;
    116,170 ( 0.00%)      res++;
     34,851 ( 0.00%)    }
        582 ( 0.00%)    return res;
     11,035 ( 0.00%)  }
          .           
      1,120 ( 0.00%)  static unsigned reuse_trail (kissat *solver) {
      2,240 ( 0.00%)    assert (solver->level);
          .             assert (!EMPTY_STACK (solver->trail));
      5,645 ( 0.00%)  
      4,516 ( 0.00%)    if (!GET_OPTION (restartreusetrail))
      6,774 ( 0.00%)      return 0;
          .           
      4,516 ( 0.00%)    unsigned res;
          .           
          .             if (solver->stable)
          .               res = reuse_stable_trail (solver);
          .             else
      4,516 ( 0.00%)      res = reuse_focused_trail (solver);
         45 ( 0.00%)  
    174,759 ( 0.00%)  => build/../src/restart.c:reuse_stable_trail (9x)
          .             LOG ("matching trail level %u", res);
      4,480 ( 0.00%)  
  1,039,237 ( 0.00%)  => build/../src/restart.c:reuse_focused_trail (1,120x)
          .             if (res) {
      6,774 ( 0.00%)      INC (restarts_reused_trails);
          .               ADD (restarts_reused_levels, res);
      2,258 ( 0.00%)      LOG ("restart reuses trail at decision level %u", res);
      2,848 ( 0.00%)    } else
     10,680 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_restarts_reused_trails (712x)
      4,272 ( 0.00%)      LOG ("restarts does not reuse the trail");
     14,240 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_restarts_reused_levels (712x)
      4,272 ( 0.00%)  
          .             return res;
      2,502 ( 0.00%)  }
          .           
      1,129 ( 0.00%)  #if MAB
      2,258 ( 0.00%)  void restart_mab(kissat * solver){   
          .           	unsigned stable_restarts = 0;
          .           	solver->mab_reward[solver->heuristic] += !solver->mab_chosen_tot?0:log2(solver->mab_decisions)/solver->mab_chosen_tot;
          .           	for (all_variables (idx)) solver->mab_chosen[idx]=0;
          .           	solver->mab_chosen_tot = 0;
          .           	solver->mab_decisions = 0;
          .           	for(unsigned i=0;i<solver->mab_heuristics;i++) stable_restarts +=  solver->mab_select[i];
          .           	if(stable_restarts < solver->mab_heuristics) {
          .           		solver->heuristic = solver->heuristic==0?1:0; 
-- line 167 ----------------------------------------
-- line 175 ----------------------------------------
          .           	}
          .           	solver->mab_select[solver->heuristic]++; 
          .           }
          .           
          .           
          .           void kissat_restart_mab(kissat *solver) {
          .             unsigned level = reuse_trail (solver);
          .             kissat_backtrack_in_consistent_state (solver, level);
      5,645 ( 0.00%)  if(level != 0){
      3,387 ( 0.00%)      //printf("decisions: %d\n", solver->reset_decisions);
      4,552 ( 0.00%)      //printf("conflicts: %d\n", solver->reset_conflicts);
          .               // Seed the random number generator
      3,387 ( 0.00%)      srand(time(NULL));
          .           
      9,032 ( 0.00%)      //Thompson
  1,295,721 ( 0.00%)  => build/../src/restart.c:reuse_trail (1,129x)
          .               statistics *statistics = &solver->statistics;
          .           
      4,552 ( 0.00%)      //compute local learning rate
      5,645 ( 0.00%)      int delta = statistics->search_ticks - solver->reset_ticks;
215,826,935 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_in_consistent_state (1,129x)
      4,552 ( 0.00%)      solver->reset_ticks = statistics->search_ticks;
      2,258 ( 0.00%)      double localLearningRate = (solver->reset_conflicts * 1.0) / solver->reset_decisions;
          .               // double localLearningRate = (delta * 0.01) / solver->reset_decisions;
          .           
          .               solver-> reset_conflicts = 0;
      2,848 ( 0.00%)      solver-> reset_decisions = 0;
  4,875,776 ( 0.00%)  => ???:0x000000000010c6a0 (712x)
      5,696 ( 0.00%)  => ???:0x000000000010c680 (712x)
          .               //printf("local learning rate: %0.2f\n", localLearningRate);
          .               //printf("learning rateEMB: %0.2f\n\n", solver->learningRateEMA);
          .               //update success and failures
          .               if (solver-> resetTotalTimes != 0){
      7,120 ( 0.00%)        if (localLearningRate >= solver->learningRateEMA){
      1,424 ( 0.00%)          	if (solver->resetPrevLever == 0){
      1,424 ( 0.00%)          	  solver->reset_wins++;
          .                   	}
          .                   	else{
          .                   	  solver->restart_wins++;
      2,848 ( 0.00%)          	}
      3,555 ( 0.00%)        }
          .                 else{
          .                 	if (solver->resetPrevLever == 0){
          .                 	  solver->reset_loses++;
          .                 	}
          .                 	else{
          .                 	  solver->restart_loses++;
          .                 	}
          .                 }
      2,844 ( 0.00%)      }
      4,816 ( 0.00%)      //update LLR-MAB
          .               solver-> learningRateEMA *= solver-> resetDecay;
          .               solver->learningRateEMA += localLearningRate * (1.0 - solver->resetDecay);
        138 ( 0.00%)  
          .               // printf("reset_wins: %0.2f\n", solver->reset_wins);
          .               // printf("reset_loses: %0.2f\n", solver->reset_loses);
          .               // printf("restart_wins: %0.2f\n", solver->restart_wins);
          .               // printf("restart_loses: %0.2f\n", solver->restart_loses);
      4,984 ( 0.00%)      //select a lever
      7,120 ( 0.00%)      solver->resetPrevLever = select_lever(solver->reset_wins, solver->reset_loses, solver->restart_wins, solver->restart_loses);
          .               solver->resetTotalTimes++;
          .               if (solver->resetPrevLever == 0){
          .                 solver->reset_wins *= solver->resetDecay;
          .                 solver->reset_loses *= solver->resetDecay;
          .               }
          .               else{
     10,680 ( 0.00%)        solver->restart_wins *= solver->resetDecay;
 37,739,217 ( 0.02%)  => ???:select_lever (712x)
      3,560 ( 0.00%)        solver->restart_loses *= solver->resetDecay;
      2,848 ( 0.00%)      }
      4,823 ( 0.00%)  
      5,512 ( 0.00%)      //printf("lever: %d\n\n",solver->resetPrevLever);
          .           
          .               // Probability of the event occurring (e.g. 0.3 means 30% chance)
        161 ( 0.00%)      //double probability = 0.5;
        161 ( 0.00%)      // Generate a random number between 0 and 1
          .               //double random_number = (double) rand() / RAND_MAX;
          .               // Check if the event occurs
          .               //if (random_number <= probability) {
          .               if (solver->resetPrevLever == 0) {
          .                 // Event occurred, execute the code here
          .                 //reset activities
          .                 for (all_variables(idx)) {
          .                   kissat_update_heap(solver, &solver->scores, idx, (double) rand() / RAND_MAX*0.00001);
          .                 }
          .                 //update scores
      2,848 ( 0.00%)        heap *scores = SCORES;
          .                 for (all_variables (idx))
          .                   if (ACTIVE (idx) && !kissat_heap_contains (scores, idx))
 70,640,928 ( 0.03%)            kissat_push_heap (solver, scores, idx);
282,541,664 ( 0.12%)        solver->nof_resets++;
1,722,243,115 ( 0.73%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (17,658,854x)
1,057,253,428 ( 0.45%)  => ???:0x000000000010c4e0 (17,658,854x)
          .               }
          .               else{
      2,067 ( 0.00%)        solver->nof_restarts++; 
 70,640,928 ( 0.03%)      }
339,434,206 ( 0.14%)    }
288,376,906 ( 0.12%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (13,733,638x)
    176,952 ( 0.00%)    else{
  6,070,368 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_push_heap (29,492x)
      4,134 ( 0.00%)      solver->nof_restarts++;  
          .             }
          .           
        138 ( 0.00%)    
          .             if (!solver->stable)
          .               kissat_update_focused_restart_limit (solver);
          .           }
      2,085 ( 0.00%)  #endif
          .           
          .           void kissat_restart (kissat *solver) {
          .             START (restart);
      5,645 ( 0.00%)    INC (restarts);
      3,360 ( 0.00%)  
    251,379 ( 0.00%)  => build/../src/restart.c:kissat_update_focused_restart_limit (1,120x)
      4,552 ( 0.00%)  #if MAB
      3,387 ( 0.00%)    // simply forward there
          .             kissat_restart_mab(solver);
          .             
      5,645 ( 0.00%)    REPORT (1, 'R');
     10,161 ( 0.00%)    STOP (restart); 
      4,516 ( 0.00%)    return
     16,935 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_restarts (1,129x)
          .           #endif
          .           
          .             ADD (restarts_levels, solver->level);
      3,387 ( 0.00%)    if (solver->stable){
4,097,511,311 ( 1.73%)  => build/../src/restart.c:kissat_restart_mab (1,129x)
          .               INC (stable_restarts);
      5,645 ( 0.00%)      // printf ("mylog: stable restart");
     66,611 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (1,129x)
     10,161 ( 0.00%)    } else {
          .               INC (focused_restarts);
          .               // printf ("mylog: focused restart");
          .             }
      9,032 ( 0.00%)    unsigned level = reuse_trail (solver);
     22,580 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_restarts_levels (1,129x)
          .             kissat_extremely_verbose (solver,
          .                                       "restarting after %" PRIu64 " conflicts"
          .                                       " (limit %" PRIu64 ")",
          .                                       CONFLICTS, solver->limits.restart.conflicts);
          .             LOG ("restarting to level %u", level);
          .             // printf ("mylog: restart to %u \n", level);
          .             kissat_backtrack_in_consistent_state (solver, level);
          .           
-- line 305 ----------------------------------------
-- line 322 ----------------------------------------
          .           
          .             REPORT (1, 'R');
          .             STOP (restart);
          .           }
          .           
          .           
          .           // what's the difference between reset and others
          .           void kissat_reset (kissat *solver){
      2,258 ( 0.00%)    unsigned level = reuse_trail (solver);
          .             kissat_backtrack_in_consistent_state (solver, level);
          .             if (!solver->stable)
          .               kissat_update_focused_restart_limit (solver);
          .           
          .             randomize_activity_score(solver);
          .           }
--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/minimize.c
--------------------------------------------------------------------------------
Ir                   

          .           #include "minimize.h"
          .           #include "inline.h"
          .           
          .           static inline int minimized_index (kissat *solver, bool minimizing,
          .                                              assigned *a, unsigned lit, unsigned idx,
 92,417,030 ( 0.04%)                                     unsigned depth) {
          .           #if !defined(LOGGING) && defined(NDEBUG)
          .             (void) lit;
          .           #endif
          .           #ifdef NDEBUG
          .             (void) idx;
          .           #endif
 83,175,327 ( 0.04%)    assert (IDX (lit) == idx);
 64,691,921 ( 0.03%)    assert (solver->assigned + idx == a);
 36,966,812 ( 0.02%)    if (!a->level) {
    275,688 ( 0.00%)      LOG2 ("skipping root level literal %s", LOGLIT (lit));
     91,896 ( 0.00%)      return 1;
          .             }
 54,533,819 ( 0.02%)    if (a->removable && depth) {
 21,763,788 ( 0.01%)      LOG2 ("skipping removable literal %s", LOGLIT (lit));
  7,254,596 ( 0.00%)      return 1;
          .             }
 22,273,828 ( 0.01%)    assert (a->reason != UNIT_REASON);
 22,273,828 ( 0.01%)    if (a->reason == DECISION_REASON) {
    899,862 ( 0.00%)      LOG2 ("can not remove decision literal %s", LOGLIT (lit));
    299,954 ( 0.00%)      return -1;
          .             }
 27,092,400 ( 0.01%)    if (a->poisoned) {
  1,391,448 ( 0.00%)      LOG2 ("can not remove poisoned literal %s", LOGLIT (lit));
    463,816 ( 0.00%)      return -1;
          .             }
 20,746,288 ( 0.01%)    if (minimizing || !depth) {
 16,346,954 ( 0.01%)      frame *frame = &FRAME (a->level);
  2,514,916 ( 0.00%)      if (frame->used <= 1) {
          .                 LOG2 ("can not remove singleton frame literal %s", LOGLIT (lit));
          .                 return -1;
          .               }
          .             }
  5,186,572 ( 0.00%)    return 0;
 18,483,406 ( 0.01%)  }
          .           
          .           static bool minimize_literal (kissat *, bool, assigned *, unsigned lit,
          .                                         unsigned depth);
          .           
          .           static inline bool minimize_reference (kissat *solver, bool minimizing,
          .                                                  assigned *assigned, reference ref,
 40,547,730 ( 0.02%)                                         unsigned lit, unsigned depth) {
 24,328,638 ( 0.01%)    const unsigned next_depth = (depth == UINT_MAX) ? depth : depth + 1;
 32,438,184 ( 0.01%)    const unsigned not_lit = NOT (lit);
 24,328,638 ( 0.01%)    clause *c = kissat_dereference_clause (solver, ref);
 86,850,970 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (634,842x)
 16,219,092 ( 0.01%)    if (GET_OPTION (minimizeticks))
 16,219,092 ( 0.01%)      INC (search_ticks);
  9,522,630 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_search_ticks (634,842x)
127,632,785 ( 0.05%)    for (all_literals_in_clause (other, c))
 53,041,596 ( 0.02%)      if (other != not_lit &&
 63,458,766 ( 0.03%)          !minimize_literal (solver, minimizing, assigned, other, next_depth))
2,209,223,754 ( 0.93%)  => build/../src/minimize.c:minimize_literal'2 (1,234,171x)
  3,797,858 ( 0.00%)        return false;
  2,155,844 ( 0.00%)    return true;
  8,109,546 ( 0.00%)  }
          .           
          .           static inline bool minimize_binary (kissat *solver, bool minimizing,
          .                                               assigned *assigned, unsigned lit,
  9,800,244 ( 0.00%)                                      unsigned depth) {
  8,711,328 ( 0.00%)    const size_t saved = SIZE_STACK (solver->minimize);
          .             bool res;
  2,220,715 ( 0.00%)    for (unsigned next = lit;;) {
  9,054,392 ( 0.00%)      const unsigned next_idx = IDX (next);
  6,790,794 ( 0.00%)      struct assigned *a = assigned + next_idx;
 11,317,990 ( 0.00%)      int tmp = minimized_index (solver, minimizing, a, next, next_idx, 1);
 42,890,758 ( 0.02%)  => build/../src/minimize.c:minimized_index (867,714x)
  2,263,598 ( 0.00%)      if (tmp) {
  2,691,207 ( 0.00%)        res = (tmp > 0);
    897,069 ( 0.00%)        break;
          .               }
  3,051,555 ( 0.00%)      PUSH_STACK (solver->minimize, next_idx);
        279 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
  1,643,110 ( 0.00%)      if (!a->binary) {
  1,151,082 ( 0.00%)        const unsigned next_depth = (depth == UINT_MAX) ? depth : depth + 1;
  2,302,164 ( 0.00%)        res = minimize_reference (solver, minimizing, assigned, a->reason,
468,715,642 ( 0.20%)  => build/../src/minimize.c:minimize_reference (59,366x)
245,934,581 ( 0.10%)  => build/../src/minimize.c:minimize_reference'2 (56,732x)
          .                                           next, next_depth);
    191,847 ( 0.00%)        break;
          .               }
    128,649 ( 0.00%)      next = a->reason;
          .             }
  6,533,496 ( 0.00%)    unsigned *begin = BEGIN_STACK (solver->minimize) + saved;
  3,266,748 ( 0.00%)    const unsigned *const end = END_STACK (solver->minimize);
  3,266,748 ( 0.00%)    assert (begin <= end);
  2,177,832 ( 0.00%)    if (res)
  6,328,111 ( 0.00%)      for (const unsigned *p = begin; p != end; p++)
    667,856 ( 0.00%)        kissat_push_removable (solver, assigned, *p);
  2,958,424 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_removable (60,376x)
          .             else
  1,993,802 ( 0.00%)      for (const unsigned *p = begin; p != end; p++)
    975,254 ( 0.00%)        kissat_push_poisoned (solver, assigned, *p);
  4,335,710 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_poisoned (88,474x)
 13,710,072 ( 0.01%)    SET_END_OF_STACK (solver->minimize, begin);
  1,088,916 ( 0.00%)    return res;
  2,177,832 ( 0.00%)  }
          .           
          .           static bool minimize_literal (kissat *solver, bool minimizing,
          .                                         assigned *assigned, unsigned lit,
 81,099,040 ( 0.03%)                                unsigned depth) {
 48,659,424 ( 0.02%)    LOG ("trying to minimize literal %s at recursion depth %d", LOGLIT (lit),
          .                  depth);
 97,318,848 ( 0.04%)    assert (VALUE (lit) < 0);
 20,121,152 ( 0.01%)    assert (depth || EMPTY_STACK (solver->minimize));
 32,439,616 ( 0.01%)    assert (GET_OPTION (minimizedepth) > 0);
 32,439,616 ( 0.01%)    if (depth >= (unsigned) GET_OPTION (minimizedepth))
          .               return false;
 64,879,232 ( 0.03%)    const unsigned idx = IDX (lit);
 48,659,424 ( 0.02%)    struct assigned *a = assigned + idx;
 89,208,944 ( 0.04%)    int tmp = minimized_index (solver, minimizing, a, lit, idx, depth);
 78,348,323 ( 0.03%)  => build/../src/minimize.c:minimized_index (1,058,930x)
 16,219,808 ( 0.01%)    if (tmp > 0)
  5,784,926 ( 0.00%)      return true;
 10,434,882 ( 0.00%)    if (tmp < 0)
    531,198 ( 0.00%)      return false;
          .           #ifdef LOGGING
 39,614,736 ( 0.02%)    const unsigned not_lit = NOT (lit);
          .           #endif
          .             bool res;
 24,759,210 ( 0.01%)    if (a->binary) {
  3,266,748 ( 0.00%)      const unsigned other = a->reason;
  4,355,664 ( 0.00%)      LOGBINARY2 (not_lit, other, "minimizing along %s reason",
          .                           LOGLIT (not_lit));
 10,889,160 ( 0.00%)      res = minimize_binary (solver, minimizing, assigned, other, depth);
536,674,646 ( 0.23%)  => build/../src/minimize.c:minimize_binary (441,984x)
          .             } else {
 11,588,778 ( 0.00%)      const reference ref = a->reason;
 23,177,556 ( 0.01%)      LOGREF2 (ref, "minimizing along %s reason", LOGLIT (not_lit));
          .               res =
 42,492,186 ( 0.02%)          minimize_reference (solver, minimizing, assigned, ref, lit, depth);
1,904,421,707 ( 0.81%)  => build/../src/minimize.c:minimize_reference (575,476x)
          .             }
  9,903,684 ( 0.00%)    if (!depth)
  1,257,458 ( 0.00%)      return res;
 17,292,452 ( 0.01%)    if (!res)
 11,946,809 ( 0.01%)      kissat_push_poisoned (solver, assigned, idx);
  1,562,755 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_poisoned (31,887x)
 18,314,982 ( 0.01%)    else if (!a->removable)
 15,698,556 ( 0.01%)      kissat_push_removable (solver, assigned, idx);
 17,485,356 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_removable (356,844x)
  4,323,113 ( 0.00%)    return res;
 16,219,808 ( 0.01%)  }
          .           
          .           bool kissat_minimize_literal (kissat *solver, unsigned lit,
  8,471,440 ( 0.00%)                                bool lit_in_clause) {
  6,353,580 ( 0.00%)    assert (EMPTY_STACK (solver->minimize));
  9,530,370 ( 0.00%)    return minimize_literal (solver, false, solver->assigned, lit,
2,657,891,683 ( 1.12%)  => build/../src/minimize.c:minimize_literal (1,058,930x)
  2,117,860 ( 0.00%)                             !lit_in_clause);
  2,117,860 ( 0.00%)  }
          .           
    117,470 ( 0.00%)  void kissat_reset_poisoned (kissat *solver) {
    140,964 ( 0.00%)    LOG ("reset %zu poisoned variables", SIZE_STACK (solver->poisoned));
     70,482 ( 0.00%)    assigned *assigned = solver->assigned;
 13,157,003 ( 0.01%)    for (all_stack (unsigned, idx, solver->poisoned)) {
  7,384,036 ( 0.00%)      assert (idx < VARS);
 11,076,054 ( 0.00%)      struct assigned *a = assigned + idx;
  9,230,045 ( 0.00%)      assert (a->poisoned);
  7,384,036 ( 0.00%)      a->poisoned = false;
          .             }
     93,976 ( 0.00%)    CLEAR_STACK (solver->poisoned);
     70,482 ( 0.00%)  }
          .           
    117,470 ( 0.00%)  void kissat_minimize_clause (kissat *solver) {
    211,446 ( 0.00%)    START (minimize);
          .           
    140,964 ( 0.00%)    assert (EMPTY_STACK (solver->minimize));
    140,964 ( 0.00%)    assert (EMPTY_STACK (solver->removable));
    140,964 ( 0.00%)    assert (EMPTY_STACK (solver->poisoned));
    140,964 ( 0.00%)    assert (!EMPTY_STACK (solver->clause));
          .           
     70,482 ( 0.00%)    unsigned *lits = BEGIN_STACK (solver->clause);
     70,482 ( 0.00%)    unsigned *end = END_STACK (solver->clause);
          .           
     70,482 ( 0.00%)    assigned *assigned = solver->assigned;
          .           #ifndef NDEBUG
     70,482 ( 0.00%)    assert (lits < end);
     70,482 ( 0.00%)    const unsigned not_uip = lits[0];
    399,398 ( 0.00%)    assert (assigned[IDX (not_uip)].level == solver->level);
          .           #endif
  7,778,800 ( 0.00%)    for (const unsigned *p = lits; p != end; p++)
 30,551,344 ( 0.01%)      kissat_push_removable (solver, assigned, IDX (*p));
 93,567,015 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_removable (1,909,459x)
          .           
     93,976 ( 0.00%)    if (GET_OPTION (shrink) > 2) {
    211,446 ( 0.00%)      STOP (minimize);
     23,494 ( 0.00%)      return;
          .             }
          .           
          .             unsigned minimized = 0;
          .           
          .             for (unsigned *p = end; --p > lits;) {
          .               const unsigned lit = *p;
          .               assert (lit != not_uip);
          .               if (minimize_literal (solver, true, assigned, lit, 0)) {
-- line 185 ----------------------------------------
-- line 203 ----------------------------------------
          .             assert (!solver->probing);
          .             ADD (literals_minimized, minimized);
          .           
          .             LOGTMP ("minimized learned");
          .           
          .             kissat_reset_poisoned (solver);
          .           
          .             STOP (minimize);
     46,988 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/substitute.c
--------------------------------------------------------------------------------
Ir                   

-- line 6 ----------------------------------------
          .           #include "proprobe.h"
          .           #include "report.h"
          .           #include "terminate.h"
          .           #include "trail.h"
          .           #include "weaken.h"
          .           
          .           #include <string.h>
          .           
        414 ( 0.00%)  static void assign_and_propagate_units (kissat *solver, unsigneds *units) {
        414 ( 0.00%)    if (EMPTY_STACK (*units))
         69 ( 0.00%)      return;
          .             LOG ("assigning and propagating %zu units", SIZE_STACK (*units));
          .             while (!solver->inconsistent && !EMPTY_STACK (*units)) {
          .               const unsigned unit = POP_STACK (*units);
          .               LOG ("trying to assign and propagate unit %s now", LOGLIT (unit));
          .               const value value = VALUE (unit);
          .               if (value > 0) {
          .                 LOG ("skipping satisfied unit %s", LOGLIT (unit));
          .               } else if (value < 0) {
-- line 24 ----------------------------------------
-- line 28 ----------------------------------------
          .                 solver->inconsistent = true;
          .               } else {
          .                 kissat_learned_unit (solver, unit);
          .                 INC (substitute_units);
          .                 assert (!solver->level);
          .                 (void) kissat_probing_propagate (solver, 0, false);
          .               }
          .             }
        138 ( 0.00%)  }
          .           
        253 ( 0.00%)  static void determine_representatives (kissat *solver, unsigned *repr) {
        138 ( 0.00%)    size_t bytes = LITS * sizeof (unsigned);
        230 ( 0.00%)    unsigned *mark = kissat_calloc (solver, LITS, sizeof *mark);
  4,875,521 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (23x)
        230 ( 0.00%)    unsigned *reach = kissat_malloc (solver, LITS * sizeof *reach);
     10,485 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (23x)
         69 ( 0.00%)    watches *all_watches = solver->watches;
         69 ( 0.00%)    const flags *const flags = solver->flags;
         23 ( 0.00%)    unsigned reached = 0;
          .             unsigneds scc;
          .             unsigneds work;
          .             unsigneds units;
        115 ( 0.00%)    INIT_STACK (scc);
        115 ( 0.00%)    INIT_STACK (work);
        115 ( 0.00%)    INIT_STACK (units);
          .           #ifdef LOGGING
         23 ( 0.00%)    unsigned trivial_sccs = 0;
         23 ( 0.00%)    unsigned non_trivial_sccs = 0;
          .           #endif
         23 ( 0.00%)    bool inconsistent = false;
         23 ( 0.00%)    uint64_t ticks = 0;
  4,829,862 ( 0.00%)    for (all_literals (root)) {
  2,414,816 ( 0.00%)      if (inconsistent)
          .                 break;
  8,451,856 ( 0.00%)      if (mark[root])
    502,972 ( 0.00%)        continue;
 27,721,738 ( 0.01%)      if (!ACTIVE (IDX (root)))
     41,212 ( 0.00%)        continue;
  3,658,840 ( 0.00%)      assert (EMPTY_STACK (scc));
  3,658,840 ( 0.00%)      assert (EMPTY_STACK (work));
  5,488,260 ( 0.00%)      LOG ("substitute root %s", LOGLIT (root));
  8,232,620 ( 0.00%)      PUSH_STACK (work, root);
      6,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (23x)
    914,710 ( 0.00%)      bool failed = false;
  2,744,130 ( 0.00%)      const unsigned mark_root = reached + 1;
 27,830,220 ( 0.01%)      while (!inconsistent && !EMPTY_STACK (work)) {
 18,683,120 ( 0.01%)        unsigned lit = TOP_STACK (work);
  4,670,780 ( 0.00%)        if (lit == INVALID_LIT) {
  8,163,372 ( 0.00%)          (void) POP_STACK (work);
 11,661,960 ( 0.00%)          lit = POP_STACK (work);
  9,329,568 ( 0.00%)          const unsigned not_lit = NOT (lit);
  6,997,176 ( 0.00%)          unsigned reach_lit = reach[lit];
  6,997,176 ( 0.00%)          unsigned mark_lit = mark[lit];
  3,498,588 ( 0.00%)          assert (reach_lit == mark_lit);
  8,163,372 ( 0.00%)          assert (repr[lit] == INVALID_LIT);
  6,997,176 ( 0.00%)          watches *watches = all_watches + not_lit;
  4,664,784 ( 0.00%)          const size_t size_watches = SIZE_WATCHES (*watches);
 13,994,352 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,166,196x)
  6,997,176 ( 0.00%)          ticks += 1 + kissat_cache_lines (size_watches, sizeof (watch));
 28,524,550 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (1,166,196x)
 83,742,950 ( 0.04%)          for (all_binary_blocking_watches (watch, *watches)) {
  9,329,568 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,166,196x)
  9,329,568 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,166,196x)
 21,578,225 ( 0.01%)            if (!watch.type.binary)
  3,218,315 ( 0.00%)              continue;
  3,291,990 ( 0.00%)            const unsigned other = watch.binary.lit;
  8,778,640 ( 0.00%)            const unsigned idx_other = IDX (other);
  9,875,970 ( 0.00%)            if (!flags[idx_other].active)
     10,998 ( 0.00%)              continue;
  7,604,324 ( 0.00%)            assert (mark[other]);
  6,517,992 ( 0.00%)            unsigned reach_other = reach[other];
  3,258,996 ( 0.00%)            if (reach_other < reach_lit)
     25,254 ( 0.00%)              reach_lit = reach_other;
          .                   }
  3,498,588 ( 0.00%)          if (reach_lit != mark_lit) {
     49,956 ( 0.00%)            LOG ("reach[%s] = %u", LOGLIT (lit), reach_lit);
     49,956 ( 0.00%)            reach[lit] = reach_lit;
      8,326 ( 0.00%)            continue;
          .                   }
  2,315,740 ( 0.00%)          unsigned *end_scc = END_STACK (scc);
  2,315,740 ( 0.00%)          unsigned *begin_scc = end_scc;
          .                   do
  3,498,588 ( 0.00%)            assert (begin_scc != BEGIN_STACK (scc));
  5,830,980 ( 0.00%)          while (*--begin_scc != lit);
 12,736,570 ( 0.01%)          SET_END_OF_STACK (scc, begin_scc);
  4,631,480 ( 0.00%)          const size_t size_scc = end_scc - begin_scc;
  2,315,740 ( 0.00%)          unsigned min_lit = lit;
  2,315,740 ( 0.00%)          if (size_scc > 1) {
     82,284 ( 0.00%)            for (const unsigned *p = begin_scc; p != end_scc; p++) {
     39,672 ( 0.00%)              const unsigned other = *p;
     39,672 ( 0.00%)              if (other < min_lit)
      1,306 ( 0.00%)                min_lit = other;
          .                     }
          .           #ifdef LOGGING
      4,898 ( 0.00%)            non_trivial_sccs++;
          .           #endif
     29,388 ( 0.00%)            LOG ("size %zu SCC entered trough %s representative %s", size_scc,
          .                          LOGLIT (lit), LOGLIT (min_lit));
          .                   } else {
          .           #ifdef LOGGING
  1,152,972 ( 0.00%)            trivial_sccs++;
          .           #endif
  6,917,832 ( 0.00%)            LOG ("trivial size one SCC with %s", LOGLIT (lit));
  3,458,916 ( 0.00%)            assert (min_lit == lit);
          .                   }
 11,612,004 ( 0.00%)          for (const unsigned *p = begin_scc; p != end_scc; p++) {
  3,498,588 ( 0.00%)            const unsigned other = *p;
  6,997,176 ( 0.00%)            LOG ("substitute repr[%s] = %s", LOGLIT (other),
          .                          LOGLIT (min_lit));
  6,997,176 ( 0.00%)            repr[other] = min_lit;
  5,830,980 ( 0.00%)            reach[other] = UINT_MAX;
          .           
  9,329,568 ( 0.00%)            const unsigned not_other = NOT (other);
  6,997,176 ( 0.00%)            const unsigned repr_not_other = repr[not_other];
  2,332,392 ( 0.00%)            if (repr_not_other == INVALID_LIT)
  1,166,196 ( 0.00%)              continue;
  1,749,294 ( 0.00%)            if (min_lit == repr_not_other) {
          .                       LOG ("clashing literals %s and %s in same SCC", LOGLIT (other),
          .                            LOGLIT (not_other));
          .                       PUSH_STACK (units, min_lit);
          .                       inconsistent = true;
          .                       break;
          .                     }
  5,247,882 ( 0.00%)            assert (NOT (min_lit) == repr_not_other);
  1,166,196 ( 0.00%)            if (failed)
          .                       continue;
  3,498,588 ( 0.00%)            const unsigned mark_not_other = mark[not_other];
  1,166,196 ( 0.00%)            assert (mark_not_other != INVALID_LIT);
  4,081,686 ( 0.00%)            assert (mark[root] == mark_root);
  1,749,294 ( 0.00%)            if (mark_root > mark_not_other)
    583,098 ( 0.00%)              continue;
          .                     LOG ("root %s implies both %s and %s", LOGLIT (root),
          .                          LOGLIT (other), LOGLIT (not_other));
          .                     const unsigned unit = NOT (root);
          .                     PUSH_STACK (units, unit);
          .                     failed = true;
          .                   }
  2,315,740 ( 0.00%)          if (inconsistent)
          .                     break;
  8,184,358 ( 0.00%)        } else if (!mark[lit]) {
  9,329,808 ( 0.00%)          PUSH_STACK (work, INVALID_LIT);
     13,865 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (24x)
 10,496,734 ( 0.00%)          PUSH_STACK (scc, lit);
     38,106 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (97x)
 15,160,548 ( 0.01%)          mark[lit] = reach[lit] = ++reached;
  6,997,176 ( 0.00%)          LOG ("substitute mark[%s] = %u", LOGLIT (lit), reached);
  9,329,568 ( 0.00%)          const unsigned not_lit = NOT (lit);
  6,997,176 ( 0.00%)          watches *watches = all_watches + not_lit;
  4,664,784 ( 0.00%)          const size_t size_watches = SIZE_WATCHES (*watches);
 13,994,352 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,166,196x)
  6,997,176 ( 0.00%)          ticks += 1 + kissat_cache_lines (size_watches, sizeof (watch));
 28,524,550 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (1,166,196x)
 83,742,950 ( 0.04%)          for (all_binary_blocking_watches (watch, *watches)) {
  9,329,568 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,166,196x)
  9,329,568 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,166,196x)
 21,578,225 ( 0.01%)            if (!watch.type.binary)
  3,218,315 ( 0.00%)              continue;
  3,291,990 ( 0.00%)            const unsigned other = watch.binary.lit;
  8,778,640 ( 0.00%)            const unsigned idx_other = IDX (other);
  9,875,970 ( 0.00%)            if (!flags[idx_other].active)
     10,998 ( 0.00%)              continue;
  7,604,324 ( 0.00%)            if (!mark[other])
  2,546,040 ( 0.00%)              PUSH_STACK (work, other);
     61,028 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (120x)
          .                   }
          .                 } else
     20,986 ( 0.00%)          (void) POP_STACK (work);
          .               }
          .             }
        345 ( 0.00%)    RELEASE_STACK (work);
      5,268 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
        345 ( 0.00%)    RELEASE_STACK (scc);
      4,886 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
        161 ( 0.00%)    kissat_extremely_verbose (solver,
        989 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (23x)
          .                                       "determining substitution "
          .                                       "representatives took %" PRIu64
          .                                       " 'substitute_ticks'",
          .                                       ticks);
        138 ( 0.00%)    ADD (substitute_ticks, ticks);
        460 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_substitute_ticks (23x)
        138 ( 0.00%)    LOG ("reached %u literals", reached);
        138 ( 0.00%)    LOG ("found %u non-trivial SCCs", non_trivial_sccs);
        138 ( 0.00%)    LOG ("found %u trivial SCCs", trivial_sccs);
        138 ( 0.00%)    LOG ("found %zu units", SIZE_STACK (units));
        115 ( 0.00%)    assign_and_propagate_units (solver, &units);
        345 ( 0.00%)  => build/../src/substitute.c:assign_and_propagate_units (23x)
         92 ( 0.00%)    assert (!inconsistent || solver->inconsistent);
        345 ( 0.00%)    RELEASE_STACK (units);
        299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
        138 ( 0.00%)    kissat_free (solver, reach, bytes);
      9,457 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (23x)
        138 ( 0.00%)    kissat_free (solver, mark, bytes);
      5,564 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (23x)
  4,829,839 ( 0.00%)    for (all_literals (lit))
  8,451,856 ( 0.00%)      if (repr[lit] == INVALID_LIT)
    247,272 ( 0.00%)        repr[lit] = lit;
        207 ( 0.00%)  }
          .           
          .           static bool *add_representative_equivalences (kissat *solver,
        138 ( 0.00%)                                                unsigned *repr) {
         92 ( 0.00%)    if (solver->inconsistent)
          .               return 0;
        207 ( 0.00%)    bool *eliminate = kissat_calloc (solver, VARS, sizeof *eliminate);
    623,570 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (23x)
  2,415,000 ( 0.00%)    for (all_variables (idx)) {
  8,451,856 ( 0.00%)      if (!ACTIVE (idx))
     41,212 ( 0.00%)        continue;
  4,081,686 ( 0.00%)      const unsigned lit = LIT (idx);
  3,498,588 ( 0.00%)      const unsigned other = repr[lit];
  1,749,294 ( 0.00%)      if (lit == other)
    578,935 ( 0.00%)        continue;
     12,489 ( 0.00%)      assert (other < lit);
          .           #ifdef CHECKING_OR_PROVING
     33,304 ( 0.00%)      const unsigned not_lit = NOT (lit);
     33,304 ( 0.00%)      const unsigned not_other = NOT (other);
          .           
     41,630 ( 0.00%)      CHECK_AND_ADD_BINARY (not_lit, other);
 15,093,268 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_binary (4,163x)
     16,652 ( 0.00%)      ADD_BINARY_TO_PROOF (not_lit, other);
          .           
     41,630 ( 0.00%)      CHECK_AND_ADD_BINARY (lit, not_other);
 10,623,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_binary (4,163x)
     16,652 ( 0.00%)      ADD_BINARY_TO_PROOF (lit, not_other);
          .           #endif
     20,815 ( 0.00%)      eliminate[idx] = true;
          .             }
         23 ( 0.00%)    return eliminate;
         46 ( 0.00%)  }
          .           
          .           static void remove_representative_equivalences (kissat *solver,
          .                                                           unsigned *repr,
        161 ( 0.00%)                                                  bool *eliminate) {
        115 ( 0.00%)    if (!solver->inconsistent) {
         69 ( 0.00%)      value *values = solver->values;
        115 ( 0.00%)      const bool incremental = GET_OPTION (incremental);
  2,415,000 ( 0.00%)      for (all_variables (idx)) {
  4,225,928 ( 0.00%)        if (!eliminate[idx])
    599,541 ( 0.00%)          continue;
          .           
     54,119 ( 0.00%)        assert (ACTIVE (idx));
          .           
     29,141 ( 0.00%)        const unsigned lit = LIT (idx);
     24,978 ( 0.00%)        const unsigned other = repr[lit];
     33,304 ( 0.00%)        const unsigned not_lit = NOT (lit);
     33,304 ( 0.00%)        const unsigned not_other = NOT (other);
     12,489 ( 0.00%)        assert (other < lit);
     12,489 ( 0.00%)        assert (not_other < not_lit);
          .           
     41,630 ( 0.00%)        REMOVE_CHECKER_BINARY (not_lit, other);
  6,824,719 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_binary (4,163x)
     16,652 ( 0.00%)        DELETE_BINARY_FROM_PROOF (not_lit, other);
          .           
     41,630 ( 0.00%)        REMOVE_CHECKER_BINARY (lit, not_other);
  6,993,595 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_binary (4,163x)
     16,652 ( 0.00%)        DELETE_BINARY_FROM_PROOF (lit, not_other);
          .           
     16,652 ( 0.00%)        INC (substituted);
     62,445 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_substituted (4,163x)
     20,815 ( 0.00%)        kissat_mark_eliminated_variable (solver, idx);
  2,663,120 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_eliminated_variable (4,163x)
     20,815 ( 0.00%)        const value other_value = values[other];
     16,652 ( 0.00%)        if (incremental || other_value) {
          .                   if (other_value <= 0)
          .                     kissat_weaken_binary (solver, not_lit, other);
          .                   if (other_value >= 0)
          .                     kissat_weaken_binary (solver, lit, not_other);
          .                 } else {
     24,978 ( 0.00%)          kissat_weaken_binary (solver, not_lit, other);
  1,585,401 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_binary (4,163x)
     24,978 ( 0.00%)          kissat_weaken_unit (solver, lit);
    870,631 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_unit (4,163x)
          .                 }
          .               }
          .             }
         46 ( 0.00%)    if (eliminate)
        184 ( 0.00%)      kissat_dealloc (solver, eliminate, VARS, sizeof *eliminate);
      5,697 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
         69 ( 0.00%)  }
          .           
        207 ( 0.00%)  static void substitute_binaries (kissat *solver, unsigned *repr) {
         92 ( 0.00%)    if (solver->inconsistent)
          .               return;
          .             assert (sizeof (watch) == sizeof (unsigned));
         69 ( 0.00%)    statches *delayed_watched = (statches *) &solver->delayed;
         69 ( 0.00%)    watches *all_watches = solver->watches;
          .           #ifdef LOGGING
         23 ( 0.00%)    size_t removed = 0;
         23 ( 0.00%)    size_t substituted = 0;
          .           #endif
          .             unsigneds units;
        115 ( 0.00%)    INIT_STACK (units);
          .             litwatches delayed_deleted;
        115 ( 0.00%)    INIT_STACK (delayed_deleted);
          .           #ifdef CHECKING_OR_PROVING
          .             litpairs delayed_removed;
        115 ( 0.00%)    INIT_STACK (delayed_removed);
          .           #endif
  4,829,839 ( 0.00%)    for (all_literals (lit)) {
  7,244,448 ( 0.00%)      const unsigned repr_lit = repr[lit];
  9,659,264 ( 0.00%)      const unsigned not_repr_lit = NOT (repr_lit);
  7,244,448 ( 0.00%)      assert (EMPTY_STACK (*delayed_watched));
  7,244,448 ( 0.00%)      watches *watches = all_watches + lit;
  9,659,264 ( 0.00%)      watch *begin = BEGIN_WATCHES (*watches), *q = begin;
  9,659,264 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,207,408x)
  9,659,264 ( 0.00%)      const watch *const end = END_WATCHES (*watches), *p = q;
  9,659,264 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,207,408x)
 27,486,700 ( 0.01%)      while (p != end) {
 37,761,780 ( 0.02%)        const watch src = *p++;
 44,199,386 ( 0.02%)        if (!src.type.binary)
          .                   continue;
  3,344,250 ( 0.00%)        const unsigned other = src.binary.lit;
  6,688,500 ( 0.00%)        const unsigned repr_other = repr[other];
  6,688,500 ( 0.00%)        LOGBINARY (lit, other, "substituting");
  4,459,000 ( 0.00%)        const litwatch litwatch = {lit, src};
  3,344,250 ( 0.00%)        if (repr_other == not_repr_lit) {
    121,104 ( 0.00%)          LOGBINARY (repr_other, repr_lit, "becomes tautological");
     60,552 ( 0.00%)          if (lit < other) {
          .           #ifdef LOGGING
     10,092 ( 0.00%)            removed++;
          .           #endif
    102,610 ( 0.00%)            PUSH_STACK (delayed_deleted, litwatch);
    178,316 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (169x)
          .                   }
  3,283,698 ( 0.00%)        } else if (repr_other == repr_lit) {
          .                   const unsigned unit = repr_lit;
          .                   LOG ("simplifies to unit %s", LOGLIT (unit));
          .                   if (lit < other) {
          .           #ifdef LOGGING
          .                     removed++;
          .           #endif
          .                     PUSH_STACK (units, unit);
          .                     PUSH_STACK (delayed_deleted, litwatch);
          .                   }
          .                 } else {
  2,189,132 ( 0.00%)          watch dst = src;
  8,756,528 ( 0.00%)          dst.binary.lit = repr_other;
  6,535,503 ( 0.00%)          if (lit == repr_lit && other == repr_other) {
  6,448,452 ( 0.00%)            LOGBINARY (lit, other, "unchanged");
  6,448,452 ( 0.00%)            *q++ = dst;
          .                   } else {
     59,472 ( 0.00%)            if (lit == repr_lit) {
     55,158 ( 0.00%)              LOGBINARY (repr_lit, repr_other, "substituted in place");
     55,158 ( 0.00%)              *q++ = dst;
          .                     } else {
     63,786 ( 0.00%)              LOGBINARY (repr_lit, repr_other, "delayed substituted");
    138,203 ( 0.00%)              PUSH_STACK (*delayed_watched, dst);
          .                     }
          .           
     59,472 ( 0.00%)            if (lit < other) {
          .           #ifdef LOGGING
      9,912 ( 0.00%)              substituted++;
          .           #endif
          .           #ifdef CHECKING_OR_PROVING
     39,648 ( 0.00%)              ADD_BINARY_TO_PROOF (repr_lit, repr_other);
     99,120 ( 0.00%)              CHECK_AND_ADD_BINARY (repr_lit, repr_other);
249,340,325 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_binary (9,912x)
     39,648 ( 0.00%)              const litpair litpair = {{lit, other}};
     90,758 ( 0.00%)              PUSH_STACK (delayed_removed, litpair);
    158,173 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (155x)
          .           #endif
          .                     }
          .                   }
          .                 }
          .               }
 19,318,528 ( 0.01%)      SET_END_OF_WATCHES (*watches, q);
 88,383,445 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (1,207,408x)
  9,659,264 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,207,408x)
  3,622,224 ( 0.00%)      if (lit == repr_lit)
  1,199,082 ( 0.00%)        continue;
     49,956 ( 0.00%)      watches = all_watches + repr_lit;
    168,308 ( 0.00%)      for (all_stack (watch, watch, *delayed_watched))
     63,786 ( 0.00%)        PUSH_WATCHES (*watches, watch);
    750,528 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (10,631x)
     41,630 ( 0.00%)      CLEAR_STACK (*delayed_watched);
          .             }
        115 ( 0.00%)    assign_and_propagate_units (solver, &units);
        345 ( 0.00%)  => build/../src/substitute.c:assign_and_propagate_units (23x)
        345 ( 0.00%)    RELEASE_STACK (units);
        299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
     70,828 ( 0.00%)    for (all_stack (litwatch, litwatch, delayed_deleted)) {
     20,184 ( 0.00%)      const unsigned lit = litwatch.lit;
     20,184 ( 0.00%)      const watch watch = litwatch.watch;
     40,368 ( 0.00%)      assert (watch.type.binary);
     30,276 ( 0.00%)      const unsigned other = watch.binary.lit;
     60,552 ( 0.00%)      kissat_delete_binary (solver, lit, other);
 18,398,792 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (10,092x)
          .             }
        345 ( 0.00%)    RELEASE_STACK (delayed_deleted);
    169,341 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
          .           #ifdef CHECKING_OR_PROVING
     69,568 ( 0.00%)    for (all_stack (litpair, litpair, delayed_removed)) {
     19,824 ( 0.00%)      const unsigned lit = litpair.lits[0];
     19,824 ( 0.00%)      const unsigned other = litpair.lits[1];
     39,648 ( 0.00%)      DELETE_BINARY_FROM_PROOF (lit, other);
     99,120 ( 0.00%)      REMOVE_CHECKER_BINARY (lit, other);
 26,179,737 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_binary (9,912x)
          .             }
        345 ( 0.00%)    RELEASE_STACK (delayed_removed);
    370,302 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
          .           #endif
        138 ( 0.00%)    LOG ("substituted %zu binary clauses", substituted);
        138 ( 0.00%)    LOG ("removed %zu binary clauses", removed);
        115 ( 0.00%)  }
          .           
        230 ( 0.00%)  static void substitute_clauses (kissat *solver, unsigned *repr) {
         92 ( 0.00%)    if (solver->inconsistent)
          .               return;
         69 ( 0.00%)    const value *const values = solver->values;
         69 ( 0.00%)    value *marks = solver->marks;
          .           #ifdef LOGGING
         23 ( 0.00%)    size_t substituted = 0;
         23 ( 0.00%)    size_t removed = 0;
          .           #endif
          .             unsigneds units;
        115 ( 0.00%)    INIT_STACK (units);
          .             references delayed_garbage;
        115 ( 0.00%)    INIT_STACK (delayed_garbage);
 24,751,049 ( 0.01%)    for (all_clauses (c)) {
167,851,645 ( 0.07%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (2,750,091x)
 13,750,455 ( 0.01%)      if (c->garbage)
    143,148 ( 0.00%)        continue;
 15,641,658 ( 0.01%)      LOGCLS (c, "substituting");
 15,641,658 ( 0.01%)      assert (EMPTY_STACK (solver->clause));
  2,606,943 ( 0.00%)      bool shrink = false;
  2,606,943 ( 0.00%)      bool satisfied = false;
  2,606,943 ( 0.00%)      bool substitute = false;
  2,606,943 ( 0.00%)      bool tautological = false;
108,996,918 ( 0.05%)      for (all_literals_in_clause (lit, c)) {
 49,932,155 ( 0.02%)        const value lit_value = values[lit];
 19,984,928 ( 0.01%)        if (lit_value < 0) {
     72,396 ( 0.00%)          LOG ("dropping falsified %s", LOGLIT (lit));
     12,066 ( 0.00%)          shrink = true;
     12,066 ( 0.00%)          continue;
          .                 }
 19,948,730 ( 0.01%)        if (lit_value > 0) {
      3,798 ( 0.00%)          LOGCLS (c, "satisfied by %s", LOGLIT (lit));
        633 ( 0.00%)          satisfied = true;
        633 ( 0.00%)          break;
          .                 }
 59,842,392 ( 0.03%)        const unsigned repr_lit = repr[lit];
 49,868,660 ( 0.02%)        const value repr_value = values[repr_lit];
 19,947,464 ( 0.01%)        if (repr_value < 0) {
          .                   LOG ("dropping falsified substituted %s (was %s)",
          .                        LOGLIT (repr_lit), LOGLIT (lit));
          .                   shrink = true;
          .                   continue;
          .                 }
 19,947,464 ( 0.01%)        if (repr_value > 0) {
          .                   LOGCLS (c, "satisfied by substituted %s (was %s)",
          .                           LOGLIT (repr_lit), LOGLIT (lit));
          .                   satisfied = true;
          .                   break;
          .                 }
 29,921,196 ( 0.01%)        if (lit != repr_lit) {
    262,542 ( 0.00%)          assert (!values[repr_lit]);
    262,542 ( 0.00%)          LOG ("substituted literal %s (was %s)", LOGLIT (repr_lit),
          .                        LOGLIT (lit));
     87,514 ( 0.00%)          substitute = true;
          .                 } else
 59,579,850 ( 0.03%)          LOG ("copying literal %s", LOGLIT (lit));
 59,842,392 ( 0.03%)        if (marks[repr_lit]) {
      1,061 ( 0.00%)          shrink = true;
      6,366 ( 0.00%)          LOG ("skipping duplicated %s", LOGLIT (repr_lit));
      1,061 ( 0.00%)          continue;
          .                 }
 79,781,368 ( 0.03%)        const unsigned not_repr_lit = NOT (repr_lit);
 59,836,026 ( 0.03%)        if (marks[not_repr_lit]) {
     14,568 ( 0.00%)          LOG ("substituted clause tautological "
          .                        "containing both %s and %s",
          .                        LOGLIT (not_repr_lit), LOGLIT (repr_lit));
      2,428 ( 0.00%)          tautological = true;
      2,428 ( 0.00%)          break;
          .                 }
 39,880,972 ( 0.02%)        marks[repr_lit] = true;
139,583,402 ( 0.06%)        PUSH_STACK (solver->clause, repr_lit);
          .               }
 10,426,506 ( 0.00%)      if (satisfied || tautological) {
     15,305 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
  8,557,461 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (3,061x)
          .           #ifdef LOGGING
      6,122 ( 0.00%)        removed++;
          .           #endif
 10,391,350 ( 0.00%)      } else if (substitute || shrink) {
    341,736 ( 0.00%)        const unsigned size = SIZE_STACK (solver->clause);
     85,434 ( 0.00%)        if (!size) {
          .                   LOG ("simplifies to empty clause");
          .           
          .                   CHECK_AND_ADD_EMPTY ();
          .                   ADD_EMPTY_TO_PROOF ();
          .           
          .                   solver->inconsistent = true;
          .                   break;
     85,434 ( 0.00%)        } else if (size == 1) {
          .                   assert (shrink);
          .           #ifdef LOGGING
          .                   removed++;
          .           #endif
          .                   const unsigned unit = PEEK_STACK (solver->clause, 0);
          .                   LOGCLS (c, "simplifies to unit %s", LOGLIT (unit));
          .                   PUSH_STACK (units, unit);
          .                   const reference ref = kissat_reference_clause (solver, c);
          .                   PUSH_STACK (delayed_garbage, ref);
     85,434 ( 0.00%)        } else if (size == 2) {
      2,138 ( 0.00%)          assert (shrink);
          .           #ifdef LOGGING
      1,069 ( 0.00%)          substituted++;
          .           #endif
     10,690 ( 0.00%)          const unsigned first = PEEK_STACK (solver->clause, 0);
     13,897 ( 0.00%)          const unsigned second = PEEK_STACK (solver->clause, 1);
      6,414 ( 0.00%)          LOGCLS (c, "unsubstituted");
      6,414 ( 0.00%)          LOGBINARY (first, second, "substituted");
      6,414 ( 0.00%)          kissat_new_binary_clause (solver, first, second);
  3,493,147 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_binary_clause (1,069x)
      5,345 ( 0.00%)          kissat_mark_clause_as_garbage (solver, c);
  2,789,057 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (1,069x)
          .                 } else {
          .           #ifdef LOGGING
     41,648 ( 0.00%)          substituted++;
          .           #endif
    249,888 ( 0.00%)          LOGCLS (c, "unsubstituted");
          .           
    333,184 ( 0.00%)          const unsigned new_size = SIZE_STACK (solver->clause);
    124,944 ( 0.00%)          unsigned *new_lits = BEGIN_STACK (solver->clause);
          .           
    166,592 ( 0.00%)          ADD_LITS_TO_PROOF (new_size, new_lits);
    416,480 ( 0.00%)          CHECK_AND_ADD_LITS (new_size, new_lits);
495,823,247 ( 0.21%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (41,648x)
          .           
    166,592 ( 0.00%)          DELETE_CLAUSE_FROM_PROOF (c);
    374,832 ( 0.00%)          REMOVE_CHECKER_CLAUSE (c);
167,880,156 ( 0.07%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_clause (41,648x)
          .           
    124,944 ( 0.00%)          const unsigned old_size = c->size;
    124,944 ( 0.00%)          unsigned *old_lits = c->lits;
          .           
    124,944 ( 0.00%)          assert (new_size <= old_size);
    291,536 ( 0.00%)          memcpy (old_lits, new_lits, new_size * sizeof *old_lits);
    621,286 ( 0.00%)  => ???:0x000000000010c650 (41,648x)
          .           
    291,536 ( 0.00%)          assert (shrink == (new_size < old_size));
    124,944 ( 0.00%)          if (new_size < old_size) {
     25,611 ( 0.00%)            c->size = new_size;
     17,074 ( 0.00%)            c->searched = 2;
     51,222 ( 0.00%)            if (!c->shrunken) {
     31,140 ( 0.00%)              c->shrunken = true;
     31,140 ( 0.00%)              assert (c->lits == old_lits);
     54,495 ( 0.00%)              old_lits[old_size - 1] = INVALID_LIT;
          .                     }
          .                   }
    249,888 ( 0.00%)          LOGCLS (c, "unsorted substituted");
          .                 }
          .               } else
 15,366,990 ( 0.01%)        LOGCLS (c, "unchanged");
105,831,374 ( 0.04%)      for (all_stack (unsigned, lit, solver->clause))
 39,880,972 ( 0.02%)        marks[lit] = 0;
 10,427,772 ( 0.00%)      CLEAR_STACK (solver->clause);
          .             }
        115 ( 0.00%)    assign_and_propagate_units (solver, &units);
        345 ( 0.00%)  => build/../src/substitute.c:assign_and_propagate_units (23x)
        345 ( 0.00%)    RELEASE_STACK (units);
        299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
        184 ( 0.00%)    for (all_stack (reference, ref, delayed_garbage)) {
          .               clause *c = kissat_dereference_clause (solver, ref);
          .               kissat_mark_clause_as_garbage (solver, c);
          .             }
        345 ( 0.00%)    RELEASE_STACK (delayed_garbage);
        299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
        138 ( 0.00%)    LOG ("substituted %zu large clauses", substituted);
        138 ( 0.00%)    LOG ("removed %zu substituted large clauses", removed);
        138 ( 0.00%)  }
          .           
        161 ( 0.00%)  static bool substitute_round (kissat *solver, unsigned round) {
        115 ( 0.00%)    assert (!solver->inconsistent);
         69 ( 0.00%)    const unsigned active = solver->active;
        138 ( 0.00%)    size_t bytes = LITS * sizeof (unsigned);
        138 ( 0.00%)    unsigned *repr = kissat_malloc (solver, bytes);
    514,163 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (23x)
        115 ( 0.00%)    memset (repr, 0xff, bytes);
  4,830,069 ( 0.00%)  => ???:0x000000000010c5b0 (23x)
        115 ( 0.00%)    determine_representatives (solver, repr);
828,579,319 ( 0.35%)  => build/../src/substitute.c:determine_representatives (23x)
        138 ( 0.00%)    bool *eliminate = add_representative_equivalences (solver, repr);
 47,373,771 ( 0.02%)  => build/../src/substitute.c:add_representative_equivalences (23x)
        115 ( 0.00%)    substitute_binaries (solver, repr);
662,043,453 ( 0.28%)  => build/../src/substitute.c:substitute_binaries (23x)
        115 ( 0.00%)    substitute_clauses (solver, repr);
1,941,425,228 ( 0.82%)  => build/../src/substitute.c:substitute_clauses (23x)
        138 ( 0.00%)    remove_representative_equivalences (solver, repr, eliminate);
 26,688,114 ( 0.01%)  => build/../src/substitute.c:remove_representative_equivalences (23x)
        207 ( 0.00%)    kissat_dealloc (solver, repr, LITS, sizeof *repr);
    360,014 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (23x)
        115 ( 0.00%)    unsigned removed = active - solver->active;
        805 ( 0.00%)    kissat_phase (solver, "substitute", GET (substitutions),
      1,173 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (23x)
        782 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (23x)
        161 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_substitutions (23x)
          .                           "round %u removed %u variables %.0f%%", round, removed,
          .                           kissat_percent (removed, active));
         69 ( 0.00%)    kissat_check_statistics (solver);
313,708,620 ( 0.13%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_check_statistics (23x)
        184 ( 0.00%)    REPORT (!removed, 'd');
    591,029 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (23x)
          .           #ifdef QUIET
          .             (void) round;
          .           #endif
        227 ( 0.00%)    return !solver->inconsistent && removed;
         69 ( 0.00%)  }
          .           
         98 ( 0.00%)  static void substitute_rounds (kissat *solver, bool complete) {
        196 ( 0.00%)    START (substitute);
      1,344 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (14x)
         56 ( 0.00%)    INC (substitutions);
        210 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_substitutions (14x)
         42 ( 0.00%)    const unsigned maxrounds = GET_OPTION (substituterounds);
        141 ( 0.00%)    for (unsigned round = 1; round <= maxrounds; round++) {
         69 ( 0.00%)      const uint64_t before = solver->statistics.substitute_ticks;
        184 ( 0.00%)      if (!substitute_round (solver, round))
3,826,118,929 ( 1.62%)  => build/../src/substitute.c:substitute_round (23x)
          3 ( 0.00%)        break;
         60 ( 0.00%)      const uint64_t after = solver->statistics.substitute_ticks;
         60 ( 0.00%)      const uint64_t ticks = after - before;
         80 ( 0.00%)      if (!complete) {
         51 ( 0.00%)        const uint64_t reference =
         68 ( 0.00%)            solver->statistics.search_ticks - solver->last.ticks.probe;
        119 ( 0.00%)        const double fraction = GET_OPTION (substituteeffort) * 1e-3;
        238 ( 0.00%)        const uint64_t limit = fraction * reference;
         51 ( 0.00%)        if (ticks > limit) {
         44 ( 0.00%)          kissat_extremely_verbose (
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4x)
          .                       solver,
          .                       "last substitute round took %" PRIu64 " 'substitute_ticks' "
          .                       "> limit %" PRIu64 " = %g * %" PRIu64 " 'search_ticks'",
          .                       ticks, limit, fraction, reference);
          4 ( 0.00%)          break;
          .                 }
          .               }
          .             }
         70 ( 0.00%)    if (!solver->inconsistent) {
         42 ( 0.00%)      kissat_watch_large_clauses (solver);
1,085,568,984 ( 0.46%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_watch_large_clauses (14x)
         84 ( 0.00%)      LOG ("now all large clauses are watched after binary clauses");
         28 ( 0.00%)      solver->large_clauses_watched_after_binary_clauses = true;
         42 ( 0.00%)      kissat_reset_propagate (solver);
        140 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reset_propagate (14x)
         56 ( 0.00%)      assert (!solver->level);
         70 ( 0.00%)      (void) kissat_probing_propagate (solver, 0, true);
      3,262 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (14x)
          .             }
        196 ( 0.00%)    STOP (substitute);
      1,596 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (14x)
         42 ( 0.00%)  }
          .           
         98 ( 0.00%)  void kissat_substitute (kissat *solver, bool complete) {
         56 ( 0.00%)    if (solver->inconsistent)
          .               return;
         56 ( 0.00%)    assert (solver->probing);
         56 ( 0.00%)    assert (solver->watching);
         56 ( 0.00%)    assert (!solver->level);
         84 ( 0.00%)    LOG ("assuming not all large clauses watched after binary clauses");
         28 ( 0.00%)    solver->large_clauses_watched_after_binary_clauses = false;
         56 ( 0.00%)    if (!GET_OPTION (substitute))
          .               return;
        154 ( 0.00%)    if (TERMINATED (substitute_terminated_1))
        308 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (14x)
          .               return;
         84 ( 0.00%)    substitute_rounds (solver, complete);
4,911,696,863 ( 2.08%)  => build/../src/substitute.c:substitute_rounds (14x)
         28 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/resolve.c
--------------------------------------------------------------------------------
Ir                   

-- line 3 ----------------------------------------
          .           #include "gates.h"
          .           #include "inline.h"
          .           #include "print.h"
          .           
          .           #include <inttypes.h>
          .           #include <string.h>
          .           
          .           static inline unsigned occurrences_literal (kissat *solver, unsigned lit,
    655,732 ( 0.00%)                                              bool *update) {
    468,380 ( 0.00%)    assert (!solver->watching);
          .           
  1,030,436 ( 0.00%)    watches *watches = &WATCHES (lit);
          .           #ifdef LOGGING
    374,704 ( 0.00%)    const size_t size_watches = SIZE_WATCHES (*watches);
  1,124,112 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (93,676x)
    562,056 ( 0.00%)    LOG ("literal %s has %zu watches", LOGLIT (lit), size_watches);
          .           #endif
    281,028 ( 0.00%)    const unsigned clslim = GET_OPTION (eliminateclslim);
          .           
    749,408 ( 0.00%)    watch *const begin = BEGIN_WATCHES (*watches), *q = begin;
    749,408 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (93,676x)
    749,408 ( 0.00%)    const watch *const end = END_WATCHES (*watches), *p = q;
    749,408 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (93,676x)
          .           
    281,028 ( 0.00%)    const value *const values = solver->values;
    281,028 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
          .           
     93,676 ( 0.00%)    bool failed = false;
     93,676 ( 0.00%)    unsigned res = 0;
          .           
  4,678,432 ( 0.00%)    while (p != end) {
 14,345,760 ( 0.01%)      const watch head = *q++ = *p++;
  5,738,304 ( 0.00%)      if (head.type.binary) {
    202,266 ( 0.00%)        const unsigned other = head.binary.lit;
    337,110 ( 0.00%)        const value value = values[other];
    134,844 ( 0.00%)        assert (value >= 0);
    134,844 ( 0.00%)        if (value > 0) {
      1,026 ( 0.00%)          kissat_eliminate_binary (solver, lit, other);
    174,299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/eliminate.c:kissat_eliminate_binary (171x)
        342 ( 0.00%)          q--;
          .                 } else
    134,502 ( 0.00%)          res++;
          .               } else {
  4,101,462 ( 0.00%)        const reference ref = head.large.ref;
 13,671,540 ( 0.01%)        assert (ref < SIZE_STACK (solver->arena));
  8,202,924 ( 0.00%)        clause *const c = (struct clause *) (arena + ref);
  6,835,770 ( 0.00%)        if (c->garbage)
    497,750 ( 0.00%)          q--;
  4,473,116 ( 0.00%)        else if (c->size > clslim) {
          .                   LOG ("literal %s watches too long clause of size %u", LOGLIT (lit),
          .                        c->size);
          .                   failed = true;
          .                   break;
          .                 } else
  1,118,279 ( 0.00%)          res++;
          .               }
          .             }
    374,704 ( 0.00%)    while (p != end)
          .               *q++ = *p++;
  1,498,816 ( 0.00%)    SET_END_OF_WATCHES (*watches, q);
  6,581,042 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (93,676x)
    749,408 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (93,676x)
    187,352 ( 0.00%)    if (failed)
          .               return UINT_MAX;
    281,028 ( 0.00%)    if (q != end) {
     87,420 ( 0.00%)      *update = true;
    262,260 ( 0.00%)      LOG ("literal %s actually occurs only %u times", LOGLIT (lit), res);
          .             }
     93,676 ( 0.00%)    return res;
    281,028 ( 0.00%)  }
          .           
          .           static inline clause *watch_to_clause (kissat *solver, ward *const arena,
          .                                                  clause *const tmp, unsigned lit,
 14,055,224 ( 0.01%)                                         watch watch) {
          .             clause *res;
  7,027,612 ( 0.00%)    if (watch.type.binary) {
    304,554 ( 0.00%)      const unsigned other = watch.binary.lit;
    304,554 ( 0.00%)      tmp->lits[0] = lit;
    304,554 ( 0.00%)      tmp->lits[1] = other;
    304,554 ( 0.00%)      res = tmp;
          .             } else {
  4,966,155 ( 0.00%)      const reference ref = watch.large.ref;
 16,553,850 ( 0.01%)      assert (ref < SIZE_STACK (solver->arena));
  9,932,310 ( 0.00%)      res = (struct clause *) (arena + ref);
          .             }
          .           #ifdef NDEBUG
          .             (void) solver;
          .           #endif
  1,756,903 ( 0.00%)    return res;
  3,513,806 ( 0.00%)  }
          .           
          .           static bool generate_resolvents (kissat *solver, unsigned lit,
          .                                            statches *const watches0,
          .                                            statches *const watches1,
          .                                            uint64_t *const resolved_ptr,
  1,288,935 ( 0.00%)                                   uint64_t limit) {
    687,432 ( 0.00%)    const unsigned not_lit = NOT (lit);
    257,787 ( 0.00%)    unsigned resolved = *resolved_ptr;
     85,929 ( 0.00%)    bool failed = false;
          .           
          .             clause tmp0, tmp1;
    429,645 ( 0.00%)    memset (&tmp0, 0, sizeof tmp0);
  1,203,006 ( 0.00%)  => ???:0x000000000010c5b0 (85,929x)
    429,645 ( 0.00%)    memset (&tmp1, 0, sizeof tmp1);
  1,203,006 ( 0.00%)  => ???:0x000000000010c5b0 (85,929x)
    257,787 ( 0.00%)    tmp0.size = tmp1.size = 2;
          .           
    257,787 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
    257,787 ( 0.00%)    const value *const values = solver->values;
    257,787 ( 0.00%)    value *const marks = solver->marks;
          .           
    257,787 ( 0.00%)    const unsigned clslim = GET_OPTION (eliminateclslim);
          .           
  2,097,185 ( 0.00%)    for (all_stack (watch, watch0, *watches0)) {
  1,796,409 ( 0.00%)      clause *const c = watch_to_clause (solver, arena, &tmp0, lit, watch0);
  6,638,307 ( 0.00%)  => build/../src/resolve.c:watch_to_clause (199,601x)
          .           
    998,005 ( 0.00%)      if (c->garbage) {
          .                 assert (c != &tmp0);
          .                 continue;
          .               }
          .           
    199,601 ( 0.00%)      bool first_antecedent_satisfied = false;
          .           
  8,189,198 ( 0.00%)      for (all_literals_in_clause (other, c)) {
  2,226,507 ( 0.00%)        if (other == lit)
    199,601 ( 0.00%)          continue;
  2,712,840 ( 0.00%)        const value value = values[other];
  1,085,136 ( 0.00%)        if (value < 0)
        669 ( 0.00%)          continue;
  1,083,798 ( 0.00%)        if (value > 0) {
          .                   first_antecedent_satisfied = true;
          .                   if (c != &tmp0)
          .                     kissat_eliminate_clause (solver, c, other);
          .                   break;
          .                 }
          .               }
          .           
    399,202 ( 0.00%)      if (first_antecedent_satisfied)
          .                 continue;
          .           
  8,189,198 ( 0.00%)      for (all_literals_in_clause (other, c)) {
  2,226,507 ( 0.00%)        if (other == lit)
    199,601 ( 0.00%)          continue;
  3,255,408 ( 0.00%)        assert (!marks[other]);
  2,170,272 ( 0.00%)        marks[other] = 1;
          .               }
          .           
 12,737,812 ( 0.01%)      for (all_stack (watch, watch1, *watches1)) {
          .                 clause *const d =
 14,015,718 ( 0.01%)            watch_to_clause (solver, arena, &tmp1, not_lit, watch1);
 52,385,769 ( 0.02%)  => build/../src/resolve.c:watch_to_clause (1,557,302x)
          .           
  7,786,510 ( 0.00%)        if (d->garbage) {
          .                   assert (d != &tmp1);
          .                   continue;
          .                 }
          .           
  9,343,812 ( 0.00%)        LOGCLS (c, "first %s antecedent", LOGLIT (lit));
  9,343,812 ( 0.00%)        LOGCLS (d, "second %s antecedent", LOGLIT (not_lit));
          .           
  1,557,302 ( 0.00%)        bool resolvent_satisfied_or_tautological = false;
 12,458,416 ( 0.01%)        const size_t saved = SIZE_STACK (solver->resolvents);
          .           
  6,229,208 ( 0.00%)        INC (eliminate_resolutions);
 23,359,530 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_eliminate_resolutions (1,557,302x)
          .           
117,986,137 ( 0.05%)        for (all_literals_in_clause (other, d)) {
 41,151,423 ( 0.02%)          if (other == not_lit)
  1,469,684 ( 0.00%)            continue;
 61,237,285 ( 0.03%)          const value value = values[other];
 24,494,914 ( 0.01%)          if (value < 0) {
     56,934 ( 0.00%)            LOG2 ("dropping falsified literal %s", LOGLIT (other));
     18,978 ( 0.00%)            continue;
          .                   }
 24,475,936 ( 0.01%)          if (value > 0) {
          .                     if (d != &tmp1)
          .                       kissat_eliminate_clause (solver, d, other);
          .                     resolvent_satisfied_or_tautological = true;
          .                     break;
          .                   }
 73,427,808 ( 0.03%)          if (marks[other]) {
  2,530,554 ( 0.00%)            LOG2 ("dropping repeated %s literal", LOGLIT (other));
    421,759 ( 0.00%)            continue;
          .                   }
 94,529,672 ( 0.04%)          const unsigned not_other = NOT (other);
 70,897,254 ( 0.03%)          if (marks[not_other]) {
  2,090,070 ( 0.00%)            LOG ("resolvent tautological on %s and %s "
          .                          "with second %s antecedent",
          .                          LOGLIT (NOT (other)), LOGLIT (other), LOGLIT (not_lit));
    348,345 ( 0.00%)            resolvent_satisfied_or_tautological = true;
    348,345 ( 0.00%)            break;
          .                   }
 68,807,184 ( 0.03%)          LOG2 ("including unassigned literal %s", LOGLIT (other));
160,550,213 ( 0.07%)          PUSH_STACK (solver->resolvents, other);
    108,884 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (9x)
          .                 }
          .           
  3,114,604 ( 0.00%)        if (resolvent_satisfied_or_tautological) {
  6,270,210 ( 0.00%)          RESIZE_STACK (solver->resolvents, saved);
    348,345 ( 0.00%)          continue;
          .                 }
          .           
  4,835,828 ( 0.00%)        if (++resolved > limit) {
    238,962 ( 0.00%)          LOG ("limit of %" PRIu64 " resolvent exceeded", limit);
     39,827 ( 0.00%)          failed = true;
     39,827 ( 0.00%)          break;
          .                 }
          .           
 44,525,982 ( 0.02%)        for (all_literals_in_clause (other, c)) {
 11,566,728 ( 0.00%)          if (other == lit)
  1,169,130 ( 0.00%)            continue;
 13,432,230 ( 0.01%)          const value value = values[other];
  5,372,892 ( 0.00%)          assert (value <= 0);
  5,372,892 ( 0.00%)          if (value < 0) {
     19,512 ( 0.00%)            LOG2 ("dropping falsified literal %s", LOGLIT (other));
      3,252 ( 0.00%)            continue;
          .                   }
 37,564,755 ( 0.02%)          PUSH_STACK (solver->resolvents, other);
      2,766 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (3x)
          .                 }
          .           
 10,522,170 ( 0.00%)        size_t size_resolvent = SIZE_STACK (solver->resolvents) - saved;
  7,014,780 ( 0.00%)        LOGLITS (size_resolvent, BEGIN_STACK (solver->resolvents) + saved,
          .                          "resolvent");
          .           
  2,338,260 ( 0.00%)        if (!size_resolvent) {
          .                   assert (!solver->inconsistent);
          .                   solver->inconsistent = true;
          .                   LOG ("resolved empty clause");
          .                   CHECK_AND_ADD_EMPTY ();
          .                   ADD_EMPTY_TO_PROOF ();
          .                   failed = true;
          .                   break;
          .                 }
          .           
  2,338,260 ( 0.00%)        if (size_resolvent == 1) {
          .                   const unsigned unit = PEEK_STACK (solver->resolvents, saved);
          .                   INC (eliminate_units);
          .                   kissat_learned_unit (solver, unit);
          .                   RESIZE_STACK (solver->resolvents, saved);
          .                   if (marks[unit] <= 0)
          .                     continue;
          .                   LOGCLS (c, "first antecedent becomes satisfied");
          .                   first_antecedent_satisfied = true;
          .                   (void) first_antecedent_satisfied;
          .                   break;
          .                 }
          .           
  3,507,390 ( 0.00%)        if (size_resolvent > clslim) {
          6 ( 0.00%)          LOG ("resolvent size limit exceeded");
          1 ( 0.00%)          failed = true;
          1 ( 0.00%)          break;
          .                 }
          .           
 15,198,703 ( 0.01%)        PUSH_STACK (solver->resolvents, INVALID_LIT);
        813 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (2x)
          .               }
          .           
  8,189,198 ( 0.00%)      for (all_literals_in_clause (other, c)) {
  2,226,507 ( 0.00%)        if (other == lit)
    199,601 ( 0.00%)          continue;
  3,255,408 ( 0.00%)        assert (marks[other] == 1);
  2,170,272 ( 0.00%)        marks[other] = 0;
          .               }
          .           
    558,975 ( 0.00%)      if (failed)
     39,828 ( 0.00%)        break;
          .             }
          .           
    257,787 ( 0.00%)    *resolved_ptr = resolved;
          .           
    515,574 ( 0.00%)    return !failed;
    687,432 ( 0.00%)  }
          .           
          .           bool kissat_generate_resolvents (kissat *solver, unsigned idx,
    468,380 ( 0.00%)                                   unsigned *lit_ptr) {
    327,866 ( 0.00%)    unsigned lit = LIT (idx);
    374,704 ( 0.00%)    unsigned not_lit = NOT (lit);
          .           
     46,838 ( 0.00%)    bool update = false;
     46,838 ( 0.00%)    bool pure = false;
          .             uint64_t limit;
          .           
          .             {
    327,866 ( 0.00%)      unsigned pos_count = occurrences_literal (solver, lit, &update);
 39,538,569 ( 0.02%)  => build/../src/resolve.c:occurrences_literal (46,838x)
    327,866 ( 0.00%)      unsigned neg_count = occurrences_literal (solver, not_lit, &update);
 43,884,223 ( 0.02%)  => build/../src/resolve.c:occurrences_literal (46,838x)
          .           
    140,514 ( 0.00%)      if (pos_count > neg_count) {
    106,248 ( 0.00%)        SWAP (unsigned, lit, not_lit);
    106,248 ( 0.00%)        SWAP (size_t, pos_count, neg_count);
          .               }
          .           
    140,514 ( 0.00%)      const unsigned occlim = GET_OPTION (eliminateocclim);
    187,352 ( 0.00%)      limit = pos_count + (uint64_t) neg_count;
          .           
    234,172 ( 0.00%)      if (pos_count && limit > occlim) {
          .                 LOG ("no elimination of variable %u "
          .                      "since it has %" PRIu64 " > %u occurrences",
          .                      idx, limit, occlim);
          .                 return false;
          .               }
          .           
     93,676 ( 0.00%)      if (pos_count) {
    187,328 ( 0.00%)        const uint64_t bound = solver->bounds.eliminate.additional_clauses;
     93,664 ( 0.00%)        limit += bound;
    280,992 ( 0.00%)        LOG ("trying to eliminate %s "
          .                      "limit %" PRIu64 " bound %" PRIu64,
          .                      LOGVAR (idx), limit, bound);
          .               } else {
         36 ( 0.00%)        LOG ("eliminating pure literal %s thus its variable %u", LOGLIT (lit),
          .                      idx);
          6 ( 0.00%)        pure = true;
          .               }
          .             }
          .           
    140,514 ( 0.00%)    *lit_ptr = lit;
          .           
    187,352 ( 0.00%)    INC (eliminate_attempted);
    702,570 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_eliminate_attempted (46,838x)
     93,676 ( 0.00%)    if (pure)
         12 ( 0.00%)      return true;
          .           
    697,582 ( 0.00%)    const bool gates = !pure && kissat_find_gates (solver, lit);
5,180,335,379 ( 2.19%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/gates.c:kissat_find_gates (46,832x)
          .           
    140,496 ( 0.00%)    statches *const gates0 = &solver->gates[0];
    140,496 ( 0.00%)    statches *const gates1 = &solver->gates[1];
          .           
    327,824 ( 0.00%)    if (solver->values[lit]) {
         18 ( 0.00%)      kissat_extremely_verbose (solver, "definition produced unit");
        129 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (3x)
         12 ( 0.00%)      CLEAR_STACK (*gates0);
         12 ( 0.00%)      CLEAR_STACK (*gates1);
          6 ( 0.00%)      return false;
          .             }
          .           
     46,829 ( 0.00%)    bool failed = false;
     46,829 ( 0.00%)    uint64_t resolved = 0;
          .           
    234,145 ( 0.00%)    kissat_get_antecedents (solver, lit);
 43,079,635 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/gates.c:kissat_get_antecedents (46,829x)
    140,487 ( 0.00%)    statches *const antecedents0 = &solver->antecedents[0];
    140,487 ( 0.00%)    statches *const antecedents1 = &solver->antecedents[1];
          .           
     93,658 ( 0.00%)    if (gates) {
    251,586 ( 0.00%)      LOG ("resolving gates[0] against antecedents[1] clauses");
    545,103 ( 0.00%)      if (!generate_resolvents (solver, lit, gates0, antecedents1, &resolved,
820,251,658 ( 0.35%)  => build/../src/resolve.c:generate_resolvents (41,931x)
          .                                         limit))
     13,838 ( 0.00%)        failed = true;
          .               else {
    210,072 ( 0.00%)        LOG ("resolving gates[1] against antecedents[0] clauses");
    455,156 ( 0.00%)        if (!generate_resolvents (solver, not_lit, gates1, antecedents0,
114,659,321 ( 0.05%)  => build/../src/resolve.c:generate_resolvents (35,012x)
          .                                           &resolved, limit)) {
     56,668 ( 0.00%)          failed = true;
     26,712 ( 0.00%)        } else if (solver->resolve_gate) {
     24,528 ( 0.00%)          LOG ("need to resolved gates[0] against gates[1] too");
     53,144 ( 0.00%)          if (!generate_resolvents (solver, lit, gates0, gates1, &resolved,
 17,224,038 ( 0.01%)  => build/../src/resolve.c:generate_resolvents (4,088x)
          .                                             limit))
        518 ( 0.00%)            failed = true;
          .                 }
          .               }
          .             } else {
     29,388 ( 0.00%)      LOG ("no gate extracted thus resolving all clauses");
     63,674 ( 0.00%)      if (!generate_resolvents (solver, lit, antecedents0, antecedents1,
185,514,723 ( 0.08%)  => build/../src/resolve.c:generate_resolvents (4,898x)
          .                                         &resolved, limit))
      4,316 ( 0.00%)        failed = true;
          .             }
          .           
    187,316 ( 0.00%)    CLEAR_STACK (*antecedents0);
    187,316 ( 0.00%)    CLEAR_STACK (*antecedents1);
          .           
     93,658 ( 0.00%)    if (failed) {
    238,968 ( 0.00%)      LOG ("elimination of %s failed", LOGVAR (IDX (lit)));
    159,312 ( 0.00%)      CLEAR_STACK (solver->resolvents);
    119,484 ( 0.00%)      if (update)
    107,155 ( 0.00%)        kissat_update_variable_score (solver, idx);
  6,643,610 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/eliminate.c:kissat_update_variable_score (21,431x)
          .             }
          .           
    280,974 ( 0.00%)    LOG ("resolved %" PRIu64 " resolvents", resolved);
          .           
    187,316 ( 0.00%)    CLEAR_STACK (*gates0);
    187,316 ( 0.00%)    CLEAR_STACK (*gates1);
          .           
    280,974 ( 0.00%)    return !failed;
    234,190 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/sweep.c
--------------------------------------------------------------------------------
Ir                   

-- line 32 ----------------------------------------
          .             struct {
          .               uint64_t ticks;
          .               unsigned clauses, depth, vars;
          .             } limit;
          .           };
          .           
          .           typedef struct sweeper sweeper;
          .           
    296,380 ( 0.00%)  static int sweep_solve (sweeper *sweeper) {
    177,828 ( 0.00%)    kissat *solver = sweeper->solver;
    177,828 ( 0.00%)    kitten *kitten = solver->kitten;
    177,828 ( 0.00%)    kitten_randomize_phases (kitten);
 46,022,964 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_randomize_phases (59,276x)
    237,104 ( 0.00%)    INC (sweep_solved);
    889,140 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_solved (59,276x)
    237,104 ( 0.00%)    int res = kitten_solve (kitten);
7,062,774,467 ( 2.99%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_solve (59,276x)
    118,552 ( 0.00%)    if (res == 10)
    216,736 ( 0.00%)      INC (sweep_sat);
    812,760 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_sat (54,184x)
    118,552 ( 0.00%)    if (res == 20)
     20,340 ( 0.00%)      INC (sweep_unsat);
     76,275 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_unsat (5,085x)
     59,276 ( 0.00%)    return res;
    118,552 ( 0.00%)  }
          .           
     23,065 ( 0.00%)  static void set_kitten_ticks_limit (sweeper *sweeper) {
      4,613 ( 0.00%)    uint64_t remaining = 0;
     13,839 ( 0.00%)    kissat *solver = sweeper->solver;
     27,678 ( 0.00%)    if (solver->statistics.kitten_ticks < sweeper->limit.ticks)
     32,235 ( 0.00%)      remaining = sweeper->limit.ticks - solver->statistics.kitten_ticks;
     27,678 ( 0.00%)    LOG ("'kitten_ticks' remaining %" PRIu64, remaining);
     27,678 ( 0.00%)    kitten_set_ticks_limit (solver->kitten, remaining);
    143,003 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_set_ticks_limit (4,613x)
     13,839 ( 0.00%)  }
          .           
    630,636 ( 0.00%)  static bool kitten_ticks_limit_hit (sweeper *sweeper, const char *when) {
    315,318 ( 0.00%)    kissat *solver = sweeper->solver;
    630,636 ( 0.00%)    if (solver->statistics.kitten_ticks >= sweeper->limit.ticks) {
         42 ( 0.00%)      LOG ("'kitten_ticks' limit of %" PRIu64 " ticks hit after %" PRIu64
          .                    " ticks during %s",
          .                    sweeper->limit.ticks, solver->statistics.kitten_ticks, when);
         14 ( 0.00%)      return true;
          .             }
          .           #ifndef LOGGING
          .             (void) when;
          .           #endif
    105,099 ( 0.00%)    return false;
    210,212 ( 0.00%)  }
          .           
         56 ( 0.00%)  static void init_sweeper (kissat *solver, sweeper *sweeper) {
         21 ( 0.00%)    sweeper->solver = solver;
         14 ( 0.00%)    sweeper->encoded = 0;
         70 ( 0.00%)    CALLOC (sweeper->depths, VARS);
    857,934 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (7x)
         77 ( 0.00%)    NALLOC (sweeper->reprs, LITS);
      3,176 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nalloc (7x)
  1,450,415 ( 0.00%)    for (all_literals (lit))
  2,538,116 ( 0.00%)      sweeper->reprs[lit] = lit;
         70 ( 0.00%)    NALLOC (sweeper->prev, VARS);
      3,109 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nalloc (7x)
         63 ( 0.00%)    memset (sweeper->prev, 0xff, VARS * sizeof *sweeper->prev);
    725,309 ( 0.00%)  => ???:0x000000000010c5b0 (7x)
         70 ( 0.00%)    NALLOC (sweeper->next, VARS);
      3,184 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nalloc (7x)
         63 ( 0.00%)    memset (sweeper->next, 0xff, VARS * sizeof *sweeper->next);
    725,309 ( 0.00%)  => ???:0x000000000010c5b0 (7x)
          .           #ifndef NDEBUG
    725,232 ( 0.00%)    for (all_variables (idx))
  1,450,352 ( 0.00%)      assert (sweeper->prev[idx] == INVALID_IDX);
    725,232 ( 0.00%)    for (all_variables (idx))
  1,450,352 ( 0.00%)      assert (sweeper->next[idx] == INVALID_IDX);
          .           #endif
         42 ( 0.00%)    sweeper->first = sweeper->last = INVALID_IDX;
         70 ( 0.00%)    INIT_STACK (sweeper->vars);
         70 ( 0.00%)    INIT_STACK (sweeper->refs);
         70 ( 0.00%)    INIT_STACK (sweeper->clause);
         70 ( 0.00%)    INIT_STACK (sweeper->backbone);
         70 ( 0.00%)    INIT_STACK (sweeper->partition);
         70 ( 0.00%)    INIT_STACK (sweeper->core[0]);
         70 ( 0.00%)    INIT_STACK (sweeper->core[1]);
         28 ( 0.00%)    assert (!solver->kitten);
         35 ( 0.00%)    solver->kitten = kitten_embedded (solver);
      2,565 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_embedded (7x)
         28 ( 0.00%)    kitten_track_antecedents (solver->kitten);
        189 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_track_antecedents (7x)
         28 ( 0.00%)    kissat_enter_dense_mode (solver, 0);
112,829,031 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (7x)
         21 ( 0.00%)    kissat_connect_irredundant_large_clauses (solver);
791,687,746 ( 0.33%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_connect_irredundant_large_clauses (7x)
          .           
         21 ( 0.00%)    unsigned completed = solver->statistics.sweep_completed;
          7 ( 0.00%)    const unsigned max_completed = 32;
         21 ( 0.00%)    if (completed > max_completed)
          .               completed = max_completed;
          .           
         28 ( 0.00%)    uint64_t vars_limit = GET_OPTION (sweepvars);
         21 ( 0.00%)    vars_limit <<= completed;
         21 ( 0.00%)    const unsigned max_vars_limit = GET_OPTION (sweepmaxvars);
         21 ( 0.00%)    if (vars_limit > max_vars_limit)
          .               vars_limit = max_vars_limit;
         28 ( 0.00%)    sweeper->limit.vars = vars_limit;
         56 ( 0.00%)    kissat_extremely_verbose (solver, "sweeper variable limit %u",
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (7x)
          .                                       sweeper->limit.vars);
          .           
         21 ( 0.00%)    uint64_t depth_limit = solver->statistics.sweep_completed;
         28 ( 0.00%)    depth_limit += GET_OPTION (sweepdepth);
         21 ( 0.00%)    const unsigned max_depth = GET_OPTION (sweepmaxdepth);
         21 ( 0.00%)    if (depth_limit > max_depth)
          .               depth_limit = max_depth;
         28 ( 0.00%)    sweeper->limit.depth = depth_limit;
         56 ( 0.00%)    kissat_extremely_verbose (solver, "sweeper depth limit %u",
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (7x)
          .                                       sweeper->limit.depth);
          .           
         28 ( 0.00%)    uint64_t clause_limit = GET_OPTION (sweepclauses);
         21 ( 0.00%)    clause_limit <<= completed;
         21 ( 0.00%)    const unsigned max_clause_limit = GET_OPTION (sweepmaxclauses);
         21 ( 0.00%)    if (clause_limit > max_clause_limit)
          .               clause_limit = max_clause_limit;
         28 ( 0.00%)    sweeper->limit.clauses = clause_limit;
         56 ( 0.00%)    kissat_extremely_verbose (solver, "sweeper clause limit %u",
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (7x)
          .                                       sweeper->limit.clauses);
          .           
         28 ( 0.00%)    if (GET_OPTION (sweepcomplete)) {
          .               sweeper->limit.ticks = UINT64_MAX;
          .               kissat_extremely_verbose (solver, "unlimited sweeper ticks limit");
          .             } else {
        961 ( 0.00%)      SET_EFFORT_LIMIT (ticks_limit, sweep, kitten_ticks);
     48,237 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (54x)
        658 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (14x)
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
         21 ( 0.00%)      sweeper->limit.ticks = ticks_limit;
          .             }
         21 ( 0.00%)    set_kitten_ticks_limit (sweeper);
        476 ( 0.00%)  => build/../src/sweep.c:set_kitten_ticks_limit (7x)
         42 ( 0.00%)  }
          .           
         35 ( 0.00%)  static unsigned release_sweeper (sweeper *sweeper) {
         21 ( 0.00%)    kissat *solver = sweeper->solver;
          .           
          7 ( 0.00%)    unsigned merged = 0;
    725,232 ( 0.00%)    for (all_variables (idx)) {
  2,538,116 ( 0.00%)      if (!ACTIVE (idx))
      6,422 ( 0.00%)        continue;
  1,224,104 ( 0.00%)      const unsigned lit = LIT (idx);
  1,398,976 ( 0.00%)      if (sweeper->reprs[lit] != lit)
      2,966 ( 0.00%)        merged++;
          .             }
         63 ( 0.00%)    DEALLOC (sweeper->depths, VARS);
      1,869 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
         70 ( 0.00%)    DEALLOC (sweeper->reprs, LITS);
      1,741 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
         63 ( 0.00%)    DEALLOC (sweeper->prev, VARS);
      1,904 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
         63 ( 0.00%)    DEALLOC (sweeper->next, VARS);
      1,878 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->vars);
      1,682 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->refs);
      1,748 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->clause);
      1,699 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->backbone);
      1,644 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->partition);
      1,706 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->core[0]);
      1,624 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (sweeper->core[1]);
      1,631 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
         28 ( 0.00%)    kitten_release (solver->kitten);
  1,442,439 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_release (7x)
         14 ( 0.00%)    solver->kitten = 0;
         35 ( 0.00%)    kissat_resume_sparse_mode (solver, false, 0);
646,061,462 ( 0.27%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (7x)
          7 ( 0.00%)    return merged;
         14 ( 0.00%)  }
          .           
     23,030 ( 0.00%)  static void clear_sweeper (sweeper *sweeper) {
     13,818 ( 0.00%)    kissat *solver = sweeper->solver;
     27,636 ( 0.00%)    LOG ("clearing sweeping environment");
     18,424 ( 0.00%)    kitten_clear (solver->kitten);
102,745,813 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_clear (4,606x)
     18,424 ( 0.00%)    kitten_track_antecedents (solver->kitten);
    124,362 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_track_antecedents (4,606x)
  6,207,866 ( 0.00%)    for (all_stack (unsigned, idx, sweeper->vars)) {
  7,042,064 ( 0.00%)      assert (sweeper->depths[idx]);
  5,281,548 ( 0.00%)      sweeper->depths[idx] = 0;
          .             }
     18,424 ( 0.00%)    CLEAR_STACK (sweeper->vars);
  8,173,067 ( 0.00%)    for (all_stack (reference, ref, sweeper->refs)) {
  6,966,006 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
158,607,153 ( 0.07%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (1,161,001x)
  5,805,005 ( 0.00%)      assert (c->swept);
  4,644,004 ( 0.00%)      c->swept = false;
          .             }
     18,424 ( 0.00%)    CLEAR_STACK (sweeper->refs);
     18,424 ( 0.00%)    CLEAR_STACK (sweeper->backbone);
     18,424 ( 0.00%)    CLEAR_STACK (sweeper->partition);
      9,212 ( 0.00%)    sweeper->encoded = 0;
     13,818 ( 0.00%)    set_kitten_ticks_limit (sweeper);
    313,152 ( 0.00%)  => build/../src/sweep.c:set_kitten_ticks_limit (4,606x)
     13,818 ( 0.00%)  }
          .           
132,075,608 ( 0.06%)  static unsigned sweep_repr (sweeper *sweeper, unsigned lit) {
          .             unsigned res;
          .             {
 37,735,888 ( 0.02%)      unsigned prev = lit;
208,496,404 ( 0.09%)      while ((res = sweeper->reprs[prev]) != prev)
    189,804 ( 0.00%)        prev = res;
          .             }
 56,603,832 ( 0.02%)    if (res == lit)
 37,546,746 ( 0.02%)      return res;
          .           #if defined(LOGGING) || !defined(NDEBUG)
    283,713 ( 0.00%)    kissat *solver = sweeper->solver;
          .           #endif
    567,426 ( 0.00%)    LOG ("sweeping repr[%s] = %s", LOGLIT (lit), LOGLIT (res));
          .             {
    756,568 ( 0.00%)      const unsigned not_res = NOT (res);
    189,142 ( 0.00%)      unsigned next, prev = lit;
          .               ;
  1,043,591 ( 0.00%)      while ((next = sweeper->reprs[prev]) != res) {
      2,648 ( 0.00%)        const unsigned not_prev = NOT (prev);
      2,317 ( 0.00%)        sweeper->reprs[not_prev] = not_res;
      2,317 ( 0.00%)        sweeper->reprs[prev] = res;
        662 ( 0.00%)        prev = next;
          .               }
  1,418,565 ( 0.00%)      assert (sweeper->reprs[NOT (prev)] == not_res);
          .             }
     94,571 ( 0.00%)    return res;
 56,603,832 ( 0.02%)  }
          .           
          .           static void add_literal_to_environment (sweeper *sweeper, unsigned depth,
 46,154,850 ( 0.02%)                                          unsigned lit) {
 39,561,300 ( 0.02%)    const unsigned repr = sweep_repr (sweeper, lit);
184,619,400 ( 0.08%)  => build/../src/sweep.c:sweep_repr (6,593,550x)
 19,780,650 ( 0.01%)    if (repr != lit)
          .               return;
 19,780,650 ( 0.01%)    kissat *solver = sweeper->solver;
 52,748,400 ( 0.02%)    const unsigned idx = IDX (lit);
 52,748,400 ( 0.02%)    if (sweeper->depths[idx])
  5,713,292 ( 0.00%)      return;
  1,760,516 ( 0.00%)    assert (depth < UINT_MAX);
  7,042,064 ( 0.00%)    sweeper->depths[idx] = depth + 1;
 11,444,160 ( 0.00%)    PUSH_STACK (sweeper->vars, idx);
     42,635 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (62x)
  5,281,548 ( 0.00%)    LOG ("sweeping[%u] adding literal %s", depth, LOGLIT (lit));
 13,187,100 ( 0.01%)  }
          .           
  8,639,838 ( 0.00%)  static void sweep_clause (sweeper *sweeper, unsigned depth) {
  4,319,919 ( 0.00%)    kissat *solver = sweeper->solver;
 11,519,784 ( 0.00%)    assert (SIZE_STACK (sweeper->clause) > 1);
 67,111,282 ( 0.03%)    for (all_stack (unsigned, lit, sweeper->clause))
 39,533,664 ( 0.02%)      add_literal_to_environment (sweeper, depth, lit);
459,429,957 ( 0.19%)  => build/../src/sweep.c:add_literal_to_environment (6,588,944x)
 21,599,595 ( 0.01%)    kitten_clause (solver->kitten, SIZE_STACK (sweeper->clause),
1,730,104,781 ( 0.73%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_clause (1,439,973x)
          .                            BEGIN_STACK (sweeper->clause));
  5,759,892 ( 0.00%)    CLEAR_STACK (sweeper->clause);
  7,199,865 ( 0.00%)    sweeper->encoded++;
  4,319,919 ( 0.00%)  }
          .           
          .           static void sweep_binary (sweeper *sweeper, unsigned depth, unsigned lit,
  3,145,896 ( 0.00%)                            unsigned other) {
  2,752,659 ( 0.00%)    if (sweep_repr (sweeper, lit) != lit)
 11,010,636 ( 0.00%)  => build/../src/sweep.c:sweep_repr (393,237x)
          .               return;
  2,752,659 ( 0.00%)    if (sweep_repr (sweeper, other) != other)
 16,321,838 ( 0.01%)  => build/../src/sweep.c:sweep_repr (393,237x)
    189,142 ( 0.00%)      return;
    895,998 ( 0.00%)    kissat *solver = sweeper->solver;
  1,791,996 ( 0.00%)    LOGBINARY (lit, other, "sweeping[%u]", depth);
    895,998 ( 0.00%)    value *values = solver->values;
  1,791,996 ( 0.00%)    assert (!values[lit]);
  1,493,330 ( 0.00%)    const value other_value = values[other];
    597,332 ( 0.00%)    if (other_value > 0) {
     75,084 ( 0.00%)      LOGBINARY (lit, other, "skipping satisfied");
     25,028 ( 0.00%)      return;
          .             }
    858,456 ( 0.00%)    const unsigned *depths = sweeper->depths;
  2,289,216 ( 0.00%)    const unsigned other_idx = IDX (other);
  1,716,912 ( 0.00%)    const unsigned other_depth = depths[other_idx];
  2,289,216 ( 0.00%)    const unsigned lit_idx = IDX (lit);
  1,716,912 ( 0.00%)    const unsigned lit_depth = depths[lit_idx];
  1,107,534 ( 0.00%)    if (other_depth && other_depth < lit_depth) {
     43,080 ( 0.00%)      LOGBINARY (lit, other, "skipping depth %u copied", other_depth);
      7,180 ( 0.00%)      return;
          .             }
    557,944 ( 0.00%)    assert (!other_value);
  1,673,832 ( 0.00%)    assert (EMPTY_STACK (sweeper->clause));
  3,626,701 ( 0.00%)    PUSH_STACK (sweeper->clause, lit);
      1,395 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (5x)
  3,626,636 ( 0.00%)    PUSH_STACK (sweeper->clause, other);
  1,673,832 ( 0.00%)    sweep_clause (sweeper, depth);
284,739,637 ( 0.12%)  => build/../src/sweep.c:sweep_clause (278,972x)
    786,474 ( 0.00%)  }
          .           
          .           static void sweep_reference (sweeper *sweeper, unsigned depth,
 14,784,770 ( 0.01%)                               reference ref) {
 12,672,660 ( 0.01%)    assert (EMPTY_STACK (sweeper->clause));
  6,336,330 ( 0.00%)    kissat *solver = sweeper->solver;
 12,672,660 ( 0.01%)    clause *c = kissat_dereference_clause (solver, ref);
288,328,282 ( 0.12%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (2,112,110x)
 10,560,550 ( 0.00%)    if (c->swept)
  1,744,060 ( 0.00%)      return;
  6,200,400 ( 0.00%)    if (c->garbage)
     78,481 ( 0.00%)      return;
  6,969,594 ( 0.00%)    LOGCLS (c, "sweeping[%u]", depth);
  3,484,797 ( 0.00%)    value *values = solver->values;
 59,833,340 ( 0.03%)    for (all_literals_in_clause (lit, c)) {
 30,294,105 ( 0.01%)      const value value = values[lit];
 12,118,240 ( 0.01%)      if (value > 0) {
      2,990 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
    739,732 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (598x)
      2,392 ( 0.00%)        CLEAR_STACK (sweeper->clause);
        598 ( 0.00%)        return;
          .               }
 12,116,446 ( 0.01%)      if (value < 0)
     26,752 ( 0.00%)        continue;
 84,441,101 ( 0.04%)      PUSH_STACK (sweeper->clause, lit);
     20,442 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (39x)
          .             }
 15,093,897 ( 0.01%)    PUSH_STACK (sweeper->refs, ref);
     54,528 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (68x)
  4,644,004 ( 0.00%)    c->swept = true;
  6,966,006 ( 0.00%)    sweep_clause (sweeper, depth);
2,074,798,859 ( 0.88%)  => build/../src/sweep.c:sweep_clause (1,161,001x)
  4,224,220 ( 0.00%)  }
          .           
          .           static void save_core_clause (void *state, bool learned, size_t size,
    233,982 ( 0.00%)                                const unsigned *lits) {
     51,996 ( 0.00%)    sweeper *sweeper = state;
     77,994 ( 0.00%)    kissat *solver = sweeper->solver;
    103,992 ( 0.00%)    if (solver->inconsistent)
          .               return;
     77,994 ( 0.00%)    const value *const values = solver->values;
    285,978 ( 0.00%)    unsigneds *core = sweeper->core + sweeper->save;
    207,984 ( 0.00%)    size_t saved = SIZE_STACK (*core);
    129,990 ( 0.00%)    const unsigned *end = lits + size;
     25,998 ( 0.00%)    unsigned non_false = 0;
    285,376 ( 0.00%)    for (const unsigned *p = lits; p != end; p++) {
    162,330 ( 0.00%)      const unsigned lit = *p;
    270,550 ( 0.00%)      const value value = values[lit];
    108,220 ( 0.00%)      if (value > 0) {
      7,602 ( 0.00%)        LOGLITS (size, lits, "extracted %s satisfied lemma", LOGLIT (lit));
     22,806 ( 0.00%)        RESIZE_STACK (*core, saved);
      1,267 ( 0.00%)        return;
          .               }
    687,523 ( 0.00%)      PUSH_STACK (*core, lit);
     23,806 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (47x)
    105,686 ( 0.00%)      if (value < 0)
        135 ( 0.00%)        continue;
    335,761 ( 0.00%)      if (!learned && ++non_false > 1) {
    122,976 ( 0.00%)        LOGLITS (size, lits, "ignoring extracted original clause");
    368,928 ( 0.00%)        RESIZE_STACK (*core, saved);
     20,496 ( 0.00%)        return;
          .               }
          .             }
          .           #ifdef LOGGING
     25,410 ( 0.00%)    unsigned *saved_lits = BEGIN_STACK (*core) + saved;
     38,115 ( 0.00%)    size_t saved_size = SIZE_STACK (*core) - saved;
     25,410 ( 0.00%)    LOGLITS (saved_size, saved_lits, "saved core[%u]", sweeper->save);
          .           #endif
     55,355 ( 0.00%)    PUSH_STACK (*core, INVALID_LIT);
     10,757 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (25x)
     51,996 ( 0.00%)  }
          .           
     18,738 ( 0.00%)  static void add_core (sweeper *sweeper, unsigned core_idx) {
      9,369 ( 0.00%)    kissat *solver = sweeper->solver;
     12,492 ( 0.00%)    if (solver->inconsistent)
          .               return;
     18,738 ( 0.00%)    LOG ("check and add extracted core[%u] lemmas to proof", core_idx);
      9,264 ( 0.00%)    assert (core_idx == 0 || core_idx == 1);
     28,107 ( 0.00%)    unsigneds *core = sweeper->core + core_idx;
      9,369 ( 0.00%)    const value *const values = solver->values;
          .           
      9,369 ( 0.00%)    unsigned *q = BEGIN_STACK (*core);
     15,615 ( 0.00%)    const unsigned *const end_core = END_STACK (*core), *p = q;
          .           
     21,456 ( 0.00%)    while (p != end_core) {
      5,976 ( 0.00%)      const unsigned *c = p;
     46,596 ( 0.00%)      while (*p != INVALID_LIT)
      7,914 ( 0.00%)        p++;
          .           #ifdef LOGGING
     11,952 ( 0.00%)      size_t old_size = p - c;
     17,928 ( 0.00%)      LOGLITS (old_size, c, "simplifying extracted core[%u] lemma", core_idx);
          .           #endif
      2,988 ( 0.00%)      bool satisfied = false;
      2,988 ( 0.00%)      unsigned unit = INVALID_LIT;
          .           
      5,976 ( 0.00%)      unsigned *d = q;
          .           
     92,768 ( 0.00%)      for (const unsigned *l = c; !satisfied && l != p; l++) {
     23,721 ( 0.00%)        const unsigned lit = *l;
     39,535 ( 0.00%)        const value value = values[lit];
     15,814 ( 0.00%)        if (value > 0) {
         46 ( 0.00%)          satisfied = true;
         46 ( 0.00%)          break;
          .                 }
     15,722 ( 0.00%)        if (!value)
     54,222 ( 0.00%)          unit = *q++ = lit;
          .               }
          .           
     11,952 ( 0.00%)      size_t new_size = q - d;
      2,988 ( 0.00%)      p++;
          .           
      5,976 ( 0.00%)      if (satisfied) {
         92 ( 0.00%)        q = d;
        276 ( 0.00%)        LOG ("not adding satisfied clause");
          .                 continue;
          .               }
          .           
      5,884 ( 0.00%)      if (!new_size) {
          .                 LOG ("sweeping produced empty clause");
          .                 CHECK_AND_ADD_EMPTY ();
          .                 ADD_EMPTY_TO_PROOF ();
          .                 solver->inconsistent = true;
          .                 CLEAR_STACK (*core);
          .                 return;
          .               }
          .           
      5,884 ( 0.00%)      if (new_size == 1) {
        280 ( 0.00%)        q = d;
        280 ( 0.00%)        assert (unit != INVALID_LIT);
        840 ( 0.00%)        LOG ("sweeping produced unit %s", LOGLIT (unit));
      1,260 ( 0.00%)        CHECK_AND_ADD_UNIT (unit);
  2,355,894 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_unit (140x)
        560 ( 0.00%)        ADD_UNIT_TO_PROOF (unit);
        840 ( 0.00%)        kissat_assign_unit (solver, unit, "sweeping backbone reason");
    130,525 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_assign_unit (140x)
        560 ( 0.00%)        INC (sweep_units);
      2,100 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_units (140x)
        140 ( 0.00%)        continue;
          .               }
          .           
     11,208 ( 0.00%)      *q++ = INVALID_LIT;
          .           
      5,604 ( 0.00%)      assert (new_size > 1);
     16,812 ( 0.00%)      LOGLITS (new_size, d, "adding extracted core[%u] lemma", core_idx);
     28,020 ( 0.00%)      CHECK_AND_ADD_LITS (new_size, d);
 41,658,649 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (2,802x)
     11,208 ( 0.00%)      ADD_LITS_TO_PROOF (new_size, d);
          .             }
     38,128 ( 0.00%)    SET_END_OF_STACK (*core, q);
          .           #ifndef LOGGING
          .             (void) core_idx;
          .           #endif
      6,246 ( 0.00%)  }
          .           
     30,510 ( 0.00%)  static void save_core (sweeper *sweeper, unsigned core) {
     15,255 ( 0.00%)    kissat *solver = sweeper->solver;
     30,510 ( 0.00%)    LOG ("saving extracted core[%u] lemmas", core);
     13,188 ( 0.00%)    assert (core == 0 || core == 1);
    101,700 ( 0.00%)    assert (EMPTY_STACK (sweeper->core[core]));
     15,255 ( 0.00%)    sweeper->save = core;
     25,425 ( 0.00%)    kitten_compute_clausal_core (solver->kitten, 0);
  8,400,287 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_compute_clausal_core (5,085x)
     35,595 ( 0.00%)    kitten_traverse_core_clauses (solver->kitten, sweeper, save_core_clause);
 11,898,060 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_traverse_core_clauses (5,085x)
     15,255 ( 0.00%)  }
          .           
     18,738 ( 0.00%)  static void clear_core (sweeper *sweeper, unsigned core_idx) {
      9,369 ( 0.00%)    kissat *solver = sweeper->solver;
     12,492 ( 0.00%)    if (solver->inconsistent)
          .               return;
          .           #if defined(LOGGING) || !defined(NDEBUG) || !defined(NPROOFS)
      9,264 ( 0.00%)    assert (core_idx == 0 || core_idx == 1);
     18,738 ( 0.00%)    LOG ("clearing core[%u] lemmas", core_idx);
          .           #endif
     28,107 ( 0.00%)    unsigneds *core = sweeper->core + core_idx;
          .           #ifdef CHECKING_OR_PROVING
     18,738 ( 0.00%)    LOG ("deleting sub-solver core clauses");
      9,369 ( 0.00%)    const unsigned *const end = END_STACK (*core);
      9,369 ( 0.00%)    const unsigned *c = BEGIN_STACK (*core);
     35,550 ( 0.00%)    for (const unsigned *p = c; c != end; c = ++p) {
     41,628 ( 0.00%)      while (*p != INVALID_LIT)
      7,605 ( 0.00%)        p++;
     11,208 ( 0.00%)      const size_t size = p - c;
      5,604 ( 0.00%)      assert (size > 1);
     28,020 ( 0.00%)      REMOVE_CHECKER_LITS (size, c);
  5,392,766 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (2,802x)
     11,208 ( 0.00%)      DELETE_LITS_FROM_PROOF (size, c);
          .             }
          .           #endif
     15,615 ( 0.00%)    CLEAR_STACK (*core);
      6,246 ( 0.00%)  }
          .           
        525 ( 0.00%)  static void save_add_clear_core (sweeper *sweeper) {
        420 ( 0.00%)    save_core (sweeper, 0);
    862,537 ( 0.00%)  => build/../src/sweep.c:save_core (105x)
        420 ( 0.00%)    add_core (sweeper, 0);
  2,835,653 ( 0.00%)  => build/../src/sweep.c:add_core (105x)
        420 ( 0.00%)    clear_core (sweeper, 0);
     79,161 ( 0.00%)  => build/../src/sweep.c:clear_core (105x)
        315 ( 0.00%)  }
          .           
          .           #define LOGBACKBONE(MESSAGE) \
          .             LOGLITSET (SIZE_STACK (sweeper->backbone), \
          .                        BEGIN_STACK (sweeper->backbone), MESSAGE)
          .           
          .           #define LOGPARTITION(MESSAGE) \
          .             LOGLITPART (SIZE_STACK (sweeper->partition), \
          .                         BEGIN_STACK (sweeper->partition), MESSAGE)
          .           
     23,025 ( 0.00%)  static void init_backbone_and_partition (sweeper *sweeper) {
     13,815 ( 0.00%)    kissat *solver = sweeper->solver;
     27,630 ( 0.00%)    LOG ("initializing backbone and equivalent literals candidates");
  6,206,064 ( 0.00%)    for (all_stack (unsigned, idx, sweeper->vars)) {
 12,320,028 ( 0.01%)      if (!ACTIVE (idx))
          .                 continue;
  6,160,014 ( 0.00%)      const unsigned lit = LIT (idx);
  7,040,016 ( 0.00%)      const unsigned not_lit = NOT (lit);
  6,160,014 ( 0.00%)      const signed char tmp = kitten_value (solver->kitten, lit);
 39,600,090 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_value (880,002x)
  3,967,552 ( 0.00%)      const unsigned candidate = (tmp < 0) ? not_lit : lit;
  5,280,012 ( 0.00%)      LOG ("sweeping candidate %s", LOGLIT (candidate));
 11,440,832 ( 0.00%)      PUSH_STACK (sweeper->backbone, candidate);
     39,019 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (62x)
 12,693,518 ( 0.01%)      PUSH_STACK (sweeper->partition, candidate);
 18,949,938 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (28,730x)
          .             }
     70,730 ( 0.00%)    PUSH_STACK (sweeper->partition, INVALID_LIT);
  1,078,231 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1,190x)
          .           
     27,630 ( 0.00%)    LOGBACKBONE ("initialized backbone candidates");
     27,630 ( 0.00%)    LOGPARTITION ("initialized equivalence candidates");
     13,815 ( 0.00%)  }
          .           
          .           static void sweep_empty_clause (sweeper *sweeper) {
          .             assert (!sweeper->solver->inconsistent);
          .             save_add_clear_core (sweeper);
          .             assert (sweeper->solver->inconsistent);
          .           }
          .           
    396,632 ( 0.00%)  static void sweep_refine_partition (sweeper *sweeper) {
    148,737 ( 0.00%)    kissat *solver = sweeper->solver;
    297,474 ( 0.00%)    LOG ("refining partition");
    148,737 ( 0.00%)    kitten *kitten = solver->kitten;
    347,053 ( 0.00%)    unsigneds old_partition = sweeper->partition;
          .             unsigneds new_partition;
    247,895 ( 0.00%)    INIT_STACK (new_partition);
    148,737 ( 0.00%)    const value *const values = solver->values;
     99,158 ( 0.00%)    const unsigned *const old_begin = BEGIN_STACK (old_partition);
     99,158 ( 0.00%)    const unsigned *const old_end = END_STACK (old_partition);
          .           #ifdef LOGGING
     49,579 ( 0.00%)    unsigned old_classes = 0;
     49,579 ( 0.00%)    unsigned new_classes = 0;
          .           #endif
  3,916,506 ( 0.00%)    for (const unsigned *p = old_begin, *q; p != old_end; p = q + 1) {
    603,172 ( 0.00%)      unsigned assigned_true = 0, other;
 39,289,136 ( 0.02%)      for (q = p; (other = *q) != INVALID_LIT; q++) {
 40,207,720 ( 0.02%)        if (sweep_repr (sweeper, other) != other)
160,830,880 ( 0.07%)  => build/../src/sweep.c:sweep_repr (5,743,960x)
          .                   continue;
 34,463,760 ( 0.01%)        if (values[other])
        113 ( 0.00%)          continue;
 34,463,082 ( 0.01%)        signed char value = kitten_value (kitten, other);
258,473,115 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_value (5,743,847x)
 11,487,694 ( 0.00%)        if (!value)
          .                   LOG ("dropping sub-solver unassigned %s", LOGLIT (other));
 11,487,694 ( 0.00%)        else if (value > 0) {
 28,783,259 ( 0.01%)          PUSH_STACK (new_partition, other);
 98,994,382 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (198,566x)
  5,955,022 ( 0.00%)          assigned_true++;
          .                 }
          .               }
          .           #ifdef LOGGING
  3,619,032 ( 0.00%)      LOG ("refining class %u of size %zu", old_classes, (size_t) (q - p));
    603,172 ( 0.00%)      old_classes++;
          .           #endif
  1,206,344 ( 0.00%)      if (assigned_true == 0)
    481,908 ( 0.00%)        LOG ("no positive literal in class");
  1,045,708 ( 0.00%)      else if (assigned_true == 1) {
          .           #ifdef LOGGING
    486,399 ( 0.00%)        other =
          .           #else
          .                 (void)
          .           #endif
  1,134,931 ( 0.00%)            POP_STACK (new_partition);
    972,798 ( 0.00%)        LOG ("dropping singleton class %s", LOGLIT (other));
          .               } else {
  2,164,326 ( 0.00%)        LOG ("%u positive literal in class", assigned_true);
  3,147,608 ( 0.00%)        PUSH_STACK (new_partition, INVALID_LIT);
 13,048,816 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (26,184x)
          .           #ifdef LOGGING
    360,721 ( 0.00%)        new_classes++;
          .           #endif
          .               }
          .           
    603,172 ( 0.00%)      unsigned assigned_false = 0;
 39,289,136 ( 0.02%)      for (q = p; (other = *q) != INVALID_LIT; q++) {
 40,207,720 ( 0.02%)        if (sweep_repr (sweeper, other) != other)
160,830,880 ( 0.07%)  => build/../src/sweep.c:sweep_repr (5,743,960x)
          .                   continue;
 34,463,760 ( 0.01%)        if (values[other])
        113 ( 0.00%)          continue;
 34,463,082 ( 0.01%)        signed char value = kitten_value (kitten, other);
258,473,115 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_value (5,743,847x)
 11,487,694 ( 0.00%)        if (value < 0) {
 25,570,374 ( 0.01%)          PUSH_STACK (new_partition, other);
 48,754,400 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (67,335x)
  5,532,672 ( 0.00%)          assigned_false++;
          .                 }
          .               }
          .           
  1,206,344 ( 0.00%)      if (assigned_false == 0)
    643,218 ( 0.00%)        LOG ("no negative literal in class");
    991,938 ( 0.00%)      else if (assigned_false == 1) {
          .           #ifdef LOGGING
    496,398 ( 0.00%)        other =
          .           #else
          .                 (void)
          .           #endif
  1,158,262 ( 0.00%)            POP_STACK (new_partition);
    992,796 ( 0.00%)        LOG ("dropping singleton class %s", LOGLIT (other));
          .               } else {
  1,983,018 ( 0.00%)        LOG ("%u negative literal in class", assigned_false);
  2,798,564 ( 0.00%)        PUSH_STACK (new_partition, INVALID_LIT);
  8,914,077 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (15,454x)
          .           #ifdef LOGGING
    330,503 ( 0.00%)        new_classes++;
          .           #endif
          .               }
          .             }
    743,685 ( 0.00%)    RELEASE_STACK (old_partition);
 11,899,173 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (49,579x)
    347,053 ( 0.00%)    sweeper->partition = new_partition;
    297,474 ( 0.00%)    LOG ("refined %u classes into %u", old_classes, new_classes);
    297,474 ( 0.00%)    LOGPARTITION ("refined equivalence candidates");
    297,474 ( 0.00%)  }
          .           
    125,910 ( 0.00%)  static void sweep_refine_backbone (sweeper *sweeper) {
     75,546 ( 0.00%)    kissat *solver = sweeper->solver;
    151,092 ( 0.00%)    LOG ("refining backbone candidates");
     75,546 ( 0.00%)    const unsigned *const end = END_STACK (sweeper->backbone);
     75,546 ( 0.00%)    unsigned *q = BEGIN_STACK (sweeper->backbone);
     75,546 ( 0.00%)    const value *const values = solver->values;
     75,546 ( 0.00%)    kitten *kitten = solver->kitten;
  2,722,008 ( 0.00%)    for (const unsigned *p = q; p != end; p++) {
  1,928,187 ( 0.00%)      const unsigned lit = *p;
  3,856,374 ( 0.00%)      if (values[lit])
          5 ( 0.00%)        continue;
  3,856,344 ( 0.00%)      signed char value = kitten_value (kitten, lit);
 28,922,580 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_value (642,724x)
  1,285,448 ( 0.00%)      if (!value)
          .                 LOG ("dropping sub-solver unassigned %s", LOGLIT (lit));
  1,285,448 ( 0.00%)      else if (value >= 0)
  2,263,074 ( 0.00%)        *q++ = lit;
          .             }
    365,382 ( 0.00%)    SET_END_OF_STACK (sweeper->backbone, q);
    151,092 ( 0.00%)    LOGBACKBONE ("refined backbone candidates");
     75,546 ( 0.00%)  }
          .           
    247,895 ( 0.00%)  static void sweep_refine (sweeper *sweeper) {
          .           #ifdef LOGGING
    148,737 ( 0.00%)    kissat *solver = sweeper->solver;
          .           #endif
    297,474 ( 0.00%)    if (EMPTY_STACK (sweeper->backbone))
    146,382 ( 0.00%)      LOG ("no need to refine empty backbone candidates");
          .             else
     75,546 ( 0.00%)      sweep_refine_backbone (sweeper);
 47,366,220 ( 0.02%)  => build/../src/sweep.c:sweep_refine_backbone (25,182x)
    297,474 ( 0.00%)    if (EMPTY_STACK (sweeper->partition))
          .               LOG ("no need to refine empty partition candidates");
          .             else
    148,737 ( 0.00%)      sweep_refine_partition (sweeper);
1,452,333,606 ( 0.61%)  => build/../src/sweep.c:sweep_refine_partition (49,579x)
    148,737 ( 0.00%)  }
          .           
    143,445 ( 0.00%)  static void flip_backbone_literals (struct sweeper *sweeper) {
     86,067 ( 0.00%)    struct kissat *solver = sweeper->solver;
     86,067 ( 0.00%)    const unsigned max_rounds = GET_OPTION (sweepfliprounds);
     57,378 ( 0.00%)    if (!max_rounds)
          .               return;
    172,134 ( 0.00%)    assert (!EMPTY_STACK (sweeper->backbone));
     86,067 ( 0.00%)    struct kitten *kitten = solver->kitten;
    143,445 ( 0.00%)    if (kitten_status (kitten) != 10)
    229,512 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_status (28,689x)
         74 ( 0.00%)      return;
          .           #ifdef LOGGING
     28,615 ( 0.00%)    unsigned total_flipped = 0;
          .           #endif
     28,615 ( 0.00%)    unsigned flipped, round = 0;
          .             do {
     28,615 ( 0.00%)      round++;
     28,615 ( 0.00%)      flipped = 0;
    143,075 ( 0.00%)      unsigned *begin = BEGIN_STACK (sweeper->backbone), *q = begin;
    143,075 ( 0.00%)      const unsigned *const end = END_STACK (sweeper->backbone), *p = q;
  3,948,373 ( 0.00%)      while (p != end) {
  6,389,855 ( 0.00%)        const unsigned lit = *p++;
  5,111,884 ( 0.00%)        INC (sweep_flip_backbone);
 19,169,565 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flip_backbone (1,277,971x)
  8,945,797 ( 0.00%)        if (kitten_flip_literal (kitten, lit)) {
458,289,290 ( 0.19%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_flip_literal (1,277,971x)
  3,514,044 ( 0.00%)          LOG ("flipping backbone candidate %s succeeded", LOGLIT (lit));
          .           #ifdef LOGGING
    585,674 ( 0.00%)          total_flipped++;
          .           #endif
  2,342,696 ( 0.00%)          INC (sweep_flipped_backbone);
  8,785,110 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flipped_backbone (585,674x)
  1,171,348 ( 0.00%)          flipped++;
          .                 } else {
  4,153,782 ( 0.00%)          LOG ("flipping backbone candidate %s failed", LOGLIT (lit));
  3,461,485 ( 0.00%)          *q++ = lit;
          .                 }
          .               }
    377,136 ( 0.00%)      SET_END_OF_STACK (sweeper->backbone, q);
    171,690 ( 0.00%)      LOG ("flipped %u backbone candidates in round %u", flipped, round);
          .           
    314,765 ( 0.00%)      if (TERMINATED (sweep_terminated_1))
    629,530 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (28,615x)
          .                 break;
    171,690 ( 0.00%)      if (solver->statistics.kitten_ticks > sweeper->limit.ticks)
          1 ( 0.00%)        break;
    102,232 ( 0.00%)    } while (flipped && round < max_rounds);
    171,690 ( 0.00%)    LOG ("flipped %u backbone candidates in total in %u rounds",
          .                  total_flipped, round);
     57,378 ( 0.00%)  }
          .           
    171,702 ( 0.00%)  static bool sweep_backbone_candidate (sweeper *sweeper, unsigned lit) {
     85,851 ( 0.00%)    kissat *solver = sweeper->solver;
    171,702 ( 0.00%)    LOG ("trying backbone candidate %s", LOGLIT (lit));
     85,851 ( 0.00%)    kitten *kitten = solver->kitten;
    171,702 ( 0.00%)    signed char value = kitten_fixed (kitten, lit);
  1,458,753 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_fixed (28,617x)
     57,234 ( 0.00%)    if (value) {
        136 ( 0.00%)      INC (sweep_fixed_backbone);
        510 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_fixed_backbone (34x)
        204 ( 0.00%)      LOG ("literal %s already fixed", LOGLIT (lit));
         68 ( 0.00%)      assert (value > 0);
         68 ( 0.00%)      return false;
          .             }
          .           
    114,332 ( 0.00%)    INC (sweep_flip_backbone);
    428,745 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flip_backbone (28,583x)
    342,520 ( 0.00%)    if (kitten_status (kitten) == 10 && kitten_flip_literal (kitten, lit)) {
 12,190,802 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_flip_literal (28,515x)
    228,664 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_status (28,583x)
      1,480 ( 0.00%)      INC (sweep_flipped_backbone);
      5,550 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flipped_backbone (370x)
      2,220 ( 0.00%)      LOG ("flipping %s succeeded", LOGLIT (lit));
      2,220 ( 0.00%)      LOGBACKBONE ("refined backbone candidates");
        740 ( 0.00%)      return false;
          .             }
          .           
    169,278 ( 0.00%)    LOG ("flipping %s failed", LOGLIT (lit));
    225,704 ( 0.00%)    const unsigned not_lit = NOT (lit);
    112,852 ( 0.00%)    INC (sweep_solved_backbone);
    423,195 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_solved_backbone (28,213x)
    141,065 ( 0.00%)    kitten_assume (kitten, not_lit);
904,430,639 ( 0.38%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_assume (28,213x)
    112,852 ( 0.00%)    int res = sweep_solve (sweeper);
3,658,068,276 ( 1.55%)  => build/../src/sweep.c:sweep_solve (28,213x)
     56,426 ( 0.00%)    if (res == 10) {
    168,630 ( 0.00%)      LOG ("sweeping backbone candidate %s failed", LOGLIT (lit));
     84,315 ( 0.00%)      sweep_refine (sweeper);
1,339,817,195 ( 0.57%)  => build/../src/sweep.c:sweep_refine (28,105x)
    112,420 ( 0.00%)      INC (sweep_sat_backbone);
    421,575 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_sat_backbone (28,105x)
     56,210 ( 0.00%)      return false;
          .             }
          .           
        216 ( 0.00%)    if (res == 20) {
        630 ( 0.00%)      LOG ("sweep unit %s", LOGLIT (lit));
        315 ( 0.00%)      save_add_clear_core (sweeper);
  3,779,451 ( 0.00%)  => build/../src/sweep.c:save_add_clear_core (105x)
        420 ( 0.00%)      INC (sweep_unsat_backbone);
      1,575 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_unsat_backbone (105x)
        210 ( 0.00%)      return true;
          .             }
          .           
         12 ( 0.00%)    INC (sweep_unknown_backbone);
         45 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_unknown_backbone (3x)
          .           
         18 ( 0.00%)    LOG ("sweeping backbone candidate %s failed", LOGLIT (lit));
          3 ( 0.00%)    return false;
     57,234 ( 0.00%)  }
          .           
     21,126 ( 0.00%)  static void add_binary (kissat *solver, unsigned lit, unsigned other) {
     18,108 ( 0.00%)    kissat_new_binary_clause (solver, lit, other);
  9,656,854 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_binary_clause (3,018x)
      9,054 ( 0.00%)  }
          .           
  2,017,608 ( 0.00%)  static bool scheduled_variable (sweeper *sweeper, unsigned idx) {
          .           #ifndef NDEBUG
  1,008,804 ( 0.00%)    kissat *const solver = sweeper->solver;
  1,345,072 ( 0.00%)    assert (VALID_INTERNAL_INDEX (idx));
          .           #endif
  4,324,088 ( 0.00%)    return sweeper->prev[idx] != INVALID_IDX || sweeper->first == idx;
    672,536 ( 0.00%)  }
          .           
    776,430 ( 0.00%)  static void schedule_inner (sweeper *sweeper, unsigned idx) {
    388,215 ( 0.00%)    kissat *const solver = sweeper->solver;
    517,620 ( 0.00%)    assert (VALID_INTERNAL_INDEX (idx));
  1,811,670 ( 0.00%)    if (!ACTIVE (idx))
          7 ( 0.00%)      return;
    905,786 ( 0.00%)    const unsigned next = sweeper->next[idx];
    258,796 ( 0.00%)    if (next != INVALID_IDX) {
      6,726 ( 0.00%)      LOG ("rescheduling inner %s as last", LOGVAR (idx));
      7,847 ( 0.00%)      const unsigned prev = sweeper->prev[idx];
      8,968 ( 0.00%)      assert (sweeper->prev[next] == idx);
      7,847 ( 0.00%)      sweeper->prev[next] = prev;
      2,242 ( 0.00%)      if (prev == INVALID_IDX) {
         16 ( 0.00%)        assert (sweeper->first == idx);
         16 ( 0.00%)        sweeper->first = next;
          .               } else {
      8,936 ( 0.00%)        assert (sweeper->next[prev] == idx);
      7,819 ( 0.00%)        sweeper->next[prev] = next;
          .               }
      3,363 ( 0.00%)      const unsigned last = sweeper->last;
      2,242 ( 0.00%)      if (last == INVALID_IDX) {
          .                 assert (sweeper->first == INVALID_IDX);
          .                 sweeper->first = idx;
          .               } else {
      8,968 ( 0.00%)        assert (sweeper->next[last] == INVALID_IDX);
      7,847 ( 0.00%)        sweeper->next[last] = idx;
          .               }
      7,847 ( 0.00%)      sweeper->prev[idx] = last;
      6,726 ( 0.00%)      sweeper->next[idx] = INVALID_IDX;
      4,484 ( 0.00%)      sweeper->last = idx;
    513,108 ( 0.00%)    } else if (sweeper->last != idx) {
    768,738 ( 0.00%)      LOG ("scheduling inner %s as last", LOGVAR (idx));
    384,369 ( 0.00%)      const unsigned last = sweeper->last;
    256,246 ( 0.00%)      if (last == INVALID_IDX) {
         24 ( 0.00%)        assert (sweeper->first == INVALID_IDX);
         24 ( 0.00%)        sweeper->first = idx;
          .               } else {
  1,024,936 ( 0.00%)        assert (sweeper->next[last] == INVALID_IDX);
    896,819 ( 0.00%)        sweeper->next[last] = idx;
          .               }
  1,024,984 ( 0.00%)      assert (sweeper->next[idx] == INVALID_IDX);
    896,861 ( 0.00%)      sweeper->prev[idx] = last;
    512,492 ( 0.00%)      sweeper->last = idx;
          .             } else
        924 ( 0.00%)      LOG ("keeping inner %s scheduled as last", LOGVAR (idx));
    258,810 ( 0.00%)  }
          .           
    241,404 ( 0.00%)  static void schedule_outer (sweeper *sweeper, unsigned idx) {
          .           #if !defined(NDEBUG) || defined(LOGGING)
    120,702 ( 0.00%)    kissat *const solver = sweeper->solver;
          .           #endif
    160,936 ( 0.00%)    assert (VALID_INTERNAL_INDEX (idx));
    321,872 ( 0.00%)    assert (!scheduled_variable (sweeper, idx));
  1,166,786 ( 0.00%)  => build/../src/sweep.c:scheduled_variable (40,234x)
    523,042 ( 0.00%)    assert (ACTIVE (idx));
    120,702 ( 0.00%)    const unsigned first = sweeper->first;
     80,468 ( 0.00%)    if (first == INVALID_IDX) {
          4 ( 0.00%)      assert (sweeper->last == INVALID_IDX);
          4 ( 0.00%)      sweeper->last = idx;
          .             } else {
    321,864 ( 0.00%)      assert (sweeper->prev[first] == INVALID_IDX);
    281,631 ( 0.00%)      sweeper->prev[first] = idx;
          .             }
    321,872 ( 0.00%)    assert (sweeper->prev[idx] == INVALID_IDX);
    281,638 ( 0.00%)    sweeper->next[idx] = first;
    120,702 ( 0.00%)    sweeper->first = idx;
    241,404 ( 0.00%)    LOG ("scheduling outer %s as first", LOGVAR (idx));
    120,702 ( 0.00%)  }
          .           
     24,920 ( 0.00%)  static unsigned next_scheduled (sweeper *sweeper) {
          .           #if !defined(NDEBUG) || defined(LOGGING)
     14,952 ( 0.00%)    kissat *const solver = sweeper->solver;
          .           #endif
     14,952 ( 0.00%)    unsigned res = sweeper->last;
      9,968 ( 0.00%)    if (res == INVALID_IDX) {
          .               LOG ("no more scheduled variables left");
          .               return INVALID_IDX;
          .             }
     19,936 ( 0.00%)    assert (VALID_INTERNAL_INDEX (res));
     29,904 ( 0.00%)    LOG ("dequeuing next scheduled %s", LOGVAR (res));
     34,888 ( 0.00%)    const unsigned prev = sweeper->prev[res];
     39,872 ( 0.00%)    assert (sweeper->next[res] == INVALID_IDX);
     29,904 ( 0.00%)    sweeper->prev[res] = INVALID_IDX;
      9,968 ( 0.00%)    if (prev == INVALID_IDX) {
          .               assert (sweeper->first == res);
          .               sweeper->first = INVALID_IDX;
          .             } else {
     39,872 ( 0.00%)      assert (sweeper->next[prev] == res);
     29,904 ( 0.00%)      sweeper->next[prev] = INVALID_IDX;
          .             }
     14,952 ( 0.00%)    sweeper->last = prev;
      4,984 ( 0.00%)    return res;
      9,968 ( 0.00%)  }
          .           
          .           #define all_scheduled(IDX) \
          .             unsigned IDX = sweeper->first, NEXT_##IDX; \
          .             IDX != INVALID_IDX && (NEXT_##IDX = sweeper->next[IDX], true); \
          .             IDX = NEXT_##IDX
          .           
          .           static void substitute_connected_clauses (sweeper *sweeper, unsigned lit,
     24,144 ( 0.00%)                                            unsigned repr) {
      9,054 ( 0.00%)    kissat *solver = sweeper->solver;
     12,072 ( 0.00%)    if (solver->inconsistent)
          .               return;
      9,054 ( 0.00%)    value *const values = solver->values;
     18,108 ( 0.00%)    if (values[lit])
         28 ( 0.00%)      return;
     18,024 ( 0.00%)    if (values[repr])
          .               return;
     18,024 ( 0.00%)    LOG ("substituting %s with %s in all irredundant clauses", LOGLIT (lit),
          .                  LOGLIT (repr));
          .           
      9,012 ( 0.00%)    assert (lit != repr);
     27,036 ( 0.00%)    assert (lit != NOT (repr));
          .           
          .           #ifdef CHECKING_OR_PROVING
     12,016 ( 0.00%)    const bool checking_or_proving = kissat_checking_or_proving (solver);
     63,084 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_checking_or_proving (3,004x)
     18,024 ( 0.00%)    assert (EMPTY_STACK (solver->added));
     18,024 ( 0.00%)    assert (EMPTY_STACK (solver->removed));
          .           #endif
          .           
      9,012 ( 0.00%)    unsigneds *const delayed = &solver->delayed;
     18,024 ( 0.00%)    assert (EMPTY_STACK (*delayed));
          .           
          .             {
     33,044 ( 0.00%)      watches *lit_watches = &WATCHES (lit);
     18,024 ( 0.00%)      watch *const begin_watches = BEGIN_WATCHES (*lit_watches);
     24,032 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (3,004x)
     18,024 ( 0.00%)      const watch *const end_watches = END_WATCHES (*lit_watches);
     24,032 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (3,004x)
          .           
      6,008 ( 0.00%)      watch *q = begin_watches;
      6,008 ( 0.00%)      const watch *p = q;
          .           
    120,377 ( 0.00%)      while (p != end_watches) {
    351,190 ( 0.00%)        const watch head = *q++ = *p++;
    140,476 ( 0.00%)        if (head.type.binary) {
     33,948 ( 0.00%)          const unsigned other = head.binary.lit;
     56,580 ( 0.00%)          const value other_value = values[other];
    101,844 ( 0.00%)          if (other == NOT (repr))
      9,448 ( 0.00%)            continue;
     13,184 ( 0.00%)          if (other_value < 0)
          .                     break;
     13,184 ( 0.00%)          if (other_value > 0)
      1,288 ( 0.00%)            continue;
     17,844 ( 0.00%)          if (other == repr) {
          .                     CHECK_AND_ADD_UNIT (lit);
          .                     ADD_UNIT_TO_PROOF (lit);
          .                     kissat_assign_unit (solver, lit, "substituted binary clause");
          .                     INC (sweep_units);
          .                     break;
          .                   }
     59,480 ( 0.00%)          CHECK_AND_ADD_BINARY (repr, other);
220,084,391 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_binary (5,948x)
     23,792 ( 0.00%)          ADD_BINARY_TO_PROOF (repr, other);
     59,480 ( 0.00%)          REMOVE_CHECKER_BINARY (lit, other);
 20,358,761 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_binary (5,948x)
     23,792 ( 0.00%)          DELETE_BINARY_FROM_PROOF (lit, other);
     77,336 ( 0.00%)          PUSH_STACK (*delayed, head.raw);
      1,162 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
     11,896 ( 0.00%)          watch src = {.raw = head.raw};
     11,896 ( 0.00%)          watch dst = {.raw = head.raw};
     47,584 ( 0.00%)          src.binary.lit = lit;
     47,584 ( 0.00%)          dst.binary.lit = repr;
     65,428 ( 0.00%)          watches *other_watches = &WATCHES (other);
     35,688 ( 0.00%)          kissat_substitute_large_watch (solver, other_watches, src, dst);
    725,860 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_substitute_large_watch (5,948x)
     11,896 ( 0.00%)          q--;
          .                 } else {
     71,409 ( 0.00%)          const reference ref = head.large.ref;
    142,818 ( 0.00%)          assert (EMPTY_STACK (sweeper->clause));
    142,818 ( 0.00%)          clause *c = kissat_dereference_clause (solver, ref);
  3,248,303 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (23,803x)
    119,015 ( 0.00%)          if (c->garbage)
      1,549 ( 0.00%)            continue;
          .           
     22,254 ( 0.00%)          bool satisfied = false;
     22,254 ( 0.00%)          bool repr_already_watched = false;
    178,032 ( 0.00%)          const unsigned not_repr = NOT (repr);
          .           #ifndef NDEBUG
     22,254 ( 0.00%)          bool found = false;
          .           #endif
  1,049,971 ( 0.00%)          for (all_literals_in_clause (other, c)) {
    332,577 ( 0.00%)            if (other == lit) {
          .           #ifndef NDEBUG
     84,672 ( 0.00%)              assert (!found);
     21,168 ( 0.00%)              found = true;
          .           #endif
    275,184 ( 0.00%)              PUSH_STACK (solver->clause, repr);
     21,168 ( 0.00%)              continue;
          .                     }
    743,715 ( 0.00%)            assert (other != NOT (lit));
    247,905 ( 0.00%)            if (other == repr) {
      2,532 ( 0.00%)              assert (!repr_already_watched);
        633 ( 0.00%)              repr_already_watched = true;
        633 ( 0.00%)              continue;
          .                     }
    246,006 ( 0.00%)            if (other == not_repr) {
      2,021 ( 0.00%)              satisfied = true;
      2,021 ( 0.00%)              break;
          .                     }
    399,905 ( 0.00%)            const value tmp = values[other];
    159,962 ( 0.00%)            if (tmp < 0)
      1,255 ( 0.00%)              continue;
    157,452 ( 0.00%)            if (tmp > 0) {
        594 ( 0.00%)              satisfied = true;
        594 ( 0.00%)              break;
          .                     }
  1,093,848 ( 0.00%)            PUSH_STACK (solver->clause, other);
          .                   }
          .           
     44,508 ( 0.00%)          if (satisfied) {
     10,460 ( 0.00%)            CLEAR_STACK (solver->clause);
     13,075 ( 0.00%)            kissat_mark_clause_as_garbage (solver, c);
  5,906,369 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (2,615x)
      2,615 ( 0.00%)            continue;
          .                   }
     39,278 ( 0.00%)          assert (found);
          .           
    157,112 ( 0.00%)          const unsigned new_size = SIZE_STACK (solver->clause);
          .           
     39,278 ( 0.00%)          if (new_size == 0) {
          .                     LOGCLS (c, "substituted empty clause");
          .                     assert (!solver->inconsistent);
          .                     solver->inconsistent = true;
          .                     CHECK_AND_ADD_EMPTY ();
          .                     ADD_EMPTY_TO_PROOF ();
          .                     break;
          .                   }
          .           
     39,278 ( 0.00%)          if (new_size == 1) {
          .                     LOGCLS (c, "reduces to unit");
          .                     const unsigned unit = POP_STACK (solver->clause);
          .                     CHECK_AND_ADD_UNIT (unit);
          .                     ADD_UNIT_TO_PROOF (unit);
          .                     kissat_assign_unit (solver, unit, "substituted large clause");
          .                     INC (sweep_units);
          .                     break;
          .                   }
          .           
    353,502 ( 0.00%)          CHECK_AND_ADD_STACK (solver->clause);
158,978,302 ( 0.07%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (19,639x)
     78,556 ( 0.00%)          ADD_STACK_TO_PROOF (solver->clause);
    176,751 ( 0.00%)          REMOVE_CHECKER_CLAUSE (c);
 59,535,905 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_clause (19,639x)
     78,556 ( 0.00%)          DELETE_CLAUSE_FROM_PROOF (c);
          .           
    137,473 ( 0.00%)          if (!c->redundant)
    137,473 ( 0.00%)            kissat_mark_added_literals (solver, new_size,
  6,679,998 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_added_literals (19,639x)
          .                                                 BEGIN_STACK (solver->clause));
          .           
     39,278 ( 0.00%)          if (new_size == 2) {
     10,335 ( 0.00%)            const unsigned second = POP_STACK (solver->clause);
     10,335 ( 0.00%)            const unsigned first = POP_STACK (solver->clause);
      4,134 ( 0.00%)            LOGCLS (c, "reduces to binary clause %s %s", LOGLIT (first),
          .                             LOGLIT (second));
      3,162 ( 0.00%)            assert (first == repr || second == repr);
      2,756 ( 0.00%)            const unsigned other = first ^ second ^ repr;
      1,378 ( 0.00%)            const watch src = {.raw = head.raw};
      2,756 ( 0.00%)            watch dst = kissat_binary_watch (repr);
     15,158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (689x)
      7,579 ( 0.00%)            watches *other_watches = &WATCHES (other);
      4,134 ( 0.00%)            kissat_substitute_large_watch (solver, other_watches, src, dst);
    102,565 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_substitute_large_watch (689x)
      2,756 ( 0.00%)            assert (solver->statistics.clauses_irredundant);
      3,445 ( 0.00%)            solver->statistics.clauses_irredundant--;
      2,756 ( 0.00%)            assert (solver->statistics.clauses_binary < UINT64_MAX);
      3,445 ( 0.00%)            solver->statistics.clauses_binary++;
      5,512 ( 0.00%)            dst.binary.lit = other;
      8,957 ( 0.00%)            PUSH_STACK (*delayed, dst.raw);
      2,756 ( 0.00%)            const size_t bytes = kissat_actual_bytes_of_clause (c);
     34,091 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_actual_bytes_of_clause (689x)
      4,134 ( 0.00%)            ADD (arena_garbage, bytes);
     13,780 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_arena_garbage (689x)
      2,756 ( 0.00%)            c->garbage = true;
        689 ( 0.00%)            q--;
        689 ( 0.00%)            continue;
          .                   }
          .           
     37,900 ( 0.00%)          assert (2 < new_size);
     56,850 ( 0.00%)          const unsigned old_size = c->size;
     56,850 ( 0.00%)          assert (new_size <= old_size);
          .           
     56,850 ( 0.00%)          const unsigned *const begin = BEGIN_STACK (solver->clause);
     56,850 ( 0.00%)          const unsigned *const end = END_STACK (solver->clause);
          .           
     56,850 ( 0.00%)          unsigned *lits = c->lits;
     37,900 ( 0.00%)          unsigned *q = lits;
          .           
    496,348 ( 0.00%)          for (const unsigned *p = begin; p != end; p++) {
    286,986 ( 0.00%)            const unsigned other = *p;
    478,310 ( 0.00%)            *q++ = other;
          .                   }
          .           
     56,850 ( 0.00%)          if (new_size < old_size) {
      2,808 ( 0.00%)            c->size = new_size;
      1,872 ( 0.00%)            c->searched = 2;
      4,680 ( 0.00%)            if (c->redundant && c->glue >= new_size)
          .                       kissat_promote_clause (solver, c, new_size - 1);
      5,616 ( 0.00%)            if (!c->shrunken) {
      1,900 ( 0.00%)              c->shrunken = true;
      3,325 ( 0.00%)              lits[old_size - 1] = INVALID_LIT;
          .                     }
          .                   }
          .           
    113,700 ( 0.00%)          LOGCLS (c, "substituted");
          .           
     75,800 ( 0.00%)          if (!repr_already_watched)
    238,810 ( 0.00%)            PUSH_STACK (*delayed, head.raw);
     75,800 ( 0.00%)          CLEAR_STACK (solver->clause);
     37,900 ( 0.00%)          q--;
          .                 }
          .               }
      9,012 ( 0.00%)      while (p != end_watches)
          .                 *q++ = *p++;
     48,064 ( 0.00%)      SET_END_OF_WATCHES (*lit_watches, q);
    255,464 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (3,004x)
     24,032 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (3,004x)
          .             }
          .             {
      9,012 ( 0.00%)      const unsigned *const begin_delayed = BEGIN_STACK (*delayed);
      9,012 ( 0.00%)      const unsigned *const end_delayed = END_STACK (*delayed);
    118,052 ( 0.00%)      for (const unsigned *p = begin_delayed; p != end_delayed; p++) {
     75,021 ( 0.00%)        const watch head = {.raw = *p};
    275,077 ( 0.00%)        watches *repr_watches = &WATCHES (repr);
    150,042 ( 0.00%)        PUSH_WATCHES (*repr_watches, head);
  1,782,801 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (25,007x)
          .               }
          .           
     12,016 ( 0.00%)      CLEAR_STACK (*delayed);
          .             }
          .           
          .           #ifdef CHECKING_OR_PROVING
      6,008 ( 0.00%)    if (checking_or_proving) {
     12,016 ( 0.00%)      CLEAR_STACK (solver->added);
     15,020 ( 0.00%)      CLEAR_STACK (solver->removed);
          .             }
          .           #endif
      9,054 ( 0.00%)  }
          .           
      9,054 ( 0.00%)  static void sweep_remove (sweeper *sweeper, unsigned lit) {
      4,527 ( 0.00%)    kissat *solver = sweeper->solver;
     12,072 ( 0.00%)    assert (sweeper->reprs[lit] != lit);
      4,527 ( 0.00%)    unsigneds *partition = &sweeper->partition;
      4,527 ( 0.00%)    unsigned *const begin_partition = BEGIN_STACK (*partition), *p;
      4,527 ( 0.00%)    const unsigned *const end_partition = END_STACK (*partition);
    245,288 ( 0.00%)    for (p = begin_partition; *p != lit; p++)
    187,780 ( 0.00%)      assert (p + 1 != end_partition);
      3,018 ( 0.00%)    unsigned *begin_class = p;
     26,093 ( 0.00%)    while (begin_class != begin_partition && begin_class[-1] != INVALID_LIT)
      1,714 ( 0.00%)      begin_class--;
      3,018 ( 0.00%)    const unsigned *end_class = p;
     15,645 ( 0.00%)    while (*end_class != INVALID_LIT)
      2,025 ( 0.00%)      end_class++;
      6,036 ( 0.00%)    const unsigned size = end_class - begin_class;
      9,054 ( 0.00%)    LOG ("removing non-representative %s from equivalence class of size %u",
          .                  LOGLIT (lit), size);
      3,018 ( 0.00%)    assert (size > 1);
      3,018 ( 0.00%)    unsigned *q = begin_class;
      3,018 ( 0.00%)    if (size == 2) {
      7,044 ( 0.00%)      LOG ("completely squashing equivalence class of %s", LOGLIT (lit));
      9,392 ( 0.00%)      for (const unsigned *r = end_class + 1; r != end_partition; r++)
          .                 *q++ = *r;
          .             } else {
      8,914 ( 0.00%)      for (const unsigned *r = begin_class; r != end_partition; r++)
      5,178 ( 0.00%)        if (r != p)
      8,346 ( 0.00%)          *q++ = *r;
          .             }
     22,635 ( 0.00%)    SET_END_OF_STACK (*partition, q);
          .           #ifndef LOGGING
          .             (void) solver;
          .           #endif
      6,036 ( 0.00%)  }
          .           
    119,305 ( 0.00%)  static void flip_partition_literals (struct sweeper *sweeper) {
     71,583 ( 0.00%)    struct kissat *solver = sweeper->solver;
     71,583 ( 0.00%)    const unsigned max_rounds = GET_OPTION (sweepfliprounds);
     47,722 ( 0.00%)    if (!max_rounds)
          .               return;
    143,166 ( 0.00%)    assert (!EMPTY_STACK (sweeper->partition));
     71,583 ( 0.00%)    struct kitten *kitten = solver->kitten;
    119,305 ( 0.00%)    if (kitten_status (kitten) != 10)
    190,888 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_status (23,861x)
      1,391 ( 0.00%)      return;
          .           #ifdef LOGGING
     22,470 ( 0.00%)    unsigned total_flipped = 0;
          .           #endif
     22,470 ( 0.00%)    unsigned flipped, round = 0;
          .             do {
     22,470 ( 0.00%)      round++;
     22,470 ( 0.00%)      flipped = 0;
    112,350 ( 0.00%)      unsigned *begin = BEGIN_STACK (sweeper->partition), *dst = begin;
    112,350 ( 0.00%)      const unsigned *const end = END_STACK (sweeper->partition), *src = dst;
    911,466 ( 0.00%)      while (src != end) {
    547,724 ( 0.00%)        const unsigned *end_src = src;
  9,563,016 ( 0.00%)        while (assert (end_src != end), *end_src != INVALID_LIT)
  1,053,160 ( 0.00%)          end_src++;
  1,095,448 ( 0.00%)        unsigned size = end_src - src;
    547,724 ( 0.00%)        assert (size > 1);
    547,724 ( 0.00%)        unsigned *q = dst;
  5,283,740 ( 0.00%)        for (const unsigned *p = src; p != end_src; p++) {
  3,004,302 ( 0.00%)          const unsigned lit = *p;
  7,010,038 ( 0.00%)          if (kitten_flip_literal (kitten, lit)) {
330,261,480 ( 0.14%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_flip_literal (1,001,434x)
  2,742,336 ( 0.00%)            LOG ("flipping equivalence candidate %s succeeded", LOGLIT (lit));
          .           #ifdef LOGGING
    457,056 ( 0.00%)            total_flipped++;
          .           #endif
    457,056 ( 0.00%)            flipped++;
  1,371,168 ( 0.00%)            if (--size < 2)
     91,292 ( 0.00%)              break;
          .                   } else {
  3,266,268 ( 0.00%)            LOG ("flipping equivalence candidate %s failed", LOGLIT (lit));
  2,721,890 ( 0.00%)            *q++ = lit;
          .                   }
          .                 }
    547,724 ( 0.00%)        if (size > 1) {
    730,280 ( 0.00%)          *q++ = INVALID_LIT;
    365,140 ( 0.00%)          dst = q;
          .                 }
    821,586 ( 0.00%)        src = end_src + 1;
          .               }
    301,911 ( 0.00%)      SET_END_OF_STACK (sweeper->partition, dst);
    134,820 ( 0.00%)      LOG ("flipped %u equivalence candidates in round %u", flipped, round);
          .           
    247,170 ( 0.00%)      if (TERMINATED (sweep_terminated_2))
    494,340 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (22,470x)
          .                 break;
    134,820 ( 0.00%)      if (solver->statistics.kitten_ticks > sweeper->limit.ticks)
          .                 break;
     87,968 ( 0.00%)    } while (flipped && round < max_rounds);
    134,820 ( 0.00%)    LOG ("flipped %u equivalence candidates in total in %u rounds",
          .                  total_flipped, round);
     47,722 ( 0.00%)  }
          .           
          .           static bool sweep_equivalence_candidates (sweeper *sweeper, unsigned lit,
    186,144 ( 0.00%)                                            unsigned other) {
     69,804 ( 0.00%)    kissat *solver = sweeper->solver;
    139,608 ( 0.00%)    LOG ("trying equivalence candidates %s = %s", LOGLIT (lit),
          .                  LOGLIT (other));
    186,144 ( 0.00%)    const unsigned not_other = NOT (other);
    186,144 ( 0.00%)    const unsigned not_lit = NOT (lit);
     69,804 ( 0.00%)    kitten *kitten = solver->kitten;
     69,804 ( 0.00%)    const unsigned *const begin = BEGIN_STACK (sweeper->partition);
     69,804 ( 0.00%)    unsigned *const end = END_STACK (sweeper->partition);
     93,072 ( 0.00%)    assert (begin + 3 <= end);
    116,340 ( 0.00%)    assert (end[-3] == lit);
    116,340 ( 0.00%)    assert (end[-2] == other);
    179,500 ( 0.00%)    const unsigned third = (end - begin == 3) ? INVALID_LIT : end[-4];
     93,072 ( 0.00%)    const int status = kitten_status (kitten);
    186,144 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_status (23,268x)
    199,675 ( 0.00%)    if (status == 10 && kitten_flip_literal (kitten, lit)) {
  8,990,749 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_flip_literal (21,877x)
        512 ( 0.00%)      INC (sweep_flip_equivalences);
      1,920 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flip_equivalences (128x)
        512 ( 0.00%)      INC (sweep_flipped_equivalences);
      1,920 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flipped_equivalences (128x)
        768 ( 0.00%)      LOG ("flipping %s succeeded", LOGLIT (lit));
        256 ( 0.00%)      if (third == INVALID_LIT) {
        234 ( 0.00%)        LOG ("squashing equivalence class of %s", LOGLIT (lit));
        897 ( 0.00%)        SET_END_OF_STACK (sweeper->partition, end - 3);
          .               } else {
        534 ( 0.00%)        LOG ("removing %s from equivalence class of %s", LOGLIT (lit),
          .                      LOGLIT (other));
        356 ( 0.00%)        end[-3] = other;
        267 ( 0.00%)        end[-2] = INVALID_LIT;
      1,958 ( 0.00%)        SET_END_OF_STACK (sweeper->partition, end - 1);
          .               }
        768 ( 0.00%)      LOGPARTITION ("refined equivalence candidates");
        256 ( 0.00%)      return false;
    198,523 ( 0.00%)    } else if (status == 10 && kitten_flip_literal (kitten, other)) {
  7,627,705 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_flip_literal (21,749x)
        770 ( 0.00%)      ADD (sweep_flip_equivalences, 2);
      3,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_sweep_flip_equivalences (154x)
        616 ( 0.00%)      INC (sweep_flipped_equivalences);
      2,310 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_flipped_equivalences (154x)
        924 ( 0.00%)      LOG ("flipping %s succeeded", LOGLIT (other));
        308 ( 0.00%)      if (third == INVALID_LIT) {
        558 ( 0.00%)        LOG ("squashing equivalence class of %s", LOGLIT (lit));
      2,139 ( 0.00%)        SET_END_OF_STACK (sweeper->partition, end - 3);
          .               } else {
        366 ( 0.00%)        LOG ("removing %s from equivalence class of %s", LOGLIT (other),
          .                      LOGLIT (lit));
        183 ( 0.00%)        end[-2] = INVALID_LIT;
      1,342 ( 0.00%)        SET_END_OF_STACK (sweeper->partition, end - 1);
          .               }
        924 ( 0.00%)      LOGPARTITION ("refined equivalence candidates");
        308 ( 0.00%)      return false;
          .             }
     45,972 ( 0.00%)    if (status == 10)
    107,975 ( 0.00%)      ADD (sweep_flip_equivalences, 2);
    431,900 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_sweep_flip_equivalences (21,595x)
    137,916 ( 0.00%)    LOG ("flipping %s and %s both failed", LOGLIT (lit), LOGLIT (other));
    114,930 ( 0.00%)    kitten_assume (kitten, not_lit);
827,015,855 ( 0.35%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_assume (22,986x)
    114,930 ( 0.00%)    kitten_assume (kitten, other);
  2,206,656 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_assume (22,986x)
     91,944 ( 0.00%)    INC (sweep_solved_equivalences);
    344,790 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_solved_equivalences (22,986x)
     91,944 ( 0.00%)    int res = sweep_solve (sweeper);
2,596,186,428 ( 1.10%)  => build/../src/sweep.c:sweep_solve (22,986x)
     45,972 ( 0.00%)    if (res == 10) {
     78,048 ( 0.00%)      INC (sweep_sat_equivalences);
    292,680 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_sat_equivalences (19,512x)
    117,072 ( 0.00%)      LOG ("first sweeping implication %s -> %s failed", LOGLIT (other),
          .                    LOGLIT (lit));
     78,048 ( 0.00%)      sweep_refine (sweeper);
151,871,906 ( 0.06%)  => build/../src/sweep.c:sweep_refine (19,512x)
      6,948 ( 0.00%)    } else if (!res) {
         12 ( 0.00%)      INC (sweep_unknown_equivalences);
         45 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_unknown_equivalences (3x)
         18 ( 0.00%)      LOG ("first sweeping implication %s -> %s hit ticks limit",
          .                    LOGLIT (other), LOGLIT (lit));
          .             }
          .           
     45,972 ( 0.00%)    if (res != 20)
     39,030 ( 0.00%)      return false;
          .           
     13,884 ( 0.00%)    INC (sweep_unsat_equivalences);
     52,065 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_unsat_equivalences (3,471x)
     20,826 ( 0.00%)    LOG ("first sweeping implication %s -> %s succeeded", LOGLIT (other),
          .                  LOGLIT (lit));
          .           
     13,884 ( 0.00%)    save_core (sweeper, 0);
 13,199,741 ( 0.01%)  => build/../src/sweep.c:save_core (3,471x)
          .           
     17,355 ( 0.00%)    kitten_assume (kitten, lit);
207,471,742 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_assume (3,471x)
     17,355 ( 0.00%)    kitten_assume (kitten, not_other);
    333,216 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_assume (3,471x)
     13,884 ( 0.00%)    res = sweep_solve (sweeper);
247,641,019 ( 0.10%)  => build/../src/sweep.c:sweep_solve (3,471x)
     13,884 ( 0.00%)    INC (sweep_solved_equivalences);
     52,065 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_solved_equivalences (3,471x)
      6,942 ( 0.00%)    if (res == 10) {
      7,848 ( 0.00%)      INC (sweep_sat_equivalences);
     29,430 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_sat_equivalences (1,962x)
     11,772 ( 0.00%)      LOG ("second sweeping implication %s <- %s failed", LOGLIT (other),
          .                    LOGLIT (lit));
      7,848 ( 0.00%)      sweep_refine (sweeper);
  9,521,707 ( 0.00%)  => build/../src/sweep.c:sweep_refine (1,962x)
      3,018 ( 0.00%)    } else if (!res) {
          .               INC (sweep_unknown_equivalences);
          .               LOG ("second sweeping implication %s <- %s hit ticks limit",
          .                    LOGLIT (other), LOGLIT (lit));
          .             }
          .           
      6,942 ( 0.00%)    if (res != 20) {
      7,848 ( 0.00%)      CLEAR_STACK (sweeper->core[0]);
      3,924 ( 0.00%)      return false;
          .             }
          .           
      6,036 ( 0.00%)    INC (sweep_unsat_equivalences);
     22,635 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_unsat_equivalences (1,509x)
      9,054 ( 0.00%)    LOG ("second sweeping implication %s <- %s succeeded too", LOGLIT (other),
          .                  LOGLIT (lit));
          .           
      6,036 ( 0.00%)    save_core (sweeper, 1);
  6,518,762 ( 0.00%)  => build/../src/sweep.c:save_core (1,509x)
          .           
      9,054 ( 0.00%)    LOG ("sweep equivalence %s = %s", LOGLIT (lit), LOGLIT (other));
      6,036 ( 0.00%)    INC (sweep_equivalences);
     22,635 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_equivalences (1,509x)
          .           
      6,036 ( 0.00%)    add_core (sweeper, 0);
 22,040,393 ( 0.01%)  => build/../src/sweep.c:add_core (1,509x)
      9,054 ( 0.00%)    add_binary (solver, lit, not_other);
  4,921,856 ( 0.00%)  => build/../src/sweep.c:add_binary (1,509x)
      6,036 ( 0.00%)    clear_core (sweeper, 0);
  2,831,990 ( 0.00%)  => build/../src/sweep.c:clear_core (1,509x)
          .           
      6,036 ( 0.00%)    add_core (sweeper, 1);
 19,922,869 ( 0.01%)  => build/../src/sweep.c:add_core (1,509x)
      9,054 ( 0.00%)    add_binary (solver, not_lit, other);
  4,783,286 ( 0.00%)  => build/../src/sweep.c:add_binary (1,509x)
      6,036 ( 0.00%)    clear_core (sweeper, 1);
  2,778,483 ( 0.00%)  => build/../src/sweep.c:clear_core (1,509x)
          .           
          .             unsigned repr;
      4,527 ( 0.00%)    if (lit < other) {
      8,937 ( 0.00%)      repr = sweeper->reprs[other] = lit;
      6,951 ( 0.00%)      sweeper->reprs[not_other] = not_lit;
      5,958 ( 0.00%)      substitute_connected_clauses (sweeper, other, lit);
275,891,385 ( 0.12%)  => build/../src/sweep.c:substitute_connected_clauses (993x)
      5,958 ( 0.00%)      substitute_connected_clauses (sweeper, not_other, not_lit);
 86,035,177 ( 0.04%)  => build/../src/sweep.c:substitute_connected_clauses (993x)
      5,958 ( 0.00%)      sweep_remove (sweeper, other);
    428,467 ( 0.00%)  => build/../src/sweep.c:sweep_remove (993x)
          .             } else {
      4,644 ( 0.00%)      repr = sweeper->reprs[lit] = other;
      3,612 ( 0.00%)      sweeper->reprs[not_lit] = not_other;
      3,096 ( 0.00%)      substitute_connected_clauses (sweeper, lit, other);
 59,373,051 ( 0.03%)  => build/../src/sweep.c:substitute_connected_clauses (516x)
      3,096 ( 0.00%)      substitute_connected_clauses (sweeper, not_lit, not_other);
 68,180,493 ( 0.03%)  => build/../src/sweep.c:substitute_connected_clauses (516x)
      2,580 ( 0.00%)      sweep_remove (sweeper, lit);
    187,037 ( 0.00%)  => build/../src/sweep.c:sweep_remove (516x)
          .             }
          .           
     12,072 ( 0.00%)    const unsigned repr_idx = IDX (repr);
      7,545 ( 0.00%)    schedule_inner (sweeper, repr_idx);
    161,843 ( 0.00%)  => build/../src/sweep.c:schedule_inner (1,509x)
          .           
      1,509 ( 0.00%)    return true;
     69,804 ( 0.00%)  }
          .           
     39,872 ( 0.00%)  static const char *sweep_variable (sweeper *sweeper, unsigned idx) {
     14,952 ( 0.00%)    kissat *solver = sweeper->solver;
     24,920 ( 0.00%)    assert (!solver->inconsistent);
     69,776 ( 0.00%)    if (!ACTIVE (idx))
        176 ( 0.00%)      return "inactive variable";
     34,272 ( 0.00%)    const unsigned start = LIT (idx);
     39,168 ( 0.00%)    if (sweeper->reprs[start] != start)
        580 ( 0.00%)      return "non-representative variable";
     27,636 ( 0.00%)    assert (EMPTY_STACK (sweeper->vars));
     27,636 ( 0.00%)    assert (EMPTY_STACK (sweeper->refs));
     27,636 ( 0.00%)    assert (EMPTY_STACK (sweeper->backbone));
     27,636 ( 0.00%)    assert (EMPTY_STACK (sweeper->partition));
     18,424 ( 0.00%)    assert (!sweeper->encoded);
          .           
     18,424 ( 0.00%)    INC (sweep_variables);
     69,090 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep_variables (4,606x)
          .           
     27,636 ( 0.00%)    LOG ("sweeping %s", LOGVAR (idx));
     55,272 ( 0.00%)    assert (!VALUE (start));
     27,636 ( 0.00%)    LOG ("starting sweeping[0]");
     23,030 ( 0.00%)    add_literal_to_environment (sweeper, 0, start);
    435,008 ( 0.00%)  => build/../src/sweep.c:add_literal_to_environment (4,606x)
     27,636 ( 0.00%)    LOG ("finished sweeping[0]");
     27,636 ( 0.00%)    LOG ("starting sweeping[1]");
          .           
      4,606 ( 0.00%)    bool limit_reached = false;
      9,212 ( 0.00%)    size_t expand = 0, next = 1;
      4,606 ( 0.00%)    bool success = false;
      4,606 ( 0.00%)    unsigned depth = 1;
          .           
    340,072 ( 0.00%)    while (!limit_reached) {
    488,154 ( 0.00%)      if (sweeper->encoded >= sweeper->limit.clauses) {
        192 ( 0.00%)        LOG ("environment clause limit reached");
         32 ( 0.00%)        limit_reached = true;
         32 ( 0.00%)        break;
          .               }
    243,981 ( 0.00%)      if (expand == next) {
     42,870 ( 0.00%)        LOG ("finished sweeping[%u]", depth);
     28,580 ( 0.00%)        if (depth >= sweeper->limit.depth) {
     15,408 ( 0.00%)          LOG ("environment depth limit reached");
      5,136 ( 0.00%)          break;
          .                 }
     36,616 ( 0.00%)        next = SIZE_STACK (sweeper->vars);
     13,731 ( 0.00%)        if (expand == next) {
          .                   LOG ("completely copied all clauses");
          .                   break;
          .                 }
      4,577 ( 0.00%)        depth++;
     27,462 ( 0.00%)        LOG ("starting sweeping[%u]", depth);
          .               }
    551,313 ( 0.00%)      const unsigned choices = next - expand;
    315,036 ( 0.00%)      if (GET_OPTION (sweeprand) && choices > 1) {
          .                 const unsigned swap =
          .                     kissat_pick_random (&solver->random, 0, choices);
          .                 if (swap) {
          .                   unsigned *vars = sweeper->vars.begin;
          .                   SWAP (unsigned, vars[expand], vars[expand + swap]);
          .                 }
          .               }
  1,260,144 ( 0.00%)      const unsigned idx = PEEK_STACK (sweeper->vars, expand);
    472,554 ( 0.00%)      LOG ("traversing and adding clauses of %s", LOGVAR (idx));
    852,520 ( 0.00%)      for (unsigned sign = 0; sign < 2; sign++) {
  1,400,247 ( 0.00%)        const unsigned lit = LIT (idx) + sign;
  1,711,413 ( 0.00%)        watches *watches = &WATCHES (lit);
 20,796,648 ( 0.01%)        for (all_binary_large_watches (watch, *watches)) {
  1,244,664 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (155,583x)
  1,244,664 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (155,583x)
 10,414,625 ( 0.00%)          if (watch.type.binary) {
  1,179,711 ( 0.00%)            const unsigned other = watch.binary.lit;
  2,752,659 ( 0.00%)            sweep_binary (sweeper, depth, lit, other);
350,454,549 ( 0.15%)  => build/../src/sweep.c:sweep_binary (393,237x)
          .                   } else {
  6,336,330 ( 0.00%)            reference ref = watch.large.ref;
 12,672,660 ( 0.01%)            sweep_reference (sweeper, depth, ref);
2,669,210,236 ( 1.13%)  => build/../src/sweep.c:sweep_reference (2,112,110x)
          .                   }
 32,569,511 ( 0.01%)          if (SIZE_STACK (sweeper->vars) >= sweeper->limit.vars) {
     12,036 ( 0.00%)            LOG ("environment variable limit reached");
      2,006 ( 0.00%)            limit_reached = true;
      2,006 ( 0.00%)            break;
          .                   }
          .                 }
    311,166 ( 0.00%)        if (limit_reached)
      2,006 ( 0.00%)          break;
          .               }
     78,759 ( 0.00%)      expand++;
          .             }
     27,636 ( 0.00%)    ADD (sweep_depth, depth);
     92,120 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_sweep_depth (4,606x)
     36,848 ( 0.00%)    ADD (sweep_clauses, sweeper->encoded);
     92,120 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_sweep_clauses (4,606x)
     59,878 ( 0.00%)    ADD (sweep_environment, SIZE_STACK (sweeper->vars));
     92,120 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_sweep_environment (4,606x)
     78,302 ( 0.00%)    kissat_extremely_verbose (solver,
    280,966 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (4,606x)
    198,058 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4,606x)
          .                                       "sweeping variable %d environment of "
          .                                       "%zu variables %u clauses depth %u",
     27,636 ( 0.00%)                              kissat_export_literal (solver, LIT (idx)),
     32,242 ( 0.00%)                              SIZE_STACK (sweeper->vars), sweeper->encoded,
          .                                       depth);
     18,424 ( 0.00%)    int res = sweep_solve (sweeper);
610,635,963 ( 0.26%)  => build/../src/sweep.c:sweep_solve (4,606x)
     27,636 ( 0.00%)    LOG ("sub-solver returns '%d'", res);
      9,212 ( 0.00%)    if (res == 10) {
     13,815 ( 0.00%)      init_backbone_and_partition (sweeper);
131,139,603 ( 0.06%)  => build/../src/sweep.c:init_backbone_and_partition (4,605x)
          .           #ifndef QUIET
     13,815 ( 0.00%)      uint64_t units = solver->statistics.sweep_units;
     13,815 ( 0.00%)      uint64_t solved = solver->statistics.sweep_solved;
          .           #endif
     41,445 ( 0.00%)      START (sweepbackbone);
    203,862 ( 0.00%)      while (!EMPTY_STACK (sweeper->backbone)) {
    487,764 ( 0.00%)        if (solver->inconsistent || TERMINATED (sweep_terminated_3) ||
    631,224 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (28,692x)
    143,460 ( 0.00%)            kitten_ticks_limit_hit (sweeper, "backbone refinement")) {
    516,477 ( 0.00%)  => build/../src/sweep.c:kitten_ticks_limit_hit (28,692x)
          3 ( 0.00%)          limit_reached = true;
          .                 STOP_SWEEP_BACKBONE:
         36 ( 0.00%)          STOP (sweepbackbone);
          8 ( 0.00%)          goto DONE;
          .                 }
     86,067 ( 0.00%)        flip_backbone_literals (sweeper);
529,269,814 ( 0.22%)  => build/../src/sweep.c:flip_backbone_literals (28,689x)
    372,957 ( 0.00%)        if (TERMINATED (sweep_terminated_4) ||
    631,158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (28,689x)
    143,445 ( 0.00%)            kitten_ticks_limit_hit (sweeper, "backbone refinement")) {
    516,409 ( 0.00%)  => build/../src/sweep.c:kitten_ticks_limit_hit (28,689x)
          1 ( 0.00%)          limit_reached = true;
          1 ( 0.00%)          goto STOP_SWEEP_BACKBONE;
          .                 }
    172,128 ( 0.00%)        if (EMPTY_STACK (sweeper->backbone))
         71 ( 0.00%)          break;
    429,255 ( 0.00%)        const unsigned lit = POP_STACK (sweeper->backbone);
    829,893 ( 0.00%)        if (!ACTIVE (IDX (lit)))
          .                   continue;
    200,319 ( 0.00%)        if (sweep_backbone_candidate (sweeper, lit))
5,923,761,815 ( 2.51%)  => build/../src/sweep.c:sweep_backbone_candidate (28,617x)
        105 ( 0.00%)          success = true;
          .               }
     41,409 ( 0.00%)      STOP (sweepbackbone);
          .           #ifndef QUIET
     18,404 ( 0.00%)      units = solver->statistics.sweep_units - units;
     18,404 ( 0.00%)      solved = solver->statistics.sweep_solved - solved;
     69,015 ( 0.00%)      kissat_extremely_verbose (
    280,661 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (4,601x)
    197,843 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4,601x)
          .                   solver,
          .                   "complete swept variable %d backbone with %" PRIu64
          .                   " units in %" PRIu64 " solver calls",
     27,606 ( 0.00%)          kissat_export_literal (solver, LIT (idx)), units, solved);
          .           #endif
     27,606 ( 0.00%)      assert (EMPTY_STACK (sweeper->backbone));
          .           #ifndef QUIET
     13,803 ( 0.00%)      uint64_t equivalences = solver->statistics.sweep_equivalences;
     13,803 ( 0.00%)      solved = solver->statistics.sweep_solved;
          .           #endif
     41,409 ( 0.00%)      START (sweepequivalences);
    171,219 ( 0.00%)      while (!EMPTY_STACK (sweeper->partition)) {
    405,688 ( 0.00%)        if (solver->inconsistent || TERMINATED (sweep_terminated_5) ||
    525,008 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (23,864x)
    119,320 ( 0.00%)            kitten_ticks_limit_hit (sweeper, "partition refinement")) {
    429,573 ( 0.00%)  => build/../src/sweep.c:kitten_ticks_limit_hit (23,864x)
          3 ( 0.00%)          limit_reached = true;
          .                 STOP_SWEEP_EQUIVALENCES:
         27 ( 0.00%)          STOP (sweepequivalences);
          6 ( 0.00%)          goto DONE;
          .                 }
     71,583 ( 0.00%)        flip_partition_literals (sweeper);
376,132,295 ( 0.16%)  => build/../src/sweep.c:flip_partition_literals (23,861x)
    310,193 ( 0.00%)        if (TERMINATED (sweep_terminated_6) ||
    524,942 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (23,861x)
    119,305 ( 0.00%)            kitten_ticks_limit_hit (sweeper, "backbone refinement")) {
    429,498 ( 0.00%)  => build/../src/sweep.c:kitten_ticks_limit_hit (23,861x)
          .                   limit_reached = true;
          .                   goto STOP_SWEEP_EQUIVALENCES;
          .                 }
    143,166 ( 0.00%)        if (EMPTY_STACK (sweeper->partition))
        593 ( 0.00%)          break;
    186,144 ( 0.00%)        if (SIZE_STACK (sweeper->partition) > 2) {
     69,804 ( 0.00%)          const unsigned *end = END_STACK (sweeper->partition);
    116,340 ( 0.00%)          assert (end[-1] == INVALID_LIT);
     93,072 ( 0.00%)          unsigned lit = end[-3];
     93,072 ( 0.00%)          unsigned other = end[-2];
    186,144 ( 0.00%)          if (sweep_equivalence_candidates (sweeper, lit, other))
4,631,063,629 ( 1.96%)  => build/../src/sweep.c:sweep_equivalence_candidates (23,268x)
      3,018 ( 0.00%)            success = true;
          .                 } else
          .                   CLEAR_STACK (sweeper->partition);
          .               }
     41,382 ( 0.00%)      STOP (sweepequivalences);
          .           #ifndef QUIET
     18,392 ( 0.00%)      equivalences = solver->statistics.sweep_equivalences - equivalences;
     18,392 ( 0.00%)      solved = solver->statistics.sweep_solved - solved;
      9,196 ( 0.00%)      if (equivalences)
      5,600 ( 0.00%)        kissat_extremely_verbose (
     21,350 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (350x)
     15,050 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (350x)
          .                     solver,
          .                     "complete swept variable %d partition with %" PRIu64
          .                     " equivalences in %" PRIu64 " solver calls",
      2,100 ( 0.00%)            kissat_export_literal (solver, LIT (idx)), equivalences, solved);
          .           #endif
          2 ( 0.00%)    } else if (res == 20)
          .               sweep_empty_clause (sweeper);
          .           
          1 ( 0.00%)  DONE:
     13,818 ( 0.00%)    clear_sweeper (sweeper);
306,121,916 ( 0.13%)  => build/../src/sweep.c:clear_sweeper (4,606x)
          .           
     50,666 ( 0.00%)    if (!solver->inconsistent && !kissat_propagated (solver))
    110,544 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (4,606x)
        243 ( 0.00%)      (void) kissat_dense_propagate (solver);
  1,501,149 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/propdense.c:kissat_dense_propagate (81x)
          .           
      9,932 ( 0.00%)    if (success && limit_reached)
        314 ( 0.00%)      return "successfully despite reaching limit";
     34,780 ( 0.00%)    if (!success && !limit_reached)
      4,722 ( 0.00%)      return "unsuccessfully without reaching limit";
      4,988 ( 0.00%)    else if (success && !limit_reached)
        406 ( 0.00%)      return "successfully without reaching limit";
     11,310 ( 0.00%)    assert (!success && limit_reached);
      1,885 ( 0.00%)    return "unsuccessfully and reached limit";
     24,920 ( 0.00%)  }
          .           
          .           typedef struct sweep_candidate sweep_candidate;
          .           
          .           struct sweep_candidate {
          .             unsigned rank;
          .             unsigned idx;
          .           };
          .           
-- line 1469 ----------------------------------------
-- line 1471 ----------------------------------------
          .           
          .           typedef STACK(sweep_candidate) sweep_candidates;
          .           
          .           // clang-format on
          .           
          .           #define RANK_SWEEP_CANDIDATE(CAND) (CAND).rank
          .           
          .           static bool scheduable_variable (sweeper *sweeper, unsigned idx,
  1,176,966 ( 0.00%)                                   size_t *occ_ptr) {
    504,414 ( 0.00%)    kissat *solver = sweeper->solver;
  1,176,966 ( 0.00%)    const unsigned lit = LIT (idx);
  2,185,794 ( 0.00%)    const size_t pos = SIZE_WATCHES (WATCHES (lit));
  2,017,656 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (168,138x)
    336,276 ( 0.00%)    if (!pos)
          .               return false;
    504,414 ( 0.00%)    const unsigned max_occurrences = sweeper->limit.clauses;
    504,414 ( 0.00%)    if (pos > max_occurrences)
         16 ( 0.00%)      return false;
  1,345,040 ( 0.00%)    const unsigned not_lit = NOT (lit);
  2,185,690 ( 0.00%)    const size_t neg = SIZE_WATCHES (WATCHES (not_lit));
  2,017,560 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (168,130x)
    336,260 ( 0.00%)    if (!neg)
          .               return false;
    504,390 ( 0.00%)    if (neg > max_occurrences)
          .               return false;
    840,650 ( 0.00%)    *occ_ptr = pos + neg;
    168,130 ( 0.00%)    return true;
    336,276 ( 0.00%)  }
          .           
         91 ( 0.00%)  static unsigned schedule_all_other_not_scheduled_yet (sweeper *sweeper) {
         21 ( 0.00%)    kissat *solver = sweeper->solver;
          .             sweep_candidates fresh;
         35 ( 0.00%)    INIT_STACK (fresh);
         21 ( 0.00%)    flags *const flags = solver->flags;
         21 ( 0.00%)    const bool incomplete = solver->sweep_incomplete;
    725,232 ( 0.00%)    for (all_variables (idx)) {
    906,470 ( 0.00%)      struct flags *const f = flags + idx;
  1,087,764 ( 0.00%)      if (!f->active)
     12,142 ( 0.00%)        continue;
  1,295,327 ( 0.00%)      if (incomplete && !f->sweep)
     14,174 ( 0.00%)        continue;
  1,176,952 ( 0.00%)      if (scheduled_variable (sweeper, idx))
  4,492,280 ( 0.00%)  => build/../src/sweep.c:scheduled_variable (168,136x)
    127,896 ( 0.00%)        continue;
          .               size_t occ;
    362,160 ( 0.00%)      if (!scheduable_variable (sweeper, idx, &occ)) {
  3,862,788 ( 0.00%)  => build/../src/sweep.c:scheduable_variable (40,240x)
         72 ( 0.00%)        FLAGS (idx)->sweep = false;
          6 ( 0.00%)        continue;
          .               }
          .               sweep_candidate cand;
     80,468 ( 0.00%)      cand.rank = occ;
     80,468 ( 0.00%)      cand.idx = idx;
    402,510 ( 0.00%)      PUSH_STACK (fresh, cand);
    227,666 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (17x)
          .             }
         35 ( 0.00%)    const size_t size = SIZE_STACK (fresh);
         21 ( 0.00%)    assert (size <= UINT_MAX);
  5,997,750 ( 0.00%)    RADIX_STACK (sweep_candidate, unsigned, fresh, RANK_SWEEP_CANDIDATE);
        516 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (1x)
        272 ( 0.00%)  => ???:0x000000000010c5b0 (2x)
        234 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
    321,928 ( 0.00%)    for (all_stack (sweep_candidate, cand, fresh))
    201,170 ( 0.00%)      schedule_outer (sweeper, cand.idx);
  4,425,733 ( 0.00%)  => build/../src/sweep.c:schedule_outer (40,234x)
        105 ( 0.00%)    RELEASE_STACK (fresh);
        343 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
          7 ( 0.00%)    return size;
         77 ( 0.00%)  }
          .           
         56 ( 0.00%)  static unsigned reschedule_previously_remaining (sweeper *sweeper) {
         21 ( 0.00%)    kissat *solver = sweeper->solver;
         21 ( 0.00%)    flags *flags = solver->flags;
          7 ( 0.00%)    unsigned rescheduled = 0;
         21 ( 0.00%)    unsigneds *remaining = &solver->sweep_schedule;
    908,040 ( 0.00%)    for (all_stack (unsigned, idx, *remaining)) {
    648,550 ( 0.00%)      struct flags *f = flags + idx;
    778,260 ( 0.00%)      if (!f->active)
      1,812 ( 0.00%)        continue;
    895,286 ( 0.00%)      if (scheduled_variable (sweeper, idx))
  3,709,042 ( 0.00%)  => build/../src/sweep.c:scheduled_variable (127,898x)
          .                 continue;
          .               size_t occ;
  1,151,082 ( 0.00%)      if (!scheduable_variable (sweeper, idx, &occ)) {
 12,278,124 ( 0.01%)  => build/../src/sweep.c:scheduable_variable (127,898x)
          8 ( 0.00%)        f->sweep = false;
          2 ( 0.00%)        continue;
          .               }
    639,480 ( 0.00%)      schedule_inner (sweeper, idx);
 11,126,910 ( 0.00%)  => build/../src/sweep.c:schedule_inner (127,896x)
    255,792 ( 0.00%)      rescheduled++;
          .             }
        168 ( 0.00%)    RELEASE_STACK (*remaining);
      5,251 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
          7 ( 0.00%)    return rescheduled;
         35 ( 0.00%)  }
          .           
         56 ( 0.00%)  static unsigned incomplete_variables (sweeper *sweeper) {
         42 ( 0.00%)    kissat *solver = sweeper->solver;
         42 ( 0.00%)    flags *flags = solver->flags;
         14 ( 0.00%)    unsigned res = 0;
  1,450,464 ( 0.00%)    for (all_variables (idx)) {
  1,812,940 ( 0.00%)      struct flags *f = flags + idx;
  2,175,528 ( 0.00%)      if (!f->active)
     12,493 ( 0.00%)        continue;
  1,750,475 ( 0.00%)      if (f->sweep)
    582,084 ( 0.00%)        res++;
          .             }
         14 ( 0.00%)    return res;
         28 ( 0.00%)  }
          .           
          5 ( 0.00%)  static void mark_incomplete (sweeper *sweeper) {
          3 ( 0.00%)    kissat *solver = sweeper->solver;
          3 ( 0.00%)    flags *flags = solver->flags;
          1 ( 0.00%)    unsigned marked = 0;
    442,580 ( 0.00%)    for (all_scheduled (idx))
    442,574 ( 0.00%)      if (!flags[idx].sweep) {
    281,638 ( 0.00%)        flags[idx].sweep = true;
     40,234 ( 0.00%)        marked++;
          .               }
          2 ( 0.00%)    solver->sweep_incomplete = true;
          .           #ifndef QUIET
          7 ( 0.00%)    kissat_extremely_verbose (
         43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (1x)
          .                 solver, "marked %u scheduled sweeping variables as incomplete",
          .                 marked);
          .           #else
          .             (void) marked;
          .           #endif
          3 ( 0.00%)  }
          .           
         56 ( 0.00%)  static unsigned schedule_sweeping (sweeper *sweeper) {
         28 ( 0.00%)    const unsigned rescheduled = reschedule_previously_remaining (sweeper);
 32,397,975 ( 0.01%)  => build/../src/sweep.c:reschedule_previously_remaining (7x)
         28 ( 0.00%)    const unsigned fresh = schedule_all_other_not_scheduled_yet (sweeper);
 25,802,755 ( 0.01%)  => build/../src/sweep.c:schedule_all_other_not_scheduled_yet (7x)
         28 ( 0.00%)    const unsigned scheduled = fresh + rescheduled;
         28 ( 0.00%)    const unsigned incomplete = incomplete_variables (sweeper);
  3,857,542 ( 0.00%)  => build/../src/sweep.c:incomplete_variables (7x)
         21 ( 0.00%)    kissat *solver = sweeper->solver;
          .           #ifndef QUIET
        525 ( 0.00%)    kissat_phase (solver, "sweep", GET (sweep),
        714 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (21x)
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_sweep (7x)
          .                           "scheduled %u variables %.0f%% "
          .                           "(%u rescheduled %.0f%%, %u incomplete %.0f%%)",
          .                           scheduled,
         21 ( 0.00%)                  kissat_percent (scheduled, sweeper->solver->active),
          .                           rescheduled, kissat_percent (rescheduled, scheduled),
          .                           incomplete, kissat_percent (incomplete, scheduled));
          .           #endif
         14 ( 0.00%)    if (incomplete)
         24 ( 0.00%)      assert (solver->sweep_incomplete);
          .             else {
          4 ( 0.00%)      if (solver->sweep_incomplete)
          .                 INC (sweep_completed);
          3 ( 0.00%)      mark_incomplete (sweeper);
  1,207,093 ( 0.00%)  => build/../src/sweep.c:mark_incomplete (1x)
          .             }
          7 ( 0.00%)    return scheduled;
         42 ( 0.00%)  }
          .           
          .           static void unschedule_sweeping (sweeper *sweeper, unsigned swept,
         56 ( 0.00%)                                   unsigned scheduled) {
         21 ( 0.00%)    kissat *solver = sweeper->solver;
          .           #ifdef QUIET
          .             (void) scheduled, (void) swept;
          .           #endif
         42 ( 0.00%)    assert (EMPTY_STACK (solver->sweep_schedule));
         28 ( 0.00%)    assert (solver->sweep_incomplete);
         21 ( 0.00%)    flags *flags = solver->flags;
  1,797,145 ( 0.00%)    for (all_scheduled (idx))
  1,470,130 ( 0.00%)      if (flags[idx].active) {
  2,122,250 ( 0.00%)        PUSH_STACK (solver->sweep_schedule, idx);
    713,410 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (104x)
    978,876 ( 0.00%)        LOG ("untried scheduled %s", LOGVAR (idx));
          .               }
          .           #ifndef QUIET
         56 ( 0.00%)    const unsigned retained = SIZE_STACK (solver->sweep_schedule);
        175 ( 0.00%)    kissat_extremely_verbose (
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (7x)
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
          .                 solver, "retained %u variables %.0f%% to be swept next time",
         14 ( 0.00%)        retained, kissat_percent (retained, solver->active));
          .           #endif
         28 ( 0.00%)    const unsigned incomplete = incomplete_variables (sweeper);
  3,926,638 ( 0.00%)  => build/../src/sweep.c:incomplete_variables (7x)
         14 ( 0.00%)    if (incomplete)
        182 ( 0.00%)      kissat_extremely_verbose (
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (7x)
          .                   solver, "need to sweep %u more variables %.0f%% for completion",
         14 ( 0.00%)          incomplete, kissat_percent (incomplete, solver->active));
          .             else {
          .               kissat_extremely_verbose (solver,
          .                                         "no more variables needed to complete sweep");
          .               solver->sweep_incomplete = false;
          .               INC (sweep_completed);
          .             }
        245 ( 0.00%)    kissat_phase (solver, "sweep", GET (sweep),
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_sweep (7x)
          .                           "swept %u variables (%u remain %.0f%%)", swept, incomplete,
          .                           kissat_percent (incomplete, scheduled));
         28 ( 0.00%)  }
          .           
         56 ( 0.00%)  bool kissat_sweep (kissat *solver) {
         28 ( 0.00%)    if (!GET_OPTION (sweep))
          .               return false;
         28 ( 0.00%)    if (solver->inconsistent)
          .               return false;
         77 ( 0.00%)    if (TERMINATED (sweep_terminated_7))
        154 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (7x)
          .               return false;
         56 ( 0.00%)    if (DELAYING (sweep))
        686 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_delaying (7x)
          .               return false;
         28 ( 0.00%)    assert (!solver->level);
         28 ( 0.00%)    assert (!solver->unflushed);
         98 ( 0.00%)    START (sweep);
        672 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (7x)
         28 ( 0.00%)    INC (sweep);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sweep (7x)
         21 ( 0.00%)    statistics *statistics = &solver->statistics;
         21 ( 0.00%)    uint64_t equivalences = statistics->sweep_equivalences;
         21 ( 0.00%)    uint64_t units = statistics->sweep_units;
          .             sweeper sweeper;
         35 ( 0.00%)    init_sweeper (solver, &sweeper);
915,230,649 ( 0.39%)  => build/../src/sweep.c:init_sweeper (7x)
         28 ( 0.00%)    const unsigned scheduled = schedule_sweeping (&sweeper);
 63,267,314 ( 0.03%)  => build/../src/sweep.c:schedule_sweeping (7x)
         14 ( 0.00%)    uint64_t swept = 0, limit = 10;
         15 ( 0.00%)    for (;;) {
     19,964 ( 0.00%)      if (solver->inconsistent)
          .                 break;
     54,901 ( 0.00%)      if (TERMINATED (sweep_terminated_8))
    109,802 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4,991x)
          .                 break;
     24,955 ( 0.00%)      if (solver->statistics.kitten_ticks > sweeper.limit.ticks)
         14 ( 0.00%)        break;
     19,936 ( 0.00%)      unsigned idx = next_scheduled (&sweeper);
    328,944 ( 0.00%)  => build/../src/sweep.c:next_scheduled (4,984x)
      9,968 ( 0.00%)      if (idx == INVALID_IDX)
          .                 break;
     59,808 ( 0.00%)      FLAGS (idx)->sweep = false;
          .           #ifndef QUIET
          .               const char *res =
          .           #endif
     29,904 ( 0.00%)          sweep_variable (&sweeper, idx);
15,639,475,977 ( 6.62%)  => build/../src/sweep.c:sweep_variable (4,984x)
     64,792 ( 0.00%)      kissat_extremely_verbose (
    304,024 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (4,984x)
    214,312 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4,984x)
          .                   solver, "swept[%" PRIu64 "] external variable %d %s", swept,
     29,904 ( 0.00%)          kissat_export_literal (solver, LIT (idx)), res);
     19,936 ( 0.00%)      if (++swept == limit) {
        165 ( 0.00%)        kissat_very_verbose (solver,
        645 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (15x)
          .                                      "found %" PRIu64 " equivalences and %" PRIu64
          .                                      " units after sweeping %" PRIu64 " variables ",
         30 ( 0.00%)                             statistics->sweep_equivalences - equivalences,
         30 ( 0.00%)                             solver->statistics.sweep_units - units, swept);
         90 ( 0.00%)        limit *= 10;
          .               }
          .             }
         49 ( 0.00%)    kissat_very_verbose (solver, "swept %" PRIu64 " variables", swept);
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
         28 ( 0.00%)    equivalences = statistics->sweep_equivalences - equivalences,
         28 ( 0.00%)    units = solver->statistics.sweep_units - units;
        119 ( 0.00%)    kissat_phase (solver, "sweep", GET (sweep),
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_sweep (7x)
          .                           "found %" PRIu64 " equivalences and %" PRIu64 " units",
          .                           equivalences, units);
         49 ( 0.00%)    unschedule_sweeping (&sweeper, swept, scheduled);
 11,011,207 ( 0.00%)  => build/../src/sweep.c:unschedule_sweeping (7x)
         28 ( 0.00%)    unsigned inactive = release_sweeper (&sweeper);
653,420,439 ( 0.28%)  => build/../src/sweep.c:release_sweeper (7x)
          .           
         35 ( 0.00%)    if (!solver->inconsistent) {
         28 ( 0.00%)      solver->propagate = solver->trail.begin;
         35 ( 0.00%)      kissat_probing_propagate (solver, 0, true);
      1,631 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (7x)
          .             }
          .           
         28 ( 0.00%)    uint64_t eliminated = equivalences + units;
          .           #ifndef QUIET
         28 ( 0.00%)    assert (solver->active >= inactive);
         42 ( 0.00%)    solver->active -= inactive;
         56 ( 0.00%)    REPORT (!eliminated, '=');
    206,374 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (7x)
         42 ( 0.00%)    solver->active += inactive;
          .           #else
          .             (void) inactive;
          .           #endif
        133 ( 0.00%)    if (kissat_average (eliminated, swept) < 0.001)
        119 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (7x)
          .               BUMP_DELAY (sweep);
          .             else
         42 ( 0.00%)      REDUCE_DELAY (sweep);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_reduce_delay (7x)
         98 ( 0.00%)    STOP (sweep);
        798 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (7x)
         14 ( 0.00%)    return eliminated;
         35 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/promote.h
--------------------------------------------------------------------------------
Ir                  

         .           #ifndef _promote_h_INCLUDED
         .           #define _promote_h_INCLUDED
         .           
         .           #include "internal.h"
         .           
         .           void kissat_promote_clause (struct kissat *, clause *, unsigned new_glue);
         .           
         .           static inline unsigned kissat_recompute_glue (kissat *solver, clause *c,
   957,642 ( 0.00%)                                                unsigned limit) {
   319,214 ( 0.00%)    assert (limit);
   957,642 ( 0.00%)    assert (EMPTY_STACK (solver->promote));
   159,607 ( 0.00%)    unsigned res = 0;
 8,121,793 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
10,865,424 ( 0.00%)      assert (VALUE (lit));
17,203,588 ( 0.01%)      const unsigned level = LEVEL (lit);
19,919,944 ( 0.01%)      frame *frame = &FRAME (level);
 3,621,808 ( 0.00%)      if (frame->promote)
   464,889 ( 0.00%)        continue;
 1,762,252 ( 0.00%)      if (++res == limit)
   152,619 ( 0.00%)        break;
   575,888 ( 0.00%)      frame->promote = true;
 4,031,307 ( 0.00%)      PUSH_STACK (solver->promote, level);
     3,358 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (7x)
         .             }
 3,611,678 ( 0.00%)    for (all_stack (unsigned, level, solver->promote)) {
 6,334,768 ( 0.00%)      frame *frame = &FRAME (level);
 1,151,776 ( 0.00%)      assert (frame->promote);
   575,888 ( 0.00%)      frame->promote = false;
         .             }
   638,428 ( 0.00%)    CLEAR_STACK (solver->promote);
   159,607 ( 0.00%)    return res;
   319,214 ( 0.00%)  }
         .           
         .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/import.c
--------------------------------------------------------------------------------
Ir                 

        .           #include "internal.h"
        .           #include "logging.h"
        .           #include "resize.h"
        .           
        .           static void adjust_imports_for_external_literal (kissat *solver,
3,040,122 ( 0.00%)                                                   unsigned eidx) {
6,024,007 ( 0.00%)    while (eidx >= SIZE_STACK (solver->import)) {
        .               struct import import;
   45,045 ( 0.00%)      import.lit = 0;
   45,045 ( 0.00%)      import.extension = false;
   45,045 ( 0.00%)      import.imported = false;
   45,045 ( 0.00%)      import.eliminated = false;
  585,806 ( 0.00%)      PUSH_STACK (solver->import, import);
  529,794 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (17x)
        .             }
2,026,748 ( 0.00%)  }
        .           
        .           static void adjust_exports_for_external_literal (kissat *solver,
        .                                                            unsigned eidx,
  360,352 ( 0.00%)                                                   bool extension) {
  720,704 ( 0.00%)    struct import *import = &PEEK_STACK (solver->import, eidx);
  135,132 ( 0.00%)    unsigned iidx = solver->vars;
  270,264 ( 0.00%)    kissat_enlarge_variables (solver, iidx + 1);
12,411,822 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resize.c:kissat_enlarge_variables (45,044x)
  135,132 ( 0.00%)    unsigned ilit = 2 * iidx;
  135,132 ( 0.00%)    import->extension = extension;
   90,088 ( 0.00%)    import->imported = true;
   90,088 ( 0.00%)    if (extension)
   13,285 ( 0.00%)      INC (variables_extension);
   39,855 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_variables_extension (2,657x)
        .             else
  169,548 ( 0.00%)      INC (variables_original);
  635,805 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_variables_original (42,387x)
  225,220 ( 0.00%)    assert (!import->eliminated);
  135,132 ( 0.00%)    import->lit = ilit;
  270,264 ( 0.00%)    LOG ("importing %s external variable %u as internal literal %u",
        .                  extension ? "extension" : "original", eidx, ilit);
  900,880 ( 0.00%)    while (iidx >= SIZE_STACK (solver->export))
  540,736 ( 0.00%)      PUSH_STACK (solver->export, 0);
  265,213 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (16x)
  765,748 ( 0.00%)    POKE_STACK (solver->export, iidx, (int) eidx);
  270,264 ( 0.00%)    LOG ("exporting internal variable %u as external literal %u", iidx, eidx);
  135,132 ( 0.00%)  }
        .           
        .           static inline unsigned import_literal (kissat *solver, int elit,
3,546,809 ( 0.00%)                                         bool extension) {
3,546,809 ( 0.00%)    const unsigned eidx = ABS (elit);
2,533,435 ( 0.00%)    adjust_imports_for_external_literal (solver, eidx);
12,386,657 ( 0.01%)  => build/../src/import.c:adjust_imports_for_external_literal (506,687x)
8,106,992 ( 0.00%)    struct import *import = &PEEK_STACK (solver->import, eidx);
2,026,748 ( 0.00%)    if (import->eliminated)
        .               return INVALID_LIT;
        .             unsigned ilit;
2,533,435 ( 0.00%)    if (!import->imported)
  270,264 ( 0.00%)      adjust_exports_for_external_literal (solver, eidx, extension);
18,715,796 ( 0.01%)  => build/../src/import.c:adjust_exports_for_external_literal (45,044x)
2,026,748 ( 0.00%)    assert (import->imported);
1,520,061 ( 0.00%)    ilit = import->lit;
1,013,374 ( 0.00%)    if (elit < 0)
1,639,728 ( 0.00%)      ilit = NOT (ilit);
2,533,435 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (ilit));
  506,687 ( 0.00%)    return ilit;
1,013,374 ( 0.00%)  }
        .           
3,024,180 ( 0.00%)  unsigned kissat_import_literal (kissat *solver, int elit) {
7,560,450 ( 0.00%)    assert (VALID_EXTERNAL_LITERAL (elit));
2,016,120 ( 0.00%)    if (GET_OPTION (tumble))
3,528,210 ( 0.00%)      return import_literal (solver, elit, false);
52,158,277 ( 0.02%)  => build/../src/import.c:import_literal (504,030x)
        .             const unsigned eidx = ABS (elit);
        .             assert (SIZE_STACK (solver->import) <= UINT_MAX);
        .             unsigned other = SIZE_STACK (solver->import);
        .             if (eidx < other)
        .               return import_literal (solver, elit, false);
        .             if (!other)
        .               adjust_imports_for_external_literal (solver, other++);
        .           
-- line 69 ----------------------------------------
-- line 72 ----------------------------------------
        .               assert (VALID_EXTERNAL_LITERAL ((int) other));
        .               ilit = import_literal (solver, other, false);
        .             } while (other++ < eidx);
        .           
        .             if (elit < 0)
        .               ilit = NOT (ilit);
        .           
        .             return ilit;
1,008,060 ( 0.00%)  }
        .           
   13,285 ( 0.00%)  unsigned kissat_fresh_literal (kissat *solver) {
   21,256 ( 0.00%)    size_t imported = SIZE_STACK (solver->import);
    5,314 ( 0.00%)    assert (imported <= EXTERNAL_MAX_VAR);
    5,314 ( 0.00%)    if (imported == EXTERNAL_MAX_VAR) {
        .               LOG ("can not get another external variable");
        .               return INVALID_LIT;
        .             }
    7,971 ( 0.00%)    assert (imported <= (unsigned) INT_MAX);
    5,314 ( 0.00%)    int eidx = (int) imported;
   18,599 ( 0.00%)    unsigned res = import_literal (solver, eidx, true);
11,762,075 ( 0.00%)  => build/../src/import.c:import_literal (2,657x)
        .           #ifndef NDEBUG
   39,855 ( 0.00%)    struct import *import = &PEEK_STACK (solver->import, imported);
   10,628 ( 0.00%)    assert (import->imported);
   10,628 ( 0.00%)    assert (import->extension);
        .           #endif
   10,628 ( 0.00%)    INC (fresh);
   39,855 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_fresh (2,657x)
   13,285 ( 0.00%)    kissat_activate_literal (solver, res);
2,415,662 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_activate_literal (2,657x)
    2,657 ( 0.00%)    return res;
    5,314 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/utilities.h
--------------------------------------------------------------------------------
Ir                   

-- line 13 ----------------------------------------
          .           #define W2RD_ALIGNMENT_MASK (sizeof (w2rd) - 1)
          .           
          .           #define WORD_FORMAT PRIuPTR
          .           
          .           #define MAX_SIZE_T (~(size_t) 0)
          .           
          .           #define ASSUMED_LD_CACHE_LINE_BYTES 7u
          .           
254,802,735 ( 0.11%)  static inline word kissat_cache_lines (word n, size_t size) {
101,921,094 ( 0.04%)    if (!n)
  6,331,466 ( 0.00%)      return 0;
          .           #ifdef NDEBUG
          .             (void) size;
          .           #endif
 95,589,628 ( 0.04%)    assert (size == 4);
          .             assert (ASSUMED_LD_CACHE_LINE_BYTES > 2);
 47,794,814 ( 0.02%)    const unsigned shift = ASSUMED_LD_CACHE_LINE_BYTES - 2u;
334,563,698 ( 0.14%)    const word mask = (((word) 1) << shift) - 1;
191,179,256 ( 0.08%)    const word masked = n + mask;
286,768,884 ( 0.12%)    const word res = masked >> shift;
 47,794,814 ( 0.02%)    return res;
101,921,094 ( 0.04%)  }
          .           
    229,800 ( 0.00%)  static inline double kissat_average (double a, double b) {
    574,454 ( 0.00%)    return b ? a / b : 0.0;
    172,350 ( 0.00%)  }
          .           
    285,505 ( 0.00%)  static inline double kissat_percent (double a, double b) {
    513,909 ( 0.00%)    return kissat_average (100.0 * a, b);
    970,701 ( 0.00%)  => build/../src/utilities.h:kissat_average (57,101x)
    171,303 ( 0.00%)  }
          .           
399,246,126 ( 0.17%)  static inline bool kissat_aligned_word (word word) {
532,328,168 ( 0.23%)    return !(word & WORD_ALIGNMENT_MASK);
266,164,084 ( 0.11%)  }
          .           
529,103,788 ( 0.22%)  static inline bool kissat_aligned_pointer (const void *p) {
396,827,841 ( 0.17%)    return kissat_aligned_word ((word) p);
1,190,483,523 ( 0.50%)  => build/../src/utilities.h:kissat_aligned_word (132,275,947x)
264,551,894 ( 0.11%)  }
          .           
          .           static inline word kissat_align_word (word w) {
          .             word res = w;
          .             if (res & WORD_ALIGNMENT_MASK)
          .               res = 1 + (res | WORD_ALIGNMENT_MASK);
          .             return res;
          .           }
          .           
494,697,465 ( 0.21%)  static inline word kissat_align_w2rd (word w) {
329,798,310 ( 0.14%)    word res = w;
659,596,620 ( 0.28%)    if (res & W2RD_ALIGNMENT_MASK)
586,449,664 ( 0.25%)      res = 1 + (res | W2RD_ALIGNMENT_MASK);
164,899,155 ( 0.07%)    return res;
329,798,310 ( 0.14%)  }
          .           
          .           bool kissat_has_suffix (const char *str, const char *suffix);
          .           
  4,753,962 ( 0.00%)  static inline bool kissat_is_power_of_two (uint64_t w) {
 15,846,099 ( 0.01%)    return w && !(w & (w - 1));
  3,169,308 ( 0.00%)  }
          .           
        807 ( 0.00%)  static inline bool kissat_is_zero_or_power_of_two (word w) {
      1,345 ( 0.00%)    return !(w & (w - 1));
        538 ( 0.00%)  }
          .           
          .           static inline unsigned kissat_leading_zeroes_of_unsigned (unsigned x) {
          .             return x ? __builtin_clz (x) : sizeof (unsigned) * 8;
          .           }
          .           
         39 ( 0.00%)  static inline unsigned kissat_leading_zeroes_of_word (word x) {
         26 ( 0.00%)    if (!x)
          .               return sizeof (word) * 8;
          .             if (sizeof (word) == sizeof (unsigned long long))
         26 ( 0.00%)      return __builtin_clzll (x);
          .             if (sizeof (word) == sizeof (unsigned long))
          .               return __builtin_clzl (x);
          .             return __builtin_clz (x);
         26 ( 0.00%)  }
          .           
         52 ( 0.00%)  static inline unsigned kissat_log2_floor_of_word (word x) {
        117 ( 0.00%)    return x ? sizeof (word) * 8 - 1 - kissat_leading_zeroes_of_word (x) : 0;
        117 ( 0.00%)  => build/../src/utilities.h:kissat_leading_zeroes_of_word (13x)
         26 ( 0.00%)  }
          .           
         52 ( 0.00%)  static inline unsigned kissat_log2_ceiling_of_word (word x) {
         26 ( 0.00%)    if (!x)
          .               return 0;
         52 ( 0.00%)    unsigned tmp = kissat_log2_floor_of_word (x);
        312 ( 0.00%)  => build/../src/utilities.h:kissat_log2_floor_of_word (13x)
        130 ( 0.00%)    return tmp + !!(x ^ (((word) 1) << tmp));
         26 ( 0.00%)  }
          .           
          .           static inline unsigned kissat_leading_zeroes_of_uint64 (uint64_t x) {
          .             if (!x)
          .               return sizeof (uint64_t) * 8;
          .             if (sizeof (uint64_t) == sizeof (unsigned long long))
          .               return __builtin_clzll (x);
          .             if (sizeof (uint64_t) == sizeof (unsigned long))
          .               return __builtin_clzl (x);
-- line 107 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/stack.c
--------------------------------------------------------------------------------
Ir                  

         .           #include "stack.h"
         .           #include "allocate.h"
         .           #include "utilities.h"
         .           
         .           #include <assert.h>
         .           
 8,998,773 ( 0.00%)  void kissat_stack_enlarge (struct kissat *solver, chars *s, size_t bytes) {
 8,998,773 ( 0.00%)    const size_t size = SIZE_STACK (*s);
 8,998,773 ( 0.00%)    const size_t old_bytes = CAPACITY_STACK (*s);
 3,856,617 ( 0.00%)    assert (MAX_SIZE_T / 2 >= old_bytes);
         .             size_t new_bytes;
 2,571,078 ( 0.00%)    if (old_bytes)
 3,626,736 ( 0.00%)      new_bytes = 2 * old_bytes;
         .             else {
   757,710 ( 0.00%)      new_bytes = bytes;
 3,546,609 ( 0.00%)      while (!kissat_aligned_word (new_bytes))
 4,751,631 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_aligned_word (527,959x)
   149,104 ( 0.00%)        new_bytes <<= 1;
         .             }
11,569,851 ( 0.00%)    s->begin = kissat_realloc (solver, s->begin, old_bytes, new_bytes);
550,653,426 ( 0.23%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (1,285,539x)
 7,713,234 ( 0.00%)    s->allocated = s->begin + new_bytes;
 7,713,234 ( 0.00%)    s->end = s->begin + size;
 3,856,617 ( 0.00%)  }
         .           
        91 ( 0.00%)  void kissat_shrink_stack (struct kissat *solver, chars *s, size_t bytes) {
        26 ( 0.00%)    assert (bytes > 0);
        91 ( 0.00%)    const size_t old_bytes_capacity = CAPACITY_STACK (*s);
        65 ( 0.00%)    assert (kissat_aligned_word (old_bytes_capacity));
       117 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_aligned_word (13x)
        78 ( 0.00%)    assert (!(old_bytes_capacity % bytes));
        91 ( 0.00%)    assert (kissat_is_zero_or_power_of_two (old_bytes_capacity / bytes));
       130 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_is_zero_or_power_of_two (13x)
        91 ( 0.00%)    const size_t old_bytes_size = SIZE_STACK (*s);
        78 ( 0.00%)    assert (!(old_bytes_size % bytes));
        52 ( 0.00%)    const size_t old_size = old_bytes_size / bytes;
         .             size_t new_capacity;
        26 ( 0.00%)    if (old_size) {
        52 ( 0.00%)      const unsigned ld_old_size = kissat_log2_ceiling_of_word (old_size);
       598 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_log2_ceiling_of_word (13x)
        91 ( 0.00%)      new_capacity = ((size_t) 1) << ld_old_size;
         .             } else
         .               new_capacity = 0;
        65 ( 0.00%)    assert (kissat_is_zero_or_power_of_two (new_capacity));
       130 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_is_zero_or_power_of_two (13x)
        39 ( 0.00%)    size_t new_bytes_capacity = new_capacity * bytes;
        91 ( 0.00%)    while (!kissat_aligned_word (new_bytes_capacity))
       117 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_aligned_word (13x)
         .               new_bytes_capacity <<= 1;
        39 ( 0.00%)    if (new_bytes_capacity == old_bytes_capacity)
         8 ( 0.00%)      return;
        15 ( 0.00%)    assert (new_bytes_capacity < old_bytes_capacity);
        45 ( 0.00%)    s->begin = kissat_realloc (solver, s->begin, old_bytes_capacity,
     1,990 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (5x)
         .                                        new_bytes_capacity);
        30 ( 0.00%)    s->allocated = s->begin + new_bytes_capacity;
        30 ( 0.00%)    s->end = s->begin + old_bytes_size;
        30 ( 0.00%)    assert (s->end <= s->allocated);
        26 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/congruence.c
--------------------------------------------------------------------------------
Ir                   

-- line 137 ----------------------------------------
          .           #endif
          .           #ifndef NDEBUG
          .             unsigneds implied;
          .           #endif
          .           };
          .           
          .           typedef struct closure closure;
          .           
         36 ( 0.00%)  static void init_closure (kissat *solver, closure *closure) {
         12 ( 0.00%)    closure->solver = solver;
         40 ( 0.00%)    CALLOC (closure->scheduled, VARS);
    215,029 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
         44 ( 0.00%)    CALLOC (closure->occurrences, LITS);
  3,737,748 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
         40 ( 0.00%)    INIT_STACK (closure->garbage);
         40 ( 0.00%)    INIT_STACK (closure->lits);
         40 ( 0.00%)    INIT_STACK (closure->rhs);
         40 ( 0.00%)    INIT_STACK (closure->unsimplified);
         40 ( 0.00%)    INIT_STACK (closure->binaries);
         24 ( 0.00%)    INIT_FIFO (closure->schedule);
         56 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
          .           
         44 ( 0.00%)    NALLOC (closure->repr, LITS);
      1,588 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nalloc (4x)
    961,724 ( 0.00%)    for (all_literals (lit))
  1,682,954 ( 0.00%)      closure->repr[lit] = lit;
          .           
          8 ( 0.00%)    closure->hash.table = 0;
         24 ( 0.00%)    closure->hash.size = closure->hash.entries = 0;
          .           
         12 ( 0.00%)    generator random = solver->random;
        208 ( 0.00%)    for (size_t i = 0; i != SIZE_NONCES; i++)
        576 ( 0.00%)      closure->nonces[i] = 1 | kissat_next_random64 (&random);
      1,216 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_next_random64 (64x)
          .           
          .           #ifdef CHECKING_OR_PROVING
         40 ( 0.00%)    INIT_STACK (closure->chain);
          .           #endif
          .           #if defined(LOGGING) || !defined(NDEBUG)
          8 ( 0.00%)    closure->gates_added = 0;
          .           #endif
          .           #ifndef NDEBUG
         40 ( 0.00%)    INIT_STACK (closure->implied);
          .           #endif
         24 ( 0.00%)  }
          .           
  1,283,776 ( 0.00%)  static size_t bytes_gate (size_t arity) {
    962,832 ( 0.00%)    return sizeof (gate) + arity * sizeof (unsigned);
    641,888 ( 0.00%)  }
          .           
    641,888 ( 0.00%)  static unsigned actual_gate_arity (gate *g) {
    641,888 ( 0.00%)    unsigned res = g->arity;
  1,123,304 ( 0.00%)    if (!g->shrunken)
    320,712 ( 0.00%)      return res;
      1,484 ( 0.00%)    while (g->rhs[res++] != INVALID_LIT)
          .               ;
        116 ( 0.00%)    return res;
    320,944 ( 0.00%)  }
          .           
          .           #define CLOGANDGATE(G, ...) \
          .             do { \
          .               assert ((G)->tag == AND_GATE); \
          .               LOGANDGATE ((G)->id, closure->repr, (G)->lhs, (G)->arity, (G)->rhs, \
          .                           __VA_ARGS__); \
          .             } while (0)
          .           
-- line 197 ----------------------------------------
-- line 218 ----------------------------------------
          .               else if ((G)->tag == XOR_GATE) \
          .                 CLOGXORGATE (G, __VA_ARGS__); \
          .               else { \
          .                 assert ((G)->tag == ITE_GATE); \
          .                 CLOGITEGATE (G, __VA_ARGS__); \
          .               } \
          .             } while (0)
          .           
    962,832 ( 0.00%)  static void delete_gate (closure *closure, gate *g) {
    481,416 ( 0.00%)    kissat *const solver = closure->solver;
  3,097,748 ( 0.00%)    LOGATE (g, "delete");
    641,888 ( 0.00%)    unsigned actual_arity = actual_gate_arity (g);
  3,050,336 ( 0.00%)  => build/../src/congruence.c:actual_gate_arity (160,472x)
    641,888 ( 0.00%)    size_t actual_bytes = bytes_gate (actual_arity);
  1,444,248 ( 0.00%)  => build/../src/congruence.c:bytes_gate (160,472x)
    962,832 ( 0.00%)    kissat_free (solver, g, actual_bytes);
 28,571,549 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (160,472x)
    481,416 ( 0.00%)  }
          .           
         20 ( 0.00%)  void reset_gate_hash_table (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         12 ( 0.00%)    gate **table = closure->hash.table;
  2,293,784 ( 0.00%)    for (size_t pos = 0; pos != closure->hash.size; pos++) {
  2,752,512 ( 0.00%)      gate *g = table[pos];
  2,368,730 ( 0.00%)      if (g && g != REMOVED && !g->garbage)
    800,890 ( 0.00%)        delete_gate (closure, g);
 40,261,579 ( 0.02%)  => build/../src/congruence.c:delete_gate (160,178x)
          .             }
         28 ( 0.00%)    DEALLOC (table, closure->hash.size);
 14,002,702 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         12 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void reset_closure (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
          .           
         12 ( 0.00%)    gates *occurrences = closure->occurrences;
    961,724 ( 0.00%)    for (all_literals (lit))
 15,627,430 ( 0.01%)      RELEASE_STACK (occurrences[lit]);
 27,001,455 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (240,422x)
         36 ( 0.00%)    DEALLOC (occurrences, LITS);
  2,103,424 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           
         12 ( 0.00%)    reset_gate_hash_table (closure);
 62,480,281 ( 0.03%)  => build/../src/congruence.c:reset_gate_hash_table (4x)
      2,392 ( 0.00%)    for (all_pointers (gate, g, closure->garbage))
      1,470 ( 0.00%)      delete_gate (closure, g);
     74,574 ( 0.00%)  => build/../src/congruence.c:delete_gate (294x)
          .           
         96 ( 0.00%)    RELEASE_STACK (closure->garbage);
        958 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->binaries);
         52 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         36 ( 0.00%)    DEALLOC (closure->scheduled, VARS);
        945 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->lits);
        984 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->rhs);
        984 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->unsimplified);
        440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_FIFO (closure->schedule);
        775 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (4x)
         56 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
          .           #ifdef CHECKING_OR_PROVING
         96 ( 0.00%)    RELEASE_STACK (closure->chain);
        440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           #endif
          .           #ifndef NDEBUG
         96 ( 0.00%)    RELEASE_STACK (closure->implied);
        984 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           #endif
          .           
         36 ( 0.00%)    if (!solver->inconsistent && solver->unflushed)
          3 ( 0.00%)      kissat_flush_trail (solver);
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/trail.c:kissat_flush_trail (1x)
         12 ( 0.00%)  }
          .           
         20 ( 0.00%)  static unsigned reset_repr (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    unsigned res = 0, *repr = closure->repr;
    480,876 ( 0.00%)    for (all_variables (idx)) {
    841,477 ( 0.00%)      unsigned lit = LIT (idx);
  2,280,894 ( 0.00%)      if (!VALUE (lit) && repr[lit] != lit)
      1,527 ( 0.00%)        res++;
          .             }
         36 ( 0.00%)    DEALLOC (repr, LITS);
      1,102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          4 ( 0.00%)    return res;
          8 ( 0.00%)  }
          .           
          .           #ifndef NDEBUG
          .           
  2,983,500 ( 0.00%)  static void check_lits_sorted (size_t size, const unsigned *lits) {
    497,250 ( 0.00%)    unsigned prev = INVALID_LIT;
  2,486,250 ( 0.00%)    const unsigned *const end_lits = lits + size;
  7,652,116 ( 0.00%)    for (const unsigned *p = lits; p != end_lits; p++) {
  3,501,462 ( 0.00%)      const unsigned lit = *p;
  2,334,308 ( 0.00%)      if (prev != INVALID_LIT) {
  2,009,712 ( 0.00%)        assert (prev != lit);
  2,009,712 ( 0.00%)        const unsigned not_lit = lit ^ 1;
  2,009,712 ( 0.00%)        assert (prev != not_lit);
  2,009,712 ( 0.00%)        assert (prev < lit);
          .               }
  2,334,308 ( 0.00%)      prev = lit;
          .             }
  1,989,000 ( 0.00%)  }
          .           
    559,410 ( 0.00%)  static void check_and_lits_normalized (size_t arity, const unsigned *lits) {
    186,470 ( 0.00%)    assert (arity > 1);
    466,175 ( 0.00%)    check_lits_sorted (arity, lits);
  7,947,488 ( 0.00%)  => build/../src/congruence.c:check_lits_sorted (93,235x)
    279,705 ( 0.00%)  }
          .           
          .           static void check_xor_lits_normalized (const unsigned arity,
  1,677,744 ( 0.00%)                                         const unsigned *lits) {
    559,248 ( 0.00%)    assert (arity > 1);
  1,398,120 ( 0.00%)    check_lits_sorted (arity, lits);
 15,910,380 ( 0.01%)  => build/../src/congruence.c:check_lits_sorted (279,624x)
  2,560,344 ( 0.00%)    for (size_t i = 1; i != arity; i++)
  3,777,228 ( 0.00%)      assert (lits[i - 1] < lits[i]);
  1,118,496 ( 0.00%)  }
          .           
          .           static void check_ite_lits_normalized (kissat *solver,
    718,614 ( 0.00%)                                         const unsigned *lits) {
  1,437,228 ( 0.00%)    assert (!NEGATED (lits[0]));
  1,676,766 ( 0.00%)    assert (!NEGATED (lits[1]));
    838,383 ( 0.00%)    assert (lits[0] != lits[1]);
    838,383 ( 0.00%)    assert (lits[0] != lits[2]);
    958,152 ( 0.00%)    assert (lits[1] != lits[2]);
  1,916,304 ( 0.00%)    assert (lits[0] != NOT (lits[1]));
  1,916,304 ( 0.00%)    assert (lits[0] != NOT (lits[2]));
  2,036,073 ( 0.00%)    assert (lits[1] != NOT (lits[2]));
    359,307 ( 0.00%)  }
          .           
          .           #else
          .           
          .           #define check_lits_sorted(...) \
          .             do { \
          .             } while (0)
          .           
          .           #define check_and_lits_normalized check_lits_sorted
          .           #define check_xor_lits_normalized check_lits_sorted
          .           #define check_ite_lits_normalized check_lits_sorted
          .           
          .           #endif
          .           
          .           #define LESS_LIT(A, B) ((A) < (B))
          .           
    870,737 ( 0.00%)  static void sort_lits (kissat *solver, size_t arity, unsigned *lits) {
 18,752,798 ( 0.01%)    SORT (unsigned, arity, lits, LESS_LIT);
    621,955 ( 0.00%)    check_lits_sorted (arity, lits);
  7,959,174 ( 0.00%)  => build/../src/congruence.c:check_lits_sorted (124,391x)
    373,173 ( 0.00%)  }
          .           
          .           static unsigned hash_lits (closure *closure, unsigned tag, size_t arity,
  3,941,024 ( 0.00%)                             const unsigned *lits) {
          .           #ifndef NDEBUG
    985,256 ( 0.00%)    if (tag == AND_GATE)
    559,410 ( 0.00%)      check_and_lits_normalized (arity, lits);
  9,439,248 ( 0.00%)  => build/../src/congruence.c:check_and_lits_normalized (93,235x)
    798,786 ( 0.00%)    else if (tag == XOR_GATE)
  1,957,368 ( 0.00%)      check_xor_lits_normalized (arity, lits);
 27,001,560 ( 0.01%)  => build/../src/congruence.c:check_xor_lits_normalized (279,624x)
          .             else {
    239,538 ( 0.00%)      assert (tag == ITE_GATE);
    718,614 ( 0.00%)      check_ite_lits_normalized (closure->solver, lits);
 12,695,514 ( 0.01%)  => build/../src/congruence.c:check_ite_lits_normalized (119,769x)
          .             }
          .           #endif
  2,463,140 ( 0.00%)    const unsigned *end_lits = lits + arity;
  1,477,884 ( 0.00%)    const uint64_t *const nonces = closure->nonces;
  1,477,884 ( 0.00%)    const uint64_t *const end_nonces = nonces + SIZE_NONCES;
  2,463,140 ( 0.00%)    const uint64_t *n = nonces + tag;
    492,628 ( 0.00%)    uint64_t hash = 0;
  1,477,884 ( 0.00%)    assert (n < end_nonces);
  7,893,740 ( 0.00%)    for (const unsigned *l = lits; l != end_lits; l++) {
  4,937,972 ( 0.00%)      hash += *l;
  8,641,451 ( 0.00%)      hash *= *n++;
  1,234,493 ( 0.00%)      hash = (hash << 4) | (hash >> 60);
  3,703,479 ( 0.00%)      if (n == end_nonces)
      5,796 ( 0.00%)        n = nonces;
          .             }
  1,477,884 ( 0.00%)    hash ^= hash >> 32;
    492,628 ( 0.00%)    return hash;
    985,256 ( 0.00%)  }
          .           
          .           #ifndef NDEBUG
  8,979,680 ( 0.00%)  static bool is_power_of_two (size_t n) { return n && ~(n & (n - 1)); }
          .           #endif
          .           
  3,928,610 ( 0.00%)  static size_t reduce_hash (unsigned hash, size_t size, size_t size2) {
  1,683,690 ( 0.00%)    assert (size <= size2);
  2,244,920 ( 0.00%)    assert (size2 <= 2 * size);
  2,806,150 ( 0.00%)    assert (is_power_of_two (size2));
  8,979,680 ( 0.00%)  => build/../src/congruence.c:is_power_of_two (561,230x)
  1,122,460 ( 0.00%)    unsigned res = hash;
  1,683,690 ( 0.00%)    res &= size2 - 1;
  1,683,690 ( 0.00%)    if (res >= size)
          .               res -= size;
  1,683,690 ( 0.00%)    assert (res < size);
    561,230 ( 0.00%)    return res;
  1,122,460 ( 0.00%)  }
          .           
          .           #define MAX_HASH_TABLE_SIZE ((size_t) 1 << 32)
          .           
    656,016 ( 0.00%)  static bool closure_hash_table_is_full (closure *closure) {
    820,020 ( 0.00%)    if (closure->hash.size == MAX_HASH_TABLE_SIZE)
          .               return false;
  1,148,028 ( 0.00%)    if (2 * closure->hash.entries < closure->hash.size)
    327,868 ( 0.00%)      return false;
         70 ( 0.00%)    return true;
    328,008 ( 0.00%)  }
          .           
          .           static bool match_lits (gate *g, unsigned tag, unsigned hash, size_t size,
  1,174,248 ( 0.00%)                          const unsigned *lits) {
    913,304 ( 0.00%)    assert (!g->garbage);
    782,832 ( 0.00%)    if (g->tag != tag)
    112,492 ( 0.00%)      return false;
    296,904 ( 0.00%)    if (g->hash != hash)
    147,832 ( 0.00%)      return false;
      1,860 ( 0.00%)    if (g->arity != size)
          .               return false;
        620 ( 0.00%)    const unsigned *p = lits;
      9,867 ( 0.00%)    for (all_rhs_literals_in_gate (lit, g))
      4,206 ( 0.00%)      if (lit != *p++)
          .                 return false;
        310 ( 0.00%)    return true;
    260,944 ( 0.00%)  }
          .           
        350 ( 0.00%)  static void resize_gate_hash_table (closure *closure) {
        210 ( 0.00%)    kissat *solver = closure->solver;
        210 ( 0.00%)    gate_hash_table *hash = &closure->hash;
        210 ( 0.00%)    const size_t old_size = hash->size;
        412 ( 0.00%)    const size_t new_size = old_size ? 2 * old_size : 1;
        210 ( 0.00%)    const size_t old_entries = hash->entries;
      1,750 ( 0.00%)    kissat_extremely_verbose (
      3,570 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (70x)
      2,372 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (70x)
          .                 solver,
          .                 "resizing gate table of size %zu filled with %zu entries %.0f%%",
          .                 old_size, old_entries, kissat_percent (old_entries, old_size));
        210 ( 0.00%)    gate **old_table = hash->table, **new_table;
        490 ( 0.00%)    CALLOC (new_table, new_size);
  8,068,704 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (70x)
         70 ( 0.00%)    size_t flushed = 0;
  1,835,342 ( 0.00%)    for (size_t old_pos = 0; old_pos != old_size; old_pos++) {
  2,752,488 ( 0.00%)      gate *g = old_table[old_pos];
    917,496 ( 0.00%)      if (!g)
    229,364 ( 0.00%)        continue;
    458,768 ( 0.00%)      if (g == REMOVED) {
          .                 flushed++;
          .                 continue;
          .               }
  1,835,072 ( 0.00%)      size_t new_pos = reduce_hash (g->hash, new_size, new_size);
 11,239,816 ( 0.00%)  => build/../src/congruence.c:reduce_hash (229,384x)
  2,100,442 ( 0.00%)      while (new_table[new_pos]) {
    265,370 ( 0.00%)        assert (new_table[new_pos] != REMOVED);
    151,640 ( 0.00%)        if (++new_pos == new_size)
          6 ( 0.00%)          new_pos = 0;
          .               }
  1,605,688 ( 0.00%)      new_table[new_pos] = g;
          .             }
      1,750 ( 0.00%)    kissat_extremely_verbose (
      3,570 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (70x)
      2,372 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (70x)
          .                 solver, "flushed %zu entries %.0f%% resizing table of size %zu",
          .                 flushed, kissat_percent (flushed, old_size), old_size);
        420 ( 0.00%)    DEALLOC (old_table, old_size);
     15,516 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (70x)
        210 ( 0.00%)    assert (flushed <= old_entries);
        210 ( 0.00%)    const size_t new_entries = old_entries - flushed;
        210 ( 0.00%)    hash->table = new_table;
        210 ( 0.00%)    hash->size = new_size;
        210 ( 0.00%)    hash->entries = new_entries;
      1,750 ( 0.00%)    kissat_very_verbose (
      2,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (70x)
      3,570 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (70x)
          .                 solver, "resized gate table to %zu with %zu entries %.0f%%", new_size,
          .                 new_entries, kissat_percent (new_entries, new_size));
        210 ( 0.00%)  }
          .           
     21,192 ( 0.00%)  static bool remove_gate (closure *closure, gate *g) {
     24,724 ( 0.00%)    if (!g->indexed)
          .               return false;
     10,596 ( 0.00%)    kissat *solver = closure->solver;
     17,660 ( 0.00%)    assert (!solver->inconsistent);
     10,596 ( 0.00%)    const size_t hash_size = closure->hash.size;
     28,256 ( 0.00%)    size_t pos = reduce_hash (g->hash, hash_size, hash_size);
    173,068 ( 0.00%)  => build/../src/congruence.c:reduce_hash (3,532x)
     10,596 ( 0.00%)    gate **table = closure->hash.table;
     14,128 ( 0.00%)    INC (congruent_lookups);
     52,980 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_lookups (3,532x)
     14,128 ( 0.00%)    INC (congruent_lookups_removed);
     52,980 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_lookups_removed (3,532x)
      3,532 ( 0.00%)    unsigned collisions = 0;
     34,269 ( 0.00%)    while (table[pos] != g) {
        859 ( 0.00%)      collisions++;
      3,436 ( 0.00%)      if (++pos == hash_size)
          .                 pos = 0;
          .             }
     21,192 ( 0.00%)    ADD (congruent_collisions_removed, collisions);
     70,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_collisions_removed (3,532x)
     21,192 ( 0.00%)    ADD (congruent_collisions, collisions);
     70,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_collisions (3,532x)
     17,660 ( 0.00%)    table[pos] = REMOVED;
     62,638 ( 0.00%)    LOGATE (g, "removing from hash table");
     14,128 ( 0.00%)    g->indexed = false;
      3,532 ( 0.00%)    return true;
      7,064 ( 0.00%)  }
          .           
          .           static gate *find_gate (closure *closure, unsigned tag, unsigned hash,
  1,643,140 ( 0.00%)                          size_t size, const unsigned *lits, gate *except) {
    355,032 ( 0.00%)    assert (!except || !except->garbage);
    657,256 ( 0.00%)    if (!closure->hash.entries)
          8 ( 0.00%)      return 0;
    492,930 ( 0.00%)    kissat *solver = closure->solver;
    821,550 ( 0.00%)    assert (!solver->inconsistent);
  1,314,480 ( 0.00%)    assert (hash == hash_lits (closure, tag, size, lits));
 32,538,847 ( 0.01%)  => build/../src/congruence.c:hash_lits (164,310x)
    492,930 ( 0.00%)    const size_t hash_size = closure->hash.size;
  1,150,170 ( 0.00%)    size_t start_pos = reduce_hash (hash, hash_size, hash_size);
  8,051,190 ( 0.00%)  => build/../src/congruence.c:reduce_hash (164,310x)
    492,930 ( 0.00%)    gate **table = closure->hash.table, *g;
    657,240 ( 0.00%)    INC (congruent_lookups);
  2,464,650 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_lookups (164,310x)
    657,240 ( 0.00%)    INC (congruent_lookups_find);
  2,464,650 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_lookups_find (164,310x)
    328,620 ( 0.00%)    size_t pos = start_pos;
    164,310 ( 0.00%)    unsigned collisions = 0;
    164,310 ( 0.00%)    gate *res = 0;
  2,684,302 ( 0.00%)    while ((g = table[pos])) {
    261,016 ( 0.00%)      if (g == REMOVED)
          .                 ;
    652,370 ( 0.00%)      else if (g->garbage) {
         10 ( 0.00%)        assert (g->indexed);
          8 ( 0.00%)        g->indexed = false;
         12 ( 0.00%)        table[pos] = REMOVED;
  1,696,136 ( 0.00%)      } else if (g != except && match_lits (g, tag, hash, size, lits)) {
  3,705,419 ( 0.00%)  => build/../src/congruence.c:match_lits (130,472x)
      1,240 ( 0.00%)        INC (congruent_matched);
      4,650 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_matched (310x)
        620 ( 0.00%)        res = g;
        310 ( 0.00%)        break;
          .               }
    130,198 ( 0.00%)      collisions++;
    520,792 ( 0.00%)      if (++pos == hash_size)
         32 ( 0.00%)        pos = 0;
    390,594 ( 0.00%)      if (pos == start_pos)
          8 ( 0.00%)        break;
          .             }
    985,860 ( 0.00%)    ADD (congruent_collisions_find, collisions);
  3,286,200 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_collisions_find (164,310x)
    985,860 ( 0.00%)    ADD (congruent_collisions, collisions);
  3,286,200 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_collisions (164,310x)
    164,310 ( 0.00%)    return res;
    328,628 ( 0.00%)  }
          .           
  1,148,028 ( 0.00%)  static void index_gate (closure *closure, gate *g) {
  1,148,028 ( 0.00%)    assert (!g->indexed);
    492,012 ( 0.00%)    kissat *solver = closure->solver;
    820,020 ( 0.00%)    assert (!solver->inconsistent);
    820,020 ( 0.00%)    assert (g->arity > 1);
    820,020 ( 0.00%)    if (closure_hash_table_is_full (closure))
  3,280,010 ( 0.00%)  => build/../src/congruence.c:closure_hash_table_is_full (164,004x)
        210 ( 0.00%)      resize_gate_hash_table (closure);
 31,502,848 ( 0.01%)  => build/../src/congruence.c:resize_gate_hash_table (70x)
  3,160,736 ( 0.00%)    LOGATE (g, "adding to hash table");
    656,016 ( 0.00%)    INC (congruent_indexed);
  2,460,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_indexed (164,004x)
  3,116,076 ( 0.00%)    assert (g->hash == hash_lits (closure, g->tag, g->arity, g->rhs));
 32,482,873 ( 0.01%)  => build/../src/congruence.c:hash_lits (164,004x)
    492,012 ( 0.00%)    const size_t hash_size = closure->hash.size;
  1,312,032 ( 0.00%)    size_t pos = reduce_hash (g->hash, hash_size, hash_size);
  8,036,196 ( 0.00%)  => build/../src/congruence.c:reduce_hash (164,004x)
    492,012 ( 0.00%)    gate **table = closure->hash.table, *h;
    164,004 ( 0.00%)    unsigned collisions = 0;
  2,776,378 ( 0.00%)    while ((h = table[pos]) && h != REMOVED) {
    130,027 ( 0.00%)      collisions++;
    520,108 ( 0.00%)      if (++pos == hash_size)
         24 ( 0.00%)        pos = 0;
          .             }
    984,024 ( 0.00%)    ADD (congruent_collisions_index, collisions);
  3,280,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_collisions_index (164,004x)
    984,024 ( 0.00%)    ADD (congruent_collisions, collisions);
  3,280,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_collisions (164,004x)
    984,024 ( 0.00%)    table[pos] = g;
    820,020 ( 0.00%)    closure->hash.entries++;
    656,016 ( 0.00%)    g->indexed = true;
    656,016 ( 0.00%)  }
          .           
  7,574,118 ( 0.00%)  static unsigned parity_lits (kissat *solver, unsigneds *lits) {
  1,262,353 ( 0.00%)    unsigned res = 0;
 39,633,611 ( 0.02%)    for (all_stack (unsigned, lit, *lits))
 30,868,664 ( 0.01%)      res ^= NEGATED (lit);
          .           #ifdef NDEBUG
          .             (void) solver;
          .           #endif
  1,262,353 ( 0.00%)    return res;
  2,524,706 ( 0.00%)  }
          .           
  6,768,186 ( 0.00%)  static void inc_lits (kissat *solver, unsigneds *lits) {
  3,384,093 ( 0.00%)    unsigned *p = BEGIN_STACK (*lits);
  3,384,093 ( 0.00%)    unsigned *end = END_STACK (*lits);
  1,128,031 ( 0.00%)    unsigned carry = 1;
 13,822,444 ( 0.01%)    while (carry && p != end) {
  6,084,825 ( 0.00%)      unsigned lit = *p;
 16,226,200 ( 0.01%)      unsigned not_lit = NOT (lit);
 22,311,025 ( 0.01%)      carry = !NEGATED (not_lit);
 10,141,375 ( 0.00%)      *p++ = not_lit;
          .             }
          .           #ifdef NDEBUG
          .             (void) solver;
          .           #endif
  3,384,093 ( 0.00%)  }
          .           
          .           #ifndef NDEBUG
          .           
          .           #define LESS_LITERAL(A, B) ((A) < (B))
          .           
  5,746,265 ( 0.00%)  static void check_implied (closure *closure) {
  3,447,759 ( 0.00%)    kissat *const solver = closure->solver;
  3,447,759 ( 0.00%)    unsigneds *implied = &closure->implied;
221,821,802 ( 0.09%)    SORT_STACK (unsigned, *implied, LESS_LITERAL);
  3,447,759 ( 0.00%)    unsigned *q = BEGIN_STACK (*implied);
  3,447,759 ( 0.00%)    const unsigned *const end = END_STACK (*implied);
  1,149,253 ( 0.00%)    unsigned prev = INVALID_LIT;
  1,149,253 ( 0.00%)    bool tautological = false;
 20,554,018 ( 0.01%)    for (const unsigned *p = q; p != end; p++) {
 10,243,881 ( 0.00%)      const unsigned lit = *p;
 10,243,881 ( 0.00%)      if (prev == lit)
          .                 continue;
 27,317,016 ( 0.01%)      const unsigned not_lit = NOT (lit);
 10,243,881 ( 0.00%)      if (prev == not_lit) {
          2 ( 0.00%)        tautological = true;
          2 ( 0.00%)        break;
          .               }
 27,317,000 ( 0.01%)      *q++ = prev = lit;
          .             }
  4,597,012 ( 0.00%)    if (!tautological) {
 13,791,012 ( 0.01%)      SET_END_OF_STACK (*implied, q);
 20,686,518 ( 0.01%)      CHECK_AND_ADD_STACK (*implied);
4,759,967,227 ( 2.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (1,149,251x)
 20,686,518 ( 0.01%)      REMOVE_CHECKER_STACK (*implied);
2,294,222,744 ( 0.97%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (1,149,251x)
          .             }
  4,597,012 ( 0.00%)    CLEAR_STACK (*implied);
  3,447,759 ( 0.00%)  }
          .           
  1,937,745 ( 0.00%)  static void check_clause (closure *closure) {
  1,162,647 ( 0.00%)    kissat *const solver = closure->solver;
  1,162,647 ( 0.00%)    unsigneds *implied = &closure->implied;
  1,162,647 ( 0.00%)    unsigneds *clause = &solver->clause;
 12,217,495 ( 0.01%)    for (all_stack (unsigned, lit, *clause))
 15,492,295 ( 0.01%)      PUSH_STACK (*implied, lit);
  1,162,647 ( 0.00%)    check_implied (closure);
2,120,162,263 ( 0.90%)  => build/../src/congruence.c:check_implied (387,549x)
  1,162,647 ( 0.00%)  }
          .           
          .           static void check_binary_implied (closure *closure, unsigned a,
    712,117 ( 0.00%)                                    unsigned b) {
    305,193 ( 0.00%)    kissat *const solver = closure->solver;
    305,193 ( 0.00%)    unsigneds *implied = &closure->implied;
    610,386 ( 0.00%)    assert (EMPTY_STACK (*implied));
  1,322,551 ( 0.00%)    PUSH_STACK (*implied, a);
      1,116 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (4x)
  1,322,503 ( 0.00%)    PUSH_STACK (*implied, b);
    305,193 ( 0.00%)    check_implied (closure);
1,462,930,229 ( 0.62%)  => build/../src/congruence.c:check_implied (101,731x)
    305,193 ( 0.00%)  }
          .           
    186,594 ( 0.00%)  static void check_and_gate_implied (closure *closure, gate *g) {
    155,495 ( 0.00%)    assert (g->tag == AND_GATE);
     93,297 ( 0.00%)    kissat *const solver = closure->solver;
    124,396 ( 0.00%)    if (GET_OPTION (check) < 2)
          .               return;
    279,891 ( 0.00%)    CLOGANDGATE (g, "checking implied");
     93,297 ( 0.00%)    const unsigned lhs = g->lhs;
    248,792 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
  1,311,432 ( 0.00%)    for (all_rhs_literals_in_gate (other, g))
    610,386 ( 0.00%)      check_binary_implied (closure, not_lhs, other);
1,468,119,674 ( 0.62%)  => build/../src/congruence.c:check_binary_implied (101,731x)
     93,297 ( 0.00%)    unsigneds *implied = &closure->implied;
    186,594 ( 0.00%)    assert (EMPTY_STACK (*implied));
    404,287 ( 0.00%)    PUSH_STACK (*implied, lhs);
  1,209,701 ( 0.00%)    for (all_rhs_literals_in_gate (other, g)) {
    813,848 ( 0.00%)      const unsigned not_other = NOT (other);
  1,322,707 ( 0.00%)      PUSH_STACK (*implied, not_other);
      8,507 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (17x)
          .             }
    124,396 ( 0.00%)    check_implied (closure);
325,853,675 ( 0.14%)  => build/../src/congruence.c:check_implied (31,099x)
     62,198 ( 0.00%)  }
          .           
    559,590 ( 0.00%)  static void check_xor_gate_implied (closure *closure, gate *g) {
    466,325 ( 0.00%)    assert (g->tag == XOR_GATE);
    279,795 ( 0.00%)    kissat *const solver = closure->solver;
    373,060 ( 0.00%)    if (GET_OPTION (check) < 2)
          .               return;
    839,385 ( 0.00%)    CLOGXORGATE (g, "checking implied");
    279,795 ( 0.00%)    const unsigned lhs = g->lhs;
    746,120 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
    279,795 ( 0.00%)    unsigneds *clause = &solver->clause;
    559,590 ( 0.00%)    assert (EMPTY_STACK (*clause));
  1,212,445 ( 0.00%)    PUSH_STACK (*clause, not_lhs);
  2,823,143 ( 0.00%)    for (all_rhs_literals_in_gate (other, g)) {
  1,711,161 ( 0.00%)      assert (!NEGATED (other));
  2,471,677 ( 0.00%)      PUSH_STACK (*clause, other);
          .             }
    373,060 ( 0.00%)    unsigned arity = g->arity;
    559,590 ( 0.00%)    unsigned end = 1u << arity;
    746,120 ( 0.00%)    unsigned parity = NEGATED (not_lhs);
    652,855 ( 0.00%)    assert (parity == parity_lits (solver, clause));
  6,116,210 ( 0.00%)  => build/../src/congruence.c:parity_lits (93,265x)
  2,016,521 ( 0.00%)    for (unsigned i = 0; i != end; i++) {
  5,498,141 ( 0.00%)      while (i && parity_lits (solver, clause) != parity)
 39,150,920 ( 0.02%)  => build/../src/congruence.c:parity_lits (590,179x)
  1,479,475 ( 0.00%)        inc_lits (solver, clause);
 22,874,517 ( 0.01%)  => build/../src/congruence.c:inc_lits (295,895x)
  1,162,647 ( 0.00%)      check_clause (closure);
2,155,623,033 ( 0.91%)  => build/../src/congruence.c:check_clause (387,549x)
  1,937,745 ( 0.00%)      inc_lits (solver, clause);
 29,386,768 ( 0.01%)  => build/../src/congruence.c:inc_lits (387,549x)
          .             }
    466,325 ( 0.00%)    CLEAR_STACK (*clause);
    186,530 ( 0.00%)  }
          .           
          .           static void check_ternary (closure *closure, unsigned a, unsigned b,
  5,030,992 ( 0.00%)                             unsigned c) {
  1,886,622 ( 0.00%)    kissat *const solver = closure->solver;
  2,515,496 ( 0.00%)    if (GET_OPTION (check) < 2)
          .               return;
  1,886,622 ( 0.00%)    unsigneds *implied = &closure->implied;
  8,175,362 ( 0.00%)    PUSH_STACK (*implied, a);
  8,175,362 ( 0.00%)    PUSH_STACK (*implied, b);
  8,175,362 ( 0.00%)    PUSH_STACK (*implied, c);
  2,515,496 ( 0.00%)    check_implied (closure);
3,562,626,925 ( 1.51%)  => build/../src/congruence.c:check_implied (628,874x)
  1,257,748 ( 0.00%)  }
          .           
          .           static void check_ite_implied (closure *closure, unsigned lhs,
          .                                          unsigned cond, unsigned then_lit,
    479,076 ( 0.00%)                                 unsigned else_lit) {
    119,769 ( 0.00%)    kissat *const solver = closure->solver;
    159,692 ( 0.00%)    if (GET_OPTION (check) < 2)
          .               return;
    239,538 ( 0.00%)    LOG ("checking implied ITE gate %s := %s ? %s : %s", LOGLIT (lhs),
          .                  LOGLIT (cond), LOGLIT (then_lit), LOGLIT (else_lit));
    319,384 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
    319,384 ( 0.00%)    const unsigned not_cond = NOT (cond);
    319,384 ( 0.00%)    const unsigned not_then_lit = NOT (then_lit);
    319,384 ( 0.00%)    const unsigned not_else_lit = NOT (else_lit);
    239,538 ( 0.00%)    check_ternary (closure, cond, not_else_lit, lhs);
231,979,852 ( 0.10%)  => build/../src/congruence.c:check_ternary (39,923x)
    239,538 ( 0.00%)    check_ternary (closure, cond, else_lit, not_lhs);
220,070,839 ( 0.09%)  => build/../src/congruence.c:check_ternary (39,923x)
    239,538 ( 0.00%)    check_ternary (closure, not_cond, not_then_lit, lhs);
264,974,849 ( 0.11%)  => build/../src/congruence.c:check_ternary (39,923x)
    279,461 ( 0.00%)    check_ternary (closure, not_cond, then_lit, not_lhs);
259,599,585 ( 0.11%)  => build/../src/congruence.c:check_ternary (39,923x)
    239,538 ( 0.00%)  }
          .           
    239,538 ( 0.00%)  static void check_ite_gate_implied (closure *closure, gate *g) {
    199,615 ( 0.00%)    assert (g->tag == ITE_GATE);
    199,615 ( 0.00%)    assert (g->arity == 3);
          .           #ifndef NOPTIONS
    119,769 ( 0.00%)    kissat *const solver = closure->solver;
          .           #endif
    159,692 ( 0.00%)    if (GET_OPTION (check) < 2)
          .               return;
    119,769 ( 0.00%)    const unsigned lhs = g->lhs;
    119,769 ( 0.00%)    const unsigned cond = g->rhs[0];
    119,769 ( 0.00%)    const unsigned then_lit = g->rhs[1];
    119,769 ( 0.00%)    const unsigned else_lit = g->rhs[2];
    359,307 ( 0.00%)    check_ite_implied (closure, lhs, cond, then_lit, else_lit);
980,138,349 ( 0.41%)  => build/../src/congruence.c:check_ite_implied (39,923x)
     79,846 ( 0.00%)  }
          .           
          .           #else
          .           
          .           #define check_and_gate_implied(...) \
          .             do { \
          .             } while (0)
          .           
          .           #define check_xor_gate_implied check_and_gate_implied
          .           #define check_ternary check_and_gate_implied
          .           #define check_ite_implied check_and_gate_implied
          .           #define check_ite_gate_implied check_and_gate_implied
          .           
          .           #endif
          .           
  8,531,016 ( 0.00%)  static inline unsigned find_repr (closure *closure, unsigned lit) {
  6,398,262 ( 0.00%)    const unsigned *const repr = closure->repr;
 17,062,032 ( 0.01%)    unsigned res = lit, next = repr[res];
  8,678,382 ( 0.00%)    while (res != next)
    392,976 ( 0.00%)      res = next, next = repr[res];
  2,132,754 ( 0.00%)    return res;
  4,265,508 ( 0.00%)  }
          .           
          .           #ifndef MERGE_CONDITIONAL_EQUIVALENCES
          .           
          .           static clause *find_other_two (kissat *solver, watches *watches, unsigned a,
          .                                          unsigned b, unsigned ignore) {
          .             assert (!solver->watching);
          .             const value *const values = solver->values;
          .             const watch *const begin_watches = BEGIN_WATCHES (*watches);
-- line 746 ----------------------------------------
-- line 786 ----------------------------------------
          .             if (size_b <= size_a && size_b <= size_c)
          .               return find_other_two (solver, b_watches, a, c, b);
          .             assert (size_c <= size_a && size_c <= size_b);
          .             return find_other_two (solver, c_watches, a, b, c);
          .           }
          .           
          .           #endif
          .           
         24 ( 0.00%)  static bool learn_congruence_unit (closure *closure, unsigned unit) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         20 ( 0.00%)    assert (!solver->inconsistent);
         24 ( 0.00%)    const value value = solver->values[unit];
          8 ( 0.00%)    if (value > 0)
          6 ( 0.00%)      return true;
          4 ( 0.00%)    INC (congruent_units);
         15 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_units (1x)
          2 ( 0.00%)    if (value < 0) {
          .               solver->inconsistent = 1;
          .               LOG ("inconsistent congruence unit %s", LOGLIT (unit));
          .               CHECK_AND_ADD_EMPTY ();
          .               ADD_EMPTY_TO_PROOF ();
          .               return false;
          .             }
          6 ( 0.00%)    LOG ("learning congruence unit %s", LOGLIT (unit));
          5 ( 0.00%)    kissat_learned_unit (solver, unit);
      2,778 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (1x)
          6 ( 0.00%)    clause *conflict = kissat_probing_propagate (solver, 0, false);
        515 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (1x)
          2 ( 0.00%)    if (!conflict)
          2 ( 0.00%)      return true;
          .             assert (solver->inconsistent);
          .             LOG ("propagating congruence unit %s yields conflict", LOGLIT (unit));
          .             return false;
          8 ( 0.00%)  }
          .           
     38,530 ( 0.00%)  static void add_binary_clause (closure *closure, unsigned a, unsigned b) {
     11,559 ( 0.00%)    kissat *const solver = closure->solver;
     15,412 ( 0.00%)    if (solver->inconsistent)
          .               return;
     34,677 ( 0.00%)    if (a == NOT (b))
          .               return;
     42,383 ( 0.00%)    value a_value = VALUE (a);
      7,706 ( 0.00%)    if (a_value > 0)
          .               return;
     42,383 ( 0.00%)    value b_value = VALUE (b);
      7,706 ( 0.00%)    if (b_value > 0)
          .               return;
      3,853 ( 0.00%)    unsigned unit = INVALID_LIT;
     11,559 ( 0.00%)    if (a == b)
          .               unit = a;
      7,706 ( 0.00%)    else if (a_value < 0 && !b_value)
          .               unit = b;
     15,412 ( 0.00%)    else if (!a_value && b_value < 0)
          .               unit = a;
      7,706 ( 0.00%)    if (unit != INVALID_LIT) {
          .               (void) !learn_congruence_unit (closure, unit);
          .               return;
          .             }
     15,412 ( 0.00%)    assert (!a_value), assert (!b_value);
     23,118 ( 0.00%)    LOGBINARY (a, b, "adding representative");
     15,412 ( 0.00%)    if (solver->watching)
     20,790 ( 0.00%)      kissat_new_binary_clause (solver, a, b);
 13,884,347 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_binary_clause (2,970x)
          .             else {
      5,298 ( 0.00%)      kissat_new_unwatched_binary_clause (solver, a, b);
  3,449,472 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_unwatched_binary_clause (883x)
      8,830 ( 0.00%)      litpair litpair = {.lits = {a < b ? a : b, a < b ? b : a}};
     12,362 ( 0.00%)      PUSH_STACK (closure->binaries, litpair);
          .             }
     19,265 ( 0.00%)  }
          .           
      9,162 ( 0.00%)  static void schedule_literal (closure *closure, unsigned lit) {
      4,581 ( 0.00%)    kissat *const solver = closure->solver;
     12,216 ( 0.00%)    unsigned idx = IDX (lit);
      7,635 ( 0.00%)    bool *scheduled = closure->scheduled + idx;
      6,108 ( 0.00%)    if (*scheduled)
          .               return;
      3,054 ( 0.00%)    *scheduled = true;
     21,683 ( 0.00%)    ENQUEUE_FIFO (closure->schedule, lit);
     54,369 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (23x)
      9,162 ( 0.00%)    LOG ("scheduled propagation of merged %s", CLOGREPR (lit));
      3,054 ( 0.00%)  }
          .           
      7,635 ( 0.00%)  static unsigned dequeue_next_scheduled_literal (closure *closure) {
          .             unsigned res;
     29,133 ( 0.00%)    DEQUEUE_FIFO (closure->schedule, res);
        229 ( 0.00%)  => ???:0x000000000010c860 (4x)
          .           #if defined(LOGGING) || !defined(NDEBUG)
      4,581 ( 0.00%)    kissat *const solver = closure->solver;
          .           #endif
     12,216 ( 0.00%)    unsigned idx = IDX (res);
      7,635 ( 0.00%)    bool *scheduled = closure->scheduled + idx;
      6,108 ( 0.00%)    assert (*scheduled);
      3,054 ( 0.00%)    *scheduled = false;
      9,162 ( 0.00%)    LOG ("dequeued from schedule %s", CLOGREPR (res));
      1,527 ( 0.00%)    return res;
      3,054 ( 0.00%)  }
          .           
          .           static bool merge_literals (closure *closure, unsigned lit,
     13,824 ( 0.00%)                              unsigned other) {
      5,184 ( 0.00%)    kissat *const solver = closure->solver;
      8,640 ( 0.00%)    assert (!solver->inconsistent);
     10,368 ( 0.00%)    unsigned repr_lit = find_repr (closure, lit);
     38,467 ( 0.00%)  => build/../src/congruence.c:find_repr (1,728x)
     10,368 ( 0.00%)    unsigned repr_other = find_repr (closure, other);
     38,346 ( 0.00%)  => build/../src/congruence.c:find_repr (1,728x)
      5,184 ( 0.00%)    unsigned *const repr = closure->repr;
      5,184 ( 0.00%)    if (repr_lit == repr_other) {
      1,206 ( 0.00%)      LOG ("already merged %s and %s", LOGREPR (lit, repr),
          .                    LOGREPR (other, repr));
        402 ( 0.00%)      return false;
          .             }
      4,581 ( 0.00%)    const value *const values = solver->values;
      7,635 ( 0.00%)    const value lit_value = values[lit];
      7,635 ( 0.00%)    const value other_value = values[other];
      9,162 ( 0.00%)    assert (lit_value == values[repr_lit]);
      9,162 ( 0.00%)    assert (other_value == values[repr_other]);
      3,054 ( 0.00%)    if (lit_value) {
          .               if (lit_value == other_value) {
          .                 LOG ("not merging %s and %s assigned to the same value",
          .                      LOGREPR (lit, repr), LOGREPR (other, repr));
          .                 return false;
          .               }
          .               if (lit_value == -other_value) {
          .                 LOG ("merging inconsistently assigned %s and %s", LOGREPR (lit, repr),
          .                      LOGREPR (other, repr));
-- line 902 ----------------------------------------
-- line 907 ----------------------------------------
          .               }
          .               assert (!other_value);
          .               LOG ("merging assigned %s and unassigned %s", LOGREPR (lit, repr),
          .                    LOGREPR (other, repr));
          .               const unsigned unit = (lit_value < 0) ? NOT (other) : other;
          .               (void) learn_congruence_unit (closure, unit);
          .               return false;
          .             }
      6,108 ( 0.00%)    if (!lit_value && other_value) {
          .               LOG ("merging unassigned %s and assigned %s", LOGREPR (lit, repr),
          .                    LOGREPR (other, repr));
          .               const unsigned unit = (other_value < 0) ? NOT (lit) : lit;
          .               (void) learn_congruence_unit (closure, unit);
          .               return false;
          .             }
      3,054 ( 0.00%)    unsigned smaller = repr_lit;
      3,054 ( 0.00%)    unsigned larger = repr_other;
      4,581 ( 0.00%)    if (smaller > larger)
        726 ( 0.00%)      SWAP (unsigned, smaller, larger);
     10,689 ( 0.00%)    assert (repr[smaller] == smaller);
     10,689 ( 0.00%)    assert (repr[larger] > smaller);
     13,743 ( 0.00%)    if (repr_lit == NOT (repr_other)) {
          .               LOG ("merging clashing %s and %s", LOGREPR (lit, repr),
          .                    LOGREPR (other, repr));
          .               kissat_learned_unit (solver, smaller);
          .               solver->inconsistent = true;
          .               CHECK_AND_ADD_EMPTY ();
          .               ADD_EMPTY_TO_PROOF ();
          .               return false;
          .             }
      9,162 ( 0.00%)    LOG ("merging %s and %s", LOGREPR (lit, repr), LOGREPR (other, repr));
     12,216 ( 0.00%)    const unsigned not_smaller = NOT (smaller);
     12,216 ( 0.00%)    const unsigned not_larger = NOT (larger);
      9,162 ( 0.00%)    repr[larger] = smaller;
      9,162 ( 0.00%)    repr[not_larger] = not_smaller;
      9,162 ( 0.00%)    LOG ("congruence repr[%s] = %s", LOGLIT (larger), LOGLIT (smaller));
      9,162 ( 0.00%)    LOG ("congruence repr[%s] = %s", LOGLIT (not_larger),
          .                  LOGLIT (not_smaller));
      9,162 ( 0.00%)    add_binary_clause (closure, not_larger, smaller);
  5,885,967 ( 0.00%)  => build/../src/congruence.c:add_binary_clause (1,527x)
      9,162 ( 0.00%)    add_binary_clause (closure, larger, not_smaller);
  8,597,622 ( 0.00%)  => build/../src/congruence.c:add_binary_clause (1,527x)
      7,635 ( 0.00%)    schedule_literal (closure, larger);
    131,024 ( 0.00%)  => build/../src/congruence.c:schedule_literal (1,527x)
      6,108 ( 0.00%)    INC (congruent);
     22,905 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent (1,527x)
      1,527 ( 0.00%)    return true;
      5,184 ( 0.00%)  }
          .           
  3,196,904 ( 0.00%)  static void connect_occurrence (closure *closure, unsigned lit, gate *g) {
  1,198,839 ( 0.00%)    gates *const occurrences = closure->occurrences;
  1,198,839 ( 0.00%)    kissat *const solver = closure->solver;
 22,568,964 ( 0.01%)    PUSH_STACK (occurrences[lit], g);
107,592,559 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (284,295x)
  2,397,678 ( 0.00%)    LOG ("connected %s to gate[%zu]", LOGLIT (lit), g->id);
  1,598,452 ( 0.00%)  }
          .           
          .           static gate *new_gate (closure *closure, unsigned tag, unsigned hash,
  1,604,720 ( 0.00%)                         unsigned lhs, unsigned arity, const unsigned *lits) {
    481,416 ( 0.00%)    kissat *const solver = closure->solver;
    641,888 ( 0.00%)    const size_t bytes = bytes_gate (arity);
  1,444,248 ( 0.00%)  => build/../src/congruence.c:bytes_gate (160,472x)
    962,832 ( 0.00%)    gate *g = kissat_malloc (solver, bytes);
 20,666,008 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (160,472x)
          .           #if defined(LOGGING) || !defined(NDEBUG)
  1,123,304 ( 0.00%)    g->id = closure->gates_added++;
          .           #endif
  1,444,248 ( 0.00%)    g->tag = tag;
    481,416 ( 0.00%)    g->hash = hash;
    481,416 ( 0.00%)    g->lhs = lhs;
  1,604,720 ( 0.00%)    g->arity = arity;
    641,888 ( 0.00%)    g->garbage = false;
    641,888 ( 0.00%)    g->indexed = false;
    641,888 ( 0.00%)    g->marked = false;
    641,888 ( 0.00%)    g->shrunken = false;
  1,283,776 ( 0.00%)    memcpy (g->rhs, lits, arity * sizeof *lits);
  2,404,120 ( 0.00%)  => ???:0x000000000010c650 (160,472x)
  5,763,912 ( 0.00%)    for (all_rhs_literals_in_gate (lit, g))
  2,397,270 ( 0.00%)      connect_occurrence (closure, lit, g);
139,739,067 ( 0.06%)  => build/../src/congruence.c:connect_occurrence (399,545x)
  3,098,098 ( 0.00%)    LOGATE (g, "new");
    802,360 ( 0.00%)    index_gate (closure, g);
105,785,995 ( 0.04%)  => build/../src/congruence.c:index_gate (160,472x)
    962,832 ( 0.00%)    ADD (congruent_arity, arity);
  3,209,440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_arity (160,472x)
    641,888 ( 0.00%)    INC (congruent_gates);
  2,407,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_gates (160,472x)
    160,472 ( 0.00%)    return g;
    320,944 ( 0.00%)  }
          .           
          .           static gate *find_and_lits (closure *closure, unsigned *hash_ptr,
    280,116 ( 0.00%)                              unsigned arity, unsigned *lits, gate *except) {
     93,372 ( 0.00%)    kissat *const solver = closure->solver;
    186,744 ( 0.00%)    sort_lits (solver, arity, lits);
 11,130,482 ( 0.00%)  => build/../src/congruence.c:sort_lits (31,124x)
    217,868 ( 0.00%)    const unsigned hash = hash_lits (closure, AND_GATE, arity, lits);
  6,580,288 ( 0.00%)  => build/../src/congruence.c:hash_lits (31,124x)
    342,364 ( 0.00%)    gate *g = find_gate (closure, AND_GATE, hash, arity, lits, except);
 14,348,281 ( 0.01%)  => build/../src/congruence.c:find_gate (31,124x)
     93,372 ( 0.00%)    *hash_ptr = hash;
     62,248 ( 0.00%)    if (g) {
      1,197 ( 0.00%)      CLOGANDGATE (g, "found matching");
        665 ( 0.00%)      INC (congruent_matched_ands);
      1,995 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_matched_ands (133x)
          .             } else
    123,964 ( 0.00%)      LOGANDGATE (INVALID_GATE_ID, closure->repr, INVALID_LIT, arity, lits,
          .                           "could not find matching");
     31,124 ( 0.00%)    return g;
     62,248 ( 0.00%)  }
          .           
     14,980 ( 0.00%)  static gate *find_and_gate (closure *closure, unsigned *h, gate *g) {
     29,960 ( 0.00%)    return find_and_lits (closure, h, g->arity, g->rhs, g);
  2,242,341 ( 0.00%)  => build/../src/congruence.c:find_and_lits (2,140x)
      4,280 ( 0.00%)  }
          .           
    260,856 ( 0.00%)  static gate *new_and_gate (closure *closure, unsigned lhs) {
     86,952 ( 0.00%)    kissat *const solver = closure->solver;
     86,952 ( 0.00%)    unsigneds *all_lits = &closure->lits;
     86,952 ( 0.00%)    unsigneds *rhs_stack = &closure->rhs;
    115,936 ( 0.00%)    CLEAR_STACK (*rhs_stack);
  1,153,031 ( 0.00%)    for (all_stack (unsigned, lit, *all_lits))
    464,268 ( 0.00%)      if (lhs != lit) {
    754,632 ( 0.00%)        unsigned not_lit = NOT (lit);
    282,987 ( 0.00%)        assert (lhs != not_lit);
  1,226,529 ( 0.00%)        PUSH_STACK (*rhs_stack, not_lit);
      9,224 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (21x)
          .               }
    231,872 ( 0.00%)    const unsigned arity = SIZE_STACK (*rhs_stack);
     86,952 ( 0.00%)    unsigned *rhs_lits = BEGIN_STACK (*rhs_stack);
    347,808 ( 0.00%)    assert (arity + 1 == SIZE_STACK (*all_lits));
          .             unsigned hash;
    231,872 ( 0.00%)    gate *g = find_and_lits (closure, &hash, arity, rhs_lits, 0);
 31,313,987 ( 0.01%)  => build/../src/congruence.c:find_and_lits (28,984x)
     57,968 ( 0.00%)    if (g) {
        234 ( 0.00%)      if (merge_literals (closure, g->lhs, lhs))
     79,071 ( 0.00%)  => build/../src/congruence.c:merge_literals (26x)
         36 ( 0.00%)        INC (congruent_ands);
        135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_ands (9x)
         52 ( 0.00%)      return 0;
          .             }
    318,538 ( 0.00%)    g = new_gate (closure, AND_GATE, hash, lhs, arity, rhs_lits);
 55,953,581 ( 0.02%)  => build/../src/congruence.c:new_gate (28,958x)
    144,790 ( 0.00%)    check_and_gate_implied (closure, g);
1,737,694,434 ( 0.74%)  => build/../src/congruence.c:check_and_gate_implied (28,958x)
    173,748 ( 0.00%)    ADD (congruent_arity_ands, arity);
    579,160 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_arity_ands (28,958x)
    115,832 ( 0.00%)    INC (congruent_gates_ands);
    434,370 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_gates_ands (28,958x)
     28,958 ( 0.00%)    return g;
    144,920 ( 0.00%)  }
          .           
          .           #ifdef CHECKING_OR_PROVING
          .           
          .           static void copy_literals (kissat *solver, unsigneds *dst,
      1,344 ( 0.00%)                             const unsigneds *src) {
      5,952 ( 0.00%)    for (all_stack (unsigned, lit, *src))
      7,592 ( 0.00%)      PUSH_STACK (*dst, lit);
      3,243 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (8x)
      2,304 ( 0.00%)    PUSH_STACK (*dst, INVALID_LIT);
        576 ( 0.00%)  }
          .           
          .           static void simplify_and_add_to_proof_chain (kissat *solver, mark *marks,
          .                                                        unsigneds *unsimplified,
          .                                                        unsigneds *clause,
      1,728 ( 0.00%)                                               unsigneds *chain) {
      1,152 ( 0.00%)    assert (EMPTY_STACK (*clause));
          .           #ifndef NDEBUG
      5,952 ( 0.00%)    for (all_stack (unsigned, lit, *unsimplified))
      4,608 ( 0.00%)      assert (!(marks[lit] & 4));
          .           #endif
        192 ( 0.00%)    bool trivial = false;
      5,952 ( 0.00%)    for (all_stack (unsigned, lit, *unsimplified)) {
      2,880 ( 0.00%)      mark lit_mark = marks[lit];
      2,304 ( 0.00%)      if (lit_mark & 4)
          .                 continue;
      4,608 ( 0.00%)      const unsigned not_lit = NOT (lit);
      2,880 ( 0.00%)      const mark not_lit_mark = marks[not_lit];
      2,304 ( 0.00%)      if (not_lit_mark & 4) {
          .                 trivial = true;
          .                 break;
          .               }
        576 ( 0.00%)      lit_mark |= 4;
      2,880 ( 0.00%)      marks[lit] = lit_mark;
      7,488 ( 0.00%)      PUSH_STACK (*clause, lit);
          .             }
      5,952 ( 0.00%)    for (all_stack (unsigned, lit, *clause)) {
      2,880 ( 0.00%)      mark mark = marks[lit];
      2,304 ( 0.00%)      assert (mark & 4);
        576 ( 0.00%)      mark &= ~4u;
      2,880 ( 0.00%)      marks[lit] = mark;
          .             }
        768 ( 0.00%)    if (!trivial) {
      3,456 ( 0.00%)      CHECK_AND_ADD_STACK (*clause);
  1,435,782 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (192x)
        768 ( 0.00%)      ADD_STACK_TO_PROOF (*clause);
      1,152 ( 0.00%)      copy_literals (solver, chain, clause);
     21,011 ( 0.00%)  => build/../src/congruence.c:copy_literals (192x)
          .             }
        768 ( 0.00%)    CLEAR_STACK (*clause);
        576 ( 0.00%)  }
          .           
          .           #define SIMPLIFY_AND_ADD_TO_PROOF_CHAIN() \
          .             simplify_and_add_to_proof_chain (solver, marks, unsimplified, clause, \
          .                                              chain)
          .           
          .           static void add_xor_matching_proof_chain (closure *closure, gate *g,
      1,416 ( 0.00%)                                            unsigned lhs1, unsigned lhs2) {
        531 ( 0.00%)    if (lhs1 == lhs2)
        258 ( 0.00%)      return;
        144 ( 0.00%)    kissat *const solver = closure->solver;
        288 ( 0.00%)    if (!kissat_checking_or_proving (solver))
      1,008 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_checking_or_proving (48x)
          .               return;
        288 ( 0.00%)    LOG ("starting XOR matching proof chain");
        144 ( 0.00%)    unsigneds *const unsimplified = &closure->unsimplified;
        144 ( 0.00%)    unsigneds *const clause = &solver->clause;
        144 ( 0.00%)    unsigneds *const chain = &closure->chain;
        144 ( 0.00%)    mark *const marks = solver->marks;
        288 ( 0.00%)    assert (EMPTY_STACK (*unsimplified));
        288 ( 0.00%)    assert (EMPTY_STACK (*chain));
        240 ( 0.00%)    assert (g->arity > 1);
        240 ( 0.00%)    const unsigned reduced_arity = g->arity - 1;
        432 ( 0.00%)    for (unsigned i = 0; i != reduced_arity; i++)
        792 ( 0.00%)      PUSH_STACK (*unsimplified, g->rhs[i]);
        558 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (2x)
        384 ( 0.00%)    const unsigned not_lhs1 = NOT (lhs1);
        384 ( 0.00%)    const unsigned not_lhs2 = NOT (lhs2);
          .             do {
        384 ( 0.00%)      const size_t size = SIZE_STACK (*unsimplified);
         96 ( 0.00%)      assert (size < 32);
      1,200 ( 0.00%)      for (unsigned i = 0; i != 1u << size; i++) {
      1,248 ( 0.00%)        PUSH_STACK (*unsimplified, not_lhs1);
      1,272 ( 0.00%)        PUSH_STACK (*unsimplified, lhs2);
        622 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (2x)
        768 ( 0.00%)        SIMPLIFY_AND_ADD_TO_PROOF_CHAIN ();
    865,854 ( 0.00%)  => build/../src/congruence.c:simplify_and_add_to_proof_chain (96x)
        480 ( 0.00%)        unsimplified->end -= 2;
      1,248 ( 0.00%)        PUSH_STACK (*unsimplified, lhs1);
      1,248 ( 0.00%)        PUSH_STACK (*unsimplified, not_lhs2);
        768 ( 0.00%)        SIMPLIFY_AND_ADD_TO_PROOF_CHAIN ();
    658,523 ( 0.00%)  => build/../src/congruence.c:simplify_and_add_to_proof_chain (96x)
        480 ( 0.00%)        unsimplified->end -= 2;
        480 ( 0.00%)        inc_lits (solver, unsimplified);
      5,040 ( 0.00%)  => build/../src/congruence.c:inc_lits (96x)
          .               }
        288 ( 0.00%)      assert (!EMPTY_STACK (*unsimplified));
        240 ( 0.00%)      unsimplified->end--;
        288 ( 0.00%)    } while (!EMPTY_STACK (*unsimplified));
        288 ( 0.00%)    LOG ("finished XOR matching proof chain");
        354 ( 0.00%)  }
          .           
        885 ( 0.00%)  static void delete_proof_chain (closure *closure) {
        531 ( 0.00%)    kissat *const solver = closure->solver;
        531 ( 0.00%)    unsigneds *chain = &closure->chain;
      1,062 ( 0.00%)    if (!kissat_checking_or_proving (solver)) {
      3,717 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_checking_or_proving (177x)
          .               assert (EMPTY_STACK (*chain));
          .               return;
          .             }
      1,062 ( 0.00%)    if (EMPTY_STACK (*chain))
        129 ( 0.00%)      return;
        288 ( 0.00%)    LOG ("starting deletion of proof chain");
        144 ( 0.00%)    unsigneds *clause = &solver->clause;
        288 ( 0.00%)    assert (EMPTY_STACK (*clause));
        144 ( 0.00%)    const unsigned *start = BEGIN_STACK (*chain);
        144 ( 0.00%)    const unsigned *end = END_STACK (*chain);
         96 ( 0.00%)    const unsigned *p = start;
      2,496 ( 0.00%)    while (p != end) {
      2,304 ( 0.00%)      const unsigned lit = *p;
      1,536 ( 0.00%)      if (lit == INVALID_LIT) {
      2,496 ( 0.00%)        while (start != p) {
      2,880 ( 0.00%)          const unsigned other = *start++;
      7,488 ( 0.00%)          PUSH_STACK (*clause, other);
          .                 }
      3,456 ( 0.00%)        REMOVE_CHECKER_STACK (*clause);
    381,414 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (192x)
        768 ( 0.00%)        DELETE_STACK_FROM_PROOF (*clause);
        768 ( 0.00%)        CLEAR_STACK (*clause);
        192 ( 0.00%)        start++;
          .               }
        768 ( 0.00%)      p++;
          .             }
        288 ( 0.00%)    assert (EMPTY_STACK (*clause));
        144 ( 0.00%)    assert (start == end);
        192 ( 0.00%)    CLEAR_STACK (*chain);
        288 ( 0.00%)    LOG ("finished deletion of proof chain");
        354 ( 0.00%)  }
          .           
          .           #else
          .           
          .           #define add_xor_matching_proof_chain(...) \
          .             do { \
          .             } while (0)
          .           
          .           #define delete_proof_chain(...) \
          .             do { \
          .             } while (0)
          .           
          .           #endif
          .           
          .           static gate *find_xor_lits (closure *closure, unsigned *hash_ptr,
    839,403 ( 0.00%)                              unsigned arity, unsigned *lits, gate *except) {
    279,801 ( 0.00%)    kissat *const solver = closure->solver;
    559,602 ( 0.00%)    sort_lits (solver, arity, lits);
 17,447,355 ( 0.01%)  => build/../src/congruence.c:sort_lits (93,267x)
    652,869 ( 0.00%)    const unsigned hash = hash_lits (closure, XOR_GATE, arity, lits);
 17,376,124 ( 0.01%)  => build/../src/congruence.c:hash_lits (93,267x)
  1,025,937 ( 0.00%)    gate *g = find_gate (closure, XOR_GATE, hash, arity, lits, except);
 40,734,212 ( 0.02%)  => build/../src/congruence.c:find_gate (93,267x)
    279,801 ( 0.00%)    *hash_ptr = hash;
    186,534 ( 0.00%)    if (g) {
      1,593 ( 0.00%)      CLOGXORGATE (g, "found matching");
        885 ( 0.00%)      INC (congruent_matched_xors);
      2,655 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_matched_xors (177x)
          .             } else
    372,360 ( 0.00%)      LOGXORGATE (INVALID_GATE_ID, closure->repr, INVALID_LIT, arity, lits,
          .                           "tried but did not find matching");
     93,267 ( 0.00%)    return g;
    186,534 ( 0.00%)  }
          .           
      3,451 ( 0.00%)  static gate *find_xor_gate (closure *closure, unsigned *h, gate *g) {
      6,902 ( 0.00%)    return find_xor_lits (closure, h, g->arity, g->rhs, g);
    473,758 ( 0.00%)  => build/../src/congruence.c:find_xor_lits (493x)
        986 ( 0.00%)  }
          .           
    834,966 ( 0.00%)  static gate *new_xor_gate (closure *closure, unsigned lhs) {
    278,322 ( 0.00%)    kissat *const solver = closure->solver;
    278,322 ( 0.00%)    unsigneds *all_lits = &closure->lits;
    278,322 ( 0.00%)    unsigneds *rhs_stack = &closure->rhs;
    371,096 ( 0.00%)    CLEAR_STACK (*rhs_stack);
    742,192 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
  2,900,242 ( 0.00%)    for (all_stack (unsigned, lit, *all_lits))
  1,707,158 ( 0.00%)      if (lit != lhs && lit != not_lhs) {
  1,701,108 ( 0.00%)        assert (!NEGATED (lit));
  2,457,156 ( 0.00%)        PUSH_STACK (*rhs_stack, lit);
          .               }
    742,192 ( 0.00%)    const unsigned arity = SIZE_STACK (*rhs_stack);
    278,322 ( 0.00%)    unsigned *rhs_lits = BEGIN_STACK (*rhs_stack);
  1,113,288 ( 0.00%)    assert (arity + 1 == SIZE_STACK (*all_lits));
          .             unsigned hash;
    742,192 ( 0.00%)    gate *g = find_xor_lits (closure, &hash, arity, rhs_lits, 0);
 79,565,174 ( 0.03%)  => build/../src/congruence.c:find_xor_lits (92,774x)
    185,548 ( 0.00%)    if (g) {
        308 ( 0.00%)      add_xor_matching_proof_chain (closure, g, g->lhs, lhs);
    974,965 ( 0.00%)  => build/../src/congruence.c:add_xor_matching_proof_chain (44x)
        396 ( 0.00%)      if (merge_literals (closure, g->lhs, lhs))
    265,743 ( 0.00%)  => build/../src/congruence.c:merge_literals (44x)
        128 ( 0.00%)        INC (congruent_xors);
        480 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_xors (32x)
        220 ( 0.00%)      if (!solver->inconsistent)
        132 ( 0.00%)        delete_proof_chain (closure);
    271,698 ( 0.00%)  => build/../src/congruence.c:delete_proof_chain (44x)
         88 ( 0.00%)      return 0;
          .             }
  1,020,030 ( 0.00%)    g = new_gate (closure, XOR_GATE, hash, lhs, arity, rhs_lits);
167,130,260 ( 0.07%)  => build/../src/congruence.c:new_gate (92,730x)
    463,650 ( 0.00%)    check_xor_gate_implied (closure, g);
2,261,322,153 ( 0.96%)  => build/../src/congruence.c:check_xor_gate_implied (92,730x)
    556,380 ( 0.00%)    ADD (congruent_arity_xors, arity);
  1,854,600 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_arity_xors (92,730x)
    370,920 ( 0.00%)    INC (congruent_gates_xors);
  1,390,950 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_gates_xors (92,730x)
     92,730 ( 0.00%)    return g;
    463,870 ( 0.00%)  }
          .           
          .           #ifdef CHECKING_OR_PROVING
          .           
          .           static void add_ite_matching_proof_chain (closure *closure, gate *g,
          .                                                     unsigned lhs1, unsigned lhs2) {
          .             if (lhs1 == lhs2)
          .               return;
          .             kissat *const solver = closure->solver;
-- line 1228 ----------------------------------------
-- line 1292 ----------------------------------------
          .           #define add_ite_matching_proof_chain(...) \
          .             do { \
          .             } while (0)
          .           
          .           #define add_ite_turned_and_binary_clauses add_ite_matching_proof_chain
          .           
          .           #endif
          .           
    239,538 ( 0.00%)  static bool normalize_ite_lits (kissat *solver, unsigned *lits) {
          .           #ifdef NDEBUG
          .             (void) solver;
          .           #endif
    479,076 ( 0.00%)    if (NEGATED (lits[0])) {
          .               lits[0] = NOT (lits[0]);
          .               SWAP (unsigned, lits[1], lits[2]);
          .             }
    558,922 ( 0.00%)    if (!NEGATED (lits[1]))
     79,476 ( 0.00%)      return false;
      2,775 ( 0.00%)    lits[1] = NOT (lits[1]);
      2,775 ( 0.00%)    lits[2] = NOT (lits[2]);
        185 ( 0.00%)    return true;
     79,846 ( 0.00%)  }
          .           
          .           static gate *find_ite_lits (closure *closure, unsigned *hash_ptr,
          .                                       bool *negate_lhs_ptr, unsigned arity,
    399,230 ( 0.00%)                              unsigned *lits, gate *except) {
    119,769 ( 0.00%)    kissat *const solver = closure->solver;
     79,846 ( 0.00%)    assert (arity == 3);
    159,692 ( 0.00%)    LOGITEGATE (INVALID_GATE_ID, closure->repr, INVALID_LIT, lits[0], lits[1],
          .                         lits[2], "finding not yet normalized");
    239,538 ( 0.00%)    bool negate_lhs = normalize_ite_lits (solver, lits);
  1,442,593 ( 0.00%)  => build/../src/congruence.c:normalize_ite_lits (39,923x)
          .           #ifdef LOGGING
     79,846 ( 0.00%)    if (negate_lhs)
      1,110 ( 0.00%)      LOG ("normalization forces negation of LHS");
    159,692 ( 0.00%)    LOGITEGATE (INVALID_GATE_ID, closure->repr, INVALID_LIT, lits[0], lits[1],
          .                         lits[2], "normalized");
          .           #endif
    119,769 ( 0.00%)    *negate_lhs_ptr = negate_lhs;
    279,461 ( 0.00%)    const unsigned hash = hash_lits (closure, ITE_GATE, arity, lits);
  8,583,445 ( 0.00%)  => build/../src/congruence.c:hash_lits (39,923x)
    439,153 ( 0.00%)    gate *g = find_gate (closure, ITE_GATE, hash, arity, lits, except);
 18,913,765 ( 0.01%)  => build/../src/congruence.c:find_gate (39,923x)
    119,769 ( 0.00%)    *hash_ptr = hash;
     79,846 ( 0.00%)    if (g) {
          .               CLOGITEGATE (g, "found matching");
          .               INC (congruent_matched_ites);
          .             } else
    159,692 ( 0.00%)      LOGITEGATE (INVALID_GATE_ID, closure->repr, INVALID_LIT, lits[0],
          .                           lits[1], lits[2], "tried but did not find matching");
     39,923 ( 0.00%)    return g;
     79,846 ( 0.00%)  }
          .           
          .           static gate *find_ite_gate (closure *closure, unsigned *h,
      9,112 ( 0.00%)                              bool *negate_lhs_ptr, gate *g) {
     17,085 ( 0.00%)    return find_ite_lits (closure, h, negate_lhs_ptr, g->arity, g->rhs, g);
    870,567 ( 0.00%)  => build/../src/congruence.c:find_ite_lits (1,139x)
      2,278 ( 0.00%)  }
          .           
          .           static gate *new_ite_gate (closure *closure, unsigned lhs, unsigned cond,
  3,260,010 ( 0.00%)                             unsigned then_lit, unsigned else_lit) {
    652,002 ( 0.00%)    kissat *const solver = closure->solver;
  1,738,672 ( 0.00%)    const unsigned not_then_lit = NOT (then_lit);
    652,002 ( 0.00%)    if (else_lit == not_then_lit) {
          .           #ifdef LOGGING
  1,606,932 ( 0.00%)      if (NEGATED (then_lit))
    784,284 ( 0.00%)        LOG ("skipping ternary XOR gate %s := %s ^ %s", LOGLIT (lhs),
          .                      LOGLIT (cond), LOGLIT (not_then_lit));
          .               else
    287,004 ( 0.00%)        LOG ("skipping ternary XOR gate %s := %s ^ %s", LOGLIT (NOT (lhs)),
          .                      LOGLIT (cond), LOGLIT (then_lit));
          .           #endif
    357,096 ( 0.00%)      return 0;
          .             }
    116,358 ( 0.00%)    if (else_lit == then_lit) {
         12 ( 0.00%)      LOG ("found trivial ITE gate %s := %s ? %s : %s", LOGLIT (lhs),
          .                    LOGLIT (cond), LOGLIT (then_lit), LOGLIT (else_lit));
         16 ( 0.00%)      if (merge_literals (closure, lhs, then_lit))
      5,849 ( 0.00%)  => build/../src/congruence.c:merge_literals (2x)
          4 ( 0.00%)        INC (congruent_trivial_ite);
         15 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_trivial_ite (1x)
          4 ( 0.00%)      return 0;
          .             }
    116,352 ( 0.00%)    unsigneds *rhs_stack = &closure->rhs;
    155,136 ( 0.00%)    CLEAR_STACK (*rhs_stack);
    504,192 ( 0.00%)    PUSH_STACK (*rhs_stack, cond);
    504,192 ( 0.00%)    PUSH_STACK (*rhs_stack, then_lit);
    504,192 ( 0.00%)    PUSH_STACK (*rhs_stack, else_lit);
    310,272 ( 0.00%)    assert (SIZE_STACK (*rhs_stack) == 3);
     38,784 ( 0.00%)    const unsigned arity = 3;
    116,352 ( 0.00%)    unsigned *rhs_lits = BEGIN_STACK (*rhs_stack);
          .             bool negate_lhs;
          .             unsigned hash;
    387,840 ( 0.00%)    gate *g = find_ite_lits (closure, &hash, &negate_lhs, arity, rhs_lits, 0);
 30,625,418 ( 0.01%)  => build/../src/congruence.c:find_ite_lits (38,784x)
     77,568 ( 0.00%)    if (g) {
          .               if (negate_lhs)
          .                 lhs = NOT (lhs);
          .               add_ite_matching_proof_chain (closure, g, g->lhs, lhs);
          .               if (merge_literals (closure, g->lhs, lhs))
          .                 INC (congruent_ites);
          .               if (!solver->inconsistent)
          .                 delete_proof_chain (closure);
          .               return 0;
          .             }
    116,352 ( 0.00%)    if (negate_lhs)
      1,104 ( 0.00%)      lhs = NOT (lhs);
    426,624 ( 0.00%)    g = new_gate (closure, ITE_GATE, hash, lhs, arity, rhs_lits);
 79,397,181 ( 0.03%)  => build/../src/congruence.c:new_gate (38,784x)
    193,920 ( 0.00%)    check_ite_gate_implied (closure, g);
952,173,836 ( 0.40%)  => build/../src/congruence.c:check_ite_gate_implied (38,784x)
    155,136 ( 0.00%)    INC (congruent_gates_ites);
    581,760 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_gates_ites (38,784x)
     38,784 ( 0.00%)    return g;
  1,956,006 ( 0.00%)  }
          .           
      1,764 ( 0.00%)  static void mark_gate_as_garbage (closure *closure, gate *g) {
        882 ( 0.00%)    kissat *const solver = closure->solver;
      2,058 ( 0.00%)    assert (!g->garbage);
      1,176 ( 0.00%)    g->garbage = true;
      5,046 ( 0.00%)    LOGATE (g, "marked as garbage");
      4,134 ( 0.00%)    PUSH_STACK (closure->garbage, g);
     30,510 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (24x)
        882 ( 0.00%)  }
          .           
          .           static void shrink_gate (closure *closure, gate *g,
     18,242 ( 0.00%)                           const unsigned *new_end_rhs) {
      7,818 ( 0.00%)    unsigned *const rhs = g->rhs;
     10,424 ( 0.00%)    const unsigned old_arity = g->arity;
     13,030 ( 0.00%)    unsigned *const old_end_rhs = rhs + old_arity;
      7,818 ( 0.00%)    assert (rhs <= new_end_rhs);
      7,818 ( 0.00%)    assert (new_end_rhs <= old_end_rhs);
      7,818 ( 0.00%)    if (new_end_rhs == old_end_rhs)
      2,560 ( 0.00%)      return;
        184 ( 0.00%)    const unsigned new_arity = new_end_rhs - rhs;
        322 ( 0.00%)    if (!g->shrunken) {
        230 ( 0.00%)      assert (old_end_rhs[-1] != INVALID_LIT);
        138 ( 0.00%)      old_end_rhs[-1] = INVALID_LIT;
        184 ( 0.00%)      g->shrunken = true;
          .             }
        460 ( 0.00%)    g->arity = new_arity;
          .           #ifdef LOGGING
        138 ( 0.00%)    kissat *const solver = closure->solver;
        869 ( 0.00%)    LOGATE (g, "shrunken");
          .           #else
          .             (void) closure;
          .           #endif
      5,212 ( 0.00%)  }
          .           
     12,852 ( 0.00%)  static bool skip_and_gate (closure *closure, gate *g) {
     10,710 ( 0.00%)    assert (g->tag == AND_GATE);
     10,710 ( 0.00%)    if (g->garbage)
          2 ( 0.00%)      return true;
      6,423 ( 0.00%)    kissat *const solver = closure->solver;
      6,423 ( 0.00%)    const value *const values = solver->values;
      6,423 ( 0.00%)    const unsigned lhs = g->lhs;
     10,705 ( 0.00%)    const value value_lhs = values[lhs];
      4,282 ( 0.00%)    if (value_lhs > 0) {
          .               mark_gate_as_garbage (closure, g);
          .               return true;
          .             }
     10,705 ( 0.00%)    assert (g->arity > 1);
      2,141 ( 0.00%)    return false;
      4,284 ( 0.00%)  }
          .           
     36,670 ( 0.00%)  static bool gate_contains (gate *g, unsigned lit) {
    178,142 ( 0.00%)    for (all_rhs_literals_in_gate (other, g))
     45,781 ( 0.00%)      if (lit == other)
     14,534 ( 0.00%)        return true;
         67 ( 0.00%)    return false;
     14,668 ( 0.00%)  }
          .           
      3,269 ( 0.00%)  static bool rewriting_lhs (closure *closure, gate *g, unsigned dst) {
          .           #ifndef NDEBUG
      1,401 ( 0.00%)    kissat *const solver = closure->solver;
          .           #endif
      7,340 ( 0.00%)    if (dst != g->lhs && dst != NOT (g->lhs))
        912 ( 0.00%)      return false;
         55 ( 0.00%)    mark_gate_as_garbage (closure, g);
      1,176 ( 0.00%)  => build/../src/congruence.c:mark_gate_as_garbage (11x)
         11 ( 0.00%)    return true;
        934 ( 0.00%)  }
          .           
          .           static void shrink_and_gate (closure *closure, gate *g,
          .                                        unsigned *new_end_rhs, unsigned falsifies,
     19,269 ( 0.00%)                               unsigned clashing) {
     10,705 ( 0.00%)    assert (g->tag == AND_GATE);
          .           #ifndef NDEBUG
      6,423 ( 0.00%)    kissat *const solver = closure->solver;
          .           #endif
      4,282 ( 0.00%)    if (falsifies != INVALID_LIT) {
          .               assert (g->arity);
          .               g->rhs[0] = falsifies;
          .               new_end_rhs = g->rhs + 1;
      4,282 ( 0.00%)    } else if (clashing != INVALID_LIT) {
          .               assert (1 < g->arity);
          .               g->rhs[0] = clashing;
          .               g->rhs[1] = NOT (clashing);
          .               new_end_rhs = g->rhs + 2;
          .             }
     12,846 ( 0.00%)    shrink_gate (closure, g, new_end_rhs);
     66,420 ( 0.00%)  => build/../src/congruence.c:shrink_gate (2,141x)
      6,423 ( 0.00%)  }
          .           
          .           static void update_and_gate (closure *closure, gate *g, unsigned falsifies,
     23,551 ( 0.00%)                               unsigned clashing) {
     10,705 ( 0.00%)    assert (g->tag == AND_GATE);
      2,141 ( 0.00%)    bool garbage = true;
      6,423 ( 0.00%)    kissat *const solver = closure->solver;
      8,564 ( 0.00%)    if (falsifies != INVALID_LIT || clashing != INVALID_LIT)
          .               (void) learn_congruence_unit (closure, NOT (g->lhs));
     10,705 ( 0.00%)    else if (g->arity == 1) {
         15 ( 0.00%)      const value value_lhs = VALUE (g->lhs);
          2 ( 0.00%)      if (value_lhs > 0)
          .                 (void) learn_congruence_unit (closure, g->rhs[0]);
          2 ( 0.00%)      else if (value_lhs < 0)
          .                 (void) learn_congruence_unit (closure, NOT (g->rhs[0]));
         10 ( 0.00%)      else if (merge_literals (closure, g->lhs, g->rhs[0])) {
        100 ( 0.00%)  => build/../src/congruence.c:merge_literals (1x)
          .                 INC (congruent_unary_ands);
          .                 INC (congruent_unary);
          .               }
          .             } else {
          .               unsigned hash;
     14,980 ( 0.00%)      gate *h = find_and_gate (closure, &hash, g);
  2,291,561 ( 0.00%)  => build/../src/congruence.c:find_and_gate (2,140x)
      4,280 ( 0.00%)      if (h) {
        214 ( 0.00%)        assert (garbage);
      1,070 ( 0.00%)        if (merge_literals (closure, g->lhs, h->lhs))
  5,144,884 ( 0.00%)  => build/../src/congruence.c:merge_literals (107x)
        475 ( 0.00%)          INC (congruent_ands);
      1,425 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_ands (95x)
          .               } else {
     10,165 ( 0.00%)        remove_gate (closure, g);
    427,897 ( 0.00%)  => build/../src/congruence.c:remove_gate (2,033x)
      6,099 ( 0.00%)        g->hash = hash;
     10,165 ( 0.00%)        index_gate (closure, g);
    968,610 ( 0.00%)  => build/../src/congruence.c:index_gate (2,033x)
      2,033 ( 0.00%)        garbage = false;
          .               }
          .             }
      4,822 ( 0.00%)    if (garbage && !solver->inconsistent)
        540 ( 0.00%)      mark_gate_as_garbage (closure, g);
     10,511 ( 0.00%)  => build/../src/congruence.c:mark_gate_as_garbage (108x)
     12,846 ( 0.00%)  }
          .           
          6 ( 0.00%)  static void simplify_and_gate (closure *closure, gate *g) {
          7 ( 0.00%)    if (skip_and_gate (closure, g))
         40 ( 0.00%)  => build/../src/congruence.c:skip_and_gate (1x)
          .               return;
          3 ( 0.00%)    kissat *const solver = closure->solver;
          3 ( 0.00%)    const value *const values = solver->values;
          9 ( 0.00%)    CLOGANDGATE (g, "simplifying");
          4 ( 0.00%)    const unsigned old_arity = g->arity;
          3 ( 0.00%)    unsigned *const rhs = g->rhs;
          5 ( 0.00%)    unsigned *const end_of_rhs = rhs + old_arity;
          2 ( 0.00%)    const unsigned *p = rhs;
          2 ( 0.00%)    unsigned *q = rhs;
          1 ( 0.00%)    unsigned falsifies = INVALID_LIT;
         10 ( 0.00%)    while (p != end_of_rhs) {
         10 ( 0.00%)      const unsigned lit = *p++;
         10 ( 0.00%)      const value value = values[lit];
          4 ( 0.00%)      if (value > 0)
          1 ( 0.00%)        continue;
          2 ( 0.00%)      if (value < 0) {
          .                 LOG ("found falsifying literal %s", LOGLIT (lit));
          .                 falsifies = lit;
          .                 continue;
          .               }
          5 ( 0.00%)      *q++ = lit;
          .             }
          7 ( 0.00%)    shrink_and_gate (closure, g, q, falsifies, INVALID_LIT);
        110 ( 0.00%)  => build/../src/congruence.c:shrink_and_gate (1x)
          9 ( 0.00%)    CLOGANDGATE (g, "simplified");
          5 ( 0.00%)    check_and_gate_implied (closure, g);
      8,509 ( 0.00%)  => build/../src/congruence.c:check_and_gate_implied (1x)
          6 ( 0.00%)    update_and_gate (closure, g, falsifies, INVALID_LIT);
        502 ( 0.00%)  => build/../src/congruence.c:update_and_gate (1x)
          4 ( 0.00%)    INC (congruent_simplified);
         15 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_simplified (1x)
          5 ( 0.00%)    INC (congruent_simplified_ands);
         15 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_simplified_ands (1x)
          2 ( 0.00%)  }
          .           
          .           static void rewrite_and_gate (closure *closure, gate *g, unsigned dst,
     19,269 ( 0.00%)                                unsigned src) {
     14,987 ( 0.00%)    if (skip_and_gate (closure, g))
     85,620 ( 0.00%)  => build/../src/congruence.c:skip_and_gate (2,141x)
          2 ( 0.00%)      return;
     17,120 ( 0.00%)    if (!gate_contains (g, src))
     90,320 ( 0.00%)  => build/../src/congruence.c:gate_contains (2,140x)
          .               return;
      4,280 ( 0.00%)    assert (src != INVALID_LIT);
      4,280 ( 0.00%)    assert (dst != INVALID_LIT);
      6,420 ( 0.00%)    kissat *const solver = closure->solver;
      6,420 ( 0.00%)    const value *const values = solver->values;
     21,400 ( 0.00%)    assert (values[src] == values[dst]);
     19,260 ( 0.00%)    CLOGANDGATE (g, "rewriting %s by %s in", CLOGREPR (src), CLOGREPR (dst));
      8,560 ( 0.00%)    const unsigned old_arity = g->arity;
     23,540 ( 0.00%)    const unsigned not_lhs = NOT (g->lhs);
      6,420 ( 0.00%)    unsigned *const rhs = g->rhs;
     10,700 ( 0.00%)    unsigned *const end_of_rhs = rhs + old_arity;
      4,280 ( 0.00%)    const unsigned *p = rhs;
      4,280 ( 0.00%)    unsigned *q = rhs;
      2,140 ( 0.00%)    unsigned falsifies = INVALID_LIT;
      2,140 ( 0.00%)    unsigned clashing = INVALID_LIT;
     17,120 ( 0.00%)    const unsigned not_dst = NOT (dst);
      4,280 ( 0.00%)    unsigned dst_count = 0, not_dst_count = 0;
     30,943 ( 0.00%)    while (p != end_of_rhs) {
     37,305 ( 0.00%)      unsigned lit = *p++;
     22,383 ( 0.00%)      if (lit == src)
      4,280 ( 0.00%)        lit = dst;
     22,383 ( 0.00%)      if (lit == not_lhs) {
          .                 LOG ("found negated LHS literal %s", LOGLIT (lit));
          .                 clashing = lit;
          .                 break;
          .               }
     37,305 ( 0.00%)      const value value = values[lit];
     14,922 ( 0.00%)      if (value > 0)
          .                 continue;
     14,922 ( 0.00%)      if (value < 0) {
          .                 LOG ("found falsifying literal %s", LOGLIT (lit));
          .                 falsifies = lit;
          .                 break;
          .               }
     22,383 ( 0.00%)      if (lit == dst) {
      4,280 ( 0.00%)        if (not_dst_count) {
          .                   LOG ("clashing literals %s and %s", LOGLIT (not_dst), LOGLIT (dst));
          .                   clashing = not_dst;
          .                   break;
          .                 }
     10,700 ( 0.00%)        if (dst_count++)
          .                   continue;
          .               }
     22,383 ( 0.00%)      if (lit == not_dst) {
          .                 if (dst_count) {
          .                   assert (!not_dst_count);
          .                   LOG ("clashing literals %s and %s", LOGLIT (dst), LOGLIT (not_dst));
          .                   clashing = dst;
          .                   break;
          .                 }
          .                 assert (!not_dst_count);
          .                 not_dst_count++;
          .               }
     37,305 ( 0.00%)      *q++ = lit;
          .             }
      4,280 ( 0.00%)    assert (dst_count <= 2);
      4,280 ( 0.00%)    assert (not_dst_count <= 1);
     17,120 ( 0.00%)    shrink_and_gate (closure, g, q, falsifies, clashing);
    130,540 ( 0.00%)  => build/../src/congruence.c:shrink_and_gate (2,140x)
     19,260 ( 0.00%)    CLOGANDGATE (g, "rewritten");
     10,700 ( 0.00%)    check_and_gate_implied (closure, g);
 63,599,521 ( 0.03%)  => build/../src/congruence.c:check_and_gate_implied (2,140x)
     12,840 ( 0.00%)    update_and_gate (closure, g, falsifies, clashing);
  8,974,293 ( 0.00%)  => build/../src/congruence.c:update_and_gate (2,140x)
      8,560 ( 0.00%)    INC (congruent_rewritten);
     32,100 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_rewritten (2,140x)
     10,700 ( 0.00%)    INC (congruent_rewritten_ands);
     32,100 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_rewritten_ands (2,140x)
      6,423 ( 0.00%)  }
          .           
      2,505 ( 0.00%)  static bool skip_xor_gate (gate *g) {
      2,505 ( 0.00%)    assert (g->tag == XOR_GATE);
      2,505 ( 0.00%)    if (g->garbage)
         50 ( 0.00%)      return true;
      2,380 ( 0.00%)    assert (g->arity > 1);
        476 ( 0.00%)    return false;
      1,002 ( 0.00%)  }
          .           
          .           #ifdef CHECKING_OR_PROVING
          .           
          .           static void add_xor_shrinking_proof_chain (closure *closure, gate *g,
        252 ( 0.00%)                                             unsigned pivot) {
        108 ( 0.00%)    kissat *const solver = closure->solver;
        216 ( 0.00%)    if (!kissat_checking_or_proving (solver))
        756 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_checking_or_proving (36x)
          .               return;
        216 ( 0.00%)    LOG ("starting XOR shrinking proof chain");
        108 ( 0.00%)    unsigneds *clause = &solver->clause;
        216 ( 0.00%)    assert (EMPTY_STACK (*clause));
        450 ( 0.00%)    for (unsigned i = 0; i != g->arity; i++) {
        165 ( 0.00%)      unsigned lit = g->rhs[i];
        429 ( 0.00%)      PUSH_STACK (*clause, lit);
          .             }
        108 ( 0.00%)    const unsigned lhs = g->lhs;
        288 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
        468 ( 0.00%)    PUSH_STACK (*clause, not_lhs);
        288 ( 0.00%)    const unsigned parity = NEGATED (not_lhs);
        252 ( 0.00%)    assert (parity == parity_lits (solver, clause));
      1,755 ( 0.00%)  => build/../src/congruence.c:parity_lits (36x)
        288 ( 0.00%)    const unsigned not_pivot = NOT (pivot);
        288 ( 0.00%)    const size_t size = SIZE_STACK (*clause);
         72 ( 0.00%)    assert (size < 32);
        216 ( 0.00%)    const unsigned end = 1u << size;
        732 ( 0.00%)    for (unsigned i = 0; i != end; i++) {
      2,205 ( 0.00%)      while (i && parity != parity_lits (solver, clause))
     11,760 ( 0.00%)  => build/../src/congruence.c:parity_lits (237x)
        675 ( 0.00%)        inc_lits (solver, clause);
      9,195 ( 0.00%)  => build/../src/congruence.c:inc_lits (135x)
      1,794 ( 0.00%)      PUSH_STACK (*clause, pivot);
      2,484 ( 0.00%)      CHECK_AND_ADD_STACK (*clause);
    396,653 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (138x)
        552 ( 0.00%)      ADD_STACK_TO_PROOF (*clause);
        690 ( 0.00%)      clause->end--;
      1,794 ( 0.00%)      PUSH_STACK (*clause, not_pivot);
      2,484 ( 0.00%)      CHECK_AND_ADD_STACK (*clause);
    403,998 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (138x)
        552 ( 0.00%)      ADD_STACK_TO_PROOF (*clause);
        690 ( 0.00%)      clause->end--;
      2,484 ( 0.00%)      CHECK_AND_ADD_STACK (*clause);
    311,645 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (138x)
        552 ( 0.00%)      ADD_STACK_TO_PROOF (*clause);
      1,794 ( 0.00%)      PUSH_STACK (*clause, pivot);
      2,484 ( 0.00%)      REMOVE_CHECKER_STACK (*clause);
    263,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (138x)
        552 ( 0.00%)      DELETE_STACK_FROM_PROOF (*clause);
        690 ( 0.00%)      clause->end--;
      1,794 ( 0.00%)      PUSH_STACK (*clause, not_pivot);
      2,484 ( 0.00%)      REMOVE_CHECKER_STACK (*clause);
    260,439 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (138x)
        552 ( 0.00%)      DELETE_STACK_FROM_PROOF (*clause);
        690 ( 0.00%)      clause->end--;
        690 ( 0.00%)      inc_lits (solver, clause);
      9,168 ( 0.00%)  => build/../src/congruence.c:inc_lits (138x)
          .             }
        144 ( 0.00%)    CLEAR_STACK (*clause);
        216 ( 0.00%)    LOG ("finished XOR shrinking proof chain");
         72 ( 0.00%)  }
          .           
          .           #else
          .           
          .           #define add_xor_shrinking_proof_chain(...) \
          .             do { \
          .             } while (0)
          .           #endif
          .           
          .           static void shrink_xor_gate (closure *closure, gate *g,
      3,255 ( 0.00%)                               unsigned *new_end_rhs) {
      2,325 ( 0.00%)    assert (g->tag == XOR_GATE);
      2,790 ( 0.00%)    shrink_gate (closure, g, new_end_rhs);
     16,845 ( 0.00%)  => build/../src/congruence.c:shrink_gate (465x)
      1,395 ( 0.00%)  }
          .           
      4,185 ( 0.00%)  static void update_xor_gate (closure *closure, gate *g) {
      2,325 ( 0.00%)    assert (g->tag == XOR_GATE);
      1,395 ( 0.00%)    kissat *const solver = closure->solver;
        465 ( 0.00%)    bool garbage = true;
      2,325 ( 0.00%)    if (g->arity == 0)
         48 ( 0.00%)      (void) learn_congruence_unit (closure, NOT (g->lhs));
         78 ( 0.00%)  => build/../src/congruence.c:learn_congruence_unit (3x)
      2,310 ( 0.00%)    else if (g->arity == 1) {
        585 ( 0.00%)      const value value_lhs = VALUE (g->lhs);
         78 ( 0.00%)      if (value_lhs > 0)
          .                 (void) learn_congruence_unit (closure, g->rhs[0]);
         78 ( 0.00%)      else if (value_lhs < 0)
          .                 (void) learn_congruence_unit (closure, NOT (g->rhs[0]));
        390 ( 0.00%)      else if (merge_literals (closure, g->lhs, g->rhs[0])) {
     88,580 ( 0.00%)  => build/../src/congruence.c:merge_literals (39x)
         56 ( 0.00%)        INC (congruent_unary_xors);
        210 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_unary_xors (14x)
         70 ( 0.00%)        INC (congruent_unary);
        210 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_unary (14x)
          .               }
          .             } else {
      2,115 ( 0.00%)      assert (g->arity > 1);
          .               unsigned hash;
      2,961 ( 0.00%)      gate *h = find_xor_gate (closure, &hash, g);
    417,254 ( 0.00%)  => build/../src/congruence.c:find_xor_gate (423x)
        846 ( 0.00%)      if (h) {
        128 ( 0.00%)        assert (garbage);
        512 ( 0.00%)        add_xor_matching_proof_chain (closure, g, g->lhs, h->lhs);
    336,074 ( 0.00%)  => build/../src/congruence.c:add_xor_matching_proof_chain (64x)
        640 ( 0.00%)        if (merge_literals (closure, g->lhs, h->lhs))
      5,784 ( 0.00%)  => build/../src/congruence.c:merge_literals (64x)
          .                   INC (congruent_xors);
        320 ( 0.00%)        if (!solver->inconsistent)
        256 ( 0.00%)          delete_proof_chain (closure);
     72,464 ( 0.00%)  => build/../src/congruence.c:delete_proof_chain (64x)
          .               } else {
      1,795 ( 0.00%)        remove_gate (closure, g);
     78,494 ( 0.00%)  => build/../src/congruence.c:remove_gate (359x)
      1,077 ( 0.00%)        g->hash = hash;
      1,795 ( 0.00%)        index_gate (closure, g);
    173,160 ( 0.00%)  => build/../src/congruence.c:index_gate (359x)
        359 ( 0.00%)        garbage = false;
          .               }
          .             }
      1,460 ( 0.00%)    if (garbage && !solver->inconsistent)
        530 ( 0.00%)      mark_gate_as_garbage (closure, g);
     12,042 ( 0.00%)  => build/../src/congruence.c:mark_gate_as_garbage (106x)
      2,790 ( 0.00%)  }
          .           
         54 ( 0.00%)  static void simplify_xor_gate (closure *closure, gate *g) {
         45 ( 0.00%)    if (skip_xor_gate (g))
        207 ( 0.00%)  => build/../src/congruence.c:skip_xor_gate (9x)
          .               return;
         27 ( 0.00%)    kissat *const solver = closure->solver;
         27 ( 0.00%)    const value *const values = solver->values;
         81 ( 0.00%)    CLOGXORGATE (g, "simplifying");
         99 ( 0.00%)    unsigned *q = g->rhs, *const end_of_rhs = q + g->arity;
          9 ( 0.00%)    unsigned negate = 0;
        138 ( 0.00%)    for (const unsigned *p = q; p != end_of_rhs; p++) {
         63 ( 0.00%)      const unsigned lit = *p;
        189 ( 0.00%)      assert (!NEGATED (lit));
        105 ( 0.00%)      const value value = values[lit];
         42 ( 0.00%)      if (value > 0)
          .                 negate ^= 1;
         42 ( 0.00%)      if (!value)
         60 ( 0.00%)        *q++ = lit;
          .             }
         18 ( 0.00%)    if (negate) {
          .               LOG ("flipping LHS literal %s", LOGLIT (g->lhs));
          .               g->lhs = NOT (g->lhs);
          .             }
         54 ( 0.00%)    shrink_xor_gate (closure, g, q);
        954 ( 0.00%)  => build/../src/congruence.c:shrink_xor_gate (9x)
         45 ( 0.00%)    update_xor_gate (closure, g);
     27,500 ( 0.00%)  => build/../src/congruence.c:update_xor_gate (9x)
         81 ( 0.00%)    CLOGXORGATE (g, "simplified");
         45 ( 0.00%)    check_xor_gate_implied (closure, g);
    118,208 ( 0.00%)  => build/../src/congruence.c:check_xor_gate_implied (9x)
         36 ( 0.00%)    INC (congruent_simplified);
        135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_simplified (9x)
         45 ( 0.00%)    INC (congruent_simplified_xors);
        135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_simplified_xors (9x)
         18 ( 0.00%)  }
          .           
          .           static void rewrite_xor_gate (closure *closure, gate *g, unsigned dst,
      4,428 ( 0.00%)                                unsigned src) {
      2,460 ( 0.00%)    if (skip_xor_gate (g))
     11,216 ( 0.00%)  => build/../src/congruence.c:skip_xor_gate (492x)
         50 ( 0.00%)      return;
      3,736 ( 0.00%)    if (rewriting_lhs (closure, g, dst))
     15,098 ( 0.00%)  => build/../src/congruence.c:rewriting_lhs (467x)
         22 ( 0.00%)      return;
      3,648 ( 0.00%)    if (!gate_contains (g, src))
     16,342 ( 0.00%)  => build/../src/congruence.c:gate_contains (456x)
          .               return;
      1,368 ( 0.00%)    kissat *const solver = closure->solver;
      4,104 ( 0.00%)    CLOGXORGATE (g, "rewriting %s by %s in", CLOGREPR (src), CLOGREPR (dst));
      1,368 ( 0.00%)    const value *const values = solver->values;
      5,016 ( 0.00%)    unsigned *q = g->rhs, *end_of_rhs = q + g->arity;
      3,648 ( 0.00%)    unsigned original_dst_negated = NEGATED (dst);
        912 ( 0.00%)    unsigned negate = original_dst_negated;
        456 ( 0.00%)    unsigned dst_count = 0;
      2,736 ( 0.00%)    dst = STRIP (dst);
      7,236 ( 0.00%)    for (const unsigned *p = q; p != end_of_rhs; p++) {
      3,375 ( 0.00%)      unsigned lit = *p;
     10,125 ( 0.00%)      assert (!NEGATED (lit));
      3,375 ( 0.00%)      if (lit == src)
        912 ( 0.00%)        lit = dst;
      5,625 ( 0.00%)      const value value = values[lit];
      2,250 ( 0.00%)      if (value > 0)
          .                 negate ^= 1;
      2,250 ( 0.00%)      if (value)
          .                 continue;
      3,375 ( 0.00%)      if (lit == dst)
        492 ( 0.00%)        dst_count++;
      6,750 ( 0.00%)      *q++ = lit;
          .             }
        912 ( 0.00%)    if (negate) {
        534 ( 0.00%)      LOG ("flipping LHS literal %s", LOGLIT (g->lhs));
      1,157 ( 0.00%)      g->lhs = NOT (g->lhs);
          .             }
        912 ( 0.00%)    assert (dst_count <= 2);
        912 ( 0.00%)    if (dst_count == 2) {
        324 ( 0.00%)      CLOGXORGATE (g, "literals %s and %s were both in", LOGLIT (src),
          .                            LOGLIT (dst));
         72 ( 0.00%)      end_of_rhs = q;
        108 ( 0.00%)      q = g->rhs;
        636 ( 0.00%)      for (const unsigned *p = q; p != end_of_rhs; p++) {
        315 ( 0.00%)        const unsigned lit = *p;
        315 ( 0.00%)        if (lit != dst)
        165 ( 0.00%)          *q++ = lit;
          .               }
        144 ( 0.00%)      assert (q + 2 == end_of_rhs);
          .             }
      2,736 ( 0.00%)    shrink_xor_gate (closure, g, q);
     25,656 ( 0.00%)  => build/../src/congruence.c:shrink_xor_gate (456x)
      4,104 ( 0.00%)    CLOGXORGATE (g, "rewritten");
        912 ( 0.00%)    if (dst_count > 1)
        216 ( 0.00%)      add_xor_shrinking_proof_chain (closure, g, src);
  1,702,727 ( 0.00%)  => build/../src/congruence.c:add_xor_shrinking_proof_chain (36x)
      2,280 ( 0.00%)    update_xor_gate (closure, g);
  1,188,744 ( 0.00%)  => build/../src/congruence.c:update_xor_gate (456x)
      5,816 ( 0.00%)    if (!g->garbage && !solver->inconsistent && original_dst_negated &&
          .                 dst_count == 1) {
        594 ( 0.00%)      assert (!NEGATED (dst));
        396 ( 0.00%)      connect_occurrence (closure, dst, g);
     12,710 ( 0.00%)  => build/../src/congruence.c:connect_occurrence (66x)
          .             }
      2,280 ( 0.00%)    check_xor_gate_implied (closure, g);
 17,315,265 ( 0.01%)  => build/../src/congruence.c:check_xor_gate_implied (456x)
      1,824 ( 0.00%)    INC (congruent_rewritten);
      6,840 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_rewritten (456x)
      2,280 ( 0.00%)    INC (congruent_rewritten_xors);
      6,840 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_rewritten_xors (456x)
      1,476 ( 0.00%)  }
          .           
      6,045 ( 0.00%)  static bool skip_ite_gate (gate *g) {
      6,045 ( 0.00%)    assert (g->tag == ITE_GATE);
      6,045 ( 0.00%)    if (g->garbage)
          .               return true;
      1,209 ( 0.00%)    return false;
      2,418 ( 0.00%)  }
          .           
          .           static void simplify_ite_gate (closure *closure, gate *g) {
          .             if (skip_ite_gate (g))
          .               return;
          .             kissat *const solver = closure->solver;
          .             const value *const values = solver->values;
          .             CLOGITEGATE (g, "simplifying");
          .             assert (g->arity == 3);
-- line 1833 ----------------------------------------
-- line 1920 ----------------------------------------
          .             }
          .             if (garbage && !solver->inconsistent)
          .               mark_gate_as_garbage (closure, g);
          .             INC (congruent_simplified);
          .             INC (congruent_simplified_ites);
          .           }
          .           
          .           static void rewrite_ite_gate (closure *closure, gate *g, unsigned dst,
     14,508 ( 0.00%)                                unsigned src) {
      6,045 ( 0.00%)    if (skip_ite_gate (g))
     21,762 ( 0.00%)  => build/../src/congruence.c:skip_ite_gate (1,209x)
          .               return;
      9,672 ( 0.00%)    if (!gate_contains (g, src))
     47,318 ( 0.00%)  => build/../src/congruence.c:gate_contains (1,209x)
          .               return;
      3,627 ( 0.00%)    kissat *const solver = closure->solver;
     10,881 ( 0.00%)    CLOGITEGATE (g, "rewriting %s by %s in", CLOGREPR (src), CLOGREPR (dst));
      3,627 ( 0.00%)    unsigned *const rhs = g->rhs;
      6,045 ( 0.00%)    assert (g->arity == 3);
      3,627 ( 0.00%)    const unsigned lhs = g->lhs;
      3,627 ( 0.00%)    const unsigned cond = rhs[0];
      3,627 ( 0.00%)    const unsigned then_lit = rhs[1];
      3,627 ( 0.00%)    const unsigned else_lit = rhs[2];
      9,672 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
      9,672 ( 0.00%)    const unsigned not_dst = NOT (dst);
      9,672 ( 0.00%)    const unsigned not_cond = NOT (cond);
      9,672 ( 0.00%)    const unsigned not_then_lit = NOT (then_lit);
      9,672 ( 0.00%)    const unsigned not_else_lit = NOT (else_lit);
      1,209 ( 0.00%)    unsigned new_tag = AND_GATE;
      1,209 ( 0.00%)    bool garbage = false;
      1,209 ( 0.00%)    bool shrink = true;
      3,627 ( 0.00%)    if (src == cond) {
      1,968 ( 0.00%)      if (dst == then_lit) {
          .                 // then_lit ? then_lit : else_lit
          .                 // then_lit & then_lit | !then_lit & else_lit
          .                 // then_lit | !then_lit & else_lit
          .                 // then_lit | else_lit
          .                 // !(!then_lit & !else_lit)
          .                 g->lhs = not_lhs;
          .                 rhs[0] = not_then_lit;
          .                 rhs[1] = not_else_lit;
      1,968 ( 0.00%)      } else if (not_dst == then_lit) {
          .                 // !then_lit ? then_lit : else_lit
          .                 // !then_lit & then_lit | then_lit & else_lit
          .                 // then_lit & else_lit
          .                 rhs[0] = else_lit;
          .                 assert (rhs[1] == then_lit);
      1,968 ( 0.00%)      } else if (dst == else_lit) {
          .                 // else_list ? then_lit : else_lit
          .                 // else_list & then_lit | !else_list & else_lit
          .                 // else_list & then_lit
          .                 rhs[0] = else_lit;
          .                 assert (rhs[1] == then_lit);
      1,968 ( 0.00%)      } else if (not_dst == else_lit) {
          .                 // !else_list ? then_lit : else_lit
          .                 // !else_list & then_lit | else_lit & else_lit
          .                 // !else_list & then_lit | else_lit
          .                 // then_lit | else_lit
          .                 // !(!then_lit & !else_lit)
          .                 g->lhs = not_lhs;
          .                 rhs[0] = not_then_lit;
          .                 rhs[1] = not_else_lit;
          .               } else {
        656 ( 0.00%)        shrink = false;
      2,624 ( 0.00%)        rhs[0] = dst;
          .               }
      1,659 ( 0.00%)    } else if (src == then_lit) {
        729 ( 0.00%)      if (dst == cond) {
          .                 // cond ? cond : else_lit
          .                 // cond & cond | !cond & else_lit
          .                 // cond | !cond & else_lit
          .                 // cond | else_lit
          .                 // !(!cond & !else_lit)
          .                 g->lhs = not_lhs;
          .                 rhs[0] = not_cond;
          .                 rhs[1] = not_else_lit;
        729 ( 0.00%)      } else if (not_dst == cond) {
          .                 // cond ? !cond : else_lit
          .                 // cond & !cond | !cond & else_lit
          .                 // !cond & else_lit
          .                 rhs[0] = not_cond;
          .                 rhs[1] = else_lit;
        729 ( 0.00%)      } else if (dst == else_lit) {
          .                 // cond ? else_lit : else_lit
          .                 // else_lit
          .                 if (merge_literals (closure, lhs, else_lit)) {
          .                   INC (congruent_unary_ites);
          .                   INC (congruent_unary);
          .                 }
          .                 garbage = true;
        729 ( 0.00%)      } else if (not_dst == else_lit) {
          .                 // cond ? !else_lit : else_lit
          .                 // cond & !else_lit | !cond & else_lit
          .                 // cond ^ else_lit
          1 ( 0.00%)        new_tag = XOR_GATE;
          4 ( 0.00%)        assert (rhs[0] == cond);
          5 ( 0.00%)        rhs[1] = else_lit;
          .               } else {
        242 ( 0.00%)        shrink = false;
      1,210 ( 0.00%)        rhs[1] = dst;
          .               }
          .             } else {
        930 ( 0.00%)      assert (src == else_lit);
        930 ( 0.00%)      if (dst == cond) {
          .                 // cond ? then_lit : cond
          .                 // cond & then_lit | !cond & cond
          .                 // cond & then_lit
          .                 assert (rhs[0] == cond);
          .                 assert (rhs[1] == then_lit);
        930 ( 0.00%)      } else if (not_dst == cond) {
          .                 // cond ? then_lit : !cond
          .                 // cond & then_lit | !cond & !cond
          .                 // cond & then_lit | !cond
          .                 // then_lit | !cond
          .                 // !(!then_lit & cond)
          .                 g->lhs = not_lhs;
          .                 assert (rhs[0] == cond);
          .                 rhs[1] = not_then_lit;
        930 ( 0.00%)      } else if (dst == then_lit) {
          .                 // cond ? then_lit : then_lit
          .                 // then_lit
          .                 if (merge_literals (closure, lhs, then_lit)) {
          .                   INC (congruent_unary_ites);
          .                   INC (congruent_unary);
          .                 }
          .                 garbage = true;
        930 ( 0.00%)      } else if (not_dst == then_lit) {
          .                 // cond ? then_lit : !then_lit
          .                 // cond & then_lit | !cond & !then_lit
          .                 // !(cond ^ then_lit)
         69 ( 0.00%)        new_tag = XOR_GATE;
        207 ( 0.00%)        g->lhs = not_lhs;
        276 ( 0.00%)        assert (rhs[0] == cond);
        345 ( 0.00%)        assert (rhs[1] == then_lit);
          .               } else {
        241 ( 0.00%)        shrink = false;
        964 ( 0.00%)        rhs[2] = dst;
          .               }
          .             }
      4,836 ( 0.00%)    if (!garbage) {
      2,418 ( 0.00%)      if (shrink) {
        490 ( 0.00%)        if (rhs[0] > rhs[1])
        418 ( 0.00%)          SWAP (unsigned, rhs[0], rhs[1]);
        140 ( 0.00%)        if (new_tag == XOR_GATE) {
         70 ( 0.00%)          bool negate_lhs = false;
        840 ( 0.00%)          if (NEGATED (rhs[0])) {
          .                     rhs[0] = NOT (rhs[0]);
          .                     negate_lhs = !negate_lhs;
          .                   }
        980 ( 0.00%)          if (NEGATED (rhs[1])) {
         15 ( 0.00%)            rhs[1] = NOT (rhs[1]);
          7 ( 0.00%)            negate_lhs = !negate_lhs;
          .                   }
        140 ( 0.00%)          if (negate_lhs)
         13 ( 0.00%)            g->lhs = NOT (g->lhs);
          .                 }
        490 ( 0.00%)        assert (!g->shrunken);
        280 ( 0.00%)        g->shrunken = true;
        210 ( 0.00%)        rhs[2] = INVALID_LIT;
        350 ( 0.00%)        g->arity = 2;
        630 ( 0.00%)        g->tag = new_tag;
        490 ( 0.00%)        assert (rhs[0] < rhs[1]);
      1,120 ( 0.00%)        assert (rhs[0] != NOT (rhs[1]));
      1,330 ( 0.00%)        LOGATE (g, "rewritten");
          .                 gate *h;
          .                 unsigned hash;
        140 ( 0.00%)        if (new_tag == AND_GATE) {
          .                   check_and_gate_implied (closure, g);
          .                   h = find_and_gate (closure, &hash, g);
          .                 } else {
        140 ( 0.00%)          assert (new_tag == XOR_GATE);
        350 ( 0.00%)          check_xor_gate_implied (closure, g);
  2,076,712 ( 0.00%)  => build/../src/congruence.c:check_xor_gate_implied (70x)
        490 ( 0.00%)          h = find_xor_gate (closure, &hash, g);
     67,843 ( 0.00%)  => build/../src/congruence.c:find_xor_gate (70x)
          .                 }
        140 ( 0.00%)        if (h) {
         69 ( 0.00%)          garbage = true;
        138 ( 0.00%)          if (new_tag == XOR_GATE)
        621 ( 0.00%)            add_xor_matching_proof_chain (closure, g, g->lhs, h->lhs);
    238,245 ( 0.00%)  => build/../src/congruence.c:add_xor_matching_proof_chain (69x)
          .                   else
          .                     add_ite_turned_and_binary_clauses (closure, g);
        690 ( 0.00%)          if (merge_literals (closure, g->lhs, h->lhs))
      6,229 ( 0.00%)  => build/../src/congruence.c:merge_literals (69x)
          .                     INC (congruent_ands);
        345 ( 0.00%)          if (!solver->inconsistent)
        276 ( 0.00%)            delete_proof_chain (closure);
     72,691 ( 0.00%)  => build/../src/congruence.c:delete_proof_chain (69x)
          .                 } else {
          1 ( 0.00%)          garbage = false;
          5 ( 0.00%)          remove_gate (closure, g);
        250 ( 0.00%)  => build/../src/congruence.c:remove_gate (1x)
          3 ( 0.00%)          g->hash = hash;
          5 ( 0.00%)          index_gate (closure, g);
        437 ( 0.00%)  => build/../src/congruence.c:index_gate (1x)
          5 ( 0.00%)          assert (g->arity == 2);
         30 ( 0.00%)          for (all_rhs_literals_in_gate (lit, g))
          7 ( 0.00%)            if (lit != dst)
          3 ( 0.00%)              if (lit != cond && lit != then_lit && lit != else_lit)
          .                         connect_occurrence (closure, lit, g);
          5 ( 0.00%)          if (g->tag == AND_GATE)
          .                     for (all_rhs_literals_in_gate (lit, g))
          .                       add_binary_clause (closure, NOT (g->lhs), lit);
          .                 }
          .               } else {
     10,251 ( 0.00%)        CLOGITEGATE (g, "rewritten");
      7,973 ( 0.00%)        assert (rhs[0] != rhs[1]);
      7,973 ( 0.00%)        assert (rhs[0] != rhs[2]);
      9,112 ( 0.00%)        assert (rhs[1] != rhs[2]);
     18,224 ( 0.00%)        assert (rhs[0] != NOT (rhs[1]));
     18,224 ( 0.00%)        assert (rhs[0] != NOT (rhs[2]));
     19,363 ( 0.00%)        assert (rhs[1] != NOT (rhs[2]));
      5,695 ( 0.00%)        check_ite_gate_implied (closure, g);
 29,800,971 ( 0.01%)  => build/../src/congruence.c:check_ite_gate_implied (1,139x)
          .                 unsigned hash;
          .                 bool negate_lhs;
      7,973 ( 0.00%)        gate *h = find_ite_gate (closure, &hash, &negate_lhs, g);
    899,042 ( 0.00%)  => build/../src/congruence.c:find_ite_gate (1,139x)
      4,556 ( 0.00%)        assert (lhs == g->lhs);
     13,668 ( 0.00%)        assert (not_lhs == NOT (g->lhs));
      2,278 ( 0.00%)        if (h) {
          .                   garbage = true;
          .                   unsigned normalized_lhs = negate_lhs ? not_lhs : lhs;
          .                   add_ite_matching_proof_chain (closure, h, h->lhs, normalized_lhs);
          .                   if (merge_literals (closure, h->lhs, normalized_lhs))
          .                     INC (congruent_ites);
          .                   if (!solver->inconsistent)
          .                     delete_proof_chain (closure);
          .                 } else {
      1,139 ( 0.00%)          garbage = false;
      5,695 ( 0.00%)          remove_gate (closure, g);
    255,045 ( 0.00%)  => build/../src/congruence.c:remove_gate (1,139x)
      3,417 ( 0.00%)          if (negate_lhs)
          3 ( 0.00%)            g->lhs = not_lhs;
     10,251 ( 0.00%)          CLOGITEGATE (g, "normalized");
      3,417 ( 0.00%)          g->hash = hash;
      5,695 ( 0.00%)          index_gate (closure, g);
    545,832 ( 0.00%)  => build/../src/congruence.c:index_gate (1,139x)
      5,695 ( 0.00%)          assert (g->arity == 3);
     42,143 ( 0.00%)          for (all_rhs_literals_in_gate (lit, g))
     12,530 ( 0.00%)            if (lit != dst)
     14,922 ( 0.00%)              if (lit != cond && lit != then_lit && lit != else_lit)
         12 ( 0.00%)                connect_occurrence (closure, lit, g);
        458 ( 0.00%)  => build/../src/congruence.c:connect_occurrence (2x)
          .                 }
          .               }
          .             }
      2,763 ( 0.00%)    if (garbage && !solver->inconsistent)
        345 ( 0.00%)      mark_gate_as_garbage (closure, g);
     22,723 ( 0.00%)  => build/../src/congruence.c:mark_gate_as_garbage (69x)
      4,836 ( 0.00%)    INC (congruent_rewritten);
     18,135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_rewritten (1,209x)
      6,045 ( 0.00%)    INC (congruent_rewritten_ites);
     18,135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_rewritten_ites (1,209x)
      7,254 ( 0.00%)  }
          .           
         60 ( 0.00%)  static bool simplify_gate (closure *closure, gate *g) {
         50 ( 0.00%)    if (g->tag == AND_GATE)
          6 ( 0.00%)      simplify_and_gate (closure, g);
      9,316 ( 0.00%)  => build/../src/congruence.c:simplify_and_gate (1x)
         45 ( 0.00%)    else if (g->tag == XOR_GATE)
         54 ( 0.00%)      simplify_xor_gate (closure, g);
    148,462 ( 0.00%)  => build/../src/congruence.c:simplify_xor_gate (9x)
          .             else
          .               simplify_ite_gate (closure, g);
         90 ( 0.00%)    return !closure->solver->inconsistent;
         20 ( 0.00%)  }
          .           
          .           static bool rewrite_gate (closure *closure, gate *g, unsigned dst,
     30,736 ( 0.00%)                            unsigned src) {
     19,210 ( 0.00%)    if (g->tag == AND_GATE)
     14,987 ( 0.00%)      rewrite_and_gate (closure, g, dst, src);
 73,517,049 ( 0.03%)  => build/../src/congruence.c:rewrite_and_gate (2,141x)
      8,505 ( 0.00%)    else if (g->tag == XOR_GATE)
      3,444 ( 0.00%)      rewrite_xor_gate (closure, g, dst, src);
 20,412,575 ( 0.01%)  => build/../src/congruence.c:rewrite_xor_gate (492x)
          .             else
      7,254 ( 0.00%)      rewrite_ite_gate (closure, g, dst, src);
 34,510,478 ( 0.01%)  => build/../src/congruence.c:rewrite_ite_gate (1,209x)
     34,578 ( 0.00%)    return !closure->solver->inconsistent;
      7,684 ( 0.00%)  }
          .           
          .           struct offsetsize {
          .             unsigned offset, size;
          .           };
          .           
          .           typedef struct offsetsize offsetsize;
          .           
          .           #define RANK_OTHER(A) ((A).lits[1])
          .           #define LESS_OTHER(A, B) (RANK_OTHER (A) < RANK_OTHER (B))
          .           
          .           static bool find_binary (kissat *solver, litpair *binaries,
          .                                    offsetsize *offsetsize, unsigned lit,
 21,361,509 ( 0.01%)                           unsigned other) {
  7,120,503 ( 0.00%)    assert (lit != other);
  7,120,503 ( 0.00%)    if (lit > other)
  7,133,094 ( 0.00%)      SWAP (unsigned, lit, other);
 16,614,507 ( 0.01%)    size_t l = offsetsize[lit].offset;
 21,361,509 ( 0.01%)    size_t r = l + offsetsize[lit].size;
 14,520,309 ( 0.01%)    while (l < r) {
  8,441,490 ( 0.00%)      const size_t m = (l + r) / 2;
 10,129,788 ( 0.00%)      const unsigned tmp = binaries[m].lits[1];
  5,064,894 ( 0.00%)      if (tmp < other)
  2,218,144 ( 0.00%)        l = m + 1;
  3,401,286 ( 0.00%)      else if (tmp > other)
  3,362,697 ( 0.00%)        r = m;
          .               else {
     90,041 ( 0.00%)        assert (binaries[m].lits[0] == lit);
     90,041 ( 0.00%)        assert (binaries[m].lits[1] == other);
          .           #ifdef LOGGING
     77,178 ( 0.00%)        LOGBINARY (lit, other, "found");
          .           #else
          .                 (void) solver;
          .           #endif
     25,726 ( 0.00%)        return true;
          .               }
          .             }
  2,360,638 ( 0.00%)    return false;
  4,747,002 ( 0.00%)  }
          .           
 18,760,984 ( 0.01%)  static uint64_t rank_litpair (litpair p) {
 14,070,738 ( 0.01%)    uint64_t res = p.lits[0];
  4,690,246 ( 0.00%)    res <<= 32;
 14,070,738 ( 0.01%)    res += p.lits[1];
  4,690,246 ( 0.00%)    return res;
  9,380,492 ( 0.00%)  }
          .           
         52 ( 0.00%)  static void extract_binaries (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    if (!GET_OPTION (congruencebinaries))
          .               return;
         36 ( 0.00%)    START (extractbinaries);
         12 ( 0.00%)    litpair *binaries = BEGIN_STACK (closure->binaries);
          .             offsetsize *offsetsize;
         40 ( 0.00%)    CALLOC (offsetsize, LITS);
  1,983,428 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
          .             {
         12 ( 0.00%)      litpair *end = END_STACK (closure->binaries);
          8 ( 0.00%)      litpair *p = binaries;
    181,492 ( 0.00%)      while (p != end) {
    181,476 ( 0.00%)        litpair *q = p + 1;
    181,476 ( 0.00%)        const unsigned lit = p->lits[0];
    918,928 ( 0.00%)        while (q != end && q->lits[0] == lit)
     62,144 ( 0.00%)          q++;
    241,968 ( 0.00%)        const size_t size = q - p;
    302,460 ( 0.00%)        assert (size), assert (size <= UINT_MAX);
    241,968 ( 0.00%)        const size_t offset = p - binaries;
    120,984 ( 0.00%)        if (size < 32)
  6,106,584 ( 0.00%)          SORT (litpair, size, p, LESS_OTHER);
          .                 else
  7,060,097 ( 0.00%)          RADIX_SORT (litpair, unsigned, size, p, RANK_OTHER);
    107,006 ( 0.00%)  => ???:0x000000000010c5b0 (859x)
     56,679 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (348x)
     54,643 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (348x)
     30,021 ( 0.00%)  => ???:0x000000000010c650 (119x)
    362,952 ( 0.00%)        offsetsize[lit].offset = offset;
    362,952 ( 0.00%)        offsetsize[lit].size = size;
    120,984 ( 0.00%)        p = q;
          .               }
          .             }
         16 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
        616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (4x)
         32 ( 0.00%)    const size_t before = SIZE_STACK (closure->binaries);
          8 ( 0.00%)    size_t extracted = 0, duplicated = 0;
         12 ( 0.00%)    const value *const values = solver->values;
  4,497,452 ( 0.00%)    for (all_clauses (d)) {
 30,398,254 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (499,713x)
  2,498,565 ( 0.00%)      if (d->garbage)
     11,693 ( 0.00%)        continue;
  2,440,100 ( 0.00%)      if (last_irredundant && last_irredundant < d)
          1 ( 0.00%)        break;
  2,440,095 ( 0.00%)      if (d->redundant)
     11,566 ( 0.00%)        continue;
  1,928,944 ( 0.00%)      if (d->size != 3)
    169,776 ( 0.00%)        continue;
  1,192,044 ( 0.00%)      const unsigned *lits = d->lits;
  1,192,044 ( 0.00%)      const unsigned a = lits[0];
  2,384,088 ( 0.00%)      if (values[a])
         36 ( 0.00%)        continue;
  1,589,320 ( 0.00%)      const unsigned b = lits[1];
  2,383,980 ( 0.00%)      if (values[b])
        116 ( 0.00%)        continue;
  1,589,088 ( 0.00%)      const unsigned c = lits[2];
  2,383,632 ( 0.00%)      if (values[c])
        334 ( 0.00%)        continue;
  3,176,840 ( 0.00%)      const unsigned not_a = NOT (a);
  3,176,840 ( 0.00%)      const unsigned not_b = NOT (b);
  3,176,840 ( 0.00%)      const unsigned not_c = NOT (c);
    794,210 ( 0.00%)      unsigned l = INVALID_LIT, k = INVALID_LIT;
  4,760,670 ( 0.00%)      if (find_binary (solver, binaries, offsetsize, not_a, b) ||
 21,458,955 ( 0.01%)  => build/../src/congruence.c:find_binary (397,105x)
  3,158,480 ( 0.00%)          find_binary (solver, binaries, offsetsize, not_a, c))
 23,977,113 ( 0.01%)  => build/../src/congruence.c:find_binary (394,810x)
     12,630 ( 0.00%)        l = b, k = c;
  4,734,756 ( 0.00%)      else if (find_binary (solver, binaries, offsetsize, not_b, a) ||
 20,527,779 ( 0.01%)  => build/../src/congruence.c:find_binary (394,579x)
  3,155,864 ( 0.00%)               find_binary (solver, binaries, offsetsize, not_b, c))
 23,279,292 ( 0.01%)  => build/../src/congruence.c:find_binary (394,483x)
        645 ( 0.00%)        l = a, k = c;
  4,726,986 ( 0.00%)      else if (find_binary (solver, binaries, offsetsize, not_c, a) ||
 23,199,047 ( 0.01%)  => build/../src/congruence.c:find_binary (394,450x)
  3,129,944 ( 0.00%)               find_binary (solver, binaries, offsetsize, not_c, b))
 22,251,566 ( 0.01%)  => build/../src/congruence.c:find_binary (391,243x)
     20,880 ( 0.00%)        l = a, k = b;
          .               else
    390,274 ( 0.00%)        continue;
     40,986 ( 0.00%)      LOGCLS (d, "strengthening");
     75,141 ( 0.00%)      if (!find_binary (solver, binaries, offsetsize, l, k)) {
    547,107 ( 0.00%)  => build/../src/congruence.c:find_binary (6,831x)
      4,794 ( 0.00%)        LOGBINARY (l, k, "strengthened");
      4,794 ( 0.00%)        add_binary_clause (closure, l, k);
  3,217,309 ( 0.00%)  => build/../src/congruence.c:add_binary_clause (799x)
      2,397 ( 0.00%)        binaries = BEGIN_STACK (closure->binaries);
      1,598 ( 0.00%)        extracted++;
          .               }
          .             }
         36 ( 0.00%)    DEALLOC (offsetsize, LITS);
      2,527 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .             {
         12 ( 0.00%)      litpair *end = END_STACK (closure->binaries);
         20 ( 0.00%)      litpair *added = binaries + before;
          .           #ifndef NDEBUG
         16 ( 0.00%)      const size_t after = end - binaries;
         16 ( 0.00%)      assert (after - before == extracted);
          .           #endif
    294,267 ( 0.00%)      RADIX_SORT (litpair, uint64_t, extracted, added, rank_litpair);
    116,116 ( 0.00%)  => build/../src/congruence.c:rank_litpair (8,294x)
      2,207 ( 0.00%)  => ???:0x000000000010c5b0 (18x)
        754 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (4x)
      2,641 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (4x)
          8 ( 0.00%)      litpair *q = added;
          4 ( 0.00%)      unsigned prev_lit = INVALID_LIT;
          4 ( 0.00%)      unsigned prev_other = INVALID_LIT;
      3,220 ( 0.00%)      for (const litpair *p = q; p != end; p++) {
      2,397 ( 0.00%)        const litpair pair = *p;
      1,598 ( 0.00%)        const unsigned lit = pair.lits[0];
      1,598 ( 0.00%)        const unsigned other = pair.lits[1];
      4,899 ( 0.00%)        if (p == added || lit != prev_lit || other != prev_other) {
      2,388 ( 0.00%)          q->lits[0] = lit;
      2,388 ( 0.00%)          q->lits[1] = other;
      1,592 ( 0.00%)          prev_lit = lit;
      1,592 ( 0.00%)          prev_other = other;
      1,592 ( 0.00%)          q++;
          .                 } else {
          3 ( 0.00%)          duplicated++;
         18 ( 0.00%)          LOGBINARY (lit, other, "removing duplicated");
         18 ( 0.00%)          kissat_delete_binary (solver, lit, other);
      5,587 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (3x)
          .                 }
          .               }
         54 ( 0.00%)      SET_END_OF_STACK (closure->binaries, q);
          .             }
         28 ( 0.00%)    ADD (congruent_binaries, extracted - duplicated);
         80 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_congruent_binaries (4x)
         28 ( 0.00%)    kissat_verbose (solver, "extracted %zu binaries (plus %zu duplicated)",
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_verbose (4x)
          .                             extracted, duplicated);
         36 ( 0.00%)    STOP (extractbinaries);
         44 ( 0.00%)  }
          .           
          .           #ifndef INDEX_BINARY_CLAUSES
          .           
          .           static gate *find_first_and_gate (closure *closure, unsigned lhs,
    460,672 ( 0.00%)                                    unsigneds *lits) {
    172,752 ( 0.00%)    kissat *const solver = closure->solver;
    287,920 ( 0.00%)    assert (!solver->watching);
    172,752 ( 0.00%)    mark *const marks = solver->marks;
          .           
    460,672 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
    345,504 ( 0.00%)    LOG ("trying to find AND gate with first LHS %s", LOGLIT (lhs));
    345,504 ( 0.00%)    LOG ("negated LHS %s occurs in %u binary clauses", LOGLIT (not_lhs),
          .                  closure->negbincount[lhs]);
          .           
    172,752 ( 0.00%)    unsigneds *const marked = &solver->analyzed;
    345,504 ( 0.00%)    assert (EMPTY_STACK (*marked));
          .           
    518,256 ( 0.00%)    const unsigned arity = SIZE_STACK (*lits) - 1;
     57,584 ( 0.00%)    unsigned matched = 0;
    115,168 ( 0.00%)    assert (1 < arity);
          .           
    633,424 ( 0.00%)    watches *watches = &WATCHES (not_lhs);
    345,504 ( 0.00%)    const watch *const end = END_WATCHES (*watches);
    460,672 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (57,584x)
    345,504 ( 0.00%)    const watch *p = BEGIN_WATCHES (*watches);
    460,672 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (57,584x)
          .           
    941,417 ( 0.00%)    while (p != end) {
  1,185,135 ( 0.00%)      const watch watch = *p++;
    948,108 ( 0.00%)      assert (watch.type.binary);
    711,081 ( 0.00%)      const unsigned other = watch.binary.lit;
  1,185,135 ( 0.00%)      const mark tmp = marks[other];
    474,054 ( 0.00%)      if (tmp) {
     79,479 ( 0.00%)        matched++;
          .                 assert (~(tmp & 2));
    715,311 ( 0.00%)        marks[other] |= 2;
  1,033,227 ( 0.00%)        PUSH_STACK (*marked, other);
          .               }
          .             }
          .           
    345,504 ( 0.00%)    LOG ("found %zu initial LHS candidates", SIZE_STACK (*marked));
    172,752 ( 0.00%)    if (matched < arity)
     78,194 ( 0.00%)      return 0;
          .           
     92,435 ( 0.00%)    return new_and_gate (closure, lhs);
1,564,200,101 ( 0.66%)  => build/../src/congruence.c:new_and_gate (18,487x)
    172,752 ( 0.00%)  }
          .           
          .           static gate *find_remaining_and_gate (closure *closure, unsigned lhs,
    294,600 ( 0.00%)                                        unsigneds *lits) {
    110,475 ( 0.00%)    kissat *const solver = closure->solver;
    184,125 ( 0.00%)    assert (!solver->watching);
    110,475 ( 0.00%)    mark *const marks = solver->marks;
    294,600 ( 0.00%)    const unsigned not_lhs = NOT (lhs);
          .           
    220,950 ( 0.00%)    if (marks[not_lhs] < 2) {
     53,052 ( 0.00%)      LOG ("skipping no-candidate LHS %s", LOGLIT (lhs));
     17,684 ( 0.00%)      return false;
          .             }
          .           
    167,898 ( 0.00%)    LOG ("trying to find AND gate with remaining LHS %s", LOGLIT (lhs));
    167,898 ( 0.00%)    LOG ("negated LHS %s occurs times in %u binary clauses", LOGLIT (not_lhs),
          .                  closure->negbincount[lhs]);
          .           
    251,847 ( 0.00%)    const unsigned arity = SIZE_STACK (*lits) - 1;
     27,983 ( 0.00%)    unsigned matched = 0;
     55,966 ( 0.00%)    assert (1 < arity);
          .           
          .             {
    307,813 ( 0.00%)      watches *watches = &WATCHES (not_lhs);
    167,898 ( 0.00%)      const watch *const end_watches = END_WATCHES (*watches);
    223,864 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (27,983x)
    167,898 ( 0.00%)      const watch *p = BEGIN_WATCHES (*watches);
    223,864 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (27,983x)
  1,926,980 ( 0.00%)      while (p != end_watches) {
  3,025,080 ( 0.00%)        const watch watch = *p++;
  2,420,064 ( 0.00%)        assert (watch.type.binary);
  1,815,048 ( 0.00%)        const unsigned other = watch.binary.lit;
  3,025,080 ( 0.00%)        mark mark = marks[other];
  1,210,032 ( 0.00%)        if (!mark)
  1,111,806 ( 0.00%)          continue;
     49,113 ( 0.00%)        matched++;
    196,452 ( 0.00%)        if (!(mark & 2))
     48,554 ( 0.00%)          continue;
      2,236 ( 0.00%)        assert (!(mark & 4));
      3,913 ( 0.00%)        marks[other] = mark | 4;
          .               }
          .             }
          .           
          .             {
     83,949 ( 0.00%)      unsigneds *const marked = &solver->analyzed;
    167,898 ( 0.00%)      assert (!EMPTY_STACK (*marked));
     83,949 ( 0.00%)      unsigned *const begin_marked = BEGIN_STACK (*marked);
     83,949 ( 0.00%)      const unsigned *const end_marked = END_STACK (*marked);
     55,966 ( 0.00%)      unsigned *q = begin_marked;
     55,966 ( 0.00%)      const unsigned *p = q;
    167,898 ( 0.00%)      assert (marks[not_lhs] == 3);
    272,406 ( 0.00%)      while (p != end_marked) {
    314,095 ( 0.00%)        const unsigned lit = *p++;
    188,457 ( 0.00%)        if (lit == not_lhs) {
    111,932 ( 0.00%)          marks[not_lhs] = 1;
     27,983 ( 0.00%)          continue;
          .                 }
    174,180 ( 0.00%)        mark mark = marks[lit];
    139,344 ( 0.00%)        assert ((mark & 3) == 3);
    139,344 ( 0.00%)        if (mark & 4) {
        559 ( 0.00%)          mark = 3;
      2,795 ( 0.00%)          *q++ = lit;
      3,354 ( 0.00%)          LOG2 ("keeping LHS candidate %s", LOGLIT (NOT (lit)));
          .                 } else {
    205,662 ( 0.00%)          LOG2 ("dropping LHS candidate %s", LOGLIT (NOT (lit)));
     34,277 ( 0.00%)          mark = 1;
          .                 }
    174,180 ( 0.00%)        marks[lit] = mark;
          .               }
     83,949 ( 0.00%)      assert (q != end_marked);
    167,898 ( 0.00%)      assert (marks[not_lhs] == 1);
    419,745 ( 0.00%)      SET_END_OF_STACK (*marked, q);
    167,898 ( 0.00%)      LOG ("after filtering %zu LHS candidates remain", SIZE_STACK (*marked));
          .             }
          .           
     83,949 ( 0.00%)    if (matched < arity)
     34,972 ( 0.00%)      return 0;
          .           
     52,485 ( 0.00%)    return new_and_gate (closure, lhs);
268,266,536 ( 0.11%)  => build/../src/congruence.c:new_and_gate (10,497x)
    110,475 ( 0.00%)  }
          .           
          .           #endif
          .           
          .           static inline bool smaller_negated_bin_count (const unsigned *negbincount,
  1,180,425 ( 0.00%)                                                unsigned a, unsigned b) {
  1,416,510 ( 0.00%)    unsigned c = negbincount[a];
  1,416,510 ( 0.00%)    unsigned d = negbincount[b];
    708,255 ( 0.00%)    if (c < d)
    146,346 ( 0.00%)      return true;
    488,736 ( 0.00%)    if (c > d)
    257,262 ( 0.00%)      return false;
    102,843 ( 0.00%)    return a < b;
    472,170 ( 0.00%)  }
          .           
          .           #define SMALLER_NEGATED_BIN_COUNT(A, B) \
          .             smaller_negated_bin_count (negbincount, A, B)
          .           
          .           static void sort_lits_by_negbincount (closure *closure, size_t size,
    403,088 ( 0.00%)                                        unsigned *lits) {
    172,752 ( 0.00%)    const unsigned *const negbincount = closure->negbincount;
    172,752 ( 0.00%)    kissat *const solver = closure->solver;
 10,562,085 ( 0.00%)    SORT (unsigned, size, lits, SMALLER_NEGATED_BIN_COUNT);
  6,189,057 ( 0.00%)  => build/../src/congruence.c:smaller_negated_bin_count (236,085x)
    172,752 ( 0.00%)  }
          .           
          .           #ifdef INDEX_BINARY_CLAUSES
          .           
          .           static unsigned hash_binary (closure *closure, binary_clause *binary) {
          .             return hash_lits (closure, 0, 2, binary->lits);
          .           }
          .           
          .           static bool indexed_binary (closure *closure, unsigned lit,
-- line 2486 ----------------------------------------
-- line 2519 ----------------------------------------
          .             }
          .             LOG ("did not find binary %s %s", LOGLIT (lit), LOGLIT (other));
          .             return false;
          .           }
          .           
          .           #endif
          .           
          .           static void extract_and_gates_with_base_clause (closure *closure,
  3,375,652 ( 0.00%)                                                  clause *c) {
  3,375,652 ( 0.00%)    assert (!c->garbage);
  1,446,708 ( 0.00%)    kissat *const solver = closure->solver;
  2,411,180 ( 0.00%)    assert (!solver->inconsistent);
  1,446,708 ( 0.00%)    value *values = solver->values;
  2,893,416 ( 0.00%)    unsigned arity_limit = MIN (GET_OPTION (congruenceandarity), MAX_ARITY);
  1,446,708 ( 0.00%)    const unsigned size_limit = arity_limit + 1;
  1,446,708 ( 0.00%)    const unsigned *const negbincount = closure->negbincount;
  1,446,708 ( 0.00%)    unsigneds *lits = &closure->lits;
    964,472 ( 0.00%)    unsigned size = 0, max_negbincount = 0;
  1,928,944 ( 0.00%)    CLEAR_STACK (*lits);
 11,398,073 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
  4,172,235 ( 0.00%)      value value = values[lit];
  1,668,894 ( 0.00%)      if (value < 0)
        953 ( 0.00%)        continue;
  1,666,988 ( 0.00%)      if (value > 0) {
        172 ( 0.00%)        assert (!solver->level);
        258 ( 0.00%)        LOGCLS (c, "found satisfied %s in", LOGLIT (lit));
        215 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
     49,109 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (43x)
         43 ( 0.00%)        return;
          .               }
  3,333,804 ( 0.00%)      if (++size > size_limit) {
          .                 LOGCLS (c, "too large actual size %u thus skipping", size);
          .                 return;
          .               }
  5,000,706 ( 0.00%)      const unsigned count = negbincount[lit];
  1,666,902 ( 0.00%)      if (!count) {
  2,514,636 ( 0.00%)        LOGCLS (c,
          .                         "%s negated does not occur in any binary clause "
          .                         "thus skipping",
          .                         LOGLIT (lit));
    838,212 ( 0.00%)        return;
          .               }
  1,243,035 ( 0.00%)      if (count > max_negbincount)
    450,736 ( 0.00%)        max_negbincount = count;
  5,386,773 ( 0.00%)      PUSH_STACK (*lits, lit);
     11,141 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (24x)
          .             }
    126,174 ( 0.00%)    if (size < 3) {
        462 ( 0.00%)      LOGCLS (c, "actual size %u too small thus skipping", size);
        154 ( 0.00%)      return;
          .             }
    189,030 ( 0.00%)    const unsigned arity = size - 1;
    189,030 ( 0.00%)    if (max_negbincount < arity) {
     32,556 ( 0.00%)      LOGCLS (c,
          .                       "all literals have less than %u negated occurrences "
          .                       "thus skipping",
          .                       arity);
      5,426 ( 0.00%)      return;
          .             }
    287,920 ( 0.00%)    unsigned *begin_lits = BEGIN_STACK (*lits), *reduced_lits = begin_lits;
    345,504 ( 0.00%)    LOGCOUNTEDLITS (size, begin_lits, negbincount,
          .                             "counted candidate arity %u AND gate base clause", arity);
    172,752 ( 0.00%)    const unsigned *const end_lits = END_STACK (*lits);
          .           #ifndef INDEX_BINARY_CLAUSES
    172,752 ( 0.00%)    mark *const marks = solver->marks;
    172,752 ( 0.00%)    unsigneds *marked = &solver->analyzed;
    345,504 ( 0.00%)    assert (EMPTY_STACK (*marked));
          .           #endif
  1,241,880 ( 0.00%)    for (unsigned *p = begin_lits; p != end_lits; p++) {
  2,016,846 ( 0.00%)      const unsigned lit = *p, count = negbincount[lit];
          .           #ifndef INDEX_BINARY_CLAUSES
  1,792,752 ( 0.00%)      const unsigned not_lit = NOT (lit);
    896,376 ( 0.00%)      marks[not_lit] = 1;
          .           #endif
    672,282 ( 0.00%)      if (count < arity) {
    244,860 ( 0.00%)        if (reduced_lits < p)
    463,150 ( 0.00%)          *p = *reduced_lits, *reduced_lits++ = lit;
    105,915 ( 0.00%)        else if (reduced_lits == p)
     35,305 ( 0.00%)          reduced_lits++;
          .               }
          .             }
    172,752 ( 0.00%)    assert (reduced_lits < end_lits);
    230,336 ( 0.00%)    const size_t reduced_size = end_lits - reduced_lits;
    115,168 ( 0.00%)    assert (reduced_size);
    345,504 ( 0.00%)    LOGCLS (c, "trying as base arity %u AND gate", arity);
    345,504 ( 0.00%)    sort_lits_by_negbincount (closure, reduced_size, reduced_lits);
 17,672,486 ( 0.01%)  => build/../src/congruence.c:sort_lits_by_negbincount (57,584x)
          .           #ifdef LOGGING
    172,752 ( 0.00%)    if (begin_lits < reduced_lits) {
    277,962 ( 0.00%)      LOGCOUNTEDLITS (reduced_lits - begin_lits, begin_lits, negbincount,
          .                               "skipping low occurrence");
    277,962 ( 0.00%)      LOGCOUNTEDLITS (reduced_size, reduced_lits, negbincount,
          .                               "remaining LHS candidate");
          .             } else
     67,542 ( 0.00%)      LOGCOUNTEDLITS (reduced_size, reduced_lits, negbincount,
          .                               "all remain LHS candidate");
          .           #endif
          .           #ifdef LOGGING
     57,584 ( 0.00%)    unsigned extracted = 0;
          .           #endif
          .           #ifndef INDEX_BINARY_CLAUSES
     57,584 ( 0.00%)    bool first = true;
          .           #endif
    751,442 ( 0.00%)    for (unsigned *p = reduced_lits; p != end_lits; p++) {
    494,764 ( 0.00%)      if (solver->inconsistent)
          .                 break;
    618,455 ( 0.00%)      if (c->garbage)
          .                 break;
    371,073 ( 0.00%)      const unsigned lhs = *p;
    742,146 ( 0.00%)      LOG ("trying LHS candidate literal %s with %u negated occurrences",
          .                    LOGLIT (lhs), negbincount[lhs]);
    865,837 ( 0.00%)      assert (arity <= negbincount[lhs]);
          .           #ifdef INDEX_BINARY_CLAUSES
          .               const unsigned not_lhs = NOT (lhs);
          .               for (const unsigned *q = begin_lits; q != end_lits; q++)
          .                 if (p != q) {
          .                   const unsigned rhs = *q, not_rhs = NOT (rhs);
          .                   if (!indexed_binary (closure, not_lhs, not_rhs))
          .                     goto CONTINUE_WITH_NEXT_LHS;
          .                 }
          .               (void) new_and_gate (closure, lhs);
          .           #ifdef LOGGING
          .               extracted++;
          .           #endif
          .             CONTINUE_WITH_NEXT_LHS:;
          .           #else
    247,382 ( 0.00%)      if (first) {
     57,584 ( 0.00%)        first = false;
    345,504 ( 0.00%)        assert (EMPTY_STACK (*marked));
    460,672 ( 0.00%)        if (find_first_and_gate (closure, lhs, lits)) {
1,578,035,501 ( 0.67%)  => build/../src/congruence.c:find_first_and_gate (57,584x)
          .           #ifdef LOGGING
     36,956 ( 0.00%)          extracted++;
          .           #endif
          .                 }
    396,642 ( 0.00%)      } else if (EMPTY_STACK (*marked)) {
    175,692 ( 0.00%)        LOG ("early abort AND gate search");
     29,282 ( 0.00%)        break;
    294,600 ( 0.00%)      } else if (find_remaining_and_gate (closure, lhs, lits)) {
289,759,298 ( 0.12%)  => build/../src/congruence.c:find_remaining_and_gate (36,825x)
          .           #ifdef LOGGING
     10,480 ( 0.00%)        extracted++;
          .           #endif
          .               }
          .           #endif
          .             }
          .           #ifndef INDEX_BINARY_CLAUSES
  1,241,880 ( 0.00%)    for (const unsigned *p = begin_lits; p != end_lits; p++) {
  2,465,034 ( 0.00%)      const unsigned lit = *p, not_lit = NOT (lit);
    896,376 ( 0.00%)      marks[not_lit] = 0;
          .             }
    230,336 ( 0.00%)    CLEAR_STACK (*marked);
          .           #endif
          .           #ifdef LOGGING
    115,168 ( 0.00%)    if (extracted)
    167,304 ( 0.00%)      LOGCLS (c, "extracted %u with arity %u AND base", extracted, arity);
          .           #endif
  1,446,708 ( 0.00%)  }
          .           
          .           #ifdef INDEX_LARGE_CLAUSES
          .           
          .           static bool valid_large_clause (hash_ref *clause) {
          .             return clause->hash || clause->ref;
          .           }
          .           
          .           static clause *find_indexed_large_clause (closure *closure,
-- line 2679 ----------------------------------------
-- line 2737 ----------------------------------------
          .             else
          .               LOG ("no matching XOR side clause found");
          .             return res;
          .           }
          .           
          .           #else
          .           
          .           static clause *find_large_xor_side_clause (closure *closure,
  1,332,756 ( 0.00%)                                             unsigneds *lits) {
    666,378 ( 0.00%)    kissat *const solver = closure->solver;
  1,110,630 ( 0.00%)    assert (!solver->watching);
    666,378 ( 0.00%)    const unsigned *const largecount = closure->largecount;
    222,126 ( 0.00%)    unsigned least_occurring_literal = INVALID_LIT;
    222,126 ( 0.00%)    unsigned count_least_occurring = UINT_MAX;
    666,378 ( 0.00%)    mark *marks = solver->marks;
  1,777,008 ( 0.00%)    const size_t size_lits = SIZE_STACK (*lits);
          .           #if defined(LOGGING) || !defined(NDEBUG)
    666,378 ( 0.00%)    const unsigned arity = size_lits - 1;
          .           #endif
          .           #ifndef NDEBUG
  1,554,882 ( 0.00%)    const unsigned count_limit = 1u << (arity - 1);
          .           #endif
    666,378 ( 0.00%)    const value *const values = solver->values;
  1,332,756 ( 0.00%)    LOGCOUNTEDLITS (size_lits, BEGIN_STACK (*lits), largecount,
          .                             "trying to find arity %u XOR side clause", arity);
  6,930,587 ( 0.00%)    for (all_stack (unsigned, lit, *lits)) {
  4,036,566 ( 0.00%)      assert (!values[lit]);
  2,691,044 ( 0.00%)      marks[lit] = 1;
  4,036,566 ( 0.00%)      unsigned count = largecount[lit];
  2,018,283 ( 0.00%)      assert (count_limit <= count);
  2,018,283 ( 0.00%)      if (count >= count_least_occurring)
    320,702 ( 0.00%)        continue;
    704,118 ( 0.00%)      count_least_occurring = count;
  1,056,177 ( 0.00%)      least_occurring_literal = lit;
          .             }
    222,126 ( 0.00%)    clause *res = 0;
    444,252 ( 0.00%)    assert (least_occurring_literal != INVALID_LIT);
  1,332,756 ( 0.00%)    LOG ("searching XOR side clause watched by %s#%u",
          .                  LOGLIT (least_occurring_literal), count_least_occurring);
  2,443,386 ( 0.00%)    watches *const watches = &WATCHES (least_occurring_literal);
  1,332,756 ( 0.00%)    watch *p = BEGIN_WATCHES (*watches);
  1,777,008 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (222,126x)
  1,332,756 ( 0.00%)    const watch *const end = END_WATCHES (*watches);
  1,777,008 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (222,126x)
  3,072,219 ( 0.00%)    while (p != end) {
  4,058,275 ( 0.00%)      const watch watch = *p++;
  3,246,620 ( 0.00%)      if (watch.type.binary)
          .                 break;
  2,434,965 ( 0.00%)      const reference ref = watch.large.ref;
  4,869,930 ( 0.00%)      clause *const c = kissat_dereference_clause (solver, ref);
111,196,231 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (811,655x)
  4,058,275 ( 0.00%)      if (c->garbage)
          .                 continue;
  4,058,275 ( 0.00%)      if (c->size < size_lits)
      1,529 ( 0.00%)        continue;
    810,126 ( 0.00%)      size_t found = 0;
 18,761,885 ( 0.01%)      for (all_literals_in_clause (other, c)) {
  6,697,945 ( 0.00%)        const value value = values[other];
  2,679,178 ( 0.00%)        if (value < 0)
          .                   continue;
  2,679,178 ( 0.00%)        if (value > 0) {
          .                   LOGCLS (c, "found satisfied %s in", LOGLIT (other));
          .                   kissat_mark_clause_as_garbage (solver, c);
          .                   assert (c->garbage);
          .                   break;
          .                 }
  8,037,534 ( 0.00%)        if (marks[other])
  1,295,614 ( 0.00%)          found++;
          .                 else {
  1,383,564 ( 0.00%)          found = UINT_MAX;
    691,782 ( 0.00%)          break;
          .                 }
          .               }
  3,258,786 ( 0.00%)      if (found == size_lits && !c->garbage) {
    236,688 ( 0.00%)        res = c;
    118,344 ( 0.00%)        break;
          .               }
          .             }
  7,603,348 ( 0.00%)    for (all_stack (unsigned, lit, *lits))
  2,691,044 ( 0.00%)      marks[lit] = 0;
    444,252 ( 0.00%)    if (res)
    710,064 ( 0.00%)      LOGCLS (res, "found matching XOR side");
          .             else
    622,692 ( 0.00%)      LOG ("no matching XOR side clause found");
    222,126 ( 0.00%)    return res;
    444,252 ( 0.00%)  }
          .           
          .           #endif
          .           
          .           static void extract_xor_gates_with_base_clause (closure *closure,
  2,501,766 ( 0.00%)                                                  clause *c) {
  2,918,727 ( 0.00%)    assert (!c->garbage);
  1,250,883 ( 0.00%)    kissat *const solver = closure->solver;
  2,084,805 ( 0.00%)    assert (!solver->inconsistent);
  1,250,883 ( 0.00%)    const value *const values = solver->values;
    833,922 ( 0.00%)    unsigned smallest = INVALID_LIT, largest = INVALID_LIT;
    416,961 ( 0.00%)    const unsigned arity_limit =
  2,084,805 ( 0.00%)        MIN (GET_OPTION (congruencexorarity), MAX_ARITY);
  1,250,883 ( 0.00%)    const unsigned size_limit = arity_limit + 1;
    833,922 ( 0.00%)    unsigned negated = 0, size = 0;
  1,250,883 ( 0.00%)    unsigneds *lits = &closure->lits;
  1,667,844 ( 0.00%)    CLEAR_STACK (*lits);
    416,961 ( 0.00%)    bool first = true;
 12,394,298 ( 0.01%)    for (all_literals_in_clause (lit, c)) {
  5,183,565 ( 0.00%)      const value value = values[lit];
  2,073,426 ( 0.00%)      if (value < 0)
          .                 continue;
  2,073,426 ( 0.00%)      if (value > 0) {
          .                 LOGCLS (c, "found satisfied %s in", LOGLIT (lit));
          .                 kissat_mark_clause_as_garbage (solver, c);
          .                 return;
          .               }
  3,110,139 ( 0.00%)      if (size == size_limit) {
          .                 LOGCLS (c, "size limit %u for XOR base clause exceeded in",
          .                         size_limit);
          .                 return;
          .               }
  2,073,426 ( 0.00%)      if (first) {
  1,667,844 ( 0.00%)        largest = smallest = lit;
    833,922 ( 0.00%)        first = false;
          .               } else {
  1,239,504 ( 0.00%)        assert (smallest != INVALID_LIT);
  1,239,504 ( 0.00%)        assert (largest != INVALID_LIT);
  1,859,256 ( 0.00%)        if (lit < smallest)
    603,088 ( 0.00%)          smallest = lit;
  1,859,256 ( 0.00%)        if (lit > largest) {
  2,286,225 ( 0.00%)          if (NEGATED (largest)) {
  1,062,036 ( 0.00%)            LOGCLS (c, "not largest literal %s occurs negated in XOR base",
          .                             LOGLIT (largest));
    354,012 ( 0.00%)            return;
          .                   }
    154,038 ( 0.00%)          largest = lit;
          .                 }
          .               }
  9,101,514 ( 0.00%)      if (NEGATED (lit) && lit < largest) {
    613,626 ( 0.00%)        LOGCLS (c, "negated literal %s not largest in XOR base",
          .                         LOGLIT (lit));
    204,542 ( 0.00%)        return;
          .               }
  8,579,154 ( 0.00%)      if (NEGATED (lit) && negated++) {
          .                 LOGCLS (c, "more than one negated literal in XOR base");
          .                 return;
          .               }
  9,846,668 ( 0.00%)      PUSH_STACK (*lits, lit);
    757,436 ( 0.00%)      size++;
          .             }
  1,376,840 ( 0.00%)    assert (size == SIZE_STACK (*lits));
    275,368 ( 0.00%)    if (size < 3) {
          .               LOGCLS (c, "short XOR base clause");
          .               return;
          .             }
    413,052 ( 0.00%)    const unsigned arity = size - 1;
    963,788 ( 0.00%)    const unsigned needed_clauses = 1u << (arity - 1);
    413,052 ( 0.00%)    const unsigned *const largecount = closure->largecount;
  4,241,875 ( 0.00%)    for (all_stack (unsigned, lit, *lits))
  9,015,691 ( 0.00%)      for (unsigned sign = 0; sign != 2; sign++, lit = NOT (lit)) {
  4,933,638 ( 0.00%)        unsigned count = largecount[lit];
  2,466,819 ( 0.00%)        if (count >= needed_clauses)
    819,007 ( 0.00%)          continue;
     19,596 ( 0.00%)        LOGCLS (c,
          .                         "literal %s in XOR base clause only occurs "
          .                         "%u times in large clauses thus skipping",
          .                         LOGLIT (lit), count);
      6,532 ( 0.00%)        return;
          .               }
    806,508 ( 0.00%)    LOGCLS (c, "trying arity %u XOR base", arity);
    268,836 ( 0.00%)    assert (smallest != INVALID_LIT);
    268,836 ( 0.00%)    assert (largest != INVALID_LIT);
    806,508 ( 0.00%)    const unsigned end = 1u << arity;
    940,926 ( 0.00%)    assert (negated == parity_lits (solver, lits));
  8,753,460 ( 0.00%)  => build/../src/congruence.c:parity_lits (134,418x)
          .           #if !defined(NDEBUG) || defined(LOGGING)
    134,418 ( 0.00%)    unsigned found = 0;
          .           #endif
  1,683,138 ( 0.00%)    for (unsigned i = 0; i != end; i++) {
  3,804,081 ( 0.00%)      while (i && parity_lits (solver, lits) != negated)
 25,732,500 ( 0.01%)  => build/../src/congruence.c:parity_lits (392,805x)
    853,395 ( 0.00%)        inc_lits (solver, lits);
 14,342,454 ( 0.01%)  => build/../src/congruence.c:inc_lits (170,679x)
    713,088 ( 0.00%)      if (i) {
          .           #ifdef INDEX_LARGE_CLAUSES
          .                 clause *d = find_indexed_large_clause (closure, lits);
          .           #else
  1,332,756 ( 0.00%)        clause *d = find_large_xor_side_clause (closure, lits);
241,743,269 ( 0.10%)  => build/../src/congruence.c:find_large_xor_side_clause (222,126x)
          .           #endif
    444,252 ( 0.00%)        if (!d)
    103,782 ( 0.00%)          return;
    828,408 ( 0.00%)        assert (!d->redundant);
          .               } else
    940,926 ( 0.00%)        assert (!c->redundant);
  1,263,810 ( 0.00%)      inc_lits (solver, lits);
 18,341,471 ( 0.01%)  => build/../src/congruence.c:inc_lits (252,762x)
          .           #if !defined(NDEBUG) || defined(LOGGING)
    252,762 ( 0.00%)      found++;
          .           #endif
          .             }
    390,527 ( 0.00%)    while (parity_lits (solver, lits) != negated)
  3,359,200 ( 0.00%)  => build/../src/congruence.c:parity_lits (51,413x)
    103,885 ( 0.00%)      inc_lits (solver, lits);
  1,665,752 ( 0.00%)  => build/../src/congruence.c:inc_lits (20,777x)
    122,544 ( 0.00%)    LOGUNSIGNEDS2 (size, BEGIN_STACK (*lits), "back to original");
    183,816 ( 0.00%)    LOG ("found all needed %u matching clauses:", found);
    214,452 ( 0.00%)    assert (found == 1u << arity);
     61,272 ( 0.00%)    if (negated) {
     66,096 ( 0.00%)      unsigned *p = BEGIN_STACK (*lits), lit;
    521,442 ( 0.00%)      while (!NEGATED (lit = *p))
     11,262 ( 0.00%)        p++;
    132,192 ( 0.00%)      LOG ("flipping RHS literal %s", LOGLIT (lit));
    220,320 ( 0.00%)      *p = NOT (lit);
          .             }
     30,636 ( 0.00%)    unsigned extracted = 0;
    955,778 ( 0.00%)    for (all_stack (unsigned, lhs, *lits)) {
    211,986 ( 0.00%)      if (!negated)
    158,628 ( 0.00%)        lhs = NOT (lhs);
    556,644 ( 0.00%)      gate *g = new_xor_gate (closure, lhs);
2,530,355,301 ( 1.07%)  => build/../src/congruence.c:new_xor_gate (92,774x)
    185,548 ( 0.00%)      if (g)
     92,730 ( 0.00%)        extracted++;
    371,096 ( 0.00%)      if (solver->inconsistent)
          .                 break;
          .             }
     61,272 ( 0.00%)    if (!extracted)
         24 ( 0.00%)      LOG ("no arity %u XOR gate extracted", arity);
    833,922 ( 0.00%)  }
          .           
          .           #ifdef INDEX_BINARY_CLAUSES
          .           
          .           static void init_bintab (closure *closure) {
          .             kissat *const solver = closure->solver;
          .             size_t limit = BINARY_CLAUSES;
          .             size_t size = 2 * limit;
          .             size_t size2 = 1;
-- line 2958 ----------------------------------------
-- line 3004 ----------------------------------------
          .           static void reset_bintab (closure *closure) {
          .             kissat *const solver = closure->solver;
          .             binary_hash_table *bintab = &closure->bintab;
          .             DEALLOC (bintab->table, bintab->size);
          .           }
          .           
          .           #endif
          .           
         32 ( 0.00%)  static void init_and_gate_extraction (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         20 ( 0.00%)    assert (!solver->watching);
          .             unsigned *negbincount;
         40 ( 0.00%)    CALLOC (negbincount, LITS);
    964,314 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
         12 ( 0.00%)    litpairs *binaries = &closure->binaries;
          .           #ifdef INDEX_BINARY_CLAUSES
          .             init_bintab (closure);
          .           #endif
    864,064 ( 0.00%)    for (all_stack (litpair, pair, *binaries)) {
    493,728 ( 0.00%)      const unsigned lit = pair.lits[0], other = pair.lits[1];
  1,974,912 ( 0.00%)      const unsigned not_lit = NOT (lit), not_other = NOT (other);
  1,728,048 ( 0.00%)      negbincount[not_lit]++, negbincount[not_other]++;
    740,592 ( 0.00%)      kissat_watch_binary (solver, lit, other);
100,842,889 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_binary (123,432x)
          .           #ifdef INDEX_BINARY_CLAUSES
          .               index_binary (closure, lit, other);
          .           #endif
          .             }
          .           #ifndef QUIET
         32 ( 0.00%)    size_t connected = SIZE_STACK (*binaries);
         28 ( 0.00%)    kissat_very_verbose (solver, "connected %zu binary clauses", connected);
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
          .           #endif
         12 ( 0.00%)    closure->negbincount = negbincount;
         24 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void reset_and_gate_extraction (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         40 ( 0.00%)    DEALLOC (closure->negbincount, LITS);
      2,216 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         12 ( 0.00%)    kissat_flush_all_connected (solver);
 20,866,475 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_all_connected (4x)
          .           #ifdef INDEX_BINARY_CLAUSES
          .             reset_bintab (closure);
          .           #endif
         12 ( 0.00%)  }
          .           
          .           #ifdef INDEX_LARGE_CLAUSES
          .           
          .           static void init_large_clauses (closure *closure, size_t expected) {
          .             kissat *const solver = closure->solver;
          .             size_t size = 2 * expected;
          .             size_t size2 = 1;
          .             while (size > size2)
-- line 3052 ----------------------------------------
-- line 3111 ----------------------------------------
          .             large_clause_hash_table *clauses = &closure->clauses;
          .             kissat *const solver = closure->solver;
          .             DEALLOC (clauses->table, clauses->size);
          .           }
          .           
          .           #endif
          .           
          .           static void init_xor_gate_extraction (closure *closure,
         36 ( 0.00%)                                        references *candidates) {
         24 ( 0.00%)    assert (EMPTY_STACK (*candidates));
         12 ( 0.00%)    kissat *const solver = closure->solver;
         20 ( 0.00%)    assert (!solver->watching);
         12 ( 0.00%)    const unsigned arity_limit = GET_OPTION (congruencexorarity);
         12 ( 0.00%)    const unsigned size_limit = arity_limit + 1;
         16 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
        616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (4x)
         12 ( 0.00%)    const value *const values = solver->values;
          .             unsigned *largecount;
         40 ( 0.00%)    CALLOC (largecount, LITS);
    963,186 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
  4,497,452 ( 0.00%)    for (all_clauses (c)) {
 30,398,254 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (499,713x)
  2,498,565 ( 0.00%)      if (c->garbage)
     11,736 ( 0.00%)        continue;
  2,439,885 ( 0.00%)      if (last_irredundant && last_irredundant < c)
          1 ( 0.00%)        break;
  2,439,880 ( 0.00%)      if (c->redundant)
     11,566 ( 0.00%)        continue;
    482,193 ( 0.00%)      unsigned size = 0;
 18,341,674 ( 0.01%)      for (all_literals_in_clause (lit, c)) {
  7,972,865 ( 0.00%)        const value value = values[lit];
  3,189,146 ( 0.00%)        if (value < 0)
      3,009 ( 0.00%)          continue;
  3,183,128 ( 0.00%)        if (value > 0) {
        354 ( 0.00%)          LOGCLS (c, "satisfied %s in", LOGLIT (lit));
        295 ( 0.00%)          kissat_mark_clause_as_garbage (solver, c);
     69,326 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (59x)
         59 ( 0.00%)          goto CONTINUE_COUNTING_NEXT_CLAUSE;
          .                 }
  4,774,515 ( 0.00%)        if (size == size_limit)
     26,498 ( 0.00%)          goto CONTINUE_COUNTING_NEXT_CLAUSE;
  1,578,256 ( 0.00%)        size++;
          .               }
    937,770 ( 0.00%)      if (size < 3)
        179 ( 0.00%)        continue;
 17,630,921 ( 0.01%)      for (all_literals_in_clause (lit, c))
 10,597,574 ( 0.00%)        if (!values[lit])
 10,581,032 ( 0.00%)          largecount[lit]++;
  2,812,236 ( 0.00%)      reference ref = kissat_reference_clause (solver, c);
 52,818,330 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (468,706x)
  6,562,700 ( 0.00%)      PUSH_STACK (*candidates, ref);
  1,464,673 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (68x)
          .             CONTINUE_COUNTING_NEXT_CLAUSE:;
          .             }
          .           #ifndef QUIET
         12 ( 0.00%)    size_t considered_clauses = IRREDUNDANT_CLAUSES;
         32 ( 0.00%)    size_t original_candidates = SIZE_STACK (*candidates);
        100 ( 0.00%)    kissat_very_verbose (
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
          .                 solver,
          .                 "%zu original candidate XOR base clauses "
          .                 "(%.0f%% of %zu irredundant clauses)",
          .                 original_candidates,
          .                 kissat_percent (original_candidates, considered_clauses),
          .                 considered_clauses);
          .           #endif
         12 ( 0.00%)    const unsigned counting_rounds = GET_OPTION (congruencexorcounts);
         56 ( 0.00%)    for (unsigned round = 1; round <= counting_rounds; round++) {
          8 ( 0.00%)      size_t removed = 0;
          .               unsigned *new_largecount;
         80 ( 0.00%)      CALLOC (new_largecount, LITS);
  1,927,431 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (8x)
         24 ( 0.00%)      const reference *const end_candidates = END_STACK (*candidates);
         40 ( 0.00%)      reference *q = BEGIN_STACK (*candidates), *p = q;
  2,671,298 ( 0.00%)      while (p != end_candidates) {
  4,452,110 ( 0.00%)        const reference ref = *p++;
  5,342,532 ( 0.00%)        clause *c = kissat_dereference_clause (solver, ref);
121,838,970 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (890,422x)
    890,422 ( 0.00%)        unsigned size = 0;
 33,008,711 ( 0.01%)        for (all_literals_in_clause (lit, c))
 19,649,624 ( 0.01%)          if (!values[lit])
  2,804,726 ( 0.00%)            size++;
  1,780,844 ( 0.00%)        assert (3 <= size);
  2,671,266 ( 0.00%)        assert (size <= size_limit);
  2,671,266 ( 0.00%)        const unsigned arity = size - 1;
  6,232,954 ( 0.00%)        const unsigned needed_clauses = 1u << (arity - 1);
 32,034,993 ( 0.01%)        for (all_literals_in_clause (lit, c))
 18,937,388 ( 0.01%)          if (largecount[lit] < needed_clauses) {
     51,745 ( 0.00%)            removed++;
     51,745 ( 0.00%)            goto CONTINUE_WITH_NEXT_CANDIDATE_CLAUSE;
          .                   }
 30,580,256 ( 0.01%)        for (all_literals_in_clause (lit, c))
 18,000,101 ( 0.01%)          if (!values[lit])
 18,000,101 ( 0.01%)            new_largecount[lit]++;
  4,193,385 ( 0.00%)        *q++ = ref;
          .               CONTINUE_WITH_NEXT_CANDIDATE_CLAUSE:;
          .               }
         72 ( 0.00%)      DEALLOC (largecount, LITS);
      2,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         16 ( 0.00%)      largecount = new_largecount;
        120 ( 0.00%)      SET_END_OF_STACK (*candidates, q);
         16 ( 0.00%)      if (!removed)
          .                 break;
          .           #ifndef QUIET
         64 ( 0.00%)      size_t remaining_candidates = SIZE_STACK (*candidates);
          .               const char *how_often;
          .               char buffer[64];
         16 ( 0.00%)      if (round == 1)
         12 ( 0.00%)        how_often = "once";
          8 ( 0.00%)      else if (round == 2)
         12 ( 0.00%)        how_often = "twice";
          .               else {
          .                 sprintf (buffer, "%u times", round);
          .                 how_often = buffer;
          .               }
        200 ( 0.00%)      kissat_very_verbose (
        408 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (8x)
        272 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (8x)
          .                   solver,
          .                   "%zu XOR base clause candidates remain (%.0f%% "
          .                   "original candidates)"
          .                   " after counting %s",
          .                   remaining_candidates,
          .                   kissat_percent (remaining_candidates, original_candidates),
          .                   how_often);
          .           #endif
          .             }
         12 ( 0.00%)    closure->largecount = largecount;
          .           #ifdef INDEX_LARGE_CLAUSES
          .             init_large_clauses (closure, SIZE_STACK (*candidates));
          .           #endif
  3,335,728 ( 0.00%)    for (all_stack (reference, ref, *candidates)) {
  2,084,805 ( 0.00%)      kissat_connect_referenced (solver, ref);
479,968,347 ( 0.20%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_connect_referenced (416,961x)
          .           #ifdef INDEX_LARGE_CLAUSES
          .               index_large_clause (closure, ref);
          .           #endif
          .             }
          .           #ifndef QUIET
         32 ( 0.00%)    size_t connected = SIZE_STACK (*candidates);
         96 ( 0.00%)    kissat_very_verbose (solver, "connected %zu large clauses %.0f%%",
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
          .                                  connected,
          8 ( 0.00%)                         kissat_percent (connected, IRREDUNDANT_CLAUSES));
          .           #endif
         24 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void reset_xor_gate_extraction (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         40 ( 0.00%)    DEALLOC (closure->largecount, LITS);
    111,135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         12 ( 0.00%)    kissat_flush_all_connected (solver);
 30,848,142 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_all_connected (4x)
          .           #ifdef INDEX_LARGE_CLAUSES
          .             reset_large_clauses (closure);
          .           #endif
         12 ( 0.00%)  }
          .           
          .           static void init_ite_gate_extraction (closure *closure,
         40 ( 0.00%)                                        references *candidates) {
         24 ( 0.00%)    assert (EMPTY_STACK (*candidates));
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
        616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (4x)
         12 ( 0.00%)    const value *const values = solver->values;
          .             unsigned *largecount;
         40 ( 0.00%)    CALLOC (largecount, LITS);
  1,069,337 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
          .             references ternary;
         20 ( 0.00%)    INIT_STACK (ternary);
  4,497,452 ( 0.00%)    for (all_clauses (c)) {
 30,398,254 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (499,713x)
  2,498,565 ( 0.00%)      if (c->garbage)
     11,795 ( 0.00%)        continue;
  2,439,590 ( 0.00%)      if (last_irredundant && last_irredundant < c)
          1 ( 0.00%)        break;
  2,439,585 ( 0.00%)      if (c->redundant)
     11,566 ( 0.00%)        continue;
    482,134 ( 0.00%)      unsigned size = 0;
 17,627,170 ( 0.01%)      for (all_literals_in_clause (lit, c)) {
  7,665,860 ( 0.00%)        const value value = values[lit];
  3,066,344 ( 0.00%)        if (value < 0)
      2,688 ( 0.00%)          continue;
  3,060,968 ( 0.00%)        if (value > 0) {
          .                   LOGCLS (c, "satisfied %s in", LOGLIT (lit));
          .                   kissat_mark_clause_as_garbage (solver, c);
          .                   goto CONTINUE_COUNTING_NEXT_CLAUSE;
          .                 }
  3,060,968 ( 0.00%)        if (size == 3)
    168,522 ( 0.00%)          goto CONTINUE_COUNTING_NEXT_CLAUSE;
  1,446,223 ( 0.00%)        size++;
          .               }
    795,746 ( 0.00%)      if (size < 3)
        358 ( 0.00%)        continue;
    795,388 ( 0.00%)      assert (size == 3);
  2,386,164 ( 0.00%)      const reference ref = kissat_reference_clause (solver, c);
 44,939,374 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (397,694x)
  3,579,926 ( 0.00%)      PUSH_STACK (ternary, ref);
  1,389,594 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (68x)
  2,386,164 ( 0.00%)      LOGCLS (c, "counting original ITE gate base");
 14,321,191 ( 0.01%)      for (all_literals_in_clause (lit, c))
  8,355,180 ( 0.00%)        if (!values[lit])
  8,351,574 ( 0.00%)          largecount[lit]++;
    397,694 ( 0.00%)    CONTINUE_COUNTING_NEXT_CLAUSE:;
          .             }
          .           #ifndef QUIET
         20 ( 0.00%)    size_t counted = SIZE_STACK (ternary);
        104 ( 0.00%)    kissat_very_verbose (solver,
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
          .                                  "counted %zu ternary ITE clauses "
          .                                  "(%.0f%% of %" PRIu64 " irredundant clauses)",
          .                                  counted,
          8 ( 0.00%)                         kissat_percent (counted, IRREDUNDANT_CLAUSES),
          .                                  IRREDUNDANT_CLAUSES);
          4 ( 0.00%)    size_t connected = 0;
          .           #endif
  2,783,890 ( 0.00%)    for (all_stack (reference, ref, ternary)) {
  2,386,164 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
 54,484,030 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (397,694x)
  2,783,858 ( 0.00%)      assert (!c->garbage);
  1,193,082 ( 0.00%)      unsigned positive = 0, negative = 0, twice = 0;
 13,896,653 ( 0.01%)      for (all_literals_in_clause (lit, c)) {
  6,988,902 ( 0.00%)        if (values[lit])
        221 ( 0.00%)          continue;
  9,316,768 ( 0.00%)        const unsigned not_lit = NOT (lit);
  6,987,576 ( 0.00%)        const unsigned count_not_lit = largecount[not_lit];
  2,329,192 ( 0.00%)        if (!count_not_lit)
    111,238 ( 0.00%)          goto CONTINUE_WITH_NEXT_TERNARY_CLAUSE;
  6,653,862 ( 0.00%)        const unsigned count_lit = largecount[lit];
  2,217,954 ( 0.00%)        assert (count_lit);
  4,431,198 ( 0.00%)        if (count_lit > 1 && count_not_lit > 1)
  1,102,371 ( 0.00%)          twice++;
  9,980,793 ( 0.00%)        if (NEGATED (lit))
  1,063,572 ( 0.00%)          negative++;
          .                 else
    577,191 ( 0.00%)          positive++;
          .               }
    684,150 ( 0.00%)      if (twice < 2)
      1,290 ( 0.00%)        goto CONTINUE_WITH_NEXT_TERNARY_CLAUSE;
          .           #ifndef QUIET
    341,430 ( 0.00%)      connected++;
          .           #endif
  1,707,150 ( 0.00%)      kissat_connect_clause (solver, c);
298,847,616 ( 0.13%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_connect_clause (341,430x)
  1,319,818 ( 0.00%)      if (positive && negative)
  4,326,984 ( 0.00%)        PUSH_STACK (*candidates, ref);
  1,922,981 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (68x)
     32,418 ( 0.00%)    CONTINUE_WITH_NEXT_TERNARY_CLAUSE:;
          .             }
         60 ( 0.00%)    RELEASE_STACK (ternary);
      1,058 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           #ifndef QUIET
        108 ( 0.00%)    kissat_very_verbose (solver,
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
          .                                  "connected %zu ITE clauses "
          .                                  "(%.0f%% of %" PRIu64 " counted clauses)",
          .                                  connected, kissat_percent (connected, counted),
          .                                  IRREDUNDANT_CLAUSES);
         32 ( 0.00%)    size_t size_candidates = SIZE_STACK (*candidates);
        100 ( 0.00%)    kissat_very_verbose (solver,
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
          .                                  "%zu candidates ITE base clauses "
          .                                  "(%.0f%% of %zu connected)",
          .                                  size_candidates,
          .                                  kissat_percent (size_candidates, connected),
          .                                  connected);
          .           #endif
         12 ( 0.00%)    closure->largecount = largecount;
         40 ( 0.00%)    INIT_STACK (closure->condbin[0]);
         40 ( 0.00%)    INIT_STACK (closure->condbin[1]);
         40 ( 0.00%)    INIT_STACK (closure->condeq[0]);
         40 ( 0.00%)    INIT_STACK (closure->condeq[1]);
         28 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void reset_ite_gate_extraction (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         96 ( 0.00%)    RELEASE_STACK (closure->condbin[0]);
        965 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->condbin[1]);
        913 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->condeq[0]);
        965 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->condeq[1]);
        913 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         40 ( 0.00%)    DEALLOC (closure->largecount, LITS);
     38,680 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         12 ( 0.00%)    kissat_flush_all_connected (solver);
 30,094,897 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_all_connected (4x)
         12 ( 0.00%)  }
          .           
  1,379,260 ( 0.00%)  static void unmark_all (unsigneds *marked, signed char *marks) {
  5,332,056 ( 0.00%)    for (all_stack (unsigned, lit, *marked))
  1,286,768 ( 0.00%)      marks[lit] = 0;
  1,103,408 ( 0.00%)    CLEAR_STACK (*marked);
    827,556 ( 0.00%)  }
          .           
          .           #ifdef MERGE_CONDITIONAL_EQUIVALENCES
          .           
          .           static void copy_conditional_equivalences (kissat *solver, unsigned lit,
          .                                                      watches *watches,
  2,219,061 ( 0.00%)                                             litpairs *condbin) {
  1,024,182 ( 0.00%)    assert (EMPTY_STACK (*condbin));
    512,091 ( 0.00%)    const value *const values = solver->values;
  1,024,182 ( 0.00%)    const watch *const begin_watches = BEGIN_WATCHES (*watches);
  1,365,576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (170,697x)
  1,024,182 ( 0.00%)    const watch *const end_watches = END_WATCHES (*watches);
  1,365,576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (170,697x)
  4,455,294 ( 0.00%)    for (const watch *p = begin_watches; p != end_watches; p++) {
  2,573,334 ( 0.00%)      const watch watch = *p;
  3,431,112 ( 0.00%)      if (watch.type.binary)
          .                 break;
  2,573,334 ( 0.00%)      const unsigned ref = watch.large.ref;
  5,146,668 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
117,515,538 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (857,778x)
  1,715,556 ( 0.00%)      unsigned first = INVALID_LIT, second = INVALID_LIT;
 30,880,575 ( 0.01%)      for (all_literals_in_clause (other, c)) {
 15,440,490 ( 0.01%)        if (values[other])
         81 ( 0.00%)          continue;
  7,720,002 ( 0.00%)        if (other == lit)
    857,778 ( 0.00%)          continue;
  3,431,112 ( 0.00%)        if (first == INVALID_LIT)
  2,573,334 ( 0.00%)          first = other;
          .                 else {
  1,715,556 ( 0.00%)          assert (second == INVALID_LIT);
  2,573,334 ( 0.00%)          second = other;
          .                 }
          .               }
  1,715,556 ( 0.00%)      assert (first != INVALID_LIT);
  1,715,556 ( 0.00%)      assert (second != INVALID_LIT);
          .               litpair pair;
  2,573,334 ( 0.00%)      if (first < second)
  1,790,955 ( 0.00%)        pair = (litpair){.lits = {first, second}};
          .               else {
  1,498,761 ( 0.00%)        assert (second < first);
  1,998,348 ( 0.00%)        pair = (litpair){.lits = {second, first}};
          .               }
  5,146,668 ( 0.00%)      LOG ("literal %s conditional binary clause %s %s", LOGLIT (lit),
          .                    LOGLIT (first), LOGLIT (second));
 11,151,954 ( 0.00%)      PUSH_STACK (*condbin, pair);
    291,025 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (70x)
          .             }
  1,536,273 ( 0.00%)  }
          .           
 12,273,760 ( 0.01%)  static bool less_litpair (litpair p, litpair q) {
  9,819,008 ( 0.00%)    const unsigned a = p.lits[0], b = q.lits[0];
  7,364,256 ( 0.00%)    if (a < b)
  1,505,598 ( 0.00%)      return true;
  5,105,859 ( 0.00%)    if (a > b)
  3,091,100 ( 0.00%)      return false;
    625,612 ( 0.00%)    const unsigned c = p.lits[1], d = q.lits[1];
    469,209 ( 0.00%)    return c < d;
  4,909,504 ( 0.00%)  }
          .           
          .           #define RADIDX_SORT_PAIR_LIMIT 32
          .           
  4,438,122 ( 0.00%)  static void sort_pairs (kissat *solver, litpairs *pairs) {
  2,731,152 ( 0.00%)    const size_t size = SIZE_STACK (*pairs);
    682,788 ( 0.00%)    if (size < 32)
 86,291,317 ( 0.04%)      SORT_STACK (litpair, *pairs, less_litpair);
 45,163,906 ( 0.02%)  => build/../src/congruence.c:less_litpair (2,454,752x)
          .             else
     29,950 ( 0.00%)      for (int i = 1; i >= 0; i--)
191,849,766 ( 0.08%)        RADIX_STACK (litpair, uint64_t, *pairs, rank_litpair);
 65,547,328 ( 0.03%)  => build/../src/congruence.c:rank_litpair (4,681,952x)
  2,630,698 ( 0.00%)  => ???:0x000000000010c5b0 (24,460x)
    954,886 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (5,990x)
    849,576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (5,990x)
     19,468 ( 0.00%)  => ???:0x000000000010c650 (238x)
  3,758,329 ( 0.00%)  }
          .           
          .           static bool find_litpair_second_literal (unsigned lit, const litpair *begin,
  1,929,690 ( 0.00%)                                           const litpair *end) {
  1,102,680 ( 0.00%)    const litpair *l = begin, *r = end;
  1,305,561 ( 0.00%)    while (l != r) {
  3,324,398 ( 0.00%)      const litpair *m = l + (r - l) / 2;
  1,813,308 ( 0.00%)      assert (begin <= m), assert (m < end);
    906,654 ( 0.00%)      unsigned other = m->lits[1];
    906,654 ( 0.00%)      if (other < lit)
     70,216 ( 0.00%)        l = m + 1;
    853,992 ( 0.00%)      else if (other > lit)
    150,219 ( 0.00%)        r = m;
          .               else
    469,182 ( 0.00%)        return true;
          .             }
     41,079 ( 0.00%)    return false;
    551,340 ( 0.00%)  }
          .           
          .           static void search_condeq (closure *closure, unsigned lit, unsigned pos_lit,
          .                                      const litpair *pos_begin, const litpair *pos_end,
          .                                      unsigned neg_lit, const litpair *neg_begin,
  5,753,013 ( 0.00%)                             const litpair *neg_end, litpairs *condeq) {
    821,859 ( 0.00%)    kissat *const solver = closure->solver;
  2,465,577 ( 0.00%)    assert (neg_lit == NOT (pos_lit));
    821,859 ( 0.00%)    assert (pos_begin < pos_end);
    821,859 ( 0.00%)    assert (neg_begin < neg_end);
  1,095,812 ( 0.00%)    assert (pos_begin->lits[0] == pos_lit);
  1,095,812 ( 0.00%)    assert (neg_begin->lits[0] == neg_lit);
    829,065 ( 0.00%)    assert (pos_end <= neg_begin || neg_end <= pos_begin);
  2,746,398 ( 0.00%)    for (const litpair *p = pos_begin; p != pos_end; p++) {
    827,010 ( 0.00%)      const unsigned other = p->lits[1];
  2,205,360 ( 0.00%)      const unsigned not_other = NOT (other);
  2,205,360 ( 0.00%)      if (find_litpair_second_literal (not_other, neg_begin, neg_end)) {
 13,424,973 ( 0.01%)  => build/../src/congruence.c:find_litpair_second_literal (275,670x)
          .                 unsigned first, second;
  2,111,319 ( 0.00%)        if (NEGATED (pos_lit))
     11,440 ( 0.00%)          first = neg_lit, second = other;
          .                 else
    929,212 ( 0.00%)          first = pos_lit, second = not_other;
  1,407,546 ( 0.00%)        LOG ("found conditional %s equivalence %s = %s", LOGLIT (lit),
          .                      LOGLIT (first), LOGLIT (second));
  2,111,319 ( 0.00%)        assert (!NEGATED (first));
    703,773 ( 0.00%)        assert (first < second);
  3,049,683 ( 0.00%)        check_ternary (closure, lit, first, NOT (second));
1,317,801,801 ( 0.56%)  => build/../src/congruence.c:check_ternary (234,591x)
  3,518,865 ( 0.00%)        check_ternary (closure, lit, NOT (first), second);
1,307,819,061 ( 0.55%)  => build/../src/congruence.c:check_ternary (234,591x)
    938,364 ( 0.00%)        litpair equivalence = {.lits = {first, second}};
  3,050,391 ( 0.00%)        PUSH_STACK (*condeq, equivalence);
     45,881 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (59x)
  2,111,319 ( 0.00%)        if (NEGATED (second)) {
  1,447,104 ( 0.00%)          litpair inverse_equivalence = {.lits = {NOT (second), NOT (first)}};
  1,266,300 ( 0.00%)          PUSH_STACK (*condeq, inverse_equivalence);
      2,177 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (7x)
          .                 } else {
    576,588 ( 0.00%)          litpair inverse_equivalence = {.lits = {second, first}};
  1,873,923 ( 0.00%)          PUSH_STACK (*condeq, inverse_equivalence);
        311 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
          .                 }
          .               }
          .             }
          .           #ifndef LOGGING
          .             (void) lit;
          .           #endif
  2,465,577 ( 0.00%)  }
          .           
          .           static void extract_condeq_pairs (closure *closure, unsigned lit,
  1,877,667 ( 0.00%)                                    litpairs *condbin, litpairs *condeq) {
          .           #if defined(LOGGING) || !defined(NDEBUG)
    512,091 ( 0.00%)    kissat *const solver = closure->solver;
          .           #endif
    512,091 ( 0.00%)    const litpair *const begin = BEGIN_STACK (*condbin);
    512,091 ( 0.00%)    const litpair *const end = END_STACK (*condbin);
    341,394 ( 0.00%)    const litpair *pos_begin = begin;
          .             unsigned next_lit;
          .             for (;;) {
    571,907 ( 0.00%)      if (pos_begin == end)
        520 ( 0.00%)        return;
    556,173 ( 0.00%)      next_lit = pos_begin->lits[0];
  1,668,519 ( 0.00%)      if (!NEGATED (next_lit))
    170,437 ( 0.00%)        break;
     14,954 ( 0.00%)      pos_begin++;
          .             }
    161,182 ( 0.00%)    for (;;) {
  1,400,475 ( 0.00%)      assert (pos_begin != end);
  1,867,300 ( 0.00%)      assert (next_lit == pos_begin->lits[0]);
  4,201,425 ( 0.00%)      assert (!NEGATED (next_lit));
    933,650 ( 0.00%)      const unsigned pos_lit = next_lit;
  1,400,475 ( 0.00%)      const litpair *pos_end = pos_begin + 1;
          .               for (;;) {
  1,545,127 ( 0.00%)        if (pos_end == end)
     71,774 ( 0.00%)          return;
  1,401,303 ( 0.00%)        next_lit = pos_end->lits[0];
  1,401,303 ( 0.00%)        if (next_lit != pos_lit)
    430,938 ( 0.00%)          break;
     36,163 ( 0.00%)        pos_end++;
          .               }
  1,292,814 ( 0.00%)      assert (pos_end != end);
  1,723,752 ( 0.00%)      assert (next_lit == pos_end->lits[0]);
  3,447,504 ( 0.00%)      const unsigned neg_lit = NOT (pos_lit);
  1,292,814 ( 0.00%)      if (next_lit != neg_lit) {
  1,412,865 ( 0.00%)        if (NEGATED (next_lit)) {
     65,121 ( 0.00%)          pos_begin = pos_end + 1;
          .                   for (;;) {
     70,377 ( 0.00%)            if (pos_begin == end)
      7,732 ( 0.00%)              return;
     57,465 ( 0.00%)            next_lit = pos_begin->lits[0];
    172,395 ( 0.00%)            if (!NEGATED (next_lit))
     17,841 ( 0.00%)              break;
      1,314 ( 0.00%)            pos_begin++;
          .                   }
          .                 } else
    270,556 ( 0.00%)          pos_begin = pos_end;
    153,119 ( 0.00%)        continue;
          .               }
    547,906 ( 0.00%)      const litpair *const neg_begin = pos_end;
    821,859 ( 0.00%)      const litpair *neg_end = neg_begin + 1;
  1,296,774 ( 0.00%)      while (neg_end != end) {
    520,665 ( 0.00%)        next_lit = neg_end->lits[0];
    520,665 ( 0.00%)        if (next_lit != neg_lit)
    148,414 ( 0.00%)          break;
     25,141 ( 0.00%)        neg_end++;
          .               }
          .           #ifdef LOGGING
  1,369,765 ( 0.00%)      if (kissat_logging (solver)) {
  2,465,577 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_logging (273,953x)
          .                 for (const litpair *p = pos_begin; p != pos_end; p++)
          .                   LOG ("conditional %s binary clause %s %s with positive %s",
          .                        LOGLIT (lit), LOGLIT (p->lits[0]), LOGLIT (p->lits[1]),
          .                        LOGLIT (pos_lit));
          .                 for (const litpair *p = neg_begin; p != neg_end; p++)
          .                   LOG ("conditional %s binary clause %s %s with negative %s",
          .                        LOGLIT (lit), LOGLIT (p->lits[0]), LOGLIT (p->lits[1]),
          .                        LOGLIT (neg_lit));
          .               }
          .           #endif
  1,095,812 ( 0.00%)      const size_t pos_size = pos_end - pos_begin;
  1,095,812 ( 0.00%)      const size_t neg_size = neg_end - neg_begin;
    821,859 ( 0.00%)      if (pos_size <= neg_size) {
  1,629,306 ( 0.00%)        LOG ("searching negation of %zu conditional binary clauses "
          .                      "with positive %s in %zu conditional binary clauses with %s",
          .                      pos_size, LOGLIT (pos_lit), neg_size, LOGLIT (neg_lit));
  4,344,816 ( 0.00%)        search_condeq (closure, lit, pos_lit, pos_begin, pos_end, neg_lit,
2,661,716,521 ( 1.13%)  => build/../src/congruence.c:search_condeq (271,551x)
          .                                neg_begin, neg_end, condeq);
          .               } else {
     14,412 ( 0.00%)        LOG ("searching negation of %zu conditional binary clauses "
          .                      "with negative %s in %zu conditional binary clauses with %s",
          .                      neg_size, LOGLIT (neg_lit), pos_size, LOGLIT (pos_lit));
     36,030 ( 0.00%)        search_condeq (closure, lit, neg_lit, neg_begin, neg_end, pos_lit,
 26,639,390 ( 0.01%)  => build/../src/congruence.c:search_condeq (2,402x)
          .                                pos_begin, pos_end, condeq);
          .               }
    821,859 ( 0.00%)      if (neg_end == end)
    251,078 ( 0.00%)        return;
    593,656 ( 0.00%)      assert (next_lit == neg_end->lits[0]);
  1,335,726 ( 0.00%)      if (NEGATED (next_lit)) {
     39,624 ( 0.00%)        pos_begin = neg_end + 1;
          .                 for (;;) {
     57,676 ( 0.00%)          if (pos_begin == end)
      5,145 ( 0.00%)            return;
     37,728 ( 0.00%)          next_lit = pos_begin->lits[0];
    113,184 ( 0.00%)          if (!NEGATED (next_lit))
      8,063 ( 0.00%)            break;
      4,513 ( 0.00%)          pos_begin++;
          .                 }
          .               } else
    405,618 ( 0.00%)        pos_begin = neg_end;
          .             }
  1,024,182 ( 0.00%)  }
          .           
          .           static void find_conditional_equivalences (closure *closure, unsigned lit,
          .                                                      watches *watches,
          .                                                      litpairs *condbin,
  2,389,758 ( 0.00%)                                             litpairs *condeq) {
  1,024,182 ( 0.00%)    assert (EMPTY_STACK (*condbin));
  1,024,182 ( 0.00%)    assert (EMPTY_STACK (*condeq));
    853,485 ( 0.00%)    assert (SIZE_WATCHES (*watches) > 1);
  2,048,364 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (170,697x)
    512,091 ( 0.00%)    kissat *const solver = closure->solver;
  1,024,182 ( 0.00%)    copy_conditional_equivalences (solver, lit, watches, condbin);
240,556,378 ( 0.10%)  => build/../src/congruence.c:copy_conditional_equivalences (170,697x)
    853,485 ( 0.00%)    sort_pairs (solver, condbin);
243,931,243 ( 0.10%)  => build/../src/congruence.c:sort_pairs (170,697x)
          .           #ifdef LOGGING
    853,485 ( 0.00%)    if (kissat_logging (solver)) {
  1,536,273 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_logging (170,697x)
          .               for (all_stack (litpair, pair, *condbin))
          .                 LOG ("sorted conditional %s binary clause %s %s", LOGLIT (lit),
          .                      LOGLIT (pair.lits[0]), LOGLIT (pair.lits[1]));
          .               LOG ("found %zu conditional %s binary clauses", SIZE_STACK (*condbin),
          .                    LOGLIT (lit));
          .             }
          .           #endif
  1,024,182 ( 0.00%)    extract_condeq_pairs (closure, lit, condbin, condeq);
2,741,383,404 ( 1.16%)  => build/../src/congruence.c:extract_condeq_pairs (170,697x)
    853,485 ( 0.00%)    sort_pairs (solver, condeq);
161,016,043 ( 0.07%)  => build/../src/congruence.c:sort_pairs (170,697x)
          .           #ifdef LOGGING
    853,485 ( 0.00%)    if (kissat_logging (solver)) {
  1,536,273 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_logging (170,697x)
          .               for (all_stack (litpair, pair, *condeq))
          .                 LOG ("sorted conditional %s equivalence %s = %s", LOGLIT (lit),
          .                      LOGLIT (pair.lits[0]), LOGLIT (pair.lits[1]));
          .               LOG ("found %zu conditional %s equivalences", SIZE_STACK (*condeq),
          .                    LOGLIT (lit));
          .             }
          .           #endif
  1,536,273 ( 0.00%)  }
          .           
          .           static void merge_condeq (closure *closure, unsigned cond, litpairs *condeq,
    787,292 ( 0.00%)                            litpairs *not_condeq) {
    214,716 ( 0.00%)    kissat *solver = closure->solver;
    644,148 ( 0.00%)    assert (!NEGATED (cond));
    214,716 ( 0.00%)    const litpair *const begin_condeq = BEGIN_STACK (*condeq);
    214,716 ( 0.00%)    const litpair *const end_condeq = END_STACK (*condeq);
    214,716 ( 0.00%)    const litpair *const begin_not_condeq = BEGIN_STACK (*not_condeq);
    214,716 ( 0.00%)    const litpair *const end_not_condeq = END_STACK (*not_condeq);
    143,144 ( 0.00%)    const litpair *p = begin_condeq;
    143,144 ( 0.00%)    const litpair *q = begin_not_condeq;
    955,282 ( 0.00%)    while (p != end_condeq) {
  1,114,990 ( 0.00%)      litpair cond_pair = *p++;
    445,996 ( 0.00%)      const unsigned lhs = cond_pair.lits[0];
    445,996 ( 0.00%)      const unsigned then_lit = cond_pair.lits[1];
  2,006,982 ( 0.00%)      assert (!NEGATED (lhs));
  1,732,758 ( 0.00%)      while (q != end_not_condeq && q->lits[0] < lhs)
     24,776 ( 0.00%)        q++;
  3,019,355 ( 0.00%)      while (q != end_not_condeq && q->lits[0] == lhs) {
  1,086,670 ( 0.00%)        litpair not_cond_pair = *q++;
    434,668 ( 0.00%)        const unsigned else_lit = not_cond_pair.lits[1];
  1,738,672 ( 0.00%)        new_ite_gate (closure, lhs, cond, then_lit, else_lit);
1,077,841,261 ( 0.46%)  => build/../src/congruence.c:new_ite_gate (217,334x)
    869,336 ( 0.00%)        if (solver->inconsistent)
          .                   return;
          .               }
          .             }
    357,860 ( 0.00%)  }
          .           
          .           static void extract_ite_gates_of_literal (closure *closure, unsigned lit,
          .                                                     unsigned not_lit,
          .                                                     watches *lit_watches,
    891,333 ( 0.00%)                                            watches *not_lit_watches) {
          .           #ifndef NDEBUG
    297,111 ( 0.00%)    kissat *solver = closure->solver;
          .           #endif
    297,111 ( 0.00%)    litpairs *condbin = closure->condbin;
    297,111 ( 0.00%)    litpairs *condeq = closure->condeq;
    792,296 ( 0.00%)    find_conditional_equivalences (closure, lit, lit_watches, condbin + 0,
1,614,895,405 ( 0.68%)  => build/../src/congruence.c:find_conditional_equivalences (99,037x)
          .                                            condeq + 0);
    594,222 ( 0.00%)    if (EMPTY_STACK (condeq[0]))
     54,754 ( 0.00%)      goto CLEAN_UP;
    716,600 ( 0.00%)    find_conditional_equivalences (closure, not_lit, not_lit_watches,
1,789,914,848 ( 0.76%)  => build/../src/congruence.c:find_conditional_equivalences (71,660x)
          .                                            condbin + 1, condeq + 1);
    573,280 ( 0.00%)    if (EMPTY_STACK (condeq[1]))
         88 ( 0.00%)      goto CLEAN_UP;
    644,148 ( 0.00%)    if (NEGATED (lit))
    182,000 ( 0.00%)      merge_condeq (closure, not_lit, condeq + 0, condeq + 1);
779,990,496 ( 0.33%)  => build/../src/congruence.c:merge_condeq (22,750x)
          .             else
    488,220 ( 0.00%)      merge_condeq (closure, lit, condeq + 1, condeq + 0);
314,875,414 ( 0.13%)  => build/../src/congruence.c:merge_condeq (48,822x)
          .           CLEAN_UP:
    396,148 ( 0.00%)    CLEAR_STACK (condbin[0]);
    594,222 ( 0.00%)    CLEAR_STACK (condbin[1]);
    396,148 ( 0.00%)    CLEAR_STACK (condeq[0]);
    594,222 ( 0.00%)    CLEAR_STACK (condeq[1]);
    297,111 ( 0.00%)  }
          .           
    712,764 ( 0.00%)  static void extract_ite_gates_of_variable (closure *closure, unsigned idx) {
    356,382 ( 0.00%)    kissat *const solver = closure->solver;
    831,558 ( 0.00%)    const unsigned lit = LIT (idx);
    950,352 ( 0.00%)    const unsigned not_lit = NOT (lit);
  1,306,734 ( 0.00%)    watches *lit_watches = &WATCHES (lit);
  1,306,734 ( 0.00%)    watches *not_lit_watches = &WATCHES (not_lit);
    475,176 ( 0.00%)    const size_t size_lit_watches = SIZE_WATCHES (*lit_watches);
  1,425,528 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (118,794x)
    475,176 ( 0.00%)    const size_t size_not_lit_watches = SIZE_WATCHES (*not_lit_watches);
  1,425,528 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (118,794x)
    356,382 ( 0.00%)    if (size_lit_watches <= size_not_lit_watches) {
    184,414 ( 0.00%)      if (size_lit_watches > 1)
    588,608 ( 0.00%)        extract_ite_gates_of_literal (closure, lit, not_lit, lit_watches,
2,257,239,138 ( 0.95%)  => build/../src/congruence.c:extract_ite_gates_of_literal (73,576x)
          .                                               not_lit_watches);
          .             } else {
     53,174 ( 0.00%)      if (size_not_lit_watches > 1)
    203,688 ( 0.00%)        extract_ite_gates_of_literal (closure, not_lit, lit, not_lit_watches,
2,250,543,150 ( 0.95%)  => build/../src/congruence.c:extract_ite_gates_of_literal (25,461x)
          .                                               lit_watches);
          .             }
    429,958 ( 0.00%)  }
          .           
          .           #else
          .           
          .           static void mark_third_literal_in_ternary_clauses (
          .               kissat *solver, const value *const values, unsigneds *marked,
          .               mark *marks, unsigned a, unsigned b) {
          .             assert (!solver->watching);
          .             assert (EMPTY_STACK (*marked));
-- line 3710 ----------------------------------------
-- line 3856 ----------------------------------------
          .                 extract_ite_gate (closure, values, marks, lhs, cond, then_lit);
          .                 unmark_all (marked, marks);
          .               }
          .             }
          .           }
          .           
          .           #endif
          .           
         28 ( 0.00%)  static void extract_and_gates (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    if (!GET_OPTION (congruenceands))
          .               return;
         36 ( 0.00%)    START (extractands);
          .           #ifndef QUIET
         12 ( 0.00%)    const statistics *s = &solver->statistics;
         12 ( 0.00%)    const uint64_t matched_before = s->congruent_matched_ands;
         12 ( 0.00%)    const uint64_t gates_before = s->congruent_gates_ands;
          .           #endif
         12 ( 0.00%)    init_and_gate_extraction (closure);
107,608,931 ( 0.05%)  => build/../src/congruence.c:init_and_gate_extraction (4x)
         16 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
        616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (4x)
  4,497,452 ( 0.00%)    for (all_clauses (c)) {
 30,398,254 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (499,713x)
  5,496,843 ( 0.00%)      if (TERMINATED (congruence_terminated_1))
 10,993,686 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (499,713x)
          .                 break;
  1,998,852 ( 0.00%)      if (solver->inconsistent)
          .                 break;
  2,498,565 ( 0.00%)      if (last_irredundant && last_irredundant < c)
          1 ( 0.00%)        break;
  2,498,560 ( 0.00%)      if (c->redundant)
     13,034 ( 0.00%)        continue;
  2,465,975 ( 0.00%)      if (c->garbage)
     10,959 ( 0.00%)        continue;
  2,893,416 ( 0.00%)      extract_and_gates_with_base_clause (closure, c);
1,971,144,375 ( 0.83%)  => build/../src/congruence.c:extract_and_gates_with_base_clause (482,236x)
          .             }
         12 ( 0.00%)    reset_and_gate_extraction (closure);
 20,868,787 ( 0.01%)  => build/../src/congruence.c:reset_and_gate_extraction (4x)
          .           #ifndef QUIET
         16 ( 0.00%)    const uint64_t matched = s->congruent_matched_ands - matched_before;
         16 ( 0.00%)    const uint64_t extracted = s->congruent_gates_ands - gates_before;
         16 ( 0.00%)    const uint64_t found = matched + extracted;
        224 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        272 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (8x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "found %" PRIu64 " AND gates (%" PRIu64
          .                           " extracted %.0f%% + %" PRIu64 " matched %.0f%%)",
          .                           found, extracted, kissat_percent (extracted, found),
          .                           matched, kissat_percent (matched, found));
          .           #endif
         36 ( 0.00%)    STOP (extractands);
         20 ( 0.00%)  }
          .           
         40 ( 0.00%)  static void extract_xor_gates (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    if (!GET_OPTION (congruencexors))
          .               return;
         36 ( 0.00%)    START (extractxors);
          .             references candidates;
         20 ( 0.00%)    INIT_STACK (candidates);
         20 ( 0.00%)    init_xor_gate_extraction (closure, &candidates);
999,473,298 ( 0.42%)  => build/../src/congruence.c:init_xor_gate_extraction (4x)
         40 ( 0.00%)    SHRINK_STACK (candidates);
        676 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_shrink_stack (4x)
          .           #ifndef QUIET
         12 ( 0.00%)    const statistics *s = &solver->statistics;
         12 ( 0.00%)    const uint64_t matched_before = s->congruent_matched_xors;
         12 ( 0.00%)    const uint64_t gates_before = s->congruent_gates_xors;
          .           #endif
  2,918,759 ( 0.00%)    for (all_stack (reference, ref, candidates)) {
  4,586,571 ( 0.00%)      if (TERMINATED (congruence_terminated_2))
  9,173,142 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (416,961x)
          .                 break;
  1,667,844 ( 0.00%)      if (solver->inconsistent)
          .                 break;
  2,501,766 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
 57,120,909 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (416,961x)
  2,084,805 ( 0.00%)      if (c->garbage)
          .                 continue;
  2,501,766 ( 0.00%)      extract_xor_gates_with_base_clause (closure, c);
2,978,104,317 ( 1.26%)  => build/../src/congruence.c:extract_xor_gates_with_base_clause (416,961x)
          .             }
         12 ( 0.00%)    reset_xor_gate_extraction (closure);
 30,959,373 ( 0.01%)  => build/../src/congruence.c:reset_xor_gate_extraction (4x)
         60 ( 0.00%)    RELEASE_STACK (candidates);
      1,105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           #ifndef QUIET
         16 ( 0.00%)    const uint64_t matched = s->congruent_matched_xors - matched_before;
         16 ( 0.00%)    const uint64_t extracted = s->congruent_gates_xors - gates_before;
         16 ( 0.00%)    const uint64_t found = matched + extracted;
        224 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        272 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (8x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "found %" PRIu64 " XOR gates (%" PRIu64
          .                           " extracted %.0f%% + %" PRIu64 " matched %.0f%%)",
          .                           found, extracted, kissat_percent (extracted, found),
          .                           matched, kissat_percent (matched, found));
          .           #endif
         36 ( 0.00%)    STOP (extractxors);
         32 ( 0.00%)  }
          .           
         40 ( 0.00%)  static void extract_ite_gates (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    if (!GET_OPTION (congruenceites))
          .               return;
         36 ( 0.00%)    START (extractites);
          .             references candidates;
         20 ( 0.00%)    INIT_STACK (candidates);
         20 ( 0.00%)    init_ite_gate_extraction (closure, &candidates);
606,121,221 ( 0.26%)  => build/../src/congruence.c:init_ite_gate_extraction (4x)
          .           #ifndef QUIET
         12 ( 0.00%)    const statistics *s = &solver->statistics;
         12 ( 0.00%)    const uint64_t matched_before = s->congruent_matched_ites;
         12 ( 0.00%)    const uint64_t gates_before = s->congruent_gates_ites;
          .           #endif
          .           #ifdef MERGE_CONDITIONAL_EQUIVALENCES
    480,880 ( 0.00%)    for (all_variables (idx))
  1,562,743 ( 0.00%)      if (ACTIVE (idx)) {
    593,970 ( 0.00%)        extract_ite_gates_of_variable (closure, idx);
4,518,864,444 ( 1.91%)  => build/../src/congruence.c:extract_ite_gates_of_variable (118,794x)
    475,176 ( 0.00%)        if (solver->inconsistent)
          .                   break;
          .               }
          .           #else
          .             for (all_stack (reference, ref, candidates)) {
          .               if (TERMINATED (congruence_terminated_3))
          .                 break;
          .               if (solver->inconsistent)
          .                 break;
          .               clause *c = kissat_dereference_clause (solver, ref);
          .               if (c->garbage)
          .                 continue;
          .               extract_ite_gates_with_base_clause (closure, c);
          .             }
          .           #endif
         12 ( 0.00%)    reset_ite_gate_extraction (closure);
 30,137,813 ( 0.01%)  => build/../src/congruence.c:reset_ite_gate_extraction (4x)
         60 ( 0.00%)    RELEASE_STACK (candidates);
      1,014 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           #ifndef QUIET
         16 ( 0.00%)    const uint64_t matched = s->congruent_matched_ites - matched_before;
         16 ( 0.00%)    const uint64_t extracted = s->congruent_gates_ites - gates_before;
         16 ( 0.00%)    const uint64_t found = matched + extracted;
        224 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        272 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (8x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "found %" PRIu64 " ITE gates (%" PRIu64
          .                           " extracted %.0f%% + %" PRIu64 " matched %.0f%%)",
          .                           found, extracted, kissat_percent (extracted, found),
          .                           matched, kissat_percent (matched, found));
          .           #endif
         36 ( 0.00%)    STOP (extractites);
         32 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void init_extraction (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         24 ( 0.00%)    kissat_enter_dense_mode (solver, &closure->binaries);
 61,376,049 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (4x)
         12 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void reset_extraction (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         24 ( 0.00%)    kissat_resume_sparse_mode (solver, false, &closure->binaries);
425,642,004 ( 0.18%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (4x)
         96 ( 0.00%)    RELEASE_STACK (closure->binaries);
        995 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         12 ( 0.00%)  }
          .           
         24 ( 0.00%)  static void extract_gates (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         36 ( 0.00%)    START (extract);
         16 ( 0.00%)    assert (!solver->level);
          .           #ifndef QUIET
         12 ( 0.00%)    const statistics *s = &solver->statistics;
         24 ( 0.00%)    const uint64_t before = s->congruent_gates + s->congruent_matched;
          .           #endif
         12 ( 0.00%)    init_extraction (closure);
 61,376,117 ( 0.03%)  => build/../src/congruence.c:init_extraction (4x)
         12 ( 0.00%)    extract_binaries (closure);
249,241,939 ( 0.11%)  => build/../src/congruence.c:extract_binaries (4x)
         20 ( 0.00%)    assert (!solver->inconsistent);
         12 ( 0.00%)    extract_and_gates (closure);
2,163,389,306 ( 0.92%)  => build/../src/congruence.c:extract_and_gates (4x)
         68 ( 0.00%)    if (!solver->inconsistent && !TERMINATED (congruence_terminated_4)) {
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4x)
         12 ( 0.00%)      extract_xor_gates (closure);
4,091,095,467 ( 1.73%)  => build/../src/congruence.c:extract_xor_gates (4x)
         68 ( 0.00%)      if (!solver->inconsistent && !TERMINATED (congruence_terminated_5))
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4x)
         12 ( 0.00%)        extract_ite_gates (closure);
5,158,238,357 ( 2.18%)  => build/../src/congruence.c:extract_ite_gates (4x)
          .             }
         12 ( 0.00%)    reset_extraction (closure);
425,643,163 ( 0.18%)  => build/../src/congruence.c:reset_extraction (4x)
          .           #ifndef QUIET
         24 ( 0.00%)    const uint64_t after = s->congruent_gates + s->congruent_matched;
         12 ( 0.00%)    const uint64_t found = after - before;
        132 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "found %" PRIu64 " gates (%.2f%% variables)", found,
          8 ( 0.00%)                  kissat_percent (found, solver->active));
          .           #endif
         36 ( 0.00%)    STOP (extract);
         16 ( 0.00%)  }
          .           
         36 ( 0.00%)  static void find_units (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    assert (solver->watching);
         20 ( 0.00%)    assert (!solver->inconsistent);
         20 ( 0.00%)    assert (kissat_propagated (solver));
         96 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (4x)
         16 ( 0.00%)    closure->units = solver->propagate;
         12 ( 0.00%)    unsigneds *marked = &solver->analyzed;
         12 ( 0.00%)    mark *const marks = solver->marks;
          4 ( 0.00%)    size_t units = 0;
    480,876 ( 0.00%)    for (all_variables (idx)) {
    120,211 ( 0.00%)    RESTART:
  1,682,968 ( 0.00%)      if (!ACTIVE (idx))
      1,418 ( 0.00%)        continue;
    831,558 ( 0.00%)      unsigned lit = LIT (idx);
  1,544,317 ( 0.00%)      for (unsigned sign = 0; sign != 2; sign++, lit++) {
  2,613,468 ( 0.00%)        watches *const watches = &WATCHES (lit);
  1,425,528 ( 0.00%)        const watch *p = BEGIN_WATCHES (*watches);
  1,900,704 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (237,588x)
  1,425,528 ( 0.00%)        const watch *const end = END_WATCHES (*watches);
  1,900,704 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (237,588x)
  1,425,528 ( 0.00%)        assert (EMPTY_STACK (*marked));
  1,488,988 ( 0.00%)        while (p != end) {
  2,247,440 ( 0.00%)          const watch watch = *p++;
  2,247,440 ( 0.00%)          if (!watch.type.binary)
    202,456 ( 0.00%)            break;
    741,096 ( 0.00%)          const unsigned other = watch.binary.lit;
  1,976,256 ( 0.00%)          const unsigned not_other = NOT (other);
  1,482,192 ( 0.00%)          if (marks[not_other]) {
          6 ( 0.00%)            LOG ("binary clauses %s %s and %s %s yield unit %s", LOGLIT (lit),
          .                          LOGLIT (other), LOGLIT (lit), LOGLIT (not_other),
          .                          LOGLIT (lit));
          1 ( 0.00%)            units++;
         12 ( 0.00%)            bool failed = !learn_congruence_unit (closure, lit);
      3,359 ( 0.00%)  => build/../src/congruence.c:learn_congruence_unit (1x)
          5 ( 0.00%)            unmark_all (marked, marks);
         58 ( 0.00%)  => build/../src/congruence.c:unmark_all (1x)
          3 ( 0.00%)            if (failed)
          .                       return;
          .                     else
          .                       goto RESTART;
          .                   }
  1,482,190 ( 0.00%)          if (marks[other])
          .                     continue;
    988,108 ( 0.00%)          marks[other] = 1;
  3,211,351 ( 0.00%)          PUSH_STACK (*marked, other);
          .                 }
  1,187,935 ( 0.00%)        unmark_all (marked, marks);
  8,191,202 ( 0.00%)  => build/../src/congruence.c:unmark_all (237,587x)
          .               }
          .             }
         24 ( 0.00%)    assert (EMPTY_STACK (*marked));
          .           #ifndef QUIET
         32 ( 0.00%)    kissat_very_verbose (solver, "found %zu units", units);
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
          .           #else
          .             (void) units;
          .           #endif
         28 ( 0.00%)  }
          .           
         20 ( 0.00%)  static void find_equivalences (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         16 ( 0.00%)    assert (solver->watching);
         20 ( 0.00%)    assert (!solver->inconsistent);
         12 ( 0.00%)    unsigneds *const marked = &solver->analyzed;
         12 ( 0.00%)    mark *const marks = solver->marks;
         24 ( 0.00%)    assert (EMPTY_STACK (*marked));
    480,876 ( 0.00%)    for (all_variables (idx)) {
    120,211 ( 0.00%)    RESTART:
  1,702,218 ( 0.00%)      if (!ACTIVE (idx))
      2,836 ( 0.00%)        continue;
    841,183 ( 0.00%)      const unsigned lit = LIT (idx);
  1,321,859 ( 0.00%)      watches *lit_watches = &WATCHES (lit);
    721,014 ( 0.00%)      const watch *p = BEGIN_WATCHES (*lit_watches);
    961,352 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (120,169x)
    721,014 ( 0.00%)      const watch *const end_lit_watches = END_WATCHES (*lit_watches);
    961,352 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (120,169x)
    721,014 ( 0.00%)      assert (EMPTY_STACK (*marked));
    671,984 ( 0.00%)      while (p != end_lit_watches) {
    980,480 ( 0.00%)        const watch watch = *p++;
    980,480 ( 0.00%)        if (!watch.type.binary)
     99,245 ( 0.00%)          break;
    290,553 ( 0.00%)        const unsigned other = watch.binary.lit;
    290,553 ( 0.00%)        if (lit > other)
     43,580 ( 0.00%)          continue;
    450,366 ( 0.00%)        if (marks[other])
        396 ( 0.00%)          continue;
    298,660 ( 0.00%)        marks[other] = 1;
  1,045,310 ( 0.00%)        PUSH_STACK (*marked, other);
          .               }
    721,014 ( 0.00%)      if (EMPTY_STACK (*marked))
     81,905 ( 0.00%)        continue;
    306,112 ( 0.00%)      const unsigned not_lit = NOT (lit);
    420,904 ( 0.00%)      watches *not_lit_watches = &WATCHES (not_lit);
    229,584 ( 0.00%)      p = BEGIN_WATCHES (*not_lit_watches);
    306,112 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (38,264x)
    229,584 ( 0.00%)      const watch *const end_not_lit_watches = END_WATCHES (*not_lit_watches);
    306,112 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (38,264x)
    292,148 ( 0.00%)      while (p != end_not_lit_watches) {
    402,720 ( 0.00%)        const watch watch = *p++;
    402,720 ( 0.00%)        if (!watch.type.binary)
     33,825 ( 0.00%)          break;
    140,157 ( 0.00%)        const unsigned other = watch.binary.lit;
    140,157 ( 0.00%)        if (not_lit > other)
     50,704 ( 0.00%)          continue;
     64,101 ( 0.00%)        if (lit == other)
          .                   continue;
    170,936 ( 0.00%)        const unsigned not_other = NOT (other);
    128,202 ( 0.00%)        if (marks[not_other]) {
     22,338 ( 0.00%)          unsigned lit_repr = find_repr (closure, lit);
     82,346 ( 0.00%)  => build/../src/congruence.c:find_repr (3,723x)
     22,338 ( 0.00%)          unsigned other_repr = find_repr (closure, other);
    107,877 ( 0.00%)  => build/../src/congruence.c:find_repr (3,723x)
     11,169 ( 0.00%)          if (lit_repr != other_repr) {
     11,008 ( 0.00%)            if (merge_literals (closure, lit, other))
  9,381,344 ( 0.00%)  => build/../src/congruence.c:merge_literals (1,376x)
      5,504 ( 0.00%)              INC (congruent_equivalences);
     20,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_equivalences (1,376x)
      6,880 ( 0.00%)            unmark_all (marked, marks);
     68,672 ( 0.00%)  => build/../src/congruence.c:unmark_all (1,376x)
      6,880 ( 0.00%)            if (solver->inconsistent)
          .                       return;
          .                     else
          .                       goto RESTART;
          .                   }
          .                 }
          .               }
    221,328 ( 0.00%)      unmark_all (marked, marks);
  1,669,116 ( 0.00%)  => build/../src/congruence.c:unmark_all (36,888x)
          .             }
         24 ( 0.00%)    assert (EMPTY_STACK (*marked));
          .           #ifndef QUIET
         32 ( 0.00%)    size_t found = SIZE_FIFO (closure->schedule);
         32 ( 0.00%)    kissat_very_verbose (solver, "found %zu equivalences", found);
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
          .           #endif
          8 ( 0.00%)  }
          .           
         12 ( 0.00%)  static bool simplify_gates (closure *closure, unsigned lit) {
          6 ( 0.00%)    kissat *const solver = closure->solver;
         12 ( 0.00%)    LOG ("simplifying gates with RHS literal %s", LOGLIT (lit));
         14 ( 0.00%)    assert (solver->values[lit]);
         18 ( 0.00%)    gates *lit_occurrences = closure->occurrences + lit;
         90 ( 0.00%)    for (all_pointers (gate, g, *lit_occurrences))
         80 ( 0.00%)      if (!simplify_gate (closure, g))
    158,103 ( 0.00%)  => build/../src/congruence.c:simplify_gate (10x)
          .                 return false;
         48 ( 0.00%)    RELEASE_STACK (*lit_occurrences);
        420 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
          2 ( 0.00%)    return true;
          4 ( 0.00%)  }
          .           
     21,378 ( 0.00%)  static bool rewrite_gates (closure *closure, unsigned dst, unsigned src) {
      9,162 ( 0.00%)    kissat *const solver = closure->solver;
     18,324 ( 0.00%)    LOG ("rewriting gates with RHS literal %s", LOGLIT (src));
      9,162 ( 0.00%)    gates *occurrences = closure->occurrences;
     27,486 ( 0.00%)    gates *src_occurrences = occurrences + src;
     27,486 ( 0.00%)    gates *dst_occurrences = occurrences + dst;
     57,434 ( 0.00%)    for (all_pointers (gate, g, *src_occurrences))
     34,578 ( 0.00%)      if (!rewrite_gate (closure, g, dst, src))
128,566,500 ( 0.05%)  => build/../src/congruence.c:rewrite_gate (3,842x)
          .                 return false;
     51,597 ( 0.00%)      else if (!g->garbage && gate_contains (g, dst))
    135,882 ( 0.00%)  => build/../src/congruence.c:gate_contains (3,529x)
     61,338 ( 0.00%)        PUSH_STACK (*dst_occurrences, g);
    481,866 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1,361x)
     73,296 ( 0.00%)    RELEASE_STACK (*src_occurrences);
    258,630 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (3,054x)
      3,054 ( 0.00%)    return true;
      6,108 ( 0.00%)  }
          .           
          6 ( 0.00%)  static bool propagate_unit (closure *closure, unsigned lit) {
          3 ( 0.00%)    kissat *const solver = closure->solver;
          6 ( 0.00%)    LOG ("propagation of congruence unit %s", LOGLIT (lit));
          .             (void) solver;
          5 ( 0.00%)    assert (!solver->inconsistent);
          8 ( 0.00%)    const unsigned not_lit = NOT (lit);
         17 ( 0.00%)    return simplify_gates (closure, lit) && simplify_gates (closure, not_lit);
    158,809 ( 0.00%)  => build/../src/congruence.c:simplify_gates (2x)
          2 ( 0.00%)  }
          .           
      9,162 ( 0.00%)  static bool propagate_equivalence (closure *closure, unsigned lit) {
      4,581 ( 0.00%)    kissat *const solver = closure->solver;
      9,162 ( 0.00%)    LOG ("propagation of congruence equivalence %s", CLOGREPR (lit));
      7,635 ( 0.00%)    assert (!solver->inconsistent);
     18,324 ( 0.00%)    if (VALUE (lit))
          .               return true;
      9,162 ( 0.00%)    const unsigned lit_repr = find_repr (closure, lit);
     50,391 ( 0.00%)  => build/../src/congruence.c:find_repr (1,527x)
      6,108 ( 0.00%)    if (solver->inconsistent)
          .               return false;
     12,216 ( 0.00%)    const unsigned not_lit = NOT (lit);
     12,216 ( 0.00%)    const unsigned not_lit_repr = NOT (lit_repr);
     19,851 ( 0.00%)    return rewrite_gates (closure, lit_repr, lit) &&
 87,273,114 ( 0.04%)  => build/../src/congruence.c:rewrite_gates (1,527x)
      9,162 ( 0.00%)           rewrite_gates (closure, not_lit_repr, not_lit);
 42,570,167 ( 0.02%)  => build/../src/congruence.c:rewrite_gates (1,527x)
      3,054 ( 0.00%)  }
          .           
      7,655 ( 0.00%)  static bool propagate_units (closure *closure) {
      4,593 ( 0.00%)    kissat *const solver = closure->solver;
      7,655 ( 0.00%)    assert (!solver->inconsistent);
      4,593 ( 0.00%)    const unsigned_array *const trail = &solver->trail;
     10,723 ( 0.00%)    while (closure->units != trail->end)
         13 ( 0.00%)      if (!propagate_unit (closure, *closure->units++))
    158,856 ( 0.00%)  => build/../src/congruence.c:propagate_unit (1x)
          .                 return false;
      1,531 ( 0.00%)    return true;
      3,062 ( 0.00%)  }
          .           
         20 ( 0.00%)  static size_t propagate_units_and_equivalences (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         20 ( 0.00%)    assert (!solver->inconsistent);
         36 ( 0.00%)    START (merge);
         12 ( 0.00%)    unsigned_fifo *schedule = &closure->schedule;
          4 ( 0.00%)    size_t propagated = 0;
     18,376 ( 0.00%)    while (!TERMINATED (congruence_terminated_6) &&
     33,682 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (1,531x)
     16,845 ( 0.00%)           propagate_units (closure) && !EMPTY_FIFO (*schedule)) {
    198,681 ( 0.00%)  => build/../src/congruence.c:propagate_units (1,531x)
      1,527 ( 0.00%)      propagated++;
      6,108 ( 0.00%)      unsigned lit = dequeue_next_scheduled_literal (closure);
     84,334 ( 0.00%)  => build/../src/congruence.c:dequeue_next_scheduled_literal (1,527x)
     12,216 ( 0.00%)      if (!propagate_equivalence (closure, lit))
130,014,305 ( 0.05%)  => build/../src/congruence.c:propagate_equivalence (1,527x)
          .                 break;
          .             }
          .           #ifndef QUIET
         32 ( 0.00%)    const size_t units = closure->units - solver->trail.begin;
         28 ( 0.00%)    kissat_very_verbose (solver, "propagated %zu congruence units", units);
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
         28 ( 0.00%)    kissat_very_verbose (solver, "propagated %zu congruence equivalences",
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
          .                                  propagated);
          .           #endif
         36 ( 0.00%)    STOP (merge);
          4 ( 0.00%)    return propagated;
          8 ( 0.00%)  }
          .           
          .           #ifndef NDEBUG
          .           
          .           static void dump_closure_literal (closure *closure, unsigned ilit) {
          .             kissat *const solver = closure->solver;
          .             const int elit = kissat_export_literal (solver, ilit);
          .             printf ("%u(%d)", ilit, elit);
          .             unsigned repr_ilit = find_repr (closure, ilit);
-- line 4238 ----------------------------------------
-- line 4338 ----------------------------------------
          .           void kissat_dump_closure (closure *closure) {
          .             dump_units (closure);
          .             dump_equivalences (closure);
          .             dump_gates (closure);
          .           }
          .           
          .           #endif
          .           
     76,974 ( 0.00%)  static bool find_subsuming_clause (closure *closure, clause *c) {
     89,803 ( 0.00%)    assert (!c->garbage);
     38,487 ( 0.00%)    kissat *const solver = closure->solver;
     76,974 ( 0.00%)    const reference c_ref = kissat_reference_clause (solver, c);
  1,446,629 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (12,829x)
     38,487 ( 0.00%)    const value *const values = solver->values;
     38,487 ( 0.00%)    mark *marks = solver->marks;
          .             {
    102,632 ( 0.00%)      const unsigned *const end_lits = c->lits + c->size;
    298,147 ( 0.00%)      for (const unsigned *p = c->lits; p != end_lits; p++) {
    156,258 ( 0.00%)        const unsigned lit = *p;
    312,516 ( 0.00%)        assert (values[lit] <= 0);
    312,516 ( 0.00%)        const unsigned repr_lit = find_repr (closure, lit);
  1,244,089 ( 0.00%)  => build/../src/congruence.c:find_repr (52,086x)
    260,430 ( 0.00%)        const value value_repr_lit = values[repr_lit];
    104,172 ( 0.00%)        assert (value_repr_lit <= 0);
    104,172 ( 0.00%)        if (value_repr_lit < 0)
         34 ( 0.00%)          continue;
    312,414 ( 0.00%)        if (marks[repr_lit])
         34 ( 0.00%)          continue;
    676,455 ( 0.00%)        assert (!marks[NOT (repr_lit)]);
    260,175 ( 0.00%)        marks[repr_lit] = 1;
          .               }
          .             }
     12,829 ( 0.00%)    unsigned least_occurring_literal = INVALID_LIT;
     12,829 ( 0.00%)    unsigned count_least_occurring = UINT_MAX;
     76,974 ( 0.00%)    LOGREPRCLS (c, closure->repr, "trying to forward subsume");
     12,829 ( 0.00%)    clause *subsuming = 0;
    550,976 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
    308,370 ( 0.00%)      const unsigned repr_lit = find_repr (closure, lit);
  1,224,399 ( 0.00%)  => build/../src/congruence.c:find_repr (51,395x)
    565,345 ( 0.00%)      watches *const watches = &WATCHES (repr_lit);
    308,370 ( 0.00%)      const watch *p = BEGIN_WATCHES (*watches);
    411,160 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (51,395x)
    308,370 ( 0.00%)      const watch *const end = END_WATCHES (*watches);
    411,160 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (51,395x)
    205,580 ( 0.00%)      const size_t count = end - p;
    154,185 ( 0.00%)      assert (count <= UINT_MAX);
    154,185 ( 0.00%)      if (count < count_least_occurring) {
     43,042 ( 0.00%)        count_least_occurring = count;
     43,042 ( 0.00%)        least_occurring_literal = repr_lit;
          .               }
    273,725 ( 0.00%)      while (p != end) {
    164,895 ( 0.00%)        const watch watch = *p++;
    164,895 ( 0.00%)        assert (!watch.type.binary);
     98,937 ( 0.00%)        const reference d_ref = watch.large.ref;
    197,874 ( 0.00%)        clause *const d = kissat_dereference_clause (solver, d_ref);
  4,512,491 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (32,979x)
     98,937 ( 0.00%)        assert (c != d);
    230,853 ( 0.00%)        assert (!d->garbage);
    395,374 ( 0.00%)        if (!c->redundant && d->redundant)
          .                   continue;
    737,348 ( 0.00%)        for (all_literals_in_clause (other, d)) {
    266,690 ( 0.00%)          const value value = values[other];
    106,676 ( 0.00%)          if (value < 0)
          5 ( 0.00%)            continue;
    106,666 ( 0.00%)          assert (!value);
    319,998 ( 0.00%)          const unsigned repr_other = find_repr (closure, other);
  1,262,613 ( 0.00%)  => build/../src/congruence.c:find_repr (53,333x)
    319,998 ( 0.00%)          if (!marks[repr_other])
     32,672 ( 0.00%)            goto CONTINUE_WITH_NEXT_CLAUSE;
          .                 }
        918 ( 0.00%)        subsuming = d;
          .                 goto FOUND_SUBSUMING;
          .               CONTINUE_WITH_NEXT_CLAUSE:;
          .               }
          .             }
     12,523 ( 0.00%)  FOUND_SUBSUMING:
    557,037 ( 0.00%)    for (all_literals_in_clause (lit, c)) {
    312,516 ( 0.00%)      const unsigned repr_lit = find_repr (closure, lit);
  1,244,089 ( 0.00%)  => build/../src/congruence.c:find_repr (52,086x)
    260,430 ( 0.00%)      const value value = values[repr_lit];
    156,241 ( 0.00%)      if (!value)
    208,276 ( 0.00%)        marks[repr_lit] = 0;
          .             }
     25,658 ( 0.00%)    if (subsuming) {
      1,836 ( 0.00%)      LOGREPRCLS (c, closure->repr, "subsumed");
      1,836 ( 0.00%)      LOGREPRCLS (subsuming, closure->repr, "subsuming");
      1,530 ( 0.00%)      kissat_mark_clause_as_garbage (solver, c);
    949,201 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (306x)
      1,224 ( 0.00%)      INC (congruent_subsumed);
      4,590 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_congruent_subsumed (306x)
        612 ( 0.00%)      return true;
          .             } else {
     25,046 ( 0.00%)      assert (least_occurring_literal != INVALID_LIT);
     25,046 ( 0.00%)      assert (count_least_occurring < UINT_MAX);
     75,138 ( 0.00%)      LOGCLS (c, "forward subsumption failed of");
     75,138 ( 0.00%)      LOG ("connecting %u occurring %s", count_least_occurring,
          .                    LOGLIT (least_occurring_literal));
     75,138 ( 0.00%)      kissat_connect_literal (solver, least_occurring_literal, c_ref);
 31,517,782 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_connect_literal (12,523x)
     12,523 ( 0.00%)      return false;
          .             }
     25,658 ( 0.00%)  }
          .           
          .           struct refsize {
          .             reference ref;
          .             unsigned size;
          .           };
          .           
          .           typedef struct refsize refsize;
          .           typedef STACK (refsize) refsizes;
          .           
          .           #define RANKREFSIZE(REFSIZE) ((REFSIZE).size)
          .           
          .           static void sort_references_by_clause_size (kissat *solver,
         56 ( 0.00%)                                              refsizes *candidates) {
  1,084,532 ( 0.00%)    RADIX_STACK (refsize, unsigned, *candidates, RANKREFSIZE);
    100,626 ( 0.00%)  => ???:0x000000000010c650 (4x)
      3,251 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (4x)
        806 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (4x)
        516 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
         48 ( 0.00%)  }
          .           
         36 ( 0.00%)  static void forward_subsume_matching_clauses (closure *closure) {
         12 ( 0.00%)    kissat *const solver = closure->solver;
         36 ( 0.00%)    START (matching);
         12 ( 0.00%)    reset_closure (closure);
108,260,403 ( 0.05%)  => build/../src/congruence.c:reset_closure (4x)
          .             litpairs binaries;
         20 ( 0.00%)    INIT_STACK (binaries);
         20 ( 0.00%)    kissat_enter_dense_mode (solver, &binaries);
 73,013,028 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (4x)
          .             bool *matchable;
          .           #ifndef QUIET
          4 ( 0.00%)    unsigned count_matchable = 0;
          .           #endif
         36 ( 0.00%)    CALLOC (matchable, VARS);
    196,162 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (4x)
    480,876 ( 0.00%)    for (all_variables (idx))
  1,562,743 ( 0.00%)      if (ACTIVE (idx)) {
    831,551 ( 0.00%)        const unsigned lit = LIT (idx);
    712,758 ( 0.00%)        const unsigned repr = find_repr (closure, lit);
  2,630,243 ( 0.00%)  => build/../src/congruence.c:find_repr (118,793x)
    356,379 ( 0.00%)        if (lit == repr)
    117,266 ( 0.00%)          continue;
     12,216 ( 0.00%)        const unsigned repr_idx = IDX (repr);
     10,689 ( 0.00%)        if (!matchable[idx]) {
      9,162 ( 0.00%)          LOG ("matchable %s", LOGVAR (idx));
      6,108 ( 0.00%)          matchable[idx] = true;
          .           #ifndef QUIET
      1,527 ( 0.00%)          count_matchable++;
          .           #endif
          .                 }
     10,689 ( 0.00%)        if (!matchable[repr_idx]) {
      7,758 ( 0.00%)          LOG ("matchable %s", LOGVAR (repr_idx));
      5,172 ( 0.00%)          matchable[repr_idx] = true;
          .           #ifndef QUIET
      2,586 ( 0.00%)          count_matchable++;
          .           #endif
          .                 }
          .               }
        132 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "found %u matchable variables %.0f%%", count_matchable,
          8 ( 0.00%)                  kissat_percent (count_matchable, solver->active));
          4 ( 0.00%)    size_t potential = 0;
          .             refsizes candidates;
         20 ( 0.00%)    INIT_STACK (candidates);
         16 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
        616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (4x)
         12 ( 0.00%)    const value *const values = solver->values;
         12 ( 0.00%)    mark *const marks = solver->marks;
         12 ( 0.00%)    unsigneds *marked = &solver->analyzed;
  4,497,452 ( 0.00%)    for (all_clauses (c)) {
 30,398,254 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (499,713x)
  2,498,565 ( 0.00%)      if (c->garbage)
     11,795 ( 0.00%)        continue;
  2,439,590 ( 0.00%)      if (last_irredundant && last_irredundant < c)
          1 ( 0.00%)        break;
    487,917 ( 0.00%)      potential++;
    487,917 ( 0.00%)      bool contains_matchable = false;
  2,927,502 ( 0.00%)      assert (EMPTY_STACK (*marked));
  2,927,502 ( 0.00%)      LOGREPRCLS (c, closure->repr, "considering");
 19,888,720 ( 0.01%)      for (all_literals_in_clause (lit, c)) {
  8,978,935 ( 0.00%)        const value value = values[lit];
  3,591,574 ( 0.00%)        if (value < 0)
      3,141 ( 0.00%)          continue;
  3,585,292 ( 0.00%)        if (value > 0) {
         84 ( 0.00%)          LOGCLS (c, "satisfied %s in", LOGLIT (lit));
         70 ( 0.00%)          kissat_mark_clause_as_garbage (solver, c);
     15,991 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (14x)
         14 ( 0.00%)          break;
          .                 }
  7,170,528 ( 0.00%)        if (!contains_matchable) {
 14,120,960 ( 0.01%)          const unsigned lit_idx = IDX (lit);
 10,590,720 ( 0.00%)          if (matchable[lit_idx])
     12,955 ( 0.00%)            contains_matchable = true;
          .                 }
 10,755,792 ( 0.00%)        const unsigned repr = find_repr (closure, lit);
 39,538,070 ( 0.02%)  => build/../src/congruence.c:find_repr (1,792,632x)
 10,755,792 ( 0.00%)        assert (!values[repr]);
 10,755,792 ( 0.00%)        if (marks[repr])
         65 ( 0.00%)          continue;
 14,340,536 ( 0.01%)        const unsigned not_repr = NOT (repr);
 10,755,402 ( 0.00%)        if (marks[not_repr]) {
        732 ( 0.00%)          LOGCLS (c, "matches both %s and %s", CLOGREPR (lit),
          .                           LOGLIT (not_repr));
        610 ( 0.00%)          kissat_mark_clause_as_garbage (solver, c);
    338,315 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (122x)
        122 ( 0.00%)          break;
          .                 }
  7,169,780 ( 0.00%)        marks[repr] = 1;
 25,094,230 ( 0.01%)        PUSH_STACK (*marked, repr);
          .               }
  3,903,336 ( 0.00%)      const size_t size = SIZE_STACK (*marked);
 19,218,730 ( 0.01%)      for (all_stack (unsigned, repr, *marked))
  7,169,780 ( 0.00%)        marks[repr] = 0;
  1,951,668 ( 0.00%)      CLEAR_STACK (*marked);
  2,439,585 ( 0.00%)      if (c->garbage)
        272 ( 0.00%)        continue;
  1,951,124 ( 0.00%)      if (!contains_matchable) {
  2,849,712 ( 0.00%)        LOGREPRCLS (c, closure->repr, "no matchable variable in");
    474,952 ( 0.00%)        continue;
          .               }
     76,974 ( 0.00%)      const reference ref = kissat_reference_clause (solver, c);
  1,446,629 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (12,829x)
     38,487 ( 0.00%)      assert (size <= UINT_MAX);
     51,316 ( 0.00%)      refsize refsize = {.ref = ref, .size = size};
    128,730 ( 0.00%)      PUSH_STACK (candidates, refsize);
     72,498 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (44x)
          .             }
         32 ( 0.00%)    DEALLOC (matchable, VARS);
        945 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
          .           #ifndef QUIET
         20 ( 0.00%)    const size_t size_candidates = SIZE_STACK (candidates);
        100 ( 0.00%)    kissat_very_verbose (
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
          .                 solver, "considering %zu matchable subsumption candidates %.0f%%",
          .                 size_candidates, kissat_percent (size_candidates, potential));
          .           #else
          .             (void) potential;
          .           #endif
         20 ( 0.00%)    sort_references_by_clause_size (solver, &candidates);
  1,189,835 ( 0.00%)  => build/../src/congruence.c:sort_references_by_clause_size (4x)
          .           #ifndef QUIET
          8 ( 0.00%)    size_t tried = 0, subsumed = 0;
          .           #endif
     89,835 ( 0.00%)    for (all_stack (refsize, refsize, candidates)) {
    141,119 ( 0.00%)      if (TERMINATED (congruence_terminated_7))
    282,238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (12,829x)
          .                 break;
          .           #ifndef QUIET
     12,829 ( 0.00%)      tried++;
          .           #endif
     25,658 ( 0.00%)      const unsigned ref = refsize.ref;
     76,974 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
  1,754,525 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (12,829x)
     89,803 ( 0.00%)      if (find_subsuming_clause (closure, c)) {
 55,614,163 ( 0.02%)  => build/../src/congruence.c:find_subsuming_clause (12,829x)
          .           #ifndef QUIET
        306 ( 0.00%)        subsumed++;
          .           #endif
          .               }
          .             }
        140 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "subsumed %zu clauses out of %zu tried %.0f%%", subsumed,
          .                           tried, kissat_percent (subsumed, tried));
         20 ( 0.00%)    kissat_resume_sparse_mode (solver, false, &binaries);
527,503,110 ( 0.22%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (4x)
         60 ( 0.00%)    RELEASE_STACK (candidates);
      1,040 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         60 ( 0.00%)    RELEASE_STACK (binaries);
      1,064 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (4x)
         36 ( 0.00%)    STOP (matching);
         28 ( 0.00%)  }
          .           
         63 ( 0.00%)  bool kissat_congruence (kissat *solver) {
         28 ( 0.00%)    if (solver->inconsistent)
          .               return false;
         21 ( 0.00%)    kissat_check_statistics (solver);
124,005,165 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_check_statistics (7x)
         28 ( 0.00%)    assert (!solver->level);
         28 ( 0.00%)    assert (solver->probing);
         28 ( 0.00%)    assert (solver->watching);
         28 ( 0.00%)    if (!GET_OPTION (congruence))
          .               return false;
         28 ( 0.00%)    if (!GET_OPTION (congruenceands) && !GET_OPTION (congruenceites) &&
          .                 !GET_OPTION (congruencexors))
          .               return false;
         28 ( 0.00%)    if (GET_OPTION (congruenceonce) && solver->statistics.closures)
          .               return false;
         77 ( 0.00%)    if (TERMINATED (congruence_terminated_8))
        154 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (7x)
          .               return false;
         56 ( 0.00%)    if (DELAYING (congruence))
        682 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_delaying (7x)
          6 ( 0.00%)      return false;
         56 ( 0.00%)    START (congruence);
        384 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (4x)
         16 ( 0.00%)    INC (closures);
         60 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_closures (4x)
          .             closure closure;
         20 ( 0.00%)    init_closure (solver, &closure);
  6,601,655 ( 0.00%)  => build/../src/congruence.c:init_closure (4x)
         12 ( 0.00%)    extract_gates (&closure);
12,148,985,473 ( 5.14%)  => build/../src/congruence.c:extract_gates (4x)
          4 ( 0.00%)    bool reset = false;
         68 ( 0.00%)    if (!solver->inconsistent && !TERMINATED (congruence_terminated_9)) {
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4x)
         12 ( 0.00%)      find_units (&closure);
 40,803,406 ( 0.02%)  => build/../src/congruence.c:find_units (4x)
         68 ( 0.00%)      if (!solver->inconsistent && !TERMINATED (congruence_terminated_10)) {
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4x)
         12 ( 0.00%)        find_equivalences (&closure);
 29,771,357 ( 0.01%)  => build/../src/congruence.c:find_equivalences (4x)
         68 ( 0.00%)        if (!solver->inconsistent && !TERMINATED (congruence_terminated_11)) {
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4x)
         16 ( 0.00%)          size_t propagated = propagate_units_and_equivalences (&closure);
130,386,658 ( 0.06%)  => build/../src/congruence.c:propagate_units_and_equivalences (4x)
         36 ( 0.00%)          if (!solver->inconsistent && propagated &&
         40 ( 0.00%)              !TERMINATED (congruence_terminated_12)) {
         88 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (4x)
         12 ( 0.00%)            forward_subsume_matching_clauses (&closure);
1,060,927,878 ( 0.45%)  => build/../src/congruence.c:forward_subsume_matching_clauses (4x)
          4 ( 0.00%)            reset = true;
          .                   }
          .                 }
          .               }
          .             }
         16 ( 0.00%)    if (!reset)
          .               reset_closure (&closure);
         16 ( 0.00%)    unsigned equivalent = reset_repr (&closure);
  3,605,972 ( 0.00%)  => build/../src/congruence.c:reset_repr (4x)
        132 ( 0.00%)    kissat_phase (solver, "congruence", GET (closures),
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
         28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_closures (4x)
          .                           "merged %u equivalent variables %.2f%%", equivalent,
          8 ( 0.00%)                  kissat_percent (equivalent, solver->active));
         16 ( 0.00%)    assert (solver->active >= equivalent);
          .           #ifndef QUIET
         24 ( 0.00%)    solver->active -= equivalent;
         32 ( 0.00%)    REPORT (!equivalent, 'c');
    116,621 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (4x)
         20 ( 0.00%)    if (!solver->inconsistent)
         24 ( 0.00%)      solver->active += equivalent;
          .           #endif
         84 ( 0.00%)    if (kissat_average (equivalent, solver->active) < 0.001)
         68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (4x)
         14 ( 0.00%)      BUMP_DELAY (congruence);
        212 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_bump_delay (2x)
          .             else
         12 ( 0.00%)      REDUCE_DELAY (congruence);
         30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_reduce_delay (2x)
         56 ( 0.00%)    STOP (congruence);
        456 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (4x)
         12 ( 0.00%)    kissat_check_statistics (solver);
 75,984,148 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_check_statistics (4x)
          8 ( 0.00%)    return equivalent;
         42 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/fastel.c
--------------------------------------------------------------------------------
Ir                   

-- line 4 ----------------------------------------
          .           #include "inline.h"
          .           #include "internal.h"
          .           #include "print.h"
          .           #include "rank.h"
          .           #include "report.h"
          .           #include "terminate.h"
          .           #include "weaken.h"
          .           
  5,551,614 ( 0.00%)  static bool fast_forward_subsumed (kissat *solver, clause *c) {
  6,476,883 ( 0.00%)    assert (!c->garbage);
  6,476,883 ( 0.00%)    assert (!c->redundant);
    925,269 ( 0.00%)    unsigned max_occurring = INVALID_LIT;
    925,269 ( 0.00%)    size_t max_occurrence = 0;
  2,775,807 ( 0.00%)    watches *all_watches = solver->watches;
  2,775,807 ( 0.00%)    mark *marks = solver->marks;
  2,775,807 ( 0.00%)    value *values = solver->values;
 46,797,977 ( 0.02%)    for (all_literals_in_clause (other, c)) {
 37,621,648 ( 0.02%)      const unsigned other_idx = IDX (other);
 65,837,884 ( 0.03%)      if (!ACTIVE (other_idx))
          .                 continue;
 28,216,236 ( 0.01%)      watches *other_watches = all_watches + other;
 18,810,824 ( 0.01%)      size_t other_occurrence = SIZE_WATCHES (*other_watches);
 56,432,472 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (4,702,706x)
 14,108,118 ( 0.01%)      if (other_occurrence <= max_occurrence)
  3,010,124 ( 0.00%)        continue;
  3,385,164 ( 0.00%)      max_occurrence = other_occurrence;
  3,385,164 ( 0.00%)      max_occurring = other;
  8,462,910 ( 0.00%)      marks[other] = 1;
          .             }
    925,269 ( 0.00%)    bool subsumed = false;
  3,701,076 ( 0.00%)    const size_t fasteloccs = GET_OPTION (fasteloccs);
 46,772,041 ( 0.02%)    for (all_literals_in_clause (other, c)) {
 14,102,310 ( 0.01%)      if (other == max_occurring)
    924,301 ( 0.00%)        continue;
 30,211,752 ( 0.01%)      const unsigned other_idx = IDX (other);
 52,870,566 ( 0.02%)      if (!ACTIVE (other_idx))
          .                 continue;
 22,658,814 ( 0.01%)      watches *other_watches = all_watches + other;
 15,105,876 ( 0.01%)      const size_t size_other_watches = SIZE_WATCHES (*other_watches);
 45,317,628 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (3,776,469x)
 11,329,407 ( 0.00%)      if (size_other_watches > fasteloccs)
    257,441 ( 0.00%)        continue;
499,863,018 ( 0.21%)      for (all_binary_large_watches (watch, *other_watches)) {
 28,152,224 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (3,519,028x)
 28,152,224 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (3,519,028x)
245,223,596 ( 0.10%)        if (watch.type.binary) {
  5,426,748 ( 0.00%)          const unsigned other2 = watch.type.lit;
 10,853,496 ( 0.00%)          if (marks[other2]) {
     18,390 ( 0.00%)            LOGBINARY (other, other2, "subsuming");
      3,065 ( 0.00%)            subsumed = true;
      3,065 ( 0.00%)            break;
          .                   }
          .                 } else {
177,134,262 ( 0.07%)          const reference d_ref = watch.large.ref;
354,268,524 ( 0.15%)          clause *d = kissat_dereference_clause (solver, d_ref);
8,045,334,866 ( 3.40%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (59,044,754x)
177,134,262 ( 0.07%)          if (d == c)
  7,487,006 ( 0.00%)            continue;
276,506,255 ( 0.12%)          if (d->garbage)
 14,955,680 ( 0.01%)            continue;
286,940,466 ( 0.12%)          if (d->size > c->size)
 11,658,291 ( 0.00%)            continue;
253,155,840 ( 0.11%)          assert (!d->redundant);
 36,165,120 ( 0.02%)          subsumed = true;
881,462,433 ( 0.37%)          for (all_literals_in_clause (other2, d)) {
414,551,226 ( 0.18%)            if (values[other2] < 0)
          .                       continue;
414,551,226 ( 0.18%)            if (!marks[other2]) {
 36,164,366 ( 0.02%)              subsumed = false;
 36,164,366 ( 0.02%)              break;
          .                     }
          .                   }
 72,330,240 ( 0.03%)          if (subsumed)
      4,524 ( 0.00%)            LOGCLS (d, "subsuming");
          .                 }
          .               }
 10,553,988 ( 0.00%)      if (subsumed)
      3,096 ( 0.00%)        break;
          .             }
 51,500,683 ( 0.02%)    for (all_literals_in_clause (other, c))
 18,810,824 ( 0.01%)      marks[other] = 0;
  1,850,538 ( 0.00%)    if (subsumed) {
     18,576 ( 0.00%)      LOGCLS (c, "subsumed");
     15,480 ( 0.00%)      kissat_mark_clause_as_garbage (solver, c);
  8,026,057 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (3,096x)
     12,384 ( 0.00%)      INC (subsumed);
     46,440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_subsumed (3,096x)
     12,384 ( 0.00%)      INC (fast_subsumed);
     46,440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_fast_subsumed (3,096x)
          .             }
    925,269 ( 0.00%)    return subsumed;
  1,850,538 ( 0.00%)  }
          .           
  1,064,232 ( 0.00%)  static size_t flush_occurrences (kissat *solver, unsigned lit) {
    709,488 ( 0.00%)    const size_t fasteloccs = GET_OPTION (fasteloccs);
    709,488 ( 0.00%)    const size_t fastelclslim = GET_OPTION (fastelclslim);
    709,488 ( 0.00%)    const size_t fastelsub = GET_OPTION (fastelsub);
    532,116 ( 0.00%)    const value *const values = solver->values;
    532,116 ( 0.00%)    const flags *const all_flags = solver->flags;
  1,951,092 ( 0.00%)    watches *watches = &WATCHES (lit);
  1,064,232 ( 0.00%)    watch *begin = BEGIN_WATCHES (*watches);
  1,418,976 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (177,372x)
  1,064,232 ( 0.00%)    watch *end = END_WATCHES (*watches);
  1,418,976 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (177,372x)
    709,488 ( 0.00%)    watch *q = begin, *p = q;
    177,372 ( 0.00%)    size_t res = 0;
  4,778,448 ( 0.00%)    while (p != end) {
 12,980,000 ( 0.01%)      const watch watch = *q++ = *p++;
  5,192,000 ( 0.00%)      if (watch.type.binary) {
    624,660 ( 0.00%)        const unsigned other = watch.binary.lit;
  1,249,320 ( 0.00%)        if (values[other] > 0)
        928 ( 0.00%)          continue;
  1,658,336 ( 0.00%)        const unsigned other_idx = IDX (other);
  1,036,460 ( 0.00%)        const flags *other_flags = all_flags + other_idx;
  1,036,460 ( 0.00%)        if (other_flags->eliminated) {
     42,093 ( 0.00%)          q--;
     42,093 ( 0.00%)          continue;
          .                 }
          .               } else {
  3,269,340 ( 0.00%)        const reference ref = watch.large.ref;
  6,538,680 ( 0.00%)        clause *c = kissat_dereference_clause (solver, ref);
148,874,512 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (1,089,780x)
  5,448,900 ( 0.00%)        if (c->garbage) {
    164,511 ( 0.00%)          q--;
    164,511 ( 0.00%)          continue;
          .                 }
  4,626,345 ( 0.00%)        if (c->size > fastelclslim) {
          .                   res = fasteloccs + 1;
          .                   break;
          .                 }
 46,797,977 ( 0.02%)        for (all_literals_in_clause (other, c)) {
 23,513,530 ( 0.01%)          value other_value = values[other];
  9,405,412 ( 0.00%)          if (other_value > 0) {
          .                     LOGCLS (c, "%s satisfied", LOGLIT (other));
          .                     kissat_mark_clause_as_garbage (solver, c);
          .                     q--;
          .                     continue;
          .                   }
          .                 }
  8,327,421 ( 0.00%)        if (fastelsub && fast_forward_subsumed (solver, c)) {
12,966,265,817 ( 5.48%)  => build/../src/fastel.c:fast_forward_subsumed (925,269x)
      3,096 ( 0.00%)          q--;
      3,096 ( 0.00%)          continue;
          .                 }
          .               }
  5,436,257 ( 0.00%)      if (++res > fasteloccs)
        603 ( 0.00%)        break;
          .             }
    532,116 ( 0.00%)    if (q < p) {
    355,951 ( 0.00%)      while (p != end)
    426,856 ( 0.00%)        *q++ = *p++;
    783,520 ( 0.00%)      SET_END_OF_WATCHES (*watches, q);
  5,506,616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (48,970x)
    391,760 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (48,970x)
          .             }
    177,372 ( 0.00%)    return res;
    354,744 ( 0.00%)  }
          .           
          .           static void do_fast_resolve_binary_binary (kissat *solver, unsigned pivot,
     56,912 ( 0.00%)                                             unsigned clit, unsigned dlit) {
    213,420 ( 0.00%)    assert (!FLAGS (IDX (clit))->eliminated);
    213,420 ( 0.00%)    assert (!FLAGS (IDX (dlit))->eliminated);
     64,026 ( 0.00%)    if (clit == NOT (dlit)) {
          .               LOG ("resolvent tautological");
          .               return;
          .             }
     21,342 ( 0.00%)    value *values = solver->values;
     35,570 ( 0.00%)    value cval = values[clit];
     14,228 ( 0.00%)    if (cval > 0) {
        168 ( 0.00%)      LOG ("1st antecedent satisfied");
         56 ( 0.00%)      return;
          .             }
     35,430 ( 0.00%)    value dval = values[dlit];
     14,172 ( 0.00%)    if (dval > 0) {
      8,124 ( 0.00%)      LOG ("2nd antecedent satisfied");
      2,708 ( 0.00%)      return;
          .             }
     11,464 ( 0.00%)    if (cval < 0 && dval < 0) {
          .               assert (!solver->inconsistent);
          .               solver->inconsistent = true;
          .               LOG ("resolved empty clause");
          .               CHECK_AND_ADD_EMPTY ();
          .               ADD_EMPTY_TO_PROOF ();
          .               return;
          .             }
     11,464 ( 0.00%)    if (cval < 0) {
          .               LOG ("resolved unit clause %s", LOGLIT (dlit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, dlit);
          .               return;
          .             }
     11,464 ( 0.00%)    if (dval < 0) {
          .               LOG ("resolved unit clause %s", LOGLIT (clit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, clit);
          .               return;
          .             }
     17,196 ( 0.00%)    if (clit == dlit) {
          .               LOG ("resolved unit clause %s", LOGLIT (clit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, clit);
          .               return;
          .             }
     11,464 ( 0.00%)    assert (!cval);
     11,464 ( 0.00%)    assert (!dval);
     17,196 ( 0.00%)    unsigneds *clause = &solver->clause;
     34,392 ( 0.00%)    assert (EMPTY_STACK (*clause));
     74,516 ( 0.00%)    PUSH_STACK (*clause, clit);
     74,516 ( 0.00%)    PUSH_STACK (*clause, dlit);
     34,392 ( 0.00%)    LOGTMP ("%s resolvent", LOGVAR (pivot));
          .           #ifndef LOGGING
          .             (void) pivot;
          .           #endif
     17,196 ( 0.00%)    kissat_new_irredundant_clause (solver);
 28,769,962 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (5,732x)
     28,660 ( 0.00%)    CLEAR_STACK (*clause);
     14,228 ( 0.00%)  }
          .           
          .           static void do_fast_resolve_binary_large (kissat *solver, unsigned pivot,
    903,144 ( 0.00%)                                            unsigned lit, clause *c) {
  3,386,790 ( 0.00%)    assert (!FLAGS (IDX (lit))->eliminated);
    564,465 ( 0.00%)    if (c->garbage)
      7,914 ( 0.00%)      return;
    762,552 ( 0.00%)    assert (!c->redundant);
    326,808 ( 0.00%)    value *values = solver->values;
    544,680 ( 0.00%)    value lit_val = values[lit];
    217,872 ( 0.00%)    if (lit_val > 0) {
        492 ( 0.00%)      LOG ("binary clause antecedent satisfied");
        164 ( 0.00%)      return;
          .             }
    326,562 ( 0.00%)    unsigneds *clause = &solver->clause;
    653,124 ( 0.00%)    assert (EMPTY_STACK (*clause));
    217,708 ( 0.00%)    if (!lit_val)
  1,415,102 ( 0.00%)      PUSH_STACK (*clause, lit);
    217,708 ( 0.00%)    bool satisfied = false, tautological = false;
    870,832 ( 0.00%)    const unsigned not_lit = NOT (lit);
  3,829,840 ( 0.00%)    for (all_literals_in_clause (other, c)) {
  2,690,704 ( 0.00%)      const unsigned idx_other = IDX (other);
  1,009,014 ( 0.00%)      if (idx_other == pivot)
    166,194 ( 0.00%)        continue;
    759,723 ( 0.00%)      if (other == lit)
          4 ( 0.00%)        continue;
    759,717 ( 0.00%)      if (other == not_lit) {
    236,004 ( 0.00%)        LOG ("resolvent tautological");
     39,334 ( 0.00%)        tautological = true;
     39,334 ( 0.00%)        break;
          .               }
  1,069,525 ( 0.00%)      value other_val = values[other];
    427,810 ( 0.00%)      if (other_val < 0)
          .                 continue;
    427,810 ( 0.00%)      if (other_val > 0) {
          .                 LOG ("large clause antecedent satisfied");
          .                 kissat_mark_clause_as_garbage (solver, c);
          .                 satisfied = true;
          .                 break;
          .               }
  2,994,670 ( 0.00%)      PUSH_STACK (*clause, other);
          .             }
    435,416 ( 0.00%)    if (satisfied || tautological) {
    157,336 ( 0.00%)      CLEAR_STACK (*clause);
     39,334 ( 0.00%)      return;
          .             }
    556,160 ( 0.00%)    size_t size = SIZE_STACK (*clause);
    139,040 ( 0.00%)    if (!size) {
          .               assert (!solver->inconsistent);
          .               solver->inconsistent = true;
          .               LOG ("resolved empty clause");
          .               CHECK_AND_ADD_EMPTY ();
          .               ADD_EMPTY_TO_PROOF ();
          .               return;
          .             }
    139,040 ( 0.00%)    if (size == 1) {
          .               const unsigned unit = PEEK_STACK (*clause, 0);
          .               CLEAR_STACK (*clause);
          .               LOG ("resolved unit clause %s", LOGLIT (unit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, unit);
          .               return;
          .             }
    417,120 ( 0.00%)    LOGTMP ("%s resolvent", LOGVAR (pivot));
    208,560 ( 0.00%)    kissat_new_irredundant_clause (solver);
770,002,311 ( 0.33%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (69,520x)
    347,600 ( 0.00%)    CLEAR_STACK (*clause);
    225,786 ( 0.00%)  }
          .           
          .           static void do_fast_resolve_large_large (kissat *solver, unsigned pivot,
    374,776 ( 0.00%)                                           clause *c, clause *d) {
    234,235 ( 0.00%)    if (c->garbage)
        120 ( 0.00%)      return;
    233,935 ( 0.00%)    if (d->garbage)
      1,968 ( 0.00%)      return;
    320,621 ( 0.00%)    assert (!c->redundant);
    320,621 ( 0.00%)    assert (!d->redundant);
    137,409 ( 0.00%)    value *values = solver->values;
    137,409 ( 0.00%)    mark *marks = solver->marks;
    137,409 ( 0.00%)    unsigneds *clause = &solver->clause;
    274,818 ( 0.00%)    assert (EMPTY_STACK (*clause));
     91,606 ( 0.00%)    bool satisfied = false, tautological = false;
  1,829,858 ( 0.00%)    for (all_literals_in_clause (other, c)) {
  1,306,072 ( 0.00%)      const unsigned idx_other = IDX (other);
    489,777 ( 0.00%)      if (idx_other == pivot)
     91,606 ( 0.00%)        continue;
    587,280 ( 0.00%)      value other_val = values[other];
    234,912 ( 0.00%)      if (other_val < 0)
          .                 continue;
    234,912 ( 0.00%)      if (other_val > 0) {
          .                 LOG ("1st antecedent satisfied");
          .                 satisfied = true;
          .                 break;
          .               }
  1,526,928 ( 0.00%)      PUSH_STACK (*clause, other);
    587,280 ( 0.00%)      marks[other] = 1;
          .             }
    183,212 ( 0.00%)    if (satisfied || tautological) {
          .               for (all_stack (unsigned, other, *clause))
          .                 marks[other] = 0;
          .               CLEAR_STACK (*clause);
          .               return;
          .             }
    366,424 ( 0.00%)    size_t marked = SIZE_STACK (*clause);
  1,450,227 ( 0.00%)    for (all_literals_in_clause (other, d)) {
  1,003,824 ( 0.00%)      const unsigned idx_other = IDX (other);
    376,434 ( 0.00%)      if (idx_other == pivot)
     64,522 ( 0.00%)        continue;
    466,085 ( 0.00%)      value other_val = values[other];
    186,434 ( 0.00%)      if (other_val < 0)
          .                 continue;
    186,434 ( 0.00%)      if (other_val > 0) {
          .                 LOG ("2nd antecedent satisfied");
          .                 satisfied = true;
          .                 break;
          .               }
    466,085 ( 0.00%)      mark mark_other = marks[other];
    186,434 ( 0.00%)      if (mark_other)
     15,071 ( 0.00%)        continue;
    625,168 ( 0.00%)      const unsigned not_other = NOT (other);
    390,730 ( 0.00%)      mark mark_not_other = marks[not_other];
    156,292 ( 0.00%)      if (mark_not_other) {
    172,746 ( 0.00%)        LOG ("tautological resolvent");
     28,791 ( 0.00%)        tautological = true;
     28,791 ( 0.00%)        break;
          .               }
    690,970 ( 0.00%)      PUSH_STACK (*clause, other);
          .             }
    183,212 ( 0.00%)    if (satisfied || tautological) {
    788,862 ( 0.00%)      for (all_stack (unsigned, other, *clause))
    250,476 ( 0.00%)        marks[other] = 0;
    115,164 ( 0.00%)      CLEAR_STACK (*clause);
     28,791 ( 0.00%)      return;
          .             }
    136,096 ( 0.00%)    size_t size = SIZE_STACK (*clause);
     34,024 ( 0.00%)    if (!size) {
          .               assert (!solver->inconsistent);
          .               solver->inconsistent = true;
          .               LOG ("resolved empty clause");
          .               CHECK_AND_ADD_EMPTY ();
          .               ADD_EMPTY_TO_PROOF ();
          .               return;
          .             }
     34,024 ( 0.00%)    if (size == 1) {
          .               const unsigned unit = PEEK_STACK (*clause, 0);
          .               CLEAR_STACK (*clause);
          .               marks[unit] = 0;
          .               LOG ("resolved unit clause %s", LOGLIT (unit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, unit);
          .               return;
          .             }
    102,072 ( 0.00%)    LOGTMP ("%s resolvent", LOGVAR (pivot));
     51,036 ( 0.00%)    kissat_new_irredundant_clause (solver);
219,862,938 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (17,012x)
    306,216 ( 0.00%)    RESIZE_STACK (*clause, marked);
    622,600 ( 0.00%)    for (all_stack (unsigned, other, *clause))
    226,240 ( 0.00%)      marks[other] = 0;
     85,060 ( 0.00%)    CLEAR_STACK (*clause);
     93,694 ( 0.00%)  }
          .           
          .           static void do_fast_resolve (kissat *solver, unsigned pivot, watch cwatch,
  1,334,832 ( 0.00%)                               watch dwatch) {
    834,270 ( 0.00%)    assert (!solver->inconsistent);
    667,416 ( 0.00%)    LOGWATCH (LIT (pivot), cwatch, "1st fast %s elimination antecedent",
          .                       LOGVAR (pivot));
    667,416 ( 0.00%)    LOGWATCH (NOT (LIT (pivot)), dwatch, "1st fast %s elimination antecedent",
          .                       LOGVAR (pivot));
    500,562 ( 0.00%)    const unsigned clit = cwatch.binary.lit;
    500,562 ( 0.00%)    const unsigned dlit = dwatch.binary.lit;
    500,562 ( 0.00%)    const reference cref = cwatch.large.ref;
    500,562 ( 0.00%)    const reference dref = dwatch.large.ref;
    500,562 ( 0.00%)    const bool cbin = cwatch.type.binary;
    500,562 ( 0.00%)    const bool dbin = dwatch.type.binary;
  1,420,066 ( 0.00%)    clause *c = cbin ? 0 : kissat_dereference_clause (solver, cref);
 20,568,066 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (150,530x)
    947,701 ( 0.00%)    clause *d = dbin ? 0 : kissat_dereference_clause (solver, dref);
  7,671,105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (56,057x)
    366,356 ( 0.00%)    if (cbin && dbin)
     49,798 ( 0.00%)      do_fast_resolve_binary_binary (solver, pivot, clit, dlit);
 29,819,150 ( 0.01%)  => build/../src/fastel.c:do_fast_resolve_binary_binary (7,114x)
    356,320 ( 0.00%)    else if (cbin && !dbin)
     64,470 ( 0.00%)      do_fast_resolve_binary_large (solver, pivot, clit, d);
 29,384,825 ( 0.01%)  => build/../src/fastel.c:do_fast_resolve_binary_large (9,210x)
    903,180 ( 0.00%)    else if (!cbin && dbin)
    725,781 ( 0.00%)      do_fast_resolve_binary_large (solver, pivot, dlit, c);
768,148,478 ( 0.32%)  => build/../src/fastel.c:do_fast_resolve_binary_large (103,683x)
          .             else {
    374,776 ( 0.00%)      assert (!cbin), assert (!dbin);
    281,082 ( 0.00%)      do_fast_resolve_large_large (solver, pivot, c, d);
239,118,731 ( 0.10%)  => build/../src/fastel.c:do_fast_resolve_large_large (46,847x)
          .             }
    547,409 ( 0.00%)  }
          .           
    187,932 ( 0.00%)  static void fast_delete_and_weaken_clauses (kissat *solver, unsigned lit) {
     93,966 ( 0.00%)    watches *all_watches = solver->watches;
    187,932 ( 0.00%)    watches *lit_watches = all_watches + lit;
     93,966 ( 0.00%)    value *values = solver->values;
  1,379,287 ( 0.00%)    for (all_binary_large_watches (watch, *lit_watches)) {
    250,576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (31,322x)
    250,576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (31,322x)
    456,187 ( 0.00%)      if (watch.type.binary) {
    131,661 ( 0.00%)        const unsigned other = watch.binary.lit;
    219,435 ( 0.00%)        const value value = values[other];
     87,774 ( 0.00%)        if (value <= 0)
    259,632 ( 0.00%)          kissat_weaken_binary (solver, lit, other);
 15,945,200 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_binary (43,272x)
    307,209 ( 0.00%)        kissat_delete_binary (solver, lit, other);
 81,399,528 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (43,887x)
          .               } else {
    177,564 ( 0.00%)        const reference ref = watch.large.ref;
    355,128 ( 0.00%)        clause *c = kissat_dereference_clause (solver, ref);
  8,092,544 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (59,188x)
    414,316 ( 0.00%)        if (!c->garbage) {
     58,167 ( 0.00%)          bool satisfied = false;
  2,298,363 ( 0.00%)          for (all_literals_in_clause (other, c))
  1,222,164 ( 0.00%)            if (values[other] > 0) {
          .                       satisfied = true;
          .                       break;
          .                     }
    232,668 ( 0.00%)          if (!satisfied)
    349,002 ( 0.00%)            kissat_weaken_clause (solver, lit, c);
 36,921,778 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/weaken.c:kissat_weaken_clause (58,167x)
    290,835 ( 0.00%)          kissat_mark_clause_as_garbage (solver, c);
151,160,434 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (58,167x)
          .                 }
          .               }
          .             }
    156,610 ( 0.00%)    RELEASE_WATCHES (*lit_watches);
  3,909,096 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_release_vector (31,322x)
     93,966 ( 0.00%)  }
          .           
     93,966 ( 0.00%)  static void do_fast_eliminate (kissat *solver, unsigned pivot) {
     93,966 ( 0.00%)    LOG ("fast variable elimination of %s", LOGVAR (pivot));
    109,627 ( 0.00%)    const unsigned lit = LIT (pivot);
    125,288 ( 0.00%)    const unsigned not_lit = NOT (lit);
     46,983 ( 0.00%)    watches *all_watches = solver->watches;
     93,966 ( 0.00%)    watches *lit_watches = all_watches + lit;
     93,966 ( 0.00%)    watches *not_lit_watches = all_watches + not_lit;
     93,966 ( 0.00%)    LOG ("occurs %zu positively", SIZE_WATCHES (*lit_watches));
     93,966 ( 0.00%)    LOG ("occurs %zu negatively", SIZE_WATCHES (*not_lit_watches));
     93,966 ( 0.00%)    watch *begin_lit_watches = BEGIN_WATCHES (*lit_watches);
    125,288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (15,661x)
     93,966 ( 0.00%)    watch *begin_not_lit_watches = BEGIN_WATCHES (*not_lit_watches);
    125,288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (15,661x)
     93,966 ( 0.00%)    watch *end_lit_watches = END_WATCHES (*lit_watches);
    125,288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (15,661x)
     93,966 ( 0.00%)    watch *end_not_lit_watches = END_WATCHES (*not_lit_watches);
    125,288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (15,661x)
    276,794 ( 0.00%)    for (watch *p = begin_lit_watches; p < end_lit_watches; p++)
    941,658 ( 0.00%)      for (watch *q = begin_not_lit_watches; q < end_not_lit_watches; q++) {
  1,334,832 ( 0.00%)        do_fast_resolve (solver, pivot, *p, *q);
1,107,254,600 ( 0.47%)  => build/../src/fastel.c:do_fast_resolve (166,854x)
    667,416 ( 0.00%)        if (solver->inconsistent)
          .                   return;
    500,562 ( 0.00%)        watches *new_all_watches = solver->watches;
    667,416 ( 0.00%)        const size_t i = p - begin_lit_watches;
    667,416 ( 0.00%)        const size_t j = q - begin_not_lit_watches;
    333,708 ( 0.00%)        all_watches = new_all_watches;
  1,001,124 ( 0.00%)        lit_watches = all_watches + lit;
  1,001,124 ( 0.00%)        not_lit_watches = all_watches + not_lit;
  1,001,124 ( 0.00%)        begin_lit_watches = BEGIN_WATCHES (*lit_watches);
  1,334,832 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (166,854x)
  1,001,124 ( 0.00%)        begin_not_lit_watches = BEGIN_WATCHES (*not_lit_watches);
  1,334,832 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (166,854x)
  1,001,124 ( 0.00%)        end_lit_watches = END_WATCHES (*lit_watches);
  1,334,832 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (166,854x)
  1,001,124 ( 0.00%)        end_not_lit_watches = END_WATCHES (*not_lit_watches);
  1,334,832 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (166,854x)
    834,270 ( 0.00%)        p = begin_lit_watches + i;
    834,270 ( 0.00%)        q = begin_not_lit_watches + j;
          .               }
     78,305 ( 0.00%)    assert (!solver->inconsistent);
     62,644 ( 0.00%)    INC (eliminated);
    234,915 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_eliminated (15,661x)
     62,644 ( 0.00%)    INC (fast_eliminated);
    234,915 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_fast_eliminated (15,661x)
     78,305 ( 0.00%)    kissat_mark_eliminated_variable (solver, pivot);
  6,849,762 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_eliminated_variable (15,661x)
     78,305 ( 0.00%)    fast_delete_and_weaken_clauses (solver, lit);
158,403,981 ( 0.07%)  => build/../src/fastel.c:fast_delete_and_weaken_clauses (15,661x)
     93,966 ( 0.00%)    fast_delete_and_weaken_clauses (solver, not_lit);
148,579,515 ( 0.06%)  => build/../src/fastel.c:fast_delete_and_weaken_clauses (15,661x)
     31,322 ( 0.00%)  }
          .           
          .           static bool can_fast_resolve_binary_binary (kissat *solver, unsigned clit,
     84,497 ( 0.00%)                                              unsigned dlit) {
    362,130 ( 0.00%)    assert (!FLAGS (IDX (clit))->eliminated);
    362,130 ( 0.00%)    assert (!FLAGS (IDX (dlit))->eliminated);
    108,639 ( 0.00%)    if (clit == NOT (dlit))
          .               return false;
     36,213 ( 0.00%)    value *values = solver->values;
     60,355 ( 0.00%)    value cval = values[clit];
     24,142 ( 0.00%)    if (cval > 0)
         56 ( 0.00%)      return false;
     60,215 ( 0.00%)    value dval = values[dlit];
     24,086 ( 0.00%)    if (dval > 0)
        530 ( 0.00%)      return false;
     23,556 ( 0.00%)    if (cval < 0 && dval < 0) {
          .               assert (!solver->inconsistent);
          .               solver->inconsistent = true;
          .               LOG ("resolved empty clause");
          .               CHECK_AND_ADD_EMPTY ();
          .               ADD_EMPTY_TO_PROOF ();
          .               return false;
          .             }
     23,556 ( 0.00%)    if (cval < 0) {
          .               LOG ("resolved unit clause %s", LOGLIT (dlit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, dlit);
          .               return false;
          .             }
     23,556 ( 0.00%)    if (dval < 0) {
          .               LOG ("resolved unit clause %s", LOGLIT (clit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, clit);
          .               return false;
          .             }
     35,334 ( 0.00%)    if (clit == dlit) {
          .               LOG ("resolved unit clause %s", LOGLIT (clit));
          .               INC (eliminate_units);
          .               kissat_learned_unit (solver, clit);
          .               return false;
          .             }
     23,556 ( 0.00%)    assert (!cval);
     23,556 ( 0.00%)    assert (!dval);
     11,778 ( 0.00%)    return true;
     24,142 ( 0.00%)  }
          .           
          .           static bool can_fast_resolve_binary_large (kissat *solver, unsigned pivot,
  1,255,464 ( 0.00%)                                             unsigned lit, clause *c) {
  4,707,990 ( 0.00%)    assert (!FLAGS (IDX (lit))->eliminated);
    784,665 ( 0.00%)    if (c->garbage)
      5,940 ( 0.00%)      return false;
  1,077,741 ( 0.00%)    assert (!c->redundant);
    461,889 ( 0.00%)    value *values = solver->values;
    769,815 ( 0.00%)    value lit_val = values[lit];
    307,926 ( 0.00%)    if (lit_val > 0)
        838 ( 0.00%)      return false;
  1,228,352 ( 0.00%)    const unsigned not_lit = NOT (lit);
    153,544 ( 0.00%)    bool found_lit = false;
  7,481,859 ( 0.00%)    for (all_literals_in_clause (other, c)) {
  2,306,465 ( 0.00%)      if (other == lit)
      1,370 ( 0.00%)        found_lit = true;
  2,305,095 ( 0.00%)      if (other == not_lit)
     99,928 ( 0.00%)        return false;
  3,592,005 ( 0.00%)      value other_val = values[other];
  1,436,802 ( 0.00%)      if (other_val > 0) {
          .                 LOG ("large clause antecedent satisfied");
          .                 kissat_mark_clause_as_garbage (solver, c);
          .                 return false;
          .               }
          .             }
    207,160 ( 0.00%)    if (found_lit) {
      4,110 ( 0.00%)      unsigneds *clause = &solver->clause;
      8,220 ( 0.00%)      assert (EMPTY_STACK (*clause));
    186,394 ( 0.00%)      for (all_literals_in_clause (other, c)) {
    189,536 ( 0.00%)        const unsigned idx = IDX (other);
     71,076 ( 0.00%)        if (idx == pivot)
      2,740 ( 0.00%)          continue;
    111,610 ( 0.00%)        value value = values[other];
     44,644 ( 0.00%)        if (value < 0)
          .                   continue;
     44,644 ( 0.00%)        assert (!value);
    312,508 ( 0.00%)        PUSH_STACK (*clause, other);
          .               }
      8,220 ( 0.00%)      LOGTMP ("self-subsuming resolvent");
      5,480 ( 0.00%)      INC (strengthened);
     20,550 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_strengthened (1,370x)
      5,480 ( 0.00%)      INC (fast_strengthened);
     20,550 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_fast_strengthened (1,370x)
     10,960 ( 0.00%)      const size_t size = SIZE_STACK (*clause);
      8,220 ( 0.00%)      const reference ref = kissat_reference_clause (solver, c);
    153,506 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (1,370x)
      2,740 ( 0.00%)      if (!size) {
          .                 assert (!solver->inconsistent);
          .                 solver->inconsistent = true;
          .                 LOG ("resolved empty clause");
          .                 CHECK_AND_ADD_EMPTY ();
          .                 ADD_EMPTY_TO_PROOF ();
      2,740 ( 0.00%)      } else if (size == 1) {
          .                 const unsigned unit = PEEK_STACK (*clause, 0);
          .                 LOG ("resolved %s unit clause", LOGLIT (unit));
          .                 INC (eliminate_units);
          .                 kissat_learned_unit (solver, unit);
          .               } else
      4,110 ( 0.00%)        kissat_new_irredundant_clause (solver);
 30,656,749 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (1,370x)
      5,480 ( 0.00%)      CLEAR_STACK (*clause);
      8,220 ( 0.00%)      c = kissat_dereference_clause (solver, ref);
    186,386 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (1,370x)
      8,220 ( 0.00%)      LOGCLS (c, "self-subsuming antecedent");
      6,850 ( 0.00%)      kissat_mark_clause_as_garbage (solver, c);
 12,881,169 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (1,370x)
      2,740 ( 0.00%)      return false;
          .             }
    102,210 ( 0.00%)    return true;
    313,866 ( 0.00%)  }
          .           
          .           static bool can_fast_resolve_large_large (kissat *solver, unsigned pivot,
  2,908,936 ( 0.00%)                                            clause *c, clause *d) {
  1,818,085 ( 0.00%)    if (c->garbage)
      1,306 ( 0.00%)      return false;
  1,814,820 ( 0.00%)    if (d->garbage)
      2,006 ( 0.00%)      return false;
  2,533,727 ( 0.00%)    assert (!c->redundant);
  2,533,727 ( 0.00%)    assert (!d->redundant);
  1,085,883 ( 0.00%)    value *values = solver->values;
  1,085,883 ( 0.00%)    mark *marks = solver->marks;
    361,961 ( 0.00%)    bool satisfied = false;
  1,085,883 ( 0.00%)    unsigneds *clause = &solver->clause;
  2,171,766 ( 0.00%)    assert (EMPTY_STACK (*clause));
 14,347,996 ( 0.01%)    for (all_literals_in_clause (other, c)) {
 10,192,664 ( 0.00%)      const unsigned idx_other = IDX (other);
  3,822,249 ( 0.00%)      if (idx_other == pivot)
    723,922 ( 0.00%)        continue;
  4,560,610 ( 0.00%)      value other_val = values[other];
  1,824,244 ( 0.00%)      if (other_val < 0)
          .                 continue;
  1,824,244 ( 0.00%)      if (other_val > 0) {
          .                 satisfied = true;
          .                 LOGCLS (c, "%s satisfied", LOGLIT (other));
          .                 kissat_mark_clause_as_garbage (solver, c);
          .                 break;
          .               }
  5,472,732 ( 0.00%)      assert (!marks[other]);
  3,648,488 ( 0.00%)      marks[other] = 1;
 12,769,708 ( 0.01%)      PUSH_STACK (*clause, other);
          .             }
    361,961 ( 0.00%)    bool tautological = false;
  1,447,844 ( 0.00%)    if (!satisfied) {
 15,868,476 ( 0.01%)      for (all_literals_in_clause (other, d)) {
 12,645,336 ( 0.01%)        const unsigned idx_other = IDX (other);
  4,742,001 ( 0.00%)        if (idx_other == pivot)
    566,652 ( 0.00%)          continue;
  6,486,705 ( 0.00%)        value other_val = values[other];
  2,594,682 ( 0.00%)        if (other_val < 0)
          .                   continue;
  2,594,682 ( 0.00%)        if (other_val > 0) {
          .                   satisfied = true;
          .                   LOGCLS (d, "%s satisfied", LOGLIT (other));
          .                   kissat_mark_clause_as_garbage (solver, d);
          .                   break;
          .                 }
 10,378,728 ( 0.00%)        const unsigned not_other = NOT (other);
  6,486,705 ( 0.00%)        const mark mark_not_other = marks[not_other];
  2,594,682 ( 0.00%)        if (mark_not_other) {
    156,402 ( 0.00%)          tautological = true;
    156,402 ( 0.00%)          break;
          .                 }
  5,704,695 ( 0.00%)        const mark other_mark = marks[other];
  2,281,878 ( 0.00%)        if (other_mark)
     70,512 ( 0.00%)          continue;
 14,985,990 ( 0.01%)        PUSH_STACK (*clause, other);
        589 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
          .               }
          .             }
 15,622,079 ( 0.01%)    for (all_literals_in_clause (other, c))
  5,096,332 ( 0.00%)      marks[other] = 0;
    361,961 ( 0.00%)    bool strengthened = false;
  2,895,688 ( 0.00%)    if (!satisfied && !tautological) {
  1,644,472 ( 0.00%)      const size_t size = SIZE_STACK (*clause);
    411,118 ( 0.00%)      if (!size) {
          .                 assert (!solver->inconsistent);
          .                 solver->inconsistent = true;
          .                 LOG ("resolved empty clause");
          .                 CHECK_AND_ADD_EMPTY ();
          .                 ADD_EMPTY_TO_PROOF ();
          .                 strengthened = true;
    411,118 ( 0.00%)      } else if (size == 1) {
          .                 const unsigned unit = PEEK_STACK (*clause, 0);
          .                 LOG ("resolved %s unit clause", LOGLIT (unit));
          .                 INC (eliminate_units);
          .                 kissat_learned_unit (solver, unit);
          .                 strengthened = true;
          .               } else {
    411,118 ( 0.00%)        bool c_subsumed = false, d_subsumed = false;
    205,559 ( 0.00%)        bool marked = false;
  1,027,795 ( 0.00%)        if (size < c->size) {
         52 ( 0.00%)          marked = true;
     14,232 ( 0.00%)          for (all_stack (unsigned, other, *clause))
      6,856 ( 0.00%)            marks[other] = 1;
         52 ( 0.00%)          size_t count = 0;
     13,142 ( 0.00%)          for (all_literals_in_clause (other, c))
     12,310 ( 0.00%)            if (marks[other])
      1,714 ( 0.00%)              count++;
        208 ( 0.00%)          c_subsumed = (count >= size);
          .                 }
  1,027,795 ( 0.00%)        if (size < d->size) {
        116 ( 0.00%)          if (!marked) {
         29 ( 0.00%)            marked = true;
      4,778 ( 0.00%)            for (all_stack (unsigned, other, *clause))
      2,244 ( 0.00%)              marks[other] = 1;
          .                   }
         29 ( 0.00%)          size_t count = 0;
      4,565 ( 0.00%)          for (all_literals_in_clause (other, d))
      4,101 ( 0.00%)            if (marks[other])
        561 ( 0.00%)              count++;
        116 ( 0.00%)          d_subsumed = (count >= size);
          .                 }
    411,118 ( 0.00%)        if (marked) {
     19,010 ( 0.00%)          for (all_stack (unsigned, other, *clause))
      9,100 ( 0.00%)            marks[other] = 0;
          .                 }
    822,132 ( 0.00%)        if (c_subsumed || d_subsumed) {
        486 ( 0.00%)          LOGTMP ("self-subsuming resolvent");
        324 ( 0.00%)          INC (strengthened);
      1,215 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_strengthened (81x)
        324 ( 0.00%)          INC (fast_strengthened);
      1,215 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_fast_strengthened (81x)
        486 ( 0.00%)          const reference c_ref = kissat_reference_clause (solver, c);
      9,117 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (81x)
        486 ( 0.00%)          const reference d_ref = kissat_reference_clause (solver, d);
      9,101 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (81x)
        243 ( 0.00%)          kissat_new_irredundant_clause (solver);
  2,693,355 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (81x)
         81 ( 0.00%)          strengthened = true;
        162 ( 0.00%)          if (c_subsumed) {
        312 ( 0.00%)            c = kissat_dereference_clause (solver, c_ref);
      7,088 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (52x)
        312 ( 0.00%)            LOGCLS (c, "self-subsuming antecedent");
        260 ( 0.00%)            kissat_mark_clause_as_garbage (solver, c);
    987,919 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (52x)
          .                   }
        162 ( 0.00%)          if (d_subsumed) {
        174 ( 0.00%)            d = kissat_dereference_clause (solver, d_ref);
      3,945 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (29x)
        174 ( 0.00%)            LOGCLS (d, "self-subsuming antecedent");
        145 ( 0.00%)            kissat_mark_clause_as_garbage (solver, d);
    335,043 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (29x)
          .                   }
        266 ( 0.00%)          if (c_subsumed && d_subsumed)
          .                     INC (fast_subsumed);
          .                 }
          .               }
          .             }
  1,447,844 ( 0.00%)    CLEAR_STACK (*clause);
  4,647,324 ( 0.00%)    return !satisfied && !tautological && !strengthened;
    727,234 ( 0.00%)  }
          .           
          .           static bool can_fast_resolve (kissat *solver, unsigned pivot, watch cwatch,
  4,260,968 ( 0.00%)                                watch dwatch) {
  2,663,105 ( 0.00%)    assert (!solver->inconsistent);
  1,597,863 ( 0.00%)    const unsigned clit = cwatch.binary.lit;
  1,597,863 ( 0.00%)    const unsigned dlit = dwatch.binary.lit;
  1,597,863 ( 0.00%)    const reference cref = cwatch.large.ref;
  1,597,863 ( 0.00%)    const reference dref = dwatch.large.ref;
  1,597,863 ( 0.00%)    const bool cbin = cwatch.type.binary;
  1,597,863 ( 0.00%)    const bool dbin = dwatch.type.binary;
  4,491,909 ( 0.00%)    clause *c = cbin ? 0 : kissat_dereference_clause (solver, cref);
 64,657,817 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (472,285x)
  4,189,894 ( 0.00%)    clause *d = dbin ? 0 : kissat_dereference_clause (solver, dref);
 56,287,734 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (411,882x)
  1,185,914 ( 0.00%)    if (cbin && dbin)
     84,497 ( 0.00%)      return can_fast_resolve_binary_binary (solver, clit, dlit);
  1,312,027 ( 0.00%)  => build/../src/fastel.c:can_fast_resolve_binary_binary (12,071x)
  1,234,160 ( 0.00%)    if (cbin && !dbin)
    337,855 ( 0.00%)      return can_fast_resolve_binary_large (solver, pivot, clit, d);
 46,199,696 ( 0.02%)  => build/../src/fastel.c:can_fast_resolve_binary_large (48,265x)
  2,833,710 ( 0.00%)    if (!cbin && dbin)
    760,676 ( 0.00%)      return can_fast_resolve_binary_large (solver, pivot, dlit, c);
 27,375,080 ( 0.01%)  => build/../src/fastel.c:can_fast_resolve_binary_large (108,668x)
  2,908,936 ( 0.00%)    assert (!cbin), assert (!dbin);
  2,181,702 ( 0.00%)    return can_fast_resolve_large_large (solver, pivot, c, d);
208,032,059 ( 0.09%)  => build/../src/fastel.c:can_fast_resolve_large_large (363,617x)
  1,065,242 ( 0.00%)  }
          .           
          .           static bool resolvents_limited (kissat *solver, unsigned pivot,
    266,539 ( 0.00%)                                  size_t limit) {
    266,539 ( 0.00%)    const unsigned lit = LIT (pivot);
    304,616 ( 0.00%)    const unsigned not_lit = NOT (lit);
    114,231 ( 0.00%)    watches *all_watches = solver->watches;
    228,462 ( 0.00%)    watches *lit_watches = all_watches + lit;
    228,462 ( 0.00%)    watches *not_lit_watches = all_watches + not_lit;
    228,462 ( 0.00%)    watch *begin_lit_watches = BEGIN_WATCHES (*lit_watches);
    304,616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (38,077x)
    228,462 ( 0.00%)    watch *begin_not_lit_watches = BEGIN_WATCHES (*not_lit_watches);
    304,616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (38,077x)
    228,462 ( 0.00%)    watch *end_lit_watches = END_WATCHES (*lit_watches);
    304,616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (38,077x)
    228,462 ( 0.00%)    watch *end_not_lit_watches = END_WATCHES (*not_lit_watches);
    304,616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (38,077x)
     38,077 ( 0.00%)    size_t resolved = 0;
    556,642 ( 0.00%)    for (watch *p = begin_lit_watches; p < end_lit_watches; p++)
  2,678,748 ( 0.00%)      for (watch *q = begin_not_lit_watches; q < end_not_lit_watches; q++) {
  6,604,074 ( 0.00%)        if (can_fast_resolve (solver, pivot, *p, *q) && ++resolved > limit)
441,650,159 ( 0.19%)  => build/../src/fastel.c:can_fast_resolve (532,621x)
     55,994 ( 0.00%)          return false;
  2,018,496 ( 0.00%)        if (solver->inconsistent)
          .                   return false;
  1,513,872 ( 0.00%)        watches *new_all_watches = solver->watches;
  2,018,496 ( 0.00%)        const size_t i = p - begin_lit_watches;
  2,018,496 ( 0.00%)        const size_t j = q - begin_not_lit_watches;
  1,009,248 ( 0.00%)        all_watches = new_all_watches;
  3,027,744 ( 0.00%)        lit_watches = all_watches + lit;
  3,027,744 ( 0.00%)        not_lit_watches = all_watches + not_lit;
  3,027,744 ( 0.00%)        begin_lit_watches = BEGIN_WATCHES (*lit_watches);
  4,036,992 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (504,624x)
  3,027,744 ( 0.00%)        begin_not_lit_watches = BEGIN_WATCHES (*not_lit_watches);
  4,036,992 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (504,624x)
  3,027,744 ( 0.00%)        end_lit_watches = END_WATCHES (*lit_watches);
  4,036,992 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (504,624x)
  3,027,744 ( 0.00%)        end_not_lit_watches = END_WATCHES (*not_lit_watches);
  4,036,992 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (504,624x)
  2,523,120 ( 0.00%)        p = begin_lit_watches + i;
  2,523,120 ( 0.00%)        q = begin_not_lit_watches + j;
          .               }
     10,080 ( 0.00%)    return true;
     76,154 ( 0.00%)  }
          .           
    263,496 ( 0.00%)  static bool try_to_fast_eliminate (kissat *solver, unsigned pivot) {
    219,580 ( 0.00%)    assert (!solver->inconsistent);
    614,824 ( 0.00%)    if (!ACTIVE (pivot))
          .               return false;
    307,412 ( 0.00%)    const unsigned lit = LIT (pivot);
    351,328 ( 0.00%)    const unsigned not_lit = NOT (lit);
    175,664 ( 0.00%)    const size_t fasteloccs = GET_OPTION (fasteloccs);
    263,496 ( 0.00%)    const size_t pos = flush_occurrences (solver, lit);
3,599,727,402 ( 1.52%)  => build/../src/fastel.c:flush_occurrences (43,916x)
    131,748 ( 0.00%)    if (pos > fasteloccs)
          .               return false;
    263,496 ( 0.00%)    const size_t neg = flush_occurrences (solver, not_lit);
5,459,083,647 ( 2.31%)  => build/../src/fastel.c:flush_occurrences (43,916x)
    131,748 ( 0.00%)    if (neg > fasteloccs)
        478 ( 0.00%)      return false;
    174,708 ( 0.00%)    const size_t sum = pos + neg;
    131,031 ( 0.00%)    const size_t product = pos * neg;
    131,031 ( 0.00%)    if (sum > fasteloccs)
         38 ( 0.00%)      return false;
    174,632 ( 0.00%)    const size_t fastelim = GET_OPTION (fastelim);
    130,974 ( 0.00%)    if (product <= fastelim) {
     27,905 ( 0.00%)      do_fast_eliminate (solver, pivot);
391,171,578 ( 0.17%)  => build/../src/fastel.c:do_fast_eliminate (5,581x)
     11,162 ( 0.00%)      return true;
          .             }
    304,616 ( 0.00%)    if (resolvents_limited (solver, pivot, fastelim)) {
503,150,369 ( 0.21%)  => build/../src/fastel.c:resolvents_limited (38,077x)
     50,400 ( 0.00%)      do_fast_eliminate (solver, pivot);
1,050,998,725 ( 0.44%)  => build/../src/fastel.c:do_fast_eliminate (10,080x)
     20,160 ( 0.00%)      return true;
          .             }
     27,997 ( 0.00%)    return false;
     87,832 ( 0.00%)  }
          .           
          .           static void flush_eliminated_binary_clauses_of_literal (kissat *solver,
    527,304 ( 0.00%)                                                          unsigned lit) {
    263,652 ( 0.00%)    flags *all_flags = solver->flags;
    966,724 ( 0.00%)    watches *watches = &WATCHES (lit);
    527,304 ( 0.00%)    watch *begin = BEGIN_WATCHES (*watches);
    703,072 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (87,884x)
    527,304 ( 0.00%)    watch *end = END_WATCHES (*watches);
    703,072 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (87,884x)
    351,536 ( 0.00%)    watch *q = begin, *p = q;
  1,898,000 ( 0.00%)    while (p != end) {
  5,154,880 ( 0.00%)      watch watch = *q++ = *p++;
  3,060,848 ( 0.00%)      if (!watch.type.binary)
          .                 continue;
     96,240 ( 0.00%)      const unsigned other = watch.binary.lit;
    256,640 ( 0.00%)      const unsigned other_idx = IDX (other);
    160,400 ( 0.00%)      flags *other_flags = all_flags + other_idx;
    160,400 ( 0.00%)      if (other_flags->eliminated)
      1,794 ( 0.00%)        q--;
          .             }
  1,406,144 ( 0.00%)    SET_END_OF_WATCHES (*watches, q);
  2,869,811 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (87,884x)
    703,072 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (87,884x)
    263,652 ( 0.00%)  }
          .           
          5 ( 0.00%)  static void flush_eliminated_binary_clauses (kissat *solver) {
    175,776 ( 0.00%)    for (all_variables (idx)) {
    307,594 ( 0.00%)      const unsigned lit = LIT (idx);
    351,536 ( 0.00%)      const unsigned not_lit = NOT (lit);
    219,710 ( 0.00%)      flush_eliminated_binary_clauses_of_literal (solver, lit);
  9,723,664 ( 0.00%)  => build/../src/fastel.c:flush_eliminated_binary_clauses_of_literal (43,942x)
    219,710 ( 0.00%)      flush_eliminated_binary_clauses_of_literal (solver, not_lit);
 10,878,185 ( 0.00%)  => build/../src/fastel.c:flush_eliminated_binary_clauses_of_literal (43,942x)
          .             }
          4 ( 0.00%)  }
          .           
          .           struct candidate {
          .             unsigned pivot;
          .             unsigned score;
          .           };
          .           
          .           typedef struct candidate candidate;
          .           typedef STACK (candidate) candidates;
          .           
          .           #define RANK_CANDIDATE(CANDIDATE) ((CANDIDATE).score)
          .           
         13 ( 0.00%)  void kissat_fast_variable_elimination (kissat *solver) {
          4 ( 0.00%)    if (solver->inconsistent)
          .               return;
          4 ( 0.00%)    if (!GET_OPTION (fastel))
          .               return;
          .           #ifndef QUIET
          3 ( 0.00%)    const unsigned variables_before = solver->active;
          .           #endif
          4 ( 0.00%)    assert (!solver->level);
         14 ( 0.00%)    START (fastel);
         96 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (1x)
          4 ( 0.00%)    kissat_enter_dense_mode (solver, 0);
 23,396,773 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (1x)
          3 ( 0.00%)    kissat_connect_irredundant_large_clauses (solver);
 98,972,801 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_connect_irredundant_large_clauses (1x)
          3 ( 0.00%)    const unsigned fastelrounds = GET_OPTION (fastelrounds);
          4 ( 0.00%)    const size_t fasteloccs = GET_OPTION (fasteloccs);
          .           #ifndef QUIET
          1 ( 0.00%)    unsigned eliminated = 0;
          .           #endif
          1 ( 0.00%)    unsigned round = 0;
          .             candidates candidates;
          5 ( 0.00%)    INIT_STACK (candidates);
          1 ( 0.00%)    bool done = false;
          .             do {
         25 ( 0.00%)      if (round++ >= fastelrounds)
          1 ( 0.00%)        break;
         28 ( 0.00%)      kissat_extremely_verbose (
        172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4x)
          .                   solver, "gathering candidates for fast elimination round %u",
          .                   round);
         16 ( 0.00%)      assert (EMPTY_STACK (candidates));
         12 ( 0.00%)      flags *all_flags = solver->flags;
    703,104 ( 0.00%)      for (all_variables (pivot)) {
    878,840 ( 0.00%)        flags *pivot_flags = all_flags + pivot;
  1,054,608 ( 0.00%)        if (!pivot_flags->active)
    112,382 ( 0.00%)          continue;
    837,039 ( 0.00%)        if (!pivot_flags->eliminate)
    149,250 ( 0.00%)          continue;
    314,664 ( 0.00%)        const unsigned lit = LIT (pivot);
    269,712 ( 0.00%)        const size_t pos = flush_occurrences (solver, lit);
2,247,214,348 ( 0.95%)  => build/../src/fastel.c:flush_occurrences (44,952x)
    134,856 ( 0.00%)        if (pos > fasteloccs)
        728 ( 0.00%)          continue;
    312,116 ( 0.00%)        const unsigned not_lit = LIT (pivot);
    267,528 ( 0.00%)        const size_t neg = flush_occurrences (solver, not_lit);
1,972,045,640 ( 0.83%)  => build/../src/fastel.c:flush_occurrences (44,588x)
    133,764 ( 0.00%)        if (neg > fasteloccs)
          .                   continue;
    222,940 ( 0.00%)        const unsigned score = pos + neg;
    133,764 ( 0.00%)        if (score > fasteloccs)
        672 ( 0.00%)          continue;
    175,664 ( 0.00%)        candidate candidate = {pivot, score};
    439,330 ( 0.00%)        PUSH_STACK (candidates, candidate);
    610,315 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (17x)
          .               }
          .           #ifndef QUIET
         20 ( 0.00%)      const size_t size_candidates = SIZE_STACK (candidates);
         16 ( 0.00%)      const size_t active_variables = solver->active;
        100 ( 0.00%)      kissat_extremely_verbose (
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (4x)
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
          .                   solver, "gathered %zu candidates %.0f%% in elimination round %u",
          .                   size_candidates, kissat_percent (size_candidates, active_variables),
          .                   round);
          .           #endif
  3,697,140 ( 0.00%)      RADIX_STACK (candidate, unsigned, candidates, RANK_CANDIDATE);
    346,886 ( 0.00%)  => ???:0x000000000010c650 (4x)
    182,888 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (4x)
        847 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (4x)
        516 ( 0.00%)  => ???:0x000000000010c5b0 (4x)
          4 ( 0.00%)      unsigned eliminated_this_round = 0;
    307,444 ( 0.00%)      for (all_stack (candidate, candidate, candidates)) {
     87,832 ( 0.00%)        const unsigned pivot = candidate.pivot;
    219,580 ( 0.00%)        flags *pivot_flags = all_flags + pivot;
    263,496 ( 0.00%)        if (!pivot_flags->active)
          .                   continue;
    307,412 ( 0.00%)        if (!pivot_flags->eliminate)
          .                   continue;
    483,076 ( 0.00%)        if (TERMINATED (fastel_terminated_1)) {
    966,152 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (43,916x)
          .                   done = true;
          .                   break;
          .                 }
    307,412 ( 0.00%)        if (try_to_fast_eliminate (solver, pivot))
11,008,127,477 ( 4.66%)  => build/../src/fastel.c:try_to_fast_eliminate (43,916x)
     15,661 ( 0.00%)          eliminated_this_round++;
    175,664 ( 0.00%)        if (solver->inconsistent) {
          .                   done = true;
          .                   break;
          .                 }
    175,664 ( 0.00%)        pivot_flags->eliminate = false;
    131,748 ( 0.00%)        kissat_flush_units_while_connected (solver);
  1,053,984 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/eliminate.c:kissat_flush_units_while_connected (43,916x)
    175,664 ( 0.00%)        if (solver->inconsistent) {
          .                   done = true;
          .                   break;
          .                 }
          .               }
          8 ( 0.00%)      CLEAR_STACK (candidates);
          .           #ifndef QUIET
          8 ( 0.00%)      eliminated += eliminated_this_round;
        108 ( 0.00%)      kissat_very_verbose (
        136 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (4x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
          .                   solver, "fast eliminated %u of %zu candidates %.0f%% in round %u",
          .                   eliminated_this_round, size_candidates,
          .                   kissat_percent (eliminated_this_round, size_candidates), round);
          .           #endif
          8 ( 0.00%)      if (!eliminated_this_round)
          .                 done = true;
         16 ( 0.00%)    } while (!done);
         15 ( 0.00%)    RELEASE_STACK (candidates);
      2,723 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
    175,776 ( 0.00%)    for (all_variables (idx))
    527,304 ( 0.00%)      FLAGS (idx)->eliminate = true;
          3 ( 0.00%)    flush_eliminated_binary_clauses (solver);
 21,876,184 ( 0.01%)  => build/../src/fastel.c:flush_eliminated_binary_clauses (1x)
          5 ( 0.00%)    kissat_resume_sparse_mode (solver, true, 0);
129,688,586 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (1x)
          .           #ifndef QUIET
          3 ( 0.00%)    const unsigned original_variables = solver->statistics.variables_original;
          3 ( 0.00%)    const unsigned variables_after = solver->active;
         43 ( 0.00%)    kissat_verbose (
         68 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (2x)
         51 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_verbose (1x)
          .                 solver,
          .                 "[fastel] "
          .                 "fast elimination of %u variables %.0f%% (%u remain %.0f%%)",
          .                 eliminated, kissat_percent (eliminated, variables_before),
          .                 variables_after,
          .                 kissat_percent (variables_after, original_variables));
          .           #endif
         14 ( 0.00%)    STOP (fastel);
        114 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (1x)
          9 ( 0.00%)    REPORT (!eliminated, 'e');
     27,423 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (1x)
         11 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/shrink.c
--------------------------------------------------------------------------------
Ir                   

          .           #include "shrink.h"
          .           #include "allocate.h"
          .           #include "inline.h"
          .           #include "minimize.h"
          .           
    259,310 ( 0.00%)  static void reset_shrinkable (kissat *solver) {
          .           #ifdef LOGGING
     51,862 ( 0.00%)    size_t reset = 0;
          .           #endif
 11,371,954 ( 0.00%)    while (!EMPTY_STACK (solver->shrinkable)) {
 27,522,300 ( 0.01%)      const unsigned idx = POP_STACK (solver->shrinkable);
 11,008,920 ( 0.00%)      assigned *a = solver->assigned + idx;
  9,174,100 ( 0.00%)      assert (a->shrinkable);
  7,339,280 ( 0.00%)      a->shrinkable = false;
          .           #ifdef LOGGING
  1,834,820 ( 0.00%)      reset++;
          .           #endif
          .             }
    311,172 ( 0.00%)    LOG ("resetting %zu shrinkable variables", reset);
    155,586 ( 0.00%)  }
          .           
    282,185 ( 0.00%)  static void mark_shrinkable_as_removable (kissat *solver) {
          .           #ifdef LOGGING
    112,874 ( 0.00%)    size_t marked = 0, reset = 0;
          .           #endif
    169,311 ( 0.00%)    struct assigned *assigned = solver->assigned;
 18,972,535 ( 0.01%)    while (!EMPTY_STACK (solver->shrinkable)) {
 46,443,690 ( 0.02%)      const unsigned idx = POP_STACK (solver->shrinkable);
 18,577,476 ( 0.01%)      struct assigned *a = assigned + idx;
 15,481,230 ( 0.01%)      assert (a->shrinkable);
 12,384,984 ( 0.01%)      a->shrinkable = false;
 21,673,722 ( 0.01%)      assert (!a->poisoned);
          .           #ifdef LOGGING
  3,096,246 ( 0.00%)      reset++;
          .           #endif
 15,481,230 ( 0.01%)      if (a->removable)
  1,151,277 ( 0.00%)        continue;
 11,669,814 ( 0.00%)      kissat_push_removable (solver, assigned, idx);
 95,363,781 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_removable (1,944,969x)
          .           #ifdef LOGGING
  1,944,969 ( 0.00%)      marked++;
          .           #endif
          .             }
    338,622 ( 0.00%)    LOG ("resetting %zu shrinkable variables", reset);
    338,622 ( 0.00%)    LOG ("marked %zu removable variables", marked);
    169,311 ( 0.00%)  }
          .           
          .           static inline int shrink_literal (kissat *solver, assigned *assigned,
 80,019,632 ( 0.03%)                                    unsigned level, unsigned lit) {
 40,009,816 ( 0.02%)    assert (solver->assigned == assigned);
120,029,448 ( 0.05%)    assert (VALUE (lit) < 0);
          .           
 80,019,632 ( 0.03%)    const unsigned idx = IDX (lit);
 60,014,724 ( 0.03%)    struct assigned *a = assigned + idx;
 40,009,816 ( 0.02%)    assert (a->level <= level);
 40,009,816 ( 0.02%)    if (!a->level) {
    360,756 ( 0.00%)      LOG2 ("skipping root level assigned %s", LOGLIT (lit));
    120,252 ( 0.00%)      return 0;
          .             }
 49,711,640 ( 0.02%)    if (a->shrinkable) {
 20,454,222 ( 0.01%)      LOG2 ("skipping already shrinkable literal %s", LOGLIT (lit));
  6,818,074 ( 0.00%)      return 0;
          .             }
 26,133,164 ( 0.01%)    if (a->level < level) {
  8,011,125 ( 0.00%)      if (a->removable) {
  7,161,114 ( 0.00%)        LOG2 ("skipping removable thus shrinkable %s", LOGLIT (lit));
  2,387,038 ( 0.00%)        return 0;
          .               }
  2,043,530 ( 0.00%)      const bool always_minimize_on_lower_level = (GET_OPTION (shrink) > 2);
  1,634,824 ( 0.00%)      if (always_minimize_on_lower_level &&
  2,452,236 ( 0.00%)          kissat_minimize_literal (solver, lit, false)) {
871,855,313 ( 0.37%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/minimize.c:kissat_minimize_literal (408,706x)
  2,141,064 ( 0.00%)        LOG2 ("minimized thus shrinkable %s", LOGLIT (lit));
    713,688 ( 0.00%)        return 0;
          .               }
    311,172 ( 0.00%)      LOG ("literal %s on lower level %u < %u not removable/shrinkable",
          .                    LOGLIT (lit), a->level, level);
    103,724 ( 0.00%)      return -1;
          .             }
 29,586,396 ( 0.01%)    LOG2 ("marking %s as shrinkable", LOGLIT (lit));
 19,724,264 ( 0.01%)    a->shrinkable = true;
 64,104,040 ( 0.03%)    PUSH_STACK (solver->shrinkable, idx);
     67,024 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (14x)
  4,931,066 ( 0.00%)    return 1;
 30,007,362 ( 0.01%)  }
          .           
          .           static inline unsigned shrunken_block (kissat *solver, unsigned level,
          .                                                  unsigned *begin_block,
    451,496 ( 0.00%)                                         unsigned *end_block, unsigned uip) {
    112,874 ( 0.00%)    assert (uip != INVALID_LIT);
    451,496 ( 0.00%)    const unsigned not_uip = NOT (uip);
    338,622 ( 0.00%)    LOG ("found unique implication point %s on level %u", LOGLIT (uip),
          .                  level);
          .           
    169,311 ( 0.00%)    assert (begin_block < end_block);
          .           #if defined(LOGGING) || !defined(NDEBUG)
    225,748 ( 0.00%)    const size_t tmp = end_block - begin_block;
    338,622 ( 0.00%)    LOG ("shrinking %zu literals on level %u to single literal %s", tmp,
          .                  level, LOGLIT (not_uip));
    112,874 ( 0.00%)    assert (tmp > 1);
          .           #endif
          .           
          .           #ifdef LOGGING
     56,437 ( 0.00%)    bool not_uip_was_in_clause = false;
          .           #endif
     56,437 ( 0.00%)    unsigned block_shrunken = 0;
          .           
  4,943,730 ( 0.00%)    for (unsigned *p = begin_block; p != end_block; p++) {
  3,453,831 ( 0.00%)      const unsigned lit = *p;
  2,302,554 ( 0.00%)      if (lit == INVALID_LIT)
          .                 continue;
          .           #ifdef LOGGING
  3,453,831 ( 0.00%)      if (lit == not_uip)
    101,542 ( 0.00%)        not_uip_was_in_clause = true;
          .               else
  6,603,036 ( 0.00%)        LOG ("shrunken literal %s", LOGLIT (lit));
          .           #endif
  2,302,554 ( 0.00%)      *p = INVALID_LIT;
  2,302,554 ( 0.00%)      block_shrunken++;
          .             }
    169,311 ( 0.00%)    *begin_block = not_uip;
    112,874 ( 0.00%)    assert (block_shrunken);
     56,437 ( 0.00%)    block_shrunken--;
          .           #ifdef LOGGING
    112,874 ( 0.00%)    if (not_uip_was_in_clause)
    304,626 ( 0.00%)      LOG ("keeping single literal %s on level %u", LOGLIT (not_uip), level);
          .             else
     33,996 ( 0.00%)      LOG ("shrunken all literals on level %u and added %s instead", level,
          .                    LOGLIT (not_uip));
          .           #endif
    451,496 ( 0.00%)    const unsigned uip_idx = IDX (uip);
    169,311 ( 0.00%)    assigned *assigned = solver->assigned;
    338,622 ( 0.00%)    struct assigned *a = assigned + uip_idx;
    338,622 ( 0.00%)    if (!a->analyzed)
     33,996 ( 0.00%)      kissat_push_analyzed (solver, assigned, uip_idx);
    271,968 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (5,666x)
          .           
    169,311 ( 0.00%)    mark_shrinkable_as_removable (solver);
263,651,879 ( 0.11%)  => build/../src/shrink.c:mark_shrinkable_as_removable (56,437x)
          .           #ifndef LOGGING
          .             (void) level;
          .           #endif
     56,437 ( 0.00%)    return block_shrunken;
    112,874 ( 0.00%)  }
          .           
          .           static inline void push_literals_of_block (kissat *solver,
          .                                                      assigned *assigned,
          .                                                      unsigned *begin_block,
          .                                                      unsigned *end_block,
    866,392 ( 0.00%)                                             unsigned level) {
    433,196 ( 0.00%)    assert (assigned == solver->assigned);
          .           
  7,855,798 ( 0.00%)    for (const unsigned *p = begin_block; p != end_block; p++) {
  5,404,503 ( 0.00%)      const unsigned lit = *p;
  3,603,002 ( 0.00%)      if (lit == INVALID_LIT)
          .                 continue;
          .           #ifndef NDEBUG
          .               int tmp =
          .           #endif
 12,610,507 ( 0.01%)          shrink_literal (solver, assigned, level, lit);
147,723,863 ( 0.06%)  => build/../src/shrink.c:shrink_literal (1,801,501x)
  3,603,002 ( 0.00%)      assert (tmp > 0);
          .             }
    433,196 ( 0.00%)  }
          .           
          .           static inline unsigned shrink_along_binary (kissat *solver,
          .                                                       assigned *assigned,
          .                                                       unsigned level, unsigned uip,
 10,111,200 ( 0.00%)                                              unsigned other) {
 15,166,800 ( 0.01%)    assert (VALUE (other) < 0);
  5,055,600 ( 0.00%)    LOGBINARY2 (uip, other, "shrinking along %s reason", LOGLIT (uip));
  8,847,300 ( 0.00%)    int tmp = shrink_literal (solver, assigned, level, other);
 81,032,304 ( 0.03%)  => build/../src/shrink.c:shrink_literal (1,263,900x)
          .           #ifndef LOGGING
          .             (void) uip;
          .           #endif
  3,791,700 ( 0.00%)    return tmp > 0;
  2,527,800 ( 0.00%)  }
          .           
          .           static inline unsigned
          .           shrink_along_large (kissat *solver, assigned *assigned, unsigned level,
 26,662,635 ( 0.01%)                      unsigned uip, reference ref, bool *failed_ptr) {
  2,962,515 ( 0.00%)    unsigned open = 0;
 17,775,090 ( 0.01%)    LOGREF2 (ref, "shrinking along %s reason", LOGLIT (uip));
 17,775,090 ( 0.01%)    clause *c = kissat_dereference_clause (solver, ref);
405,615,051 ( 0.17%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (2,962,515x)
 11,850,060 ( 0.01%)    if (GET_OPTION (minimizeticks))
 11,850,060 ( 0.01%)      INC (search_ticks);
 44,437,725 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_search_ticks (2,962,515x)
113,527,232 ( 0.05%)    for (all_literals_in_clause (other, c)) {
 29,698,695 ( 0.01%)      if (other == uip)
  2,962,512 ( 0.00%)        continue;
 83,244,636 ( 0.04%)      assert (VALUE (other) < 0);
 48,559,371 ( 0.02%)      int tmp = shrink_literal (solver, assigned, level, other);
1,382,189,805 ( 0.58%)  => build/../src/shrink.c:shrink_literal (6,937,053x)
 13,874,106 ( 0.01%)      if (tmp < 0) {
    103,724 ( 0.00%)        *failed_ptr = true;
     51,862 ( 0.00%)        break;
          .               }
 13,770,382 ( 0.01%)      if (tmp > 0)
  2,996,056 ( 0.00%)        open++;
          .             }
  2,962,515 ( 0.00%)    return open;
  5,925,030 ( 0.00%)  }
          .           
          .           static inline unsigned shrink_along_reason (kissat *solver,
          .                                                       assigned *assigned,
          .                                                       unsigned level, unsigned uip,
          .                                                       bool resolve_large_clauses,
 42,264,150 ( 0.02%)                                              bool *failed_ptr) {
  4,226,415 ( 0.00%)    unsigned open = 0;
 33,811,320 ( 0.01%)    const unsigned uip_idx = IDX (uip);
 25,358,490 ( 0.01%)    struct assigned *a = assigned + uip_idx;
 21,132,075 ( 0.01%)    assert (a->shrinkable);
 16,905,660 ( 0.01%)    assert (a->level == level);
 16,905,660 ( 0.01%)    assert (a->reason != DECISION_REASON);
 21,132,075 ( 0.01%)    if (a->binary) {
  3,791,700 ( 0.00%)      const unsigned other = a->reason;
 12,639,000 ( 0.01%)      open = shrink_along_binary (solver, assigned, level, uip, other);
126,532,704 ( 0.05%)  => build/../src/shrink.c:shrink_along_binary (1,263,900x)
          .             } else {
  8,887,545 ( 0.00%)      reference ref = a->reason;
  5,925,030 ( 0.00%)      if (resolve_large_clauses)
 35,550,180 ( 0.02%)        open = shrink_along_large (solver, assigned, level, uip, ref,
2,238,794,152 ( 0.95%)  => build/../src/shrink.c:shrink_along_large (2,962,515x)
          .                                            failed_ptr);
          .               else {
          .                 LOGREF (ref, "not shrinking %s reason", LOGLIT (uip));
          .                 *failed_ptr = true;
          .               }
          .             }
  4,226,415 ( 0.00%)    return open;
  8,452,830 ( 0.00%)  }
          .           
          .           static inline unsigned shrink_block (kissat *solver, unsigned *begin_block,
          .                                                unsigned *end_block, unsigned level,
  1,191,289 ( 0.00%)                                       unsigned max_trail) {
    433,196 ( 0.00%)    assert (level < solver->level);
          .           
    433,196 ( 0.00%)    unsigned open = end_block - begin_block;
          .           
    649,794 ( 0.00%)    LOG ("trying to shrink %u literals on level %u", open, level);
    649,794 ( 0.00%)    LOG ("maximum trail position %u on level %u", max_trail, level);
          .           
    324,897 ( 0.00%)    assigned *assigned = solver->assigned;
          .           
    866,392 ( 0.00%)    push_literals_of_block (solver, assigned, begin_block, end_block, level);
182,533,459 ( 0.08%)  => build/../src/shrink.c:push_literals_of_block (108,299x)
          .           
  1,191,289 ( 0.00%)    assert (SIZE_STACK (solver->shrinkable) == open);
          .           
    324,897 ( 0.00%)    const unsigned *const begin_trail = BEGIN_ARRAY (solver->trail);
          .           
    541,495 ( 0.00%)    const bool resolve_large_clauses = (GET_OPTION (shrink) > 1);
    108,299 ( 0.00%)    unsigned uip = INVALID_LIT;
    108,299 ( 0.00%)    bool failed = false;
          .           
    541,495 ( 0.00%)    const unsigned *t = begin_trail + max_trail;
          .           
 17,499,017 ( 0.01%)    while (!failed) {
          .               {
          .                 do
121,202,072 ( 0.05%)          assert (begin_trail <= t), uip = *t--;
272,704,662 ( 0.12%)        while (!assigned[IDX (uip)].shrinkable);
          .               }
  8,565,704 ( 0.00%)      if (open == 1)
     56,437 ( 0.00%)        break;
 46,490,565 ( 0.02%)      open += shrink_along_reason (solver, assigned, level, uip,
2,626,535,401 ( 1.11%)  => build/../src/shrink.c:shrink_along_reason (4,226,415x)
          .                                            resolve_large_clauses, &failed);
  8,452,830 ( 0.00%)      assert (open > 1);
  4,226,415 ( 0.00%)      open--;
          .             }
          .           
    108,299 ( 0.00%)    unsigned block_shrunken = 0;
    324,897 ( 0.00%)    if (failed)
    207,448 ( 0.00%)      reset_shrinkable (solver);
 69,029,304 ( 0.03%)  => build/../src/shrink.c:reset_shrinkable (51,862x)
          .             else
          .               block_shrunken =
    507,933 ( 0.00%)          shrunken_block (solver, level, begin_block, end_block, uip);
294,162,183 ( 0.12%)  => build/../src/shrink.c:shrunken_block (56,437x)
          .           
    108,299 ( 0.00%)    return block_shrunken;
    541,495 ( 0.00%)  }
          .           
          .           static unsigned *next_block (kissat *solver, unsigned *begin_lits,
          .                                        unsigned *end_block, unsigned *level_ptr,
  1,946,313 ( 0.00%)                               unsigned *max_trail_ptr) {
    648,771 ( 0.00%)    assigned *assigned = solver->assigned;
          .           
    216,257 ( 0.00%)    unsigned level = INVALID_LEVEL;
    216,257 ( 0.00%)    unsigned max_trail = 0;
          .           
    432,514 ( 0.00%)    unsigned *begin_block = end_block;
          .           
  6,616,899 ( 0.00%)    while (begin_lits < begin_block) {
  6,306,666 ( 0.00%)      const unsigned lit = begin_block[-1];
  4,204,444 ( 0.00%)      assert (lit != INVALID_LIT);
 16,817,776 ( 0.01%)      const unsigned idx = IDX (lit);
 12,613,332 ( 0.01%)      struct assigned *a = assigned + idx;
  6,306,666 ( 0.00%)      unsigned lit_level = a->level;
  4,204,444 ( 0.00%)      if (level == INVALID_LEVEL) {
    432,514 ( 0.00%)        level = lit_level;
  1,297,542 ( 0.00%)        LOG ("starting to shrink level %u", level);
          .               } else {
  5,657,895 ( 0.00%)        assert (lit_level >= level);
  5,657,895 ( 0.00%)        if (lit_level > level)
    192,763 ( 0.00%)          break;
          .               }
  1,909,459 ( 0.00%)      begin_block--;
  5,728,377 ( 0.00%)      const unsigned trail = a->trail;
  5,728,377 ( 0.00%)      if (trail > max_trail)
    973,128 ( 0.00%)        max_trail = trail;
          .             }
          .           
    648,771 ( 0.00%)    *level_ptr = level;
    648,771 ( 0.00%)    *max_trail_ptr = max_trail;
          .           
    216,257 ( 0.00%)    return begin_block;
    432,514 ( 0.00%)  }
          .           
          .           static unsigned minimize_block (kissat *solver, unsigned *begin_block,
    363,034 ( 0.00%)                                  unsigned *end_block) {
     51,862 ( 0.00%)    unsigned minimized = 0;
          .           
  2,912,068 ( 0.00%)    for (unsigned *p = begin_block; p != end_block; p++) {
  1,950,672 ( 0.00%)      const unsigned lit = *p;
  1,300,448 ( 0.00%)      assert (lit != INVALID_LIT);
  5,852,016 ( 0.00%)      if (!kissat_minimize_literal (solver, lit, true))
1,814,627,480 ( 0.77%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/minimize.c:kissat_minimize_literal (650,224x)
    330,023 ( 0.00%)        continue;
  1,921,206 ( 0.00%)      LOG ("minimize-shrunken literal %s", LOGLIT (lit));
    640,402 ( 0.00%)      *p = INVALID_LIT;
    640,402 ( 0.00%)      minimized++;
          .             }
          .           
     51,862 ( 0.00%)    return minimized;
    103,724 ( 0.00%)  }
          .           
          .           static inline unsigned *
          .           minimize_and_shrink_block (kissat *solver, unsigned *begin_lits,
          .                                      unsigned *end_block, unsigned *total_shrunken,
  2,378,827 ( 0.00%)                             unsigned *total_minimized) {
  1,297,542 ( 0.00%)    assert (EMPTY_STACK (solver->shrinkable));
          .           
          .             unsigned level, max_trail;
          .           
          .             unsigned *begin_block =
  1,946,313 ( 0.00%)        next_block (solver, begin_lits, end_block, &level, &max_trail);
 90,054,602 ( 0.04%)  => build/../src/shrink.c:next_block (216,257x)
          .           
    865,028 ( 0.00%)    unsigned open = end_block - begin_block;
    432,514 ( 0.00%)    assert (open > 0);
          .           
    216,257 ( 0.00%)    unsigned block_shrunken = 0;
    216,257 ( 0.00%)    unsigned block_minimized = 0;
          .           
    432,514 ( 0.00%)    if (open < 2)
    647,748 ( 0.00%)      LOG ("only one literal on level %u", level);
          .             else {
          .               block_shrunken =
    974,691 ( 0.00%)          shrink_block (solver, begin_block, end_block, level, max_trail);
3,660,620,752 ( 1.55%)  => build/../src/shrink.c:shrink_block (108,299x)
    216,598 ( 0.00%)      if (!block_shrunken)
    363,034 ( 0.00%)        block_minimized = minimize_block (solver, begin_block, end_block);
1,830,745,199 ( 0.77%)  => build/../src/shrink.c:minimize_block (51,862x)
          .             }
          .           
    432,514 ( 0.00%)    block_shrunken += block_minimized;
  1,297,542 ( 0.00%)    LOG ("shrunken %u literals on level %u (including %u minimized)",
          .                  block_shrunken, level, block_minimized);
          .           
  1,297,542 ( 0.00%)    *total_minimized += block_minimized;
  1,297,542 ( 0.00%)    *total_shrunken += block_shrunken;
          .           
    216,257 ( 0.00%)    return begin_block;
  1,081,285 ( 0.00%)  }
          .           
    187,952 ( 0.00%)  void kissat_shrink_clause (kissat *solver) {
     93,976 ( 0.00%)    assert (GET_OPTION (minimize) > 0);
     93,976 ( 0.00%)    assert (GET_OPTION (shrink) > 0);
    140,964 ( 0.00%)    assert (!EMPTY_STACK (solver->clause));
          .           
    211,446 ( 0.00%)    START (shrink);
          .           
     23,494 ( 0.00%)    unsigned total_shrunken = 0;
     23,494 ( 0.00%)    unsigned total_minimized = 0;
          .           
     70,482 ( 0.00%)    unsigned *begin_lits = BEGIN_STACK (solver->clause);
     70,482 ( 0.00%)    unsigned *end_lits = END_STACK (solver->clause);
          .           
     70,482 ( 0.00%)    unsigned *end_block = END_STACK (solver->clause);
          .           
    742,747 ( 0.00%)    while (end_block != begin_lits)
  1,946,313 ( 0.00%)      end_block = minimize_and_shrink_block (
5,597,030,558 ( 2.37%)  => build/../src/shrink.c:minimize_and_shrink_block (216,257x)
          .                   solver, begin_lits, end_block, &total_shrunken, &total_minimized);
     46,988 ( 0.00%)    unsigned *q = begin_lits;
  7,778,800 ( 0.00%)    for (const unsigned *p = q; p != end_lits; p++) {
  5,728,377 ( 0.00%)      const unsigned lit = *p;
  3,818,918 ( 0.00%)      if (lit != INVALID_LIT)
  2,472,090 ( 0.00%)        *q++ = lit;
          .             }
    140,964 ( 0.00%)    LOG ("clause shrunken by %u literals (including %u minimized)",
          .                  total_shrunken, total_minimized);
    164,458 ( 0.00%)    assert (q + total_shrunken == end_lits);
    330,909 ( 0.00%)    SET_END_OF_STACK (solver->clause, q);
    164,458 ( 0.00%)    ADD (literals_shrunken, total_shrunken);
    469,880 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_shrunken (23,494x)
    164,458 ( 0.00%)    ADD (literals_minshrunken, total_minimized);
    469,880 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_minshrunken (23,494x)
          .           
    140,964 ( 0.00%)    LOGTMP ("shrunken learned");
     70,482 ( 0.00%)    kissat_reset_poisoned (solver);
 48,724,548 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/minimize.c:kissat_reset_poisoned (23,494x)
          .           
    211,446 ( 0.00%)    STOP (shrink);
    140,964 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/terminate.h
--------------------------------------------------------------------------------
Ir                  

-- line 6 ----------------------------------------
         .           #ifndef QUIET
         .           void kissat_report_termination (kissat *, const char *name,
         .                                           const char *file, long lineno,
         .                                           const char *fun);
         .           #endif
         .           
         .           static inline bool kissat_terminated (kissat *solver, int bit,
         .                                                 const char *name, const char *file,
98,436,915 ( 0.04%)                                        long lineno, const char *fun) {
43,749,740 ( 0.02%)    assert (0 <= bit), assert (bit < 64);
         .           #ifdef COVERAGE
         .             const uint64_t mask = (uint64_t) 1 << bit;
         .             if (!(solver->termination.flagged & mask))
         .               return false;
         .             solver->termination.flagged = ~(uint64_t) 0;
         .           #else
54,687,175 ( 0.02%)    if (!solver->termination.flagged)
21,874,870 ( 0.01%)      return false;
         .           #endif
         .           #ifndef QUIET
         .             kissat_report_termination (solver, name, file, lineno, fun);
         .           #else
         .             (void) file;
         .             (void) fun;
         .             (void) lineno;
         .             (void) name;
         .           #endif
         .           #if !defined(COVERAGE) && defined(NDEBUG)
         .             (void) bit;
         .           #endif
         .             return true;
21,874,870 ( 0.01%)  }
         .           
         .           #define TERMINATED(BIT) \
         .             kissat_terminated (solver, BIT, #BIT, __FILE__, __LINE__, __func__)
         .           
         .           #define backbone_terminated_1 1
         .           #define backbone_terminated_2 2
         .           #define backbone_terminated_3 3
         .           #define congruence_terminated_1 4
-- line 45 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/reorder.c
--------------------------------------------------------------------------------
Ir                  

-- line 6 ----------------------------------------
         .           #include "inlinequeue.h"
         .           #include "inlinevector.h"
         .           #include "internal.h"
         .           #include "logging.h"
         .           #include "print.h"
         .           #include "report.h"
         .           #include "sort.h"
         .           
   387,552 ( 0.00%)  bool kissat_reordering (kissat *solver) {
   387,552 ( 0.00%)    if (!GET_OPTION (reorder))
         .               return false;
   707,900 ( 0.00%)    if (!solver->stable && GET_OPTION (reorder) < 2)
         .               return false;
   387,552 ( 0.00%)    if (solver->level)
   192,808 ( 0.00%)      return false;
     2,904 ( 0.00%)    return CONFLICTS >= solver->limits.reorder.conflicts;
   193,776 ( 0.00%)  }
         .           
        10 ( 0.00%)  static double *compute_weights (kissat *solver) {
        20 ( 0.00%)    double *weights = kissat_calloc (solver, LITS, sizeof *weights);
   680,370 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (2x)
         6 ( 0.00%)    const unsigned max_size = GET_OPTION (reordermaxsize);
        12 ( 0.00%)    LOG ("limiting weight computation to maximum clause size %u", max_size);
         4 ( 0.00%)    assert (2 <= max_size);
        18 ( 0.00%)    double *table = kissat_nalloc (solver, max_size + 1, sizeof *table);
       268 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nalloc (2x)
         .             {
         4 ( 0.00%)      double weight = 1;
       802 ( 0.00%)      for (unsigned size = 2; size <= max_size; size++) {
     1,188 ( 0.00%)        LOG ("score table[%u] = %g", size, weight);
     1,980 ( 0.00%)        table[size] = weight, weight /= 2.0;
         .               }
         .             }
         .             {
         8 ( 0.00%)      assert (!solver->level);
         6 ( 0.00%)      const signed char *const values = solver->values;
         8 ( 0.00%)      const clause *last = kissat_last_irredundant_clause (solver);
       308 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (2x)
 1,889,380 ( 0.00%)      for (all_clauses (c)) {
12,783,389 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (209,930x)
 1,259,580 ( 0.00%)        if (last && c > last)
         2 ( 0.00%)          break;
 1,049,640 ( 0.00%)        if (c->redundant)
         .                   continue;
 1,049,640 ( 0.00%)        if (c->garbage)
    19,556 ( 0.00%)          continue;
   200,150 ( 0.00%)        unsigned size = 0;
 8,094,075 ( 0.00%)        for (all_literals_in_clause (lit, c)) {
 3,638,115 ( 0.00%)          const signed char value = values[lit];
 1,455,246 ( 0.00%)          if (value > 0)
       384 ( 0.00%)            goto CONTINUE_WITH_NEXT_CLAUSE;
 6,528,400 ( 0.00%)          if (!value && size < max_size && ++size == max_size)
         .                     break;
         .                 }
 1,198,596 ( 0.00%)        const double weight = table[size];
 8,808,322 ( 0.00%)        for (all_literals_in_clause (lit, c))
 7,991,269 ( 0.00%)          weights[lit] += weight;
   199,766 ( 0.00%)      CONTINUE_WITH_NEXT_CLAUSE:;
         .               }
         .             }
         8 ( 0.00%)    assert (solver->watching);
         .             {
         6 ( 0.00%)      double weight = table[2];
        16 ( 0.00%)      kissat_dealloc (solver, table, max_size + 1, sizeof *table);
       376 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
   339,746 ( 0.00%)      for (all_literals (lit)) {
   679,456 ( 0.00%)        const unsigned idx = IDX (lit);
 1,189,048 ( 0.00%)        if (!ACTIVE (idx))
     2,906 ( 0.00%)          continue;
   902,286 ( 0.00%)        watches *watches = &WATCHES (lit);
 8,189,888 ( 0.00%)        for (all_binary_blocking_watches (watch, *watches)) {
   656,208 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (82,026x)
   656,208 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (82,026x)
 2,339,060 ( 0.00%)          if (!watch.type.binary)
   420,588 ( 0.00%)            continue;
   141,672 ( 0.00%)          const unsigned other = watch.type.lit;
   141,672 ( 0.00%)          if (other < lit)
    47,202 ( 0.00%)            continue;
   188,984 ( 0.00%)          const unsigned other_idx = IDX (other);
   330,722 ( 0.00%)          if (!ACTIVE (other_idx))
        46 ( 0.00%)            continue;
   259,347 ( 0.00%)          weights[lit] += weight;
   282,924 ( 0.00%)          weights[other] += weight;
         .                 }
         .               }
         .             }
   169,880 ( 0.00%)    for (all_variables (idx)) {
   594,524 ( 0.00%)      if (!ACTIVE (idx))
     1,453 ( 0.00%)        continue;
   615,195 ( 0.00%)      unsigned lit = LIT (idx), not_lit = NOT (lit);
   492,156 ( 0.00%)      double pos = weights[lit], neg = weights[not_lit];
   220,175 ( 0.00%)      double max_pos_neg = MAX (pos, neg);
   224,576 ( 0.00%)      double min_pos_neg = MIN (pos, neg);
   123,039 ( 0.00%)      double scaled_min_pos_neg = 2 * min_pos_neg;
   123,039 ( 0.00%)      double weight = max_pos_neg + scaled_min_pos_neg;
   246,078 ( 0.00%)      LOG ("computed weight %g "
         .                    "= %g + %g = max (%g, %g) + 2 * min (%g, %g) of %s",
         .                    weight, max_pos_neg, scaled_min_pos_neg, pos, neg, pos, neg,
         .                    LOGVAR (idx));
   287,091 ( 0.00%)      weights[idx] = weight;
         .             }
         2 ( 0.00%)    return weights;
         4 ( 0.00%)  }
         .           
         .           static bool less_focused_order (unsigned a, unsigned b, links *links,
         .                                           double *weights) {
         .             double u = weights[a], v = weights[b];
         .             if (u < v)
         .               return true;
         .             if (u > v)
         .               return false;
         .             unsigned s = links[a].stamp, t = links[b].stamp;
         .             return s < t;
         .           }
         .           
         .           static bool less_stable_order (unsigned a, unsigned b, heap *scores,
 5,709,312 ( 0.00%)                                 double *weights) {
 8,563,968 ( 0.00%)    double u = weights[a], v = weights[b];
 2,140,992 ( 0.00%)    if (u < v)
   387,966 ( 0.00%)      return true;
 1,559,043 ( 0.00%)    if (u > v)
   240,680 ( 0.00%)      return false;
 2,795,387 ( 0.00%)    double s = kissat_get_heap_score (scores, a);
 7,587,479 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (399,341x)
 2,795,387 ( 0.00%)    double t = kissat_get_heap_score (scores, b);
 7,587,479 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (399,341x)
 1,198,023 ( 0.00%)    if (s < t)
   346,658 ( 0.00%)      return true;
   678,036 ( 0.00%)    if (s > t)
   344,712 ( 0.00%)      return false;
   160,968 ( 0.00%)    return b < a;
 1,427,328 ( 0.00%)  }
         .           
         .           #define LESS_FOCUSED_ORDER(A, B) less_focused_order (A, B, links, weights)
         .           
         .           #define LESS_STABLE_ORDER(A, B) less_stable_order (A, B, scores, weights)
         .           
         .           static void sort_active_variables_by_weight (kissat *solver,
         .                                                        unsigneds *sorted,
        18 ( 0.00%)                                               double *weights) {
        20 ( 0.00%)    INIT_STACK (*sorted);
   169,880 ( 0.00%)    for (all_variables (idx))
   552,058 ( 0.00%)      if (ACTIVE (idx))
   533,529 ( 0.00%)        PUSH_STACK (*sorted, idx);
   260,173 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (30x)
         8 ( 0.00%)    if (solver->stable) {
         6 ( 0.00%)      heap *scores = SCORES;
15,934,039 ( 0.01%)      SORT_STACK (unsigned, *sorted, LESS_STABLE_ORDER);
43,523,418 ( 0.02%)  => build/../src/reorder.c:less_stable_order (713,664x)
         .           #ifdef LOGGING
   287,111 ( 0.00%)      for (all_stack (unsigned, idx, *sorted))
   533,169 ( 0.00%)        if (ACTIVE (idx))
   246,078 ( 0.00%)          LOG ("reordered %s with weight %g score %g", LOGVAR (idx),
         .                        weights[idx], kissat_get_heap_score (scores, idx));
         .           #endif
         .             } else {
         .               struct links *links = solver->links;
         .               SORT_STACK (unsigned, *sorted, LESS_FOCUSED_ORDER);
         .           #ifdef LOGGING
         .               for (all_stack (unsigned, idx, *sorted))
         .                 if (ACTIVE (idx))
         .                   LOG ("reordered %s with weight %g stamp %u", LOGVAR (idx),
         .                        weights[idx], links[idx].stamp);
         .           #endif
         .             }
        12 ( 0.00%)  }
         .           
         .           static void reorder_focused (kissat *solver) {
         .             INC (reordered_focused);
         .             assert (!solver->stable);
         .             double *weights = compute_weights (solver);
         .             unsigneds sorted;
         .             sort_active_variables_by_weight (solver, &sorted, weights);
         .             kissat_dealloc (solver, weights, LITS, sizeof *weights);
         .             for (all_stack (unsigned, idx, sorted)) {
         .               assert (ACTIVE (idx));
         .               kissat_move_to_front (solver, idx);
         .             }
         .             RELEASE_STACK (sorted);
         .           }
         .           
        16 ( 0.00%)  static void reorder_stable (kissat *solver) {
         8 ( 0.00%)    INC (reordered_stable);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_reordered_stable (2x)
         8 ( 0.00%)    assert (solver->stable);
         8 ( 0.00%)    double *weights = compute_weights (solver);
76,716,103 ( 0.03%)  => build/../src/reorder.c:compute_weights (2x)
         6 ( 0.00%)    kissat_rescale_scores (solver);
 3,668,023 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/bump.c:kissat_rescale_scores (2x)
         .             unsigneds sorted;
        12 ( 0.00%)    sort_active_variables_by_weight (solver, &sorted, weights);
62,039,519 ( 0.03%)  => build/../src/reorder.c:sort_active_variables_by_weight (2x)
         6 ( 0.00%)    heap *scores = SCORES;
   164,062 ( 0.00%)    while (!EMPTY_STACK (sorted)) {
   410,130 ( 0.00%)      unsigned idx = POP_STACK (sorted);
   533,169 ( 0.00%)      assert (ACTIVE (idx));
   287,091 ( 0.00%)      const double old_score = kissat_get_heap_score (scores, idx);
   779,247 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (41,013x)
   246,078 ( 0.00%)      const double weight = weights[idx];
   123,039 ( 0.00%)      const double new_score = old_score + weight;
   246,078 ( 0.00%)      LOG ("updating score of %s to %g = %g (old score) + %g (weight)",
         .                    LOGVAR (idx), new_score, old_score, weight);
   328,104 ( 0.00%)      kissat_update_heap (solver, scores, idx, new_score);
 8,100,766 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (41,013x)
         .             }
        18 ( 0.00%)    kissat_dealloc (solver, weights, LITS, sizeof *weights);
       556 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        30 ( 0.00%)    RELEASE_STACK (sorted);
       530 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (2x)
        12 ( 0.00%)  }
         .           
        16 ( 0.00%)  void kissat_reorder (kissat *solver) {
        18 ( 0.00%)    START (reorder);
         8 ( 0.00%)    INC (reordered);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_reordered (2x)
         8 ( 0.00%)    assert (!solver->level);
        52 ( 0.00%)    kissat_phase (solver, "reorder", GET (reordered),
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_reordered (2x)
         .                           "reorder limit %" PRIu64 " hit a after %" PRIu64
         .                           " conflicts in %s mode ",
         .                           solver->limits.reorder.conflicts, CONFLICTS,
         4 ( 0.00%)                  solver->stable ? "stable" : "focused");
         8 ( 0.00%)    if (solver->stable)
         8 ( 0.00%)      reorder_stable (solver);
153,642,649 ( 0.06%)  => build/../src/reorder.c:reorder_stable (2x)
         .             else
         .               reorder_focused (solver);
        36 ( 0.00%)    kissat_phase (solver, "reorder", GET (reordered),
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_reordered (2x)
         .                           "reordered decisions in %s search mode",
         4 ( 0.00%)                  solver->stable ? "stable" : "focused");
       164 ( 0.00%)    UPDATE_CONFLICT_LIMIT (reorder, reordered, LINEAR, false);
     4,094 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (4x)
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_reordered (2x)
        10 ( 0.00%)    REPORT (0, 'o');
    59,077 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (2x)
        18 ( 0.00%)    STOP (reorder);
        14 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/proprobe.c
--------------------------------------------------------------------------------
Ir                  

-- line 4 ----------------------------------------
         .           
         .           #define PROPAGATE_LITERAL probing_propagate_literal
         .           #define PROPAGATION_TYPE "probing"
         .           #define PROBING_PROPAGATION
         .           
         .           #include "proplit.h"
         .           
         .           static void update_probing_propagation_statistics (kissat *solver,
 1,007,214 ( 0.00%)                                                     unsigned propagated) {
   503,607 ( 0.00%)    const uint64_t ticks = solver->ticks;
 1,007,214 ( 0.00%)    LOG (PROPAGATION_TYPE " propagation took %u propagations", propagated);
 1,007,214 ( 0.00%)    LOG (PROPAGATION_TYPE " propagation took %" PRIu64 " ticks", ticks);
         .           
 1,007,214 ( 0.00%)    ADD (propagations, propagated);
 3,357,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_propagations (167,869x)
 1,007,214 ( 0.00%)    ADD (probing_propagations, propagated);
 3,357,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_propagations (167,869x)
         .           
         .           #if defined(METRICS)
   671,476 ( 0.00%)    if (solver->backbone_computing) {
       126 ( 0.00%)      ADD (backbone_propagations, propagated);
       420 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_backbone_propagations (21x)
       126 ( 0.00%)      ADD (backbone_ticks, ticks);
       420 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_backbone_ticks (21x)
         .             }
   671,476 ( 0.00%)    if (solver->vivifying) {
 1,000,746 ( 0.00%)      ADD (vivify_propagations, propagated);
 3,335,820 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_vivify_propagations (166,791x)
 1,000,746 ( 0.00%)      ADD (vivify_ticks, ticks);
 3,335,820 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_vivify_ticks (166,791x)
         .             }
         .           #endif
         .           
 1,007,214 ( 0.00%)    ADD (probing_ticks, ticks);
 3,357,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_ticks (167,869x)
 1,007,214 ( 0.00%)    ADD (ticks, ticks);
 3,357,380 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_ticks (167,869x)
   503,607 ( 0.00%)  }
         .           
         .           clause *kissat_probing_propagate (kissat *solver, clause *ignore,
 1,342,952 ( 0.00%)                                    bool flush) {
   671,476 ( 0.00%)    assert (solver->probing);
   671,476 ( 0.00%)    assert (solver->watching);
   839,345 ( 0.00%)    assert (!solver->inconsistent);
         .           
 1,510,821 ( 0.00%)    START (propagate);
         .           
   167,869 ( 0.00%)    clause *conflict = 0;
   503,607 ( 0.00%)    unsigned *propagate = solver->propagate;
   335,738 ( 0.00%)    solver->ticks = 0;
32,906,287 ( 0.01%)    while (!conflict && propagate != END_ARRAY (solver->trail)) {
26,464,280 ( 0.01%)      const unsigned lit = *propagate++;
37,049,992 ( 0.02%)      conflict = probing_propagate_literal (solver, ignore, lit);
7,796,526,627 ( 3.30%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proplit.h:probing_propagate_literal (5,292,856x)
         .             }
         .           
 1,007,214 ( 0.00%)    const unsigned propagated = propagate - solver->propagate;
   503,607 ( 0.00%)    solver->propagate = propagate;
   839,345 ( 0.00%)    update_probing_propagation_statistics (solver, propagated);
31,504,408 ( 0.01%)  => build/../src/proprobe.c:update_probing_propagation_statistics (167,869x)
 1,007,214 ( 0.00%)    kissat_update_conflicts_and_trail (solver, conflict, flush);
 3,017,948 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proplit.h:kissat_update_conflicts_and_trail (167,869x)
         .           
 1,510,821 ( 0.00%)    STOP (propagate);
         .           
   167,869 ( 0.00%)    return conflict;
   335,738 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/inlineassign.h
--------------------------------------------------------------------------------
Ir                     

-- line 6 ----------------------------------------
            .           #endif
            .           
            .           static inline void kissat_assign (kissat *solver, const bool probing,
            .                                             const unsigned level,
            .           #ifdef FAST_ASSIGN
            .                                             value *values, assigned *assigned,
            .           #endif
            .                                             bool binary, unsigned lit,
  655,467,585 ( 0.28%)                                    unsigned reason) {
  349,737,424 ( 0.15%)    const unsigned not_lit = NOT (lit);
            .           
  612,040,492 ( 0.26%)    watches watches = WATCHES (not_lit);
  262,303,068 ( 0.11%)    if (!kissat_empty_vector (&watches)) {
    3,190,935 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_empty_vector (290,085x)
  248,830,932 ( 0.11%)      watch *w = BEGIN_WATCHES (watches);
    2,247,296 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (280,912x)
   82,943,644 ( 0.04%)      __builtin_prefetch (w, 0, 1);
            .             }
            .           
            .           #ifndef FAST_ASSIGN
      870,255 ( 0.00%)    value *values = solver->values;
            .           #endif
  262,303,068 ( 0.11%)    assert (!values[lit]);
  262,303,068 ( 0.11%)    assert (!values[not_lit]);
            .           
  174,868,712 ( 0.07%)    values[lit] = 1;
  174,868,712 ( 0.07%)    values[not_lit] = -1;
            .           
  174,868,712 ( 0.07%)    assert (solver->unassigned > 0);
  218,585,890 ( 0.09%)    solver->unassigned--;
            .           
   87,434,356 ( 0.04%)    if (!level) {
       10,248 ( 0.00%)      kissat_mark_fixed_literal (solver, lit);
      462,631 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_fixed_literal (884x)
        9,364 ( 0.00%)      assert (solver->unflushed < UINT_MAX);
       11,705 ( 0.00%)      solver->unflushed++;
        4,682 ( 0.00%)      if (reason != UNIT_REASON) {
       11,656 ( 0.00%)        CHECK_AND_ADD_UNIT (lit);
    1,671,631 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_unit (1,457x)
        5,828 ( 0.00%)        ADD_UNIT_TO_PROOF (lit);
        1,457 ( 0.00%)        reason = UNIT_REASON;
        1,457 ( 0.00%)        binary = false;
            .               }
            .             }
            .           
  349,737,424 ( 0.15%)    const size_t trail = SIZE_ARRAY (solver->trail);
  306,020,246 ( 0.13%)    PUSH_ARRAY (solver->trail, lit);
            .           
  349,737,424 ( 0.15%)    const unsigned idx = IDX (lit);
            .           
            .           #if !defined(PROBING_PROPAGATION)
  174,868,712 ( 0.07%)    if (!probing) {
  383,213,310 ( 0.16%)      const bool negated = NEGATED (lit);
  178,044,680 ( 0.08%)      const value new_value = BOOL_TO_VALUE (negated);
  344,891,979 ( 0.15%)      value *saved = &SAVED (idx);
  114,963,993 ( 0.05%)      *saved = new_value;
            .             }
            .           #endif
            .           
            .             struct assigned b;
            .           
   87,434,356 ( 0.04%)    b.level = level;
   87,434,356 ( 0.04%)    b.trail = trail;
            .           
  131,151,534 ( 0.06%)    b.analyzed = false;
  306,020,246 ( 0.13%)    b.binary = binary;
  131,151,534 ( 0.06%)    b.poisoned = false;
   87,434,356 ( 0.04%)    b.reason = reason;
  131,151,534 ( 0.06%)    b.removable = false;
  131,151,534 ( 0.06%)    b.shrinkable = false;
            .           
            .           #ifndef FAST_ASSIGN
      870,255 ( 0.00%)    assigned *assigned = solver->assigned;
            .           #endif
  262,303,068 ( 0.11%)    struct assigned *a = assigned + idx;
  218,585,890 ( 0.09%)    *a = b;
  262,303,068 ( 0.11%)  }
            .           
            .           static inline unsigned
            .           kissat_assignment_level (kissat *solver, value *values, assigned *assigned,
  281,184,256 ( 0.12%)                           unsigned lit, clause *reason) {
   35,148,032 ( 0.01%)    unsigned res = 0;
1,344,028,542 ( 0.57%)    for (all_literals_in_clause (other, reason)) {
  350,060,598 ( 0.15%)      if (other == lit)
   35,148,032 ( 0.01%)        continue;
  489,233,004 ( 0.21%)      assert (values[other] < 0), (void) values;
  652,310,672 ( 0.28%)      const unsigned other_idx = IDX (other);
  489,233,004 ( 0.21%)      struct assigned *a = assigned + other_idx;
  244,616,502 ( 0.10%)      const unsigned level = a->level;
  244,616,502 ( 0.10%)      if (res < level)
   70,297,620 ( 0.03%)        res = level;
            .             }
            .           #ifdef NDEBUG
            .             (void) solver;
            .           #endif
   35,148,032 ( 0.01%)    return res;
   70,296,064 ( 0.03%)  }
            .           
            .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/heap.c
--------------------------------------------------------------------------------
Ir                 

        .           #include "allocate.h"
        .           #include "inlineheap.h"
        .           #include "internal.h"
        .           #include "logging.h"
        .           
        .           #include <string.h>
        .           
       90 ( 0.00%)  void kissat_release_heap (kissat *solver, heap *heap) {
      360 ( 0.00%)    RELEASE_STACK (heap->stack);
    9,600 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (15x)
      135 ( 0.00%)    DEALLOC (heap->pos, heap->size);
    7,439 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (15x)
      135 ( 0.00%)    DEALLOC (heap->score, heap->size);
    3,506 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (15x)
       75 ( 0.00%)    memset (heap, 0, sizeof *heap);
      210 ( 0.00%)  => ???:0x000000000010c5b0 (15x)
       45 ( 0.00%)  }
        .           
        .           #ifndef NDEBUG
        .           
       10 ( 0.00%)  void kissat_check_heap (heap *heap) {
        6 ( 0.00%)    const unsigned *const stack = BEGIN_STACK (heap->stack);
       16 ( 0.00%)    const unsigned end = SIZE_STACK (heap->stack);
        6 ( 0.00%)    const unsigned *const pos = heap->pos;
        6 ( 0.00%)    const double *const score = heap->score;
  164,062 ( 0.00%)    for (unsigned i = 0; i < end; i++) {
  246,078 ( 0.00%)      const unsigned idx = stack[i];
  246,078 ( 0.00%)      const unsigned idx_pos = pos[idx];
  123,039 ( 0.00%)      assert (idx_pos == i);
  287,091 ( 0.00%)      unsigned child_pos = HEAP_CHILD (idx_pos);
  246,078 ( 0.00%)      unsigned parent_pos = HEAP_PARENT (child_pos);
  123,039 ( 0.00%)      assert (parent_pos == idx_pos);
  123,039 ( 0.00%)      if (child_pos < end) {
  123,036 ( 0.00%)        unsigned child = stack[child_pos];
  246,072 ( 0.00%)        assert (score[idx] >= score[child]);
   82,024 ( 0.00%)        if (++child_pos < end) {
  123,030 ( 0.00%)          parent_pos = HEAP_PARENT (child_pos);
   61,515 ( 0.00%)          assert (parent_pos == idx_pos);
  123,030 ( 0.00%)          child = stack[child_pos];
  246,060 ( 0.00%)          assert (score[idx] >= score[child]);
        .                 }
        .               }
        .             }
        8 ( 0.00%)  }
        .           
        .           #endif
        .           
      924 ( 0.00%)  void kissat_resize_heap (kissat *solver, heap *heap, unsigned new_size) {
      396 ( 0.00%)    const unsigned old_size = heap->size;
      396 ( 0.00%)    if (old_size >= new_size)
        3 ( 0.00%)      return;
      774 ( 0.00%)    LOG ("resizing %s heap from %u to %u",
        .                  (heap->tainted ? "tainted" : "untainted"), old_size, new_size);
        .           
    1,290 ( 0.00%)    heap->pos = kissat_nrealloc (solver, heap->pos, old_size, new_size,
2,364,252 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nrealloc (129x)
        .                                          sizeof (unsigned));
      516 ( 0.00%)    if (heap->tainted) {
    1,276 ( 0.00%)      heap->score = kissat_nrealloc (solver, heap->score, old_size, new_size,
4,441,857 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nrealloc (116x)
        .                                              sizeof (double));
        .             } else {
       26 ( 0.00%)      if (old_size)
        .                 DEALLOC (heap->score, old_size);
      104 ( 0.00%)      heap->score = kissat_calloc (solver, new_size, sizeof (double));
  899,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (13x)
        .             }
      516 ( 0.00%)    heap->size = new_size;
        .           #ifdef CHECK_HEAP
        .             kissat_check_heap (heap);
        .           #endif
      264 ( 0.00%)  }
        .           
       14 ( 0.00%)  void kissat_rescale_heap (kissat *solver, heap *heap, double factor) {
       12 ( 0.00%)    LOG ("rescaling scores on heap with factor %g", factor);
        6 ( 0.00%)    double *score = heap->score;
  212,342 ( 0.00%)    for (unsigned i = 0; i < heap->vars; i++)
  467,126 ( 0.00%)      score[i] *= factor;
        .           #ifndef NDEBUG
        6 ( 0.00%)    kissat_check_heap (heap);
2,563,323 ( 0.00%)  => build/../src/heap.c:kissat_check_heap (2x)
        .           #endif
        .           #ifndef LOGGING
        .             (void) solver;
        .           #endif
        6 ( 0.00%)  }
        .           
2,998,639 ( 0.00%)  void kissat_enlarge_heap (kissat *solver, heap *heap, unsigned new_vars) {
1,285,131 ( 0.00%)    const unsigned old_vars = heap->vars;
1,285,131 ( 0.00%)    assert (old_vars < new_vars);
1,713,508 ( 0.00%)    assert (new_vars <= heap->size);
2,570,262 ( 0.00%)    const size_t delta = new_vars - heap->vars;
4,283,770 ( 0.00%)    memset (heap->pos + old_vars, 0xff, delta * sizeof (unsigned));
8,085,380 ( 0.00%)  => ???:0x000000000010c5b0 (428,377x)
1,285,131 ( 0.00%)    heap->vars = new_vars;
1,713,508 ( 0.00%)    if (heap->tainted)
4,283,640 ( 0.00%)      memset (heap->score + old_vars, 0, delta * sizeof (double));
7,264,231 ( 0.00%)  => ???:0x000000000010c5b0 (428,364x)
2,570,262 ( 0.00%)    LOG ("enlarged heap from %u to %u", old_vars, new_vars);
        .           #ifndef LOGGING
        .             (void) solver;
        .           #endif
1,285,131 ( 0.00%)  }
        .           
        .           #ifndef NDEBUG
        .           
        .           static void dump_heap (heap *heap) {
        .             for (unsigned i = 0; i < SIZE_STACK (heap->stack); i++)
        .               printf ("heap.stack[%u] = %u\n", i, PEEK_STACK (heap->stack, i));
        .             for (unsigned i = 0; i < heap->vars; i++)
        .               printf ("heap.pos[%u] = %u\n", i, heap->pos[i]);
-- line 101 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/factor.c
--------------------------------------------------------------------------------
Ir                   

-- line 58 ----------------------------------------
          .               quotient *first, *last;
          .             } quotients;
          .             heap schedule;
          .           };
          .           
          .           typedef struct factoring factoring;
          .           
          .           static void init_factoring (kissat *solver, factoring *factoring,
         49 ( 0.00%)                              uint64_t limit) {
         35 ( 0.00%)    memset (factoring, 0, sizeof *factoring);
        196 ( 0.00%)  => ???:0x000000000010c5b0 (7x)
         21 ( 0.00%)    factoring->solver = solver;
        105 ( 0.00%)    factoring->initial = factoring->allocated = factoring->size = LITS;
         21 ( 0.00%)    factoring->limit = limit;
         28 ( 0.00%)    factoring->bound = solver->bounds.eliminate.additional_clauses;
         28 ( 0.00%)    if (GET_OPTION (factorstructural))
          .               factoring->hops = GET_OPTION (factorhops);
         21 ( 0.00%)    const unsigned hops = factoring->hops;
         14 ( 0.00%)    if (hops) {
          .               CALLOC (factoring->scores, hops);
          .               for (unsigned i = 0; i != hops; i++) {
          .                 scores *scores = factoring->scores + i;
          .                 NALLOC (scores->score, VARS);
          .                 double *score = scores->score;
          .                 for (all_variables (idx))
          .                   score[idx] = -1;
          .               }
          .             }
         63 ( 0.00%)    CALLOC (factoring->count, factoring->allocated);
  1,454,907 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (7x)
          .           #ifndef NDEBUG
  1,450,415 ( 0.00%)    for (all_literals (lit))
  2,538,116 ( 0.00%)      assert (!solver->marks[lit]);
          .           #endif
         28 ( 0.00%)  }
          .           
    415,300 ( 0.00%)  static void release_quotients (factoring *factoring) {
    249,180 ( 0.00%)    kissat *const solver = factoring->solver;
    249,180 ( 0.00%)    mark *marks = solver->marks;
    895,084 ( 0.00%)    for (quotient *q = factoring->quotients.first, *next; q; q = next) {
    297,543 ( 0.00%)      next = q->next;
    297,543 ( 0.00%)      unsigned factor = q->factor;
    595,086 ( 0.00%)      assert (marks[factor] == FACTOR);
    396,724 ( 0.00%)      marks[factor] = 0;
  2,380,344 ( 0.00%)      RELEASE_STACK (q->clauses);
 19,726,269 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (99,181x)
  2,380,344 ( 0.00%)      RELEASE_STACK (q->matches);
  4,301,330 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (99,181x)
    595,086 ( 0.00%)      kissat_free (solver, q, sizeof *q);
 15,652,063 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (99,181x)
          .             }
    249,180 ( 0.00%)    const unsigned hops = factoring->hops;
    166,120 ( 0.00%)    if (hops) {
          .               for (unsigned i = 0; i != hops; i++) {
          .                 scores *scores = factoring->scores + i;
          .                 unsigneds *scored = &scores->scored;
          .                 double *score = scores->score;
          .                 while (!EMPTY_STACK (*scored)) {
          .                   unsigned idx = POP_STACK (*scored);
          .                   score[idx] = -1;
          .                 }
          .               }
          .             }
    498,360 ( 0.00%)    factoring->quotients.first = factoring->quotients.last = 0;
    249,180 ( 0.00%)  }
          .           
         35 ( 0.00%)  static void release_factoring (factoring *factoring) {
         21 ( 0.00%)    kissat *const solver = factoring->solver;
         42 ( 0.00%)    assert (EMPTY_STACK (solver->analyzed));
         42 ( 0.00%)    assert (EMPTY_STACK (factoring->counted));
         42 ( 0.00%)    assert (EMPTY_STACK (factoring->nounted));
         42 ( 0.00%)    assert (EMPTY_STACK (factoring->qlauses));
         56 ( 0.00%)    DEALLOC (factoring->count, factoring->allocated);
      6,825 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (factoring->counted);
      1,737 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (factoring->nounted);
      1,486 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (factoring->fresh);
      1,581 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        168 ( 0.00%)    RELEASE_STACK (factoring->qlauses);
      1,722 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
         21 ( 0.00%)    release_quotients (factoring);
        217 ( 0.00%)  => build/../src/factor.c:release_quotients (7x)
         42 ( 0.00%)    kissat_release_heap (solver, &factoring->schedule);
      6,960 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_release_heap (7x)
         35 ( 0.00%)    assert (!(factoring->allocated & 1));
         28 ( 0.00%)    const size_t allocated_score = factoring->allocated / 2;
         21 ( 0.00%)    const unsigned hops = factoring->hops;
         14 ( 0.00%)    if (hops) {
          .               for (unsigned i = 0; i != hops; i++) {
          .                 scores *scores = factoring->scores + i;
          .                 double *score = scores->score;
          .                 DEALLOC (score, allocated_score);
          .                 RELEASE_STACK (scores->scored);
          .               }
          .               DEALLOC (factoring->scores, hops);
          .             }
          .           #ifndef NDEBUG
  1,471,671 ( 0.00%)    for (all_literals (lit))
  2,575,314 ( 0.00%)      assert (!solver->marks[lit]);
          .           #endif
         28 ( 0.00%)  }
          .           
  2,281,188 ( 0.00%)  static void update_candidate (factoring *factoring, unsigned lit) {
  1,140,594 ( 0.00%)    heap *cands = &factoring->schedule;
  1,140,594 ( 0.00%)    kissat *const solver = factoring->solver;
  3,041,584 ( 0.00%)    const size_t size = SIZE_WATCHES (solver->watches[lit]);
  4,562,376 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (380,198x)
    760,396 ( 0.00%)    if (size > 1) {
  2,248,704 ( 0.00%)      kissat_adjust_heap (solver, cands, lit);
 44,217,440 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_adjust_heap (374,784x)
  4,872,192 ( 0.00%)      kissat_update_heap (solver, cands, lit, size);
 36,819,175 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (374,784x)
  2,998,272 ( 0.00%)      if (!kissat_heap_contains (cands, lit))
  7,571,087 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (374,784x)
  1,796,262 ( 0.00%)        kissat_push_heap (solver, cands, lit);
 59,331,149 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_push_heap (299,377x)
     37,898 ( 0.00%)    } else if (kissat_heap_contains (cands, lit))
     80,110 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (5,414x)
        228 ( 0.00%)      kissat_pop_heap (solver, cands, lit);
     13,471 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_pop_heap (38x)
  1,439,971 ( 0.00%)  }
          .           
         35 ( 0.00%)  static void schedule_factorization (factoring *factoring) {
         21 ( 0.00%)    kissat *const solver = factoring->solver;
         21 ( 0.00%)    flags *flags = solver->flags;
    725,232 ( 0.00%)    for (all_variables (idx)) {
  2,356,822 ( 0.00%)      if (ACTIVE (idx)) {
    862,835 ( 0.00%)        struct flags *f = flags + idx;
  1,207,969 ( 0.00%)        const unsigned lit = LIT (idx);
  1,380,536 ( 0.00%)        const unsigned not_lit = NOT (lit);
  1,380,536 ( 0.00%)        if (f->factor & 1)
    727,570 ( 0.00%)          update_candidate (factoring, lit);
 77,055,631 ( 0.03%)  => build/../src/factor.c:update_candidate (145,514x)
  1,380,536 ( 0.00%)        if (f->factor & 2)
    755,945 ( 0.00%)          update_candidate (factoring, not_lit);
 76,804,873 ( 0.03%)  => build/../src/factor.c:update_candidate (151,189x)
          .               }
          .             }
          .           #ifndef QUIET
         21 ( 0.00%)    heap *cands = &factoring->schedule;
         28 ( 0.00%)    size_t size_cands = kissat_size_heap (cands);
         84 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_size_heap (7x)
        175 ( 0.00%)    kissat_very_verbose (
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
          .                 solver, "scheduled %zu factorization candidate literals %.0f %%",
         21 ( 0.00%)        size_cands, kissat_percent (size_cands, LITS));
          .           #endif
         21 ( 0.00%)  }
          .           
    595,086 ( 0.00%)  static quotient *new_quotient (factoring *factoring, unsigned factor) {
    297,543 ( 0.00%)    kissat *const solver = factoring->solver;
    297,543 ( 0.00%)    mark *marks = solver->marks;
    595,086 ( 0.00%)    assert (!marks[factor]);
    396,724 ( 0.00%)    marks[factor] = FACTOR;
    495,905 ( 0.00%)    quotient *res = kissat_malloc (solver, sizeof *res);
 12,071,519 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (99,181x)
    495,905 ( 0.00%)    memset (res, 0, sizeof *res);
  2,082,801 ( 0.00%)  => ???:0x000000000010c5b0 (99,181x)
    297,543 ( 0.00%)    res->factor = factor;
    297,543 ( 0.00%)    quotient *last = factoring->quotients.last;
    198,362 ( 0.00%)    if (last) {
     64,512 ( 0.00%)      assert (factoring->quotients.first);
     64,512 ( 0.00%)      assert (!last->next);
     48,384 ( 0.00%)      last->next = res;
     96,768 ( 0.00%)      res->id = last->id + 1;
          .             } else {
    332,212 ( 0.00%)      assert (!factoring->quotients.first);
    249,159 ( 0.00%)      factoring->quotients.first = res;
          .             }
    297,543 ( 0.00%)    factoring->quotients.last = res;
    297,543 ( 0.00%)    res->prev = last;
    595,086 ( 0.00%)    LOG ("new quotient[%zu] with factor %s", res->id, LOGLIT (factor));
     99,181 ( 0.00%)    return res;
    198,362 ( 0.00%)  }
          .           
    498,318 ( 0.00%)  static size_t first_factor (factoring *factoring, unsigned factor) {
    249,159 ( 0.00%)    kissat *const solver = factoring->solver;
    249,159 ( 0.00%)    watches *all_watches = solver->watches;
    498,318 ( 0.00%)    watches *factor_watches = all_watches + factor;
    332,212 ( 0.00%)    assert (!factoring->quotients.first);
    498,318 ( 0.00%)    quotient *quotient = new_quotient (factoring, factor);
 16,942,812 ( 0.01%)  => build/../src/factor.c:new_quotient (83,053x)
    249,159 ( 0.00%)    statches *clauses = &quotient->clauses;
     83,053 ( 0.00%)    uint64_t ticks = 0;
 11,217,346 ( 0.00%)    for (all_binary_large_watches (watch, *factor_watches)) {
    664,424 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (83,053x)
    664,424 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (83,053x)
 20,359,391 ( 0.01%)      PUSH_STACK (*clauses, watch);
 79,289,100 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (212,788x)
          .           #ifndef NDEBUG
  5,413,276 ( 0.00%)      if (watch.type.binary)
    349,844 ( 0.00%)        continue;
  3,010,425 ( 0.00%)      const reference ref = watch.large.ref;
  6,020,850 ( 0.00%)      clause *const c = kissat_dereference_clause (solver, ref);
136,695,567 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (1,003,475x)
  7,024,325 ( 0.00%)      assert (!c->quotient);
          .           #endif
  2,006,950 ( 0.00%)      ticks++;
          .             }
    664,424 ( 0.00%)    size_t res = SIZE_STACK (*clauses);
    498,318 ( 0.00%)    LOG ("quotient[0] factor %s size %zu", LOGLIT (factor), res);
    166,106 ( 0.00%)    assert (res > 1);
    498,318 ( 0.00%)    ADD (factor_ticks, ticks);
  1,661,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_factor_ticks (83,053x)
     83,053 ( 0.00%)    return res;
    166,106 ( 0.00%)  }
          .           
  6,077,574 ( 0.00%)  static void clear_nounted (kissat *solver, unsigneds *nounted) {
  3,038,787 ( 0.00%)    mark *marks = solver->marks;
 13,853,738 ( 0.01%)    for (all_stack (unsigned, lit, *nounted)) {
  4,256,512 ( 0.00%)      assert (marks[lit] & NOUNTED);
  4,788,576 ( 0.00%)      marks[lit] &= ~NOUNTED;
          .             }
  4,051,716 ( 0.00%)    CLEAR_STACK (*nounted);
  3,038,787 ( 0.00%)  }
          .           
    691,854 ( 0.00%)  static void clear_qlauses (kissat *solver, references *qlauses) {
    345,927 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
  4,944,171 ( 0.00%)    for (all_stack (reference, ref, *qlauses)) {
  3,249,498 ( 0.00%)      clause *const c = (clause *) (arena + ref);
  2,707,915 ( 0.00%)      assert (c->quotient);
  2,166,332 ( 0.00%)      c->quotient = false;
          .             }
    461,236 ( 0.00%)    CLEAR_STACK (*qlauses);
    345,927 ( 0.00%)  }
          .           
          .           static double distinct_paths (factoring *factoring, unsigned src_lit,
          .                                         unsigned dst_idx, unsigned hops) {
          .             kissat *const solver = factoring->solver;
          .             const unsigned src_idx = IDX (src_lit);
          .             bool matched = (src_idx == dst_idx);
          .             if (!hops)
          .               return matched;
-- line 261 ----------------------------------------
-- line 301 ----------------------------------------
          .             const unsigned first_factor = first_quotient->factor;
          .           #ifndef NDEBUG
          .             kissat *const solver = factoring->solver;
          .           #endif
          .             const unsigned first_factor_idx = IDX (first_factor);
          .             return distinct_paths (factoring, lit, first_factor_idx, factoring->hops);
          .           }
          .           
    362,316 ( 0.00%)  static double watches_score (factoring *factoring, unsigned lit) {
    181,158 ( 0.00%)    kissat *const solver = factoring->solver;
    362,316 ( 0.00%)    watches *watches = solver->watches + lit;
    543,474 ( 0.00%)    double res = SIZE_WATCHES (*watches);
    724,632 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (60,386x)
    362,316 ( 0.00%)    LOG ("watches score %g of %s", res, LOGLIT (lit));
    120,772 ( 0.00%)    return res;
    181,158 ( 0.00%)  }
          .           
    362,316 ( 0.00%)  static double tied_next_factor_score (factoring *factoring, unsigned lit) {
    241,544 ( 0.00%)    if (factoring->hops)
          .               return structural_score (factoring, lit);
          .             else
    362,316 ( 0.00%)      return watches_score (factoring, lit);
  2,838,142 ( 0.00%)  => build/../src/factor.c:watches_score (60,386x)
    181,158 ( 0.00%)  }
          .           
          .           static unsigned next_factor (factoring *factoring,
    595,086 ( 0.00%)                               unsigned *next_count_ptr) {
    297,543 ( 0.00%)    quotient *last_quotient = factoring->quotients.last;
    198,362 ( 0.00%)    assert (last_quotient);
    297,543 ( 0.00%)    statches *last_clauses = &last_quotient->clauses;
    297,543 ( 0.00%)    kissat *const solver = factoring->solver;
    297,543 ( 0.00%)    watches *all_watches = solver->watches;
    297,543 ( 0.00%)    unsigned *count = factoring->count;
    297,543 ( 0.00%)    unsigneds *counted = &factoring->counted;
    297,543 ( 0.00%)    references *qlauses = &factoring->qlauses;
    595,086 ( 0.00%)    assert (EMPTY_STACK (*counted));
    595,086 ( 0.00%)    assert (EMPTY_STACK (*qlauses));
    297,543 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
    297,543 ( 0.00%)    mark *marks = solver->marks;
    297,543 ( 0.00%)    const unsigned initial = factoring->initial;
    198,362 ( 0.00%)    uint64_t ticks =
    991,810 ( 0.00%)        1 + kissat_cache_lines (SIZE_STACK (*last_clauses), sizeof (watch));
  2,975,430 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (99,181x)
 10,929,175 ( 0.00%)    for (all_stack (watch, quotient_watch, *last_clauses)) {
  6,085,206 ( 0.00%)      if (quotient_watch.type.binary) {
  1,220,094 ( 0.00%)        const unsigned q = quotient_watch.binary.lit;
  2,440,188 ( 0.00%)        watches *q_watches = all_watches + q;
  3,253,584 ( 0.00%)        ticks += 1 + kissat_cache_lines (SIZE_WATCHES (*q_watches),
  4,880,376 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (406,698x)
 12,200,940 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (406,698x)
          .                                                  sizeof (watch));
 45,506,293 ( 0.02%)        for (all_binary_large_watches (next_watch, *q_watches)) {
  3,253,584 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (406,698x)
  3,253,584 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (406,698x)
 26,404,025 ( 0.01%)          if (!next_watch.type.binary)
  1,014,866 ( 0.00%)            continue;
 12,797,817 ( 0.01%)          const unsigned next = next_watch.binary.lit;
 12,797,817 ( 0.01%)          if (next > initial)
    501,278 ( 0.00%)            continue;
 32,122,400 ( 0.01%)          if (marks[next] & FACTOR)
  1,350,410 ( 0.00%)            continue;
 26,720,760 ( 0.01%)          const unsigned next_idx = IDX (next);
 46,761,330 ( 0.02%)          if (!ACTIVE (next_idx))
     20,894 ( 0.00%)            continue;
 23,234,407 ( 0.01%)          if (!count[next])
 38,113,782 ( 0.02%)            PUSH_STACK (*counted, next);
     23,143 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (47x)
 26,553,608 ( 0.01%)          count[next]++;
          .                 }
          .               } else {
  3,038,787 ( 0.00%)        const reference c_ref = quotient_watch.large.ref;
  6,077,574 ( 0.00%)        clause *const c = (clause *) (arena + c_ref);
  7,090,503 ( 0.00%)        assert (!c->quotient);
  2,025,858 ( 0.00%)        unsigned min_lit = INVALID_LIT, factors = 0;
  1,012,929 ( 0.00%)        size_t min_size = 0;
  1,012,929 ( 0.00%)        ticks++;
 39,891,097 ( 0.02%)        for (all_literals_in_clause (other, c)) {
 29,238,257 ( 0.01%)          if (marks[other] & FACTOR) {
  5,064,645 ( 0.00%)            if (factors++)
          .                       break;
          .                   } else {
 20,121,896 ( 0.01%)            assert (!(marks[other] & QUOTIENT));
 22,637,133 ( 0.01%)            marks[other] |= QUOTIENT;
 15,091,422 ( 0.01%)            watches *other_watches = all_watches + other;
 10,060,948 ( 0.00%)            const size_t other_size = SIZE_WATCHES (*other_watches);
 30,182,844 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (2,515,237x)
  9,537,398 ( 0.00%)            if (min_lit != INVALID_LIT && min_size <= other_size)
    937,708 ( 0.00%)              continue;
  3,155,058 ( 0.00%)            min_lit = other;
  4,732,587 ( 0.00%)            min_size = other_size;
          .                   }
          .                 }
  2,025,858 ( 0.00%)        assert (factors);
  2,025,858 ( 0.00%)        if (factors == 1) {
  2,025,858 ( 0.00%)          assert (min_lit != INVALID_LIT);
  6,077,574 ( 0.00%)          watches *min_watches = all_watches + min_lit;
  3,038,787 ( 0.00%)          unsigned c_size = c->size;
  3,038,787 ( 0.00%)          unsigneds *nounted = &factoring->nounted;
  6,077,574 ( 0.00%)          assert (EMPTY_STACK (*nounted));
  8,103,432 ( 0.00%)          ticks += 1 + kissat_cache_lines (SIZE_WATCHES (*min_watches),
 12,155,148 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,012,929x)
 30,387,870 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (1,012,929x)
          .                                                    sizeof (watch));
 78,149,638 ( 0.03%)          for (all_binary_large_watches (min_watch, *min_watches)) {
  8,103,432 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,012,929x)
  8,103,432 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,012,929x)
 32,501,788 ( 0.01%)            if (min_watch.type.binary)
    230,143 ( 0.00%)              continue;
 23,685,912 ( 0.01%)            const reference d_ref = min_watch.large.ref;
 23,685,912 ( 0.01%)            if (c_ref == d_ref)
  2,025,858 ( 0.00%)              continue;
 41,294,250 ( 0.02%)            clause *const d = (clause *) (arena + d_ref);
  6,882,375 ( 0.00%)            ticks++;
 34,411,875 ( 0.01%)            if (d->quotient)
    130,436 ( 0.00%)              continue;
 27,268,628 ( 0.01%)            if (d->size != c_size)
  7,090,380 ( 0.00%)              continue;
  3,271,967 ( 0.00%)            unsigned next = INVALID_LIT;
102,914,981 ( 0.04%)            for (all_literals_in_clause (other, d)) {
 46,282,200 ( 0.02%)              const mark mark = marks[other];
 37,025,760 ( 0.02%)              if (mark & QUOTIENT)
  3,401,243 ( 0.00%)                continue;
 23,420,788 ( 0.01%)              if (mark & FACTOR)
    979,910 ( 0.00%)                goto CONTINUE_WITH_NEXT_MIN_WATCH;
 21,460,968 ( 0.01%)              if (mark & NOUNTED)
    133,676 ( 0.00%)                goto CONTINUE_WITH_NEXT_MIN_WATCH;
 10,596,808 ( 0.00%)              if (next != INVALID_LIT)
  4,366,216 ( 0.00%)                goto CONTINUE_WITH_NEXT_MIN_WATCH;
  6,230,592 ( 0.00%)              next = other;
          .                     }
  1,064,132 ( 0.00%)            assert (next != INVALID_LIT);
  1,596,198 ( 0.00%)            if (next > initial)
          4 ( 0.00%)              continue;
  4,256,512 ( 0.00%)            const unsigned next_idx = IDX (next);
  7,448,896 ( 0.00%)            if (!ACTIVE (next_idx))
          .                       continue;
  4,256,512 ( 0.00%)            assert (!(marks[next] & (FACTOR | NOUNTED)));
  4,788,576 ( 0.00%)            marks[next] |= NOUNTED;
  6,917,108 ( 0.00%)            PUSH_STACK (*nounted, next);
      9,173 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (23x)
  2,128,256 ( 0.00%)            d->quotient = true;
  6,917,636 ( 0.00%)            PUSH_STACK (*qlauses, d_ref);
     39,697 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (67x)
  3,724,448 ( 0.00%)            if (!count[next])
  3,215,849 ( 0.00%)              PUSH_STACK (*counted, next);
     11,042 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (13x)
  4,256,512 ( 0.00%)            count[next]++;
          .                   CONTINUE_WITH_NEXT_MIN_WATCH:;
          .                   }
  5,064,645 ( 0.00%)          clear_nounted (solver, nounted);
 39,105,690 ( 0.02%)  => build/../src/factor.c:clear_nounted (1,012,929x)
          .                 }
 43,419,263 ( 0.02%)        for (all_literals_in_clause (other, c))
 31,753,494 ( 0.01%)          marks[other] &= ~QUOTIENT;
          .               }
  8,517,762 ( 0.00%)      ADD (factor_ticks, ticks);
 28,392,540 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_factor_ticks (1,419,627x)
  1,419,627 ( 0.00%)      ticks = 0;
  8,517,762 ( 0.00%)      if (solver->statistics.factor_ticks > factoring->limit)
          6 ( 0.00%)        break;
          .             }
    495,905 ( 0.00%)    clear_qlauses (solver, qlauses);
 14,284,114 ( 0.01%)  => build/../src/factor.c:clear_qlauses (99,181x)
    198,362 ( 0.00%)    unsigned next_count = 0, next = INVALID_LIT;
    595,086 ( 0.00%)    if (solver->statistics.factor_ticks <= factoring->limit) {
     99,175 ( 0.00%)      unsigned ties = 0;
 23,244,127 ( 0.01%)      for (all_stack (unsigned, lit, *counted)) {
 19,073,466 ( 0.01%)        const unsigned lit_count = count[lit];
  9,536,733 ( 0.00%)        if (lit_count < next_count)
  1,065,699 ( 0.00%)          continue;
  6,339,636 ( 0.00%)        if (lit_count == next_count) {
  4,043,306 ( 0.00%)          assert (lit_count);
  4,043,306 ( 0.00%)          ties++;
          .                 } else {
    274,677 ( 0.00%)          assert (lit_count > next_count);
    183,118 ( 0.00%)          next_count = lit_count;
    183,118 ( 0.00%)          next = lit;
     91,559 ( 0.00%)          ties = 1;
          .                 }
          .               }
    198,350 ( 0.00%)      if (next_count < 2) {
    498,282 ( 0.00%)        LOG ("next factor count %u smaller than 2", next_count);
    166,094 ( 0.00%)        next = INVALID_LIT;
     32,256 ( 0.00%)      } else if (ties > 1) {
     18,966 ( 0.00%)        LOG ("found %u tied next factor candidate literals with count %u",
          .                      ties, next_count);
      6,322 ( 0.00%)        double next_score = -1;
  3,148,661 ( 0.00%)        for (all_stack (unsigned, lit, *counted)) {
  2,671,758 ( 0.00%)          const unsigned lit_count = count[lit];
  1,335,879 ( 0.00%)          if (lit_count != next_count)
    384,907 ( 0.00%)            continue;
    422,702 ( 0.00%)          double lit_score = tied_next_factor_score (factoring, lit);
  3,985,476 ( 0.00%)  => build/../src/factor.c:tied_next_factor_score (60,386x)
    241,544 ( 0.00%)          assert (lit_score >= 0);
    362,316 ( 0.00%)          LOG ("score %g of next factor candidate %s", lit_score,
          .                        LOGLIT (lit));
    181,158 ( 0.00%)          if (lit_score <= next_score)
     55,167 ( 0.00%)            continue;
     10,438 ( 0.00%)          next_score = lit_score;
     15,657 ( 0.00%)          next = lit;
          .                 }
     12,644 ( 0.00%)        assert (next_score >= 0);
      6,322 ( 0.00%)        assert (next != INVALID_LIT);
     18,966 ( 0.00%)        LOG ("best score %g of next factor %s", next_score, LOGLIT (next));
          .               } else {
     25,934 ( 0.00%)        assert (ties == 1);
     77,802 ( 0.00%)        LOG ("single next factor %s with count %u", LOGLIT (next),
          .                      next_count);
          .               }
          .             }
 26,424,986 ( 0.01%)    for (all_stack (unsigned, lit, *counted))
 15,895,735 ( 0.01%)      count[lit] = 0;
    396,724 ( 0.00%)    CLEAR_STACK (*counted);
    230,618 ( 0.00%)    assert (next == INVALID_LIT || next_count > 1);
    297,543 ( 0.00%)    *next_count_ptr = next_count;
     99,181 ( 0.00%)    return next;
    198,362 ( 0.00%)  }
          .           
          .           static void factorize_next (factoring *factoring, unsigned next,
    112,896 ( 0.00%)                              unsigned expected_next_count) {
     48,384 ( 0.00%)    quotient *last_quotient = factoring->quotients.last;
     96,768 ( 0.00%)    quotient *next_quotient = new_quotient (factoring, next);
  3,522,010 ( 0.00%)  => build/../src/factor.c:new_quotient (16,128x)
          .           
     48,384 ( 0.00%)    kissat *const solver = factoring->solver;
     48,384 ( 0.00%)    watches *all_watches = solver->watches;
     48,384 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
     48,384 ( 0.00%)    mark *marks = solver->marks;
          .           
     32,256 ( 0.00%)    assert (last_quotient);
     48,384 ( 0.00%)    statches *last_clauses = &last_quotient->clauses;
     48,384 ( 0.00%)    statches *next_clauses = &next_quotient->clauses;
     48,384 ( 0.00%)    sizes *matches = &next_quotient->matches;
     48,384 ( 0.00%)    references *qlauses = &factoring->qlauses;
     96,768 ( 0.00%)    assert (EMPTY_STACK (*qlauses));
          .           
     32,256 ( 0.00%)    uint64_t ticks =
    161,280 ( 0.00%)        1 + kissat_cache_lines (SIZE_STACK (*last_clauses), sizeof (watch));
    483,840 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (16,128x)
          .           
     16,128 ( 0.00%)    size_t i = 0;
          .           
  6,277,642 ( 0.00%)    for (all_stack (watch, last_watch, *last_clauses)) {
  3,811,427 ( 0.00%)      if (last_watch.type.binary) {
    949,089 ( 0.00%)        const unsigned q = last_watch.binary.lit;
  1,898,178 ( 0.00%)        watches *q_watches = all_watches + q;
  2,530,904 ( 0.00%)        ticks += 1 + kissat_cache_lines (SIZE_WATCHES (*q_watches),
  9,490,890 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (316,363x)
  3,796,356 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (316,363x)
          .                                                  sizeof (watch));
 22,091,427 ( 0.01%)        for (all_binary_large_watches (q_watch, *q_watches))
  2,530,904 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (316,363x)
  2,530,904 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (316,363x)
 17,237,247 ( 0.01%)          if (q_watch.type.binary && q_watch.binary.lit == next) {
    341,238 ( 0.00%)            LOGBINARY (last_quotient->factor, q, "matched");
    341,238 ( 0.00%)            LOGBINARY (next, q, "keeping");
  1,007,201 ( 0.00%)            PUSH_STACK (*next_clauses, last_watch);
  7,371,949 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (22,321x)
  1,174,709 ( 0.00%)            PUSH_STACK (*matches, i);
 12,279,284 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (36,280x)
     56,873 ( 0.00%)            break;
          .                   }
          .               } else {
  1,672,209 ( 0.00%)        const reference c_ref = last_watch.large.ref;
  3,344,418 ( 0.00%)        clause *const c = (clause *) (arena + c_ref);
  3,901,821 ( 0.00%)        assert (!c->quotient);
  1,114,806 ( 0.00%)        unsigned min_lit = INVALID_LIT, factors = 0;
    557,403 ( 0.00%)        size_t min_size = 0;
    557,403 ( 0.00%)        ticks++;
 21,221,792 ( 0.01%)        for (all_literals_in_clause (other, c)) {
 15,272,047 ( 0.01%)          if (marks[other] & FACTOR) {
  2,801,955 ( 0.00%)            if (factors++)
      2,988 ( 0.00%)              break;
          .                   } else {
 10,228,528 ( 0.00%)            assert (!(marks[other] & QUOTIENT));
 11,507,094 ( 0.00%)            marks[other] |= QUOTIENT;
  7,671,396 ( 0.00%)            watches *other_watches = all_watches + other;
  5,114,264 ( 0.00%)            const size_t other_size = SIZE_WATCHES (*other_watches);
 15,342,792 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,278,566x)
  4,721,788 ( 0.00%)            if (min_lit != INVALID_LIT && min_size <= other_size)
    434,198 ( 0.00%)              continue;
  1,688,736 ( 0.00%)            min_lit = other;
  2,533,104 ( 0.00%)            min_size = other_size;
          .                   }
          .                 }
  1,114,806 ( 0.00%)        assert (factors);
  1,114,806 ( 0.00%)        if (factors == 1) {
  1,108,830 ( 0.00%)          assert (min_lit != INVALID_LIT);
  3,326,490 ( 0.00%)          watches *min_watches = all_watches + min_lit;
  1,663,245 ( 0.00%)          unsigned c_size = c->size;
  4,435,320 ( 0.00%)          ticks += 1 + kissat_cache_lines (SIZE_WATCHES (*min_watches),
 16,632,450 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (554,415x)
  6,652,980 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (554,415x)
          .                                                    sizeof (watch));
 44,074,776 ( 0.02%)          for (all_binary_large_watches (min_watch, *min_watches)) {
  4,435,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (554,415x)
  4,435,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (554,415x)
 18,554,364 ( 0.01%)            if (min_watch.type.binary)
     56,182 ( 0.00%)              continue;
 13,747,227 ( 0.01%)            const reference d_ref = min_watch.large.ref;
 13,747,227 ( 0.01%)            if (c_ref == d_ref)
  1,102,556 ( 0.00%)              continue;
 24,186,786 ( 0.01%)            clause *const d = (clause *) (arena + d_ref);
  4,031,131 ( 0.00%)            ticks++;
 20,155,655 ( 0.01%)            if (d->quotient)
      1,502 ( 0.00%)              continue;
 16,121,520 ( 0.01%)            if (d->size != c_size)
  4,024,144 ( 0.00%)              continue;
 45,616,321 ( 0.02%)            for (all_literals_in_clause (other, d)) {
 16,697,755 ( 0.01%)              const mark mark = marks[other];
 13,358,204 ( 0.01%)              if (mark & QUOTIENT)
  1,316,887 ( 0.00%)                continue;
  6,067,992 ( 0.00%)              if (other != next)
  2,008,789 ( 0.00%)                goto CONTINUE_WITH_NEXT_MIN_WATCH;
          .                     }
     57,114 ( 0.00%)            LOGCLS (c, "matched");
     57,114 ( 0.00%)            LOGCLS (d, "keeping");
    168,243 ( 0.00%)            PUSH_STACK (*next_clauses, min_watch);
  1,173,551 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (3,708x)
    194,271 ( 0.00%)            PUSH_STACK (*matches, i);
  2,045,882 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (5,877x)
    123,747 ( 0.00%)            PUSH_STACK (*qlauses, d_ref);
     38,076 ( 0.00%)            d->quotient = true;
      9,519 ( 0.00%)            break;
          .                   CONTINUE_WITH_NEXT_MIN_WATCH:;
          .                   }
          .                 }
 23,080,501 ( 0.01%)        for (all_literals_in_clause (other, c))
 16,559,388 ( 0.01%)          marks[other] &= ~QUOTIENT;
          .               }
    873,766 ( 0.00%)      i++;
          .             }
          .           
     80,640 ( 0.00%)    clear_qlauses (solver, qlauses);
    628,746 ( 0.00%)  => build/../src/factor.c:clear_qlauses (16,128x)
     96,768 ( 0.00%)    ADD (factor_ticks, ticks);
    322,560 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_factor_ticks (16,128x)
          .           
    161,280 ( 0.00%)    assert (expected_next_count <= SIZE_STACK (*next_clauses));
          .             (void) expected_next_count;
     48,384 ( 0.00%)  }
          .           
          .           static quotient *best_quotient (factoring *factoring,
    498,318 ( 0.00%)                                  size_t *best_reduction_ptr) {
    166,106 ( 0.00%)    size_t factors = 1, best_reduction = 0;
     83,053 ( 0.00%)    quotient *best = 0;
    249,159 ( 0.00%)    kissat *const solver = factoring->solver;
    994,223 ( 0.00%)    for (quotient *q = factoring->quotients.first; q; q = q->next) {
    793,448 ( 0.00%)      size_t quotients = SIZE_STACK (q->clauses);
    297,543 ( 0.00%)      size_t before_factorization = quotients * factors;
    396,724 ( 0.00%)      size_t after_factorization = quotients + factors;
    297,543 ( 0.00%)      if (before_factorization == after_factorization)
     49,728 ( 0.00%)        LOG ("quotient[%zu] factors %zu clauses into %zu thus no change",
          .                      factors - 1, before_factorization, after_factorization);
    272,679 ( 0.00%)      else if (before_factorization < after_factorization)
    498,318 ( 0.00%)        LOG ("quotient[%zu] factors %zu clauses into %zu thus %zu more",
          .                      factors - 1, before_factorization, after_factorization,
          .                      after_factorization - before_factorization);
          .               else {
     23,520 ( 0.00%)        size_t delta = before_factorization - after_factorization;
     47,040 ( 0.00%)        LOG ("quotient[%zu] factors %zu clauses into %zu thus %zu less",
          .                      factors - 1, before_factorization, after_factorization, delta);
     31,208 ( 0.00%)        if (!best || best_reduction < delta) {
      9,184 ( 0.00%)          best_reduction = delta;
      9,184 ( 0.00%)          best = q;
          .                 }
          .               }
     99,181 ( 0.00%)      factors++;
          .             }
    166,106 ( 0.00%)    if (!best) {
    482,334 ( 0.00%)      LOG ("no decreasing quotient found");
    160,778 ( 0.00%)      return 0;
          .             }
     15,984 ( 0.00%)    LOG ("best decreasing quotient[%zu] with reduction %zu", best->id,
          .                  best_reduction);
      7,992 ( 0.00%)    *best_reduction_ptr = best_reduction;
          .             (void) solver;
      2,664 ( 0.00%)    return best;
    166,106 ( 0.00%)  }
          .           
     15,942 ( 0.00%)  static void resize_factoring (factoring *factoring, unsigned lit) {
      7,971 ( 0.00%)    kissat *const solver = factoring->solver;
     23,913 ( 0.00%)    assert (lit > NOT (lit));
      7,971 ( 0.00%)    const size_t old_size = factoring->size;
      7,971 ( 0.00%)    assert (lit > old_size);
      7,971 ( 0.00%)    const size_t old_allocated = factoring->allocated;
     10,628 ( 0.00%)    size_t new_size = lit + 1;
      7,971 ( 0.00%)    if (new_size > old_allocated) {
         21 ( 0.00%)      size_t new_allocated = 2 * old_allocated;
         28 ( 0.00%)      while (new_size > new_allocated)
          .                 new_allocated *= 2;
         21 ( 0.00%)      unsigned *count = factoring->count;
         56 ( 0.00%)      count = kissat_nrealloc (solver, count, old_allocated, new_allocated,
  1,433,692 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_nrealloc (7x)
          .                                        sizeof *count);
         21 ( 0.00%)      const size_t delta_allocated = new_allocated - old_allocated;
         21 ( 0.00%)      const size_t delta_bytes = delta_allocated * sizeof *count;
         63 ( 0.00%)      memset (count + old_size, 0, delta_bytes);
  1,450,485 ( 0.00%)  => ???:0x000000000010c5b0 (7x)
         21 ( 0.00%)      factoring->count = count;
         28 ( 0.00%)      assert (!(old_allocated & 1));
         28 ( 0.00%)      assert (!(new_allocated & 1));
         21 ( 0.00%)      const size_t old_allocated_score = old_allocated / 2;
         21 ( 0.00%)      const size_t new_allocated_score = new_allocated / 2;
         42 ( 0.00%)      for (unsigned i = 0; i != factoring->hops; i++) {
          .                 scores *scores = factoring->scores + i;
          .                 double *score = scores->score;
          .                 score = kissat_nrealloc (solver, score, old_allocated_score,
          .                                          new_allocated_score, sizeof *score);
          .                 for (size_t i = old_allocated_score; i != new_allocated_score; i++)
          .                   score[i] = -1;
          .                 scores->score = score;
          .               }
         21 ( 0.00%)      factoring->allocated = new_allocated;
          .             }
      7,971 ( 0.00%)    factoring->size = new_size;
      7,971 ( 0.00%)  }
          .           
     29,124 ( 0.00%)  static void flush_unmatched_clauses (kissat *solver, quotient *q) {
     14,562 ( 0.00%)    quotient *prev = q->prev;
     29,124 ( 0.00%)    sizes *q_matches = &q->matches, *prev_matches = &prev->matches;
     29,124 ( 0.00%)    statches *q_clauses = &q->clauses, *prev_clauses = &prev->clauses;
     38,832 ( 0.00%)    const size_t n = SIZE_STACK (*q_clauses);
     53,394 ( 0.00%)    assert (n == SIZE_STACK (*q_matches));
     24,270 ( 0.00%)    bool prev_is_first = !prev->id;
      4,854 ( 0.00%)    size_t i = 0;
    122,823 ( 0.00%)    while (i != n) {
    551,504 ( 0.00%)      size_t j = PEEK_STACK (*q_matches, i);
    103,407 ( 0.00%)      assert (i <= j);
    137,876 ( 0.00%)      if (!prev_is_first) {
    255,568 ( 0.00%)        size_t matches = PEEK_STACK (*prev_matches, j);
    255,568 ( 0.00%)        POKE_STACK (*prev_matches, i, matches);
          .               }
    551,504 ( 0.00%)      watch watch = PEEK_STACK (*prev_clauses, j);
    551,504 ( 0.00%)      POKE_STACK (*prev_clauses, i, watch);
     34,469 ( 0.00%)      i++;
          .             }
     29,124 ( 0.00%)    LOG ("flushing %zu clauses of quotient[%zu]",
          .                  SIZE_STACK (*prev_clauses) - n, prev->id);
     19,416 ( 0.00%)    if (!prev_is_first)
     39,546 ( 0.00%)      RESIZE_STACK (*prev_matches, n);
     87,372 ( 0.00%)    RESIZE_STACK (*prev_clauses, n);
          .             (void) solver;
     14,562 ( 0.00%)  }
          .           
          .           static void add_factored_divider (factoring *factoring, quotient *q,
     52,577 ( 0.00%)                                    unsigned fresh) {
     22,533 ( 0.00%)    const unsigned factor = q->factor;
     22,533 ( 0.00%)    kissat *const solver = factoring->solver;
     45,066 ( 0.00%)    LOGBINARY (fresh, factor, "factored %s divider", LOGLIT (factor));
     45,066 ( 0.00%)    kissat_new_binary_clause (solver, fresh, factor);
 18,702,122 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_binary_clause (7,511x)
     30,044 ( 0.00%)    INC (clauses_factored);
    112,665 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_factored (7,511x)
     37,555 ( 0.00%)    ADD (literals_factored, 2);
    150,220 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_factored (7,511x)
     22,533 ( 0.00%)  }
          .           
          .           static void add_factored_quotient (factoring *factoring, quotient *q,
     18,599 ( 0.00%)                                     unsigned not_fresh) {
      7,971 ( 0.00%)    kissat *const solver = factoring->solver;
     15,942 ( 0.00%)    LOG ("adding factored quotient[%zu] clauses", q->id);
    156,042 ( 0.00%)    for (all_stack (watch, watch, q->clauses)) {
     86,749 ( 0.00%)      if (watch.type.binary) {
     38,295 ( 0.00%)        const unsigned other = watch.binary.lit;
     76,590 ( 0.00%)        LOGBINARY (not_fresh, other, "factored quotient");
     76,590 ( 0.00%)        kissat_new_binary_clause (solver, not_fresh, other);
3,964,813,431 ( 1.68%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_binary_clause (12,765x)
     76,590 ( 0.00%)        ADD (literals_factored, 2);
    255,300 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_factored (12,765x)
          .               } else {
     17,193 ( 0.00%)        const reference c_ref = watch.large.ref;
     34,386 ( 0.00%)        clause *const c = kissat_dereference_clause (solver, c_ref);
    784,867 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (5,731x)
     17,193 ( 0.00%)        unsigneds *clause = &solver->clause;
     34,386 ( 0.00%)        assert (EMPTY_STACK (*clause));
     17,193 ( 0.00%)        const unsigned factor = q->factor;
          .           #ifndef NDEBUG
      5,731 ( 0.00%)        bool found = false;
          .           #endif
     74,503 ( 0.00%)        PUSH_STACK (*clause, not_fresh);
    209,025 ( 0.00%)        for (all_literals_in_clause (other, c)) {
     58,471 ( 0.00%)          if (other == factor) {
          .           #ifndef NDEBUG
      5,731 ( 0.00%)            found = true;
          .           #endif
      5,731 ( 0.00%)            continue;
          .                   }
    154,037 ( 0.00%)          PUSH_STACK (*clause, other);
          .                 }
     11,462 ( 0.00%)        assert (found);
     45,848 ( 0.00%)        ADD (literals_factored, c->size);
    114,620 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_factored (5,731x)
     17,193 ( 0.00%)        kissat_new_irredundant_clause (solver);
159,401,271 ( 0.07%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (5,731x)
     22,924 ( 0.00%)        CLEAR_STACK (*clause);
          .               }
     73,984 ( 0.00%)      INC (clauses_factored);
    277,440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_factored (18,496x)
          .             }
      7,971 ( 0.00%)  }
          .           
          .           static void eagerly_remove_watch (kissat *solver, watches *watches,
    850,066 ( 0.00%)                                    watch needle) {
    728,628 ( 0.00%)    watch *p = BEGIN_WATCHES (*watches);
    971,504 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (121,438x)
    728,628 ( 0.00%)    watch *end = END_WATCHES (*watches);
    971,504 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (121,438x)
    364,314 ( 0.00%)    assert (p != end);
    364,314 ( 0.00%)    watch *last = end - 1;
 43,753,933 ( 0.02%)    while (p->raw != needle.raw)
 34,420,244 ( 0.01%)      p++, assert (p != end);
    364,314 ( 0.00%)    if (p != last)
  1,092,942 ( 0.00%)      memmove (p, p + 1, (last - p) * sizeof *p);
  5,128,285 ( 0.00%)  => ???:0x000000000010c860 (121,438x)
  1,943,008 ( 0.00%)    SET_END_OF_WATCHES (*watches, last);
 13,843,932 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (121,438x)
    971,504 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (121,438x)
    364,314 ( 0.00%)  }
          .           
          .           static void eagerly_remove_binary (kissat *solver, watches *watches,
    558,138 ( 0.00%)                                     unsigned lit) {
    318,936 ( 0.00%)    const watch needle = kissat_binary_watch (lit);
  1,754,148 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (79,734x)
    478,404 ( 0.00%)    eagerly_remove_watch (solver, watches, needle);
 33,474,078 ( 0.01%)  => build/../src/factor.c:eagerly_remove_watch (79,734x)
    239,202 ( 0.00%)  }
          .           
     45,066 ( 0.00%)  static void delete_unfactored (factoring *factoring, quotient *q) {
     22,533 ( 0.00%)    kissat *const solver = factoring->solver;
     45,066 ( 0.00%)    LOG ("deleting unfactored quotient[%zu] clauses", q->id);
     22,533 ( 0.00%)    const unsigned factor = q->factor;
    445,865 ( 0.00%)    for (all_stack (watch, watch, q->clauses)) {
    251,727 ( 0.00%)      if (watch.type.binary) {
    119,601 ( 0.00%)        const unsigned other = watch.binary.lit;
    239,202 ( 0.00%)        LOGBINARY (factor, other, "deleting unfactored");
    598,005 ( 0.00%)        eagerly_remove_binary (solver, &WATCHES (other), factor);
 11,811,668 ( 0.00%)  => build/../src/factor.c:eagerly_remove_binary (39,867x)
    598,005 ( 0.00%)        eagerly_remove_binary (solver, &WATCHES (factor), other);
 25,011,238 ( 0.01%)  => build/../src/factor.c:eagerly_remove_binary (39,867x)
    239,202 ( 0.00%)        kissat_delete_binary (solver, factor, other);
110,280,307 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (39,867x)
    239,202 ( 0.00%)        ADD (literals_unfactored, 2);
    797,340 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_unfactored (39,867x)
          .               } else {
     39,294 ( 0.00%)        const reference ref = watch.large.ref;
     78,588 ( 0.00%)        clause *c = kissat_dereference_clause (solver, ref);
  1,793,866 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (13,098x)
     78,588 ( 0.00%)        LOGCLS (c, "deleting unfactored");
    488,398 ( 0.00%)        for (all_literals_in_clause (lit, c))
    625,560 ( 0.00%)          eagerly_remove_watch (solver, &WATCHES (lit), watch);
 73,387,356 ( 0.03%)  => build/../src/factor.c:eagerly_remove_watch (41,704x)
     65,490 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
 47,644,598 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (13,098x)
    104,784 ( 0.00%)        ADD (literals_unfactored, c->size);
    261,960 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_unfactored (13,098x)
          .               }
    211,860 ( 0.00%)      INC (clauses_unfactored);
    794,475 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_unfactored (52,965x)
          .             }
     22,533 ( 0.00%)  }
          .           
     45,066 ( 0.00%)  static void update_factored (factoring *factoring, quotient *q) {
     22,533 ( 0.00%)    kissat *const solver = factoring->solver;
     22,533 ( 0.00%)    const unsigned factor = q->factor;
     37,555 ( 0.00%)    update_candidate (factoring, factor);
  3,455,466 ( 0.00%)  => build/../src/factor.c:update_candidate (7,511x)
     90,132 ( 0.00%)    update_candidate (factoring, NOT (factor));
  2,534,657 ( 0.00%)  => build/../src/factor.c:update_candidate (7,511x)
    445,865 ( 0.00%)    for (all_stack (watch, watch, q->clauses)) {
    251,727 ( 0.00%)      if (watch.type.binary) {
    119,601 ( 0.00%)        const unsigned other = watch.binary.lit;
    239,202 ( 0.00%)        update_candidate (factoring, other);
  8,511,051 ( 0.00%)  => build/../src/factor.c:update_candidate (39,867x)
          .               } else {
     39,294 ( 0.00%)        const reference ref = watch.large.ref;
     78,588 ( 0.00%)        clause *c = kissat_dereference_clause (solver, ref);
  1,793,866 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (13,098x)
     78,588 ( 0.00%)        LOGCLS (c, "deleting unfactored");
    488,398 ( 0.00%)        for (all_literals_in_clause (lit, c))
    153,718 ( 0.00%)          if (lit != factor)
    143,030 ( 0.00%)            update_candidate (factoring, lit);
  5,991,013 ( 0.00%)  => build/../src/factor.c:update_candidate (28,606x)
          .               }
          .             }
     22,533 ( 0.00%)  }
          .           
     15,942 ( 0.00%)  static bool apply_factoring (factoring *factoring, quotient *q) {
      7,971 ( 0.00%)    kissat *const solver = factoring->solver;
     10,628 ( 0.00%)    const unsigned fresh = kissat_fresh_literal (solver);
 14,387,640 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/import.c:kissat_fresh_literal (2,657x)
      5,314 ( 0.00%)    if (fresh == INVALID_LIT)
          .               return false;
     10,628 ( 0.00%)    INC (factored);
     39,855 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_factored (2,657x)
     35,100 ( 0.00%)    PUSH_STACK (factoring->fresh, fresh);
    648,644 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (43x)
     52,577 ( 0.00%)    for (quotient *p = q; p->prev; p = p->prev)
     24,270 ( 0.00%)      flush_unmatched_clauses (solver, p);
  2,977,527 ( 0.00%)  => build/../src/factor.c:flush_unmatched_clauses (4,854x)
     50,840 ( 0.00%)    for (quotient *p = q; p; p = p->prev)
     45,066 ( 0.00%)      add_factored_divider (factoring, p, fresh);
 19,242,914 ( 0.01%)  => build/../src/factor.c:add_factored_divider (7,511x)
     21,256 ( 0.00%)    const unsigned not_fresh = NOT (fresh);
     15,942 ( 0.00%)    add_factored_quotient (factoring, q, not_fresh);
4,127,013,259 ( 1.75%)  => build/../src/factor.c:add_factored_quotient (2,657x)
     50,840 ( 0.00%)    for (quotient *p = q; p; p = p->prev)
     37,555 ( 0.00%)      delete_unfactored (factoring, p);
276,363,910 ( 0.12%)  => build/../src/factor.c:delete_unfactored (7,511x)
     50,840 ( 0.00%)    for (quotient *p = q; p; p = p->prev)
     37,555 ( 0.00%)      update_factored (factoring, p);
 24,564,416 ( 0.01%)  => build/../src/factor.c:update_factored (7,511x)
      7,971 ( 0.00%)    assert (fresh < not_fresh);
     13,285 ( 0.00%)    resize_factoring (factoring, not_fresh);
  2,990,870 ( 0.00%)  => build/../src/factor.c:resize_factoring (2,657x)
      2,657 ( 0.00%)    return true;
      5,314 ( 0.00%)  }
          .           
          .           static void
         35 ( 0.00%)  adjust_scores_and_phases_of_fresh_varaibles (factoring *factoring) {
         21 ( 0.00%)    const unsigned *begin = BEGIN_STACK (factoring->fresh);
         21 ( 0.00%)    const unsigned *end = END_STACK (factoring->fresh);
         21 ( 0.00%)    kissat *const solver = factoring->solver;
          .             {
         14 ( 0.00%)      const unsigned *p = begin;
      7,999 ( 0.00%)      while (p != end) {
     13,285 ( 0.00%)        const unsigned lit = *p++;
     21,256 ( 0.00%)        const unsigned idx = IDX (lit);
     15,942 ( 0.00%)        LOG ("unbumping fresh[%zu] %s", (size_t) (p - begin - 1),
          .                      LOGVAR (idx));
      5,314 ( 0.00%)        const double score = 0;
     21,256 ( 0.00%)        kissat_update_heap (solver, &solver->scores, idx, score);
    430,567 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (2,657x)
          .               }
          .             }
          .             {
         14 ( 0.00%)      const unsigned *p = end;
         21 ( 0.00%)      links *links = solver->links;
         21 ( 0.00%)      queue *queue = &solver->queue;
      7,999 ( 0.00%)      while (p != begin) {
     10,628 ( 0.00%)        const unsigned lit = *--p;
     21,256 ( 0.00%)        const unsigned idx = IDX (lit);
     15,942 ( 0.00%)        kissat_dequeue_links (idx, links, queue);
    159,420 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinequeue.h:kissat_dequeue_links (2,657x)
          .               }
         14 ( 0.00%)      queue->stamp = 0;
         21 ( 0.00%)      unsigned rest = queue->first;
         14 ( 0.00%)      p = end;
      7,999 ( 0.00%)      while (p != begin) {
     10,628 ( 0.00%)        const unsigned lit = *--p;
     21,256 ( 0.00%)        const unsigned idx = IDX (lit);
     23,913 ( 0.00%)        struct links *l = links + idx;
     10,628 ( 0.00%)        if (DISCONNECTED (queue->first)) {
          .                   assert (DISCONNECTED (queue->last));
          .                   queue->last = idx;
          .                 } else {
     29,227 ( 0.00%)          struct links *first = links + queue->first;
     10,628 ( 0.00%)          assert (DISCONNECTED (first->prev));
      7,971 ( 0.00%)          first->prev = idx;
          .                 }
     10,628 ( 0.00%)        l->next = queue->first;
      7,971 ( 0.00%)        queue->first = idx;
     10,628 ( 0.00%)        assert (DISCONNECTED (l->prev));
     23,913 ( 0.00%)        l->stamp = ++queue->stamp;
          .               }
    517,729 ( 0.00%)      while (!DISCONNECTED (rest)) {
  1,553,103 ( 0.00%)        struct links *l = links + rest;
  1,553,103 ( 0.00%)        l->stamp = ++queue->stamp;
    517,701 ( 0.00%)        rest = l->next;
          .               }
         28 ( 0.00%)      solver->queue.search.idx = queue->last;
         28 ( 0.00%)      solver->queue.search.stamp = queue->stamp;
          .             }
         21 ( 0.00%)  }
          .           
         63 ( 0.00%)  static bool run_factorization (kissat *solver, uint64_t limit) {
          .             factoring factoring;
         42 ( 0.00%)    init_factoring (solver, &factoring, limit);
  5,444,047 ( 0.00%)  => build/../src/factor.c:init_factoring (7x)
         21 ( 0.00%)    schedule_factorization (&factoring);
164,639,507 ( 0.07%)  => build/../src/factor.c:schedule_factorization (7x)
          7 ( 0.00%)    bool done = false;
          .           #ifndef QUIET
          7 ( 0.00%)    unsigned factored = 0;
          .           #endif
         21 ( 0.00%)    uint64_t *ticks = &solver->statistics.factor_ticks;
         63 ( 0.00%)    kissat_extremely_verbose (
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (7x)
         14 ( 0.00%)        solver, "factorization limit of %" PRIu64 " ticks", limit - *ticks);
    936,592 ( 0.00%)    while (!done && !kissat_empty_heap (&factoring.schedule)) {
    936,584 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_empty_heap (85,144x)
          .               const unsigned first =
    596,001 ( 0.00%)          kissat_pop_max_heap (solver, &factoring.schedule);
 79,676,225 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_pop_max_heap (85,143x)
    681,144 ( 0.00%)      const unsigned first_idx = IDX (first);
  1,192,002 ( 0.00%)      if (!ACTIVE (first_idx))
         89 ( 0.00%)        continue;
    340,216 ( 0.00%)      if (*ticks > limit) {
         36 ( 0.00%)        kissat_very_verbose (solver, "factorization ticks limit hit");
        258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (6x)
          6 ( 0.00%)        break;
          .               }
    935,528 ( 0.00%)      if (TERMINATED (factor_terminated_1))
  1,871,056 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (85,048x)
          .                 break;
    510,288 ( 0.00%)      struct flags *f = solver->flags + first_idx;
  1,020,576 ( 0.00%)      const unsigned bit = 1u << NEGATED (first);
    680,384 ( 0.00%)      if (!(f->factor & bit))
      1,995 ( 0.00%)        continue;
  1,494,954 ( 0.00%)      f->factor &= ~bit;
    498,318 ( 0.00%)      const size_t first_count = first_factor (&factoring, first);
296,053,815 ( 0.13%)  => build/../src/factor.c:first_factor (83,053x)
    166,106 ( 0.00%)      if (first_count > 1) {
     16,128 ( 0.00%)        for (;;) {
          .                   unsigned next_count;
    595,086 ( 0.00%)          const unsigned next = next_factor (&factoring, &next_count);
1,548,073,177 ( 0.65%)  => build/../src/factor.c:next_factor (99,181x)
    198,362 ( 0.00%)          if (next == INVALID_LIT)
    166,106 ( 0.00%)            break;
     48,384 ( 0.00%)          assert (next_count > 1);
     48,384 ( 0.00%)          if (next_count < 2)
          .                     break;
     96,768 ( 0.00%)          factorize_next (&factoring, next, next_count);
545,903,995 ( 0.23%)  => build/../src/factor.c:factorize_next (16,128x)
          .                 }
          .                 size_t reduction;
    498,318 ( 0.00%)        quotient *q = best_quotient (&factoring, &reduction);
  5,818,123 ( 0.00%)  => build/../src/factor.c:best_quotient (83,053x)
    179,426 ( 0.00%)        if (q && reduction > factoring.bound) {
     18,599 ( 0.00%)          if (apply_factoring (&factoring, q)) {
4,468,730,586 ( 1.89%)  => build/../src/factor.c:apply_factoring (2,657x)
          .           #ifndef QUIET
      5,314 ( 0.00%)            factored++;
          .           #endif
          .                   } else
          .                     done = true;
          .                 }
          .               }
    249,159 ( 0.00%)      release_quotients (&factoring);
 49,593,699 ( 0.02%)  => build/../src/factor.c:release_quotients (83,053x)
          .             }
         35 ( 0.00%)    bool completed = kissat_empty_heap (&factoring.schedule);
         77 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_empty_heap (7x)
         21 ( 0.00%)    adjust_scores_and_phases_of_fresh_varaibles (&factoring);
  5,048,184 ( 0.00%)  => build/../src/factor.c:adjust_scores_and_phases_of_fresh_varaibles (7x)
         21 ( 0.00%)    release_factoring (&factoring);
  4,068,654 ( 0.00%)  => build/../src/factor.c:release_factoring (7x)
         56 ( 0.00%)    REPORT (!factored, 'f');
    206,218 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (7x)
          7 ( 0.00%)    return completed;
         35 ( 0.00%)  }
          .           
         35 ( 0.00%)  static void connect_clauses_to_factor (kissat *solver) {
         21 ( 0.00%)    const unsigned size_limit = GET_OPTION (factorsize);
         14 ( 0.00%)    if (size_limit < 3) {
          .               kissat_extremely_verbose (solver, "only factorizing binary clauses");
          .               return;
          .             }
         49 ( 0.00%)    kissat_very_verbose (solver, "factorizing clauses of maximum size %u",
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
          .                                  size_limit);
         28 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
      1,078 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (7x)
         21 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
         21 ( 0.00%)    watches *all_watches = solver->watches;
          .             unsigned *bincount, *largecount;
         70 ( 0.00%)    CALLOC (bincount, LITS);
  1,475,988 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (7x)
  1,450,415 ( 0.00%)    for (all_literals (lit)) {
 10,515,052 ( 0.00%)      if (!ACTIVE (IDX (lit)))
     17,454 ( 0.00%)        continue;
 15,552,582 ( 0.01%)      for (all_binary_large_watches (watch, WATCHES (lit))) {
  2,761,072 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (345,134x)
  2,761,072 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (345,134x)
  1,195,632 ( 0.00%)        assert (watch.type.binary);
    896,724 ( 0.00%)        const unsigned other = watch.type.lit;
    896,724 ( 0.00%)        if (lit > other)
    150,232 ( 0.00%)          continue;
  1,040,732 ( 0.00%)        bincount[lit]++;
  1,189,408 ( 0.00%)        bincount[other]++;
          .               }
          .             }
         70 ( 0.00%)    CALLOC (largecount, LITS);
  1,453,834 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (7x)
          7 ( 0.00%)    size_t initial_candidates = 0;
  7,537,807 ( 0.00%)    for (all_clauses (c)) {
 51,146,337 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (837,528x)
  4,187,640 ( 0.00%)      if (c->garbage)
     52,125 ( 0.00%)        continue;
  3,927,015 ( 0.00%)      if (last_irredundant && last_irredundant < c)
          3 ( 0.00%)        break;
  3,927,000 ( 0.00%)      if (c->redundant)
     21,340 ( 0.00%)        continue;
  3,098,920 ( 0.00%)      if (c->size > size_limit)
     29,945 ( 0.00%)        continue;
 30,513,663 ( 0.01%)      for (all_literals_in_clause (lit, c))
 16,924,152 ( 0.01%)        largecount[lit]++;
  1,489,570 ( 0.00%)      initial_candidates++;
          .             }
         49 ( 0.00%)    kissat_very_verbose (solver,
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
          .                                  "initially found %zu large clause candidates",
          .                                  initial_candidates);
         14 ( 0.00%)    size_t candidates = initial_candidates;
         21 ( 0.00%)    const unsigned rounds = GET_OPTION (factorcandrounds);
         91 ( 0.00%)    for (unsigned round = 1; round <= rounds; round++) {
         14 ( 0.00%)      size_t new_candidates = 0;
          .               unsigned *newlargecount;
        140 ( 0.00%)      CALLOC (newlargecount, LITS);
  2,908,349 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (14x)
 15,075,614 ( 0.01%)      for (all_clauses (c)) {
102,292,674 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (1,675,056x)
  8,375,280 ( 0.00%)        if (c->garbage)
    104,250 ( 0.00%)          continue;
  7,854,030 ( 0.00%)        if (last_irredundant && last_irredundant < c)
          6 ( 0.00%)          break;
  7,854,000 ( 0.00%)        if (c->redundant)
     42,680 ( 0.00%)          continue;
  6,197,840 ( 0.00%)        if (c->size > size_limit)
     59,890 ( 0.00%)          continue;
 56,148,082 ( 0.02%)        for (all_literals_in_clause (lit, c))
 62,811,996 ( 0.03%)          if (bincount[lit] + largecount[lit] < 2)
      4,328 ( 0.00%)            goto CONTINUE_WITH_NEXT_CLAUSE1;
 60,849,270 ( 0.03%)        for (all_literals_in_clause (lit, c))
 33,749,310 ( 0.01%)          newlargecount[lit]++;
  2,970,484 ( 0.00%)        new_candidates++;
          .               CONTINUE_WITH_NEXT_CLAUSE1:;
          .               }
        126 ( 0.00%)      DEALLOC (largecount, LITS);
      3,810 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (14x)
         28 ( 0.00%)      largecount = newlargecount;
         42 ( 0.00%)      if (candidates == new_candidates) {
          .                 kissat_very_verbose (solver,
          .                                      "no large factorization candidate clauses "
          .                                      "reduction in round %u",
          .                                      round);
          .                 break;
          .               }
         28 ( 0.00%)      candidates = new_candidates;
        350 ( 0.00%)      kissat_very_verbose (
        714 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (14x)
        476 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (14x)
          .                   solver,
          .                   "reduced to %zu large factorization candidate clauses %.0f%% in "
          .                   "round %u",
          .                   candidates, kissat_percent (candidates, initial_candidates), round);
          .             }
          .           #ifndef QUIET
          7 ( 0.00%)    size_t connected = 0;
          .           #endif
  7,537,807 ( 0.00%)    for (all_clauses (c)) {
 51,146,337 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (837,528x)
  4,187,640 ( 0.00%)      if (c->garbage)
     52,125 ( 0.00%)        continue;
  3,927,015 ( 0.00%)      if (last_irredundant && last_irredundant < c)
          3 ( 0.00%)        break;
  3,927,000 ( 0.00%)      if (c->redundant)
     21,340 ( 0.00%)        continue;
  3,098,920 ( 0.00%)      if (c->size > size_limit)
     29,945 ( 0.00%)        continue;
 28,070,790 ( 0.01%)      for (all_literals_in_clause (lit, c))
 31,401,409 ( 0.01%)        if (bincount[lit] + largecount[lit] < 2)
      2,359 ( 0.00%)          goto CONTINUE_WITH_NEXT_CLAUSE2;
  2,969,704 ( 0.00%)      const reference ref = (ward *) c - arena;
  4,454,556 ( 0.00%)      kissat_inlined_connect_clause (solver, all_watches, c, ref);
574,509,428 ( 0.24%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_inlined_connect_clause (742,426x)
          .           #ifndef QUIET
  1,484,852 ( 0.00%)      connected++;
          .           #endif
          .             CONTINUE_WITH_NEXT_CLAUSE2:;
          .             }
         63 ( 0.00%)    DEALLOC (largecount, LITS);
      1,855 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
         63 ( 0.00%)    DEALLOC (bincount, LITS);
      1,892 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (7x)
        175 ( 0.00%)    kissat_very_verbose (
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
          .                 solver, "connected %zu large factorization candidate clauses %.0f%%",
          .                 connected, kissat_percent (candidates, initial_candidates));
         14 ( 0.00%)  }
          .           
         49 ( 0.00%)  void kissat_factor (kissat *solver) {
         28 ( 0.00%)    assert (!solver->level);
         28 ( 0.00%)    if (solver->inconsistent)
          .               return;
         28 ( 0.00%)    if (!GET_OPTION (factor))
          .               return;
         21 ( 0.00%)    statistics *s = &solver->statistics;
         42 ( 0.00%)    if (solver->limits.factor.marked >= s->literals_factor) {
          .               kissat_extremely_verbose (
          .                   solver,
          .                   "factorization skipped as no literals have been marked to be added "
          .                   "(%" PRIu64 " < %" PRIu64,
          .                   solver->limits.factor.marked, s->literals_factor);
          .               return;
          .             }
         98 ( 0.00%)    START (factor);
        672 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (7x)
         28 ( 0.00%)    INC (factorizations);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_factorizations (7x)
         91 ( 0.00%)    kissat_phase (solver, "factorization", GET (factorizations),
        301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_factorizations (7x)
          .                           "binary clause bounded variable addition");
         28 ( 0.00%)    uint64_t limit = GET_OPTION (factoriniticks);
         28 ( 0.00%)    if (s->factorizations > 1) {
        834 ( 0.00%)      SET_EFFORT_LIMIT (tmp, factor, factor_ticks);
     41,168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (48x)
        258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (6x)
        564 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (12x)
         18 ( 0.00%)      limit = tmp;
          .             } else {
          7 ( 0.00%)      kissat_very_verbose (solver,
         43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (1x)
          .                                    "initially limiting to %" PRIu64
          .                                    " million factorization ticks",
          .                                    limit);
         15 ( 0.00%)      limit *= 1e6;
          3 ( 0.00%)      limit += s->factor_ticks;
          .             }
          .           #ifndef QUIET
          .             struct {
          .               int64_t variables, binary, clauses, ticks;
          .             } before, after, delta;
         42 ( 0.00%)    before.variables = s->variables_extension + s->variables_original;
         21 ( 0.00%)    before.binary = BINARY_CLAUSES;
         21 ( 0.00%)    before.clauses = IRREDUNDANT_CLAUSES;
         21 ( 0.00%)    before.ticks = s->factor_ticks;
          .           #endif
         28 ( 0.00%)    kissat_enter_dense_mode (solver, 0);
111,303,493 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_enter_dense_mode (7x)
         21 ( 0.00%)    connect_clauses_to_factor (solver);
1,248,344,334 ( 0.53%)  => build/../src/factor.c:connect_clauses_to_factor (7x)
         42 ( 0.00%)    bool completed = run_factorization (solver, limit);
7,187,239,188 ( 3.04%)  => build/../src/factor.c:run_factorization (7x)
         35 ( 0.00%)    kissat_resume_sparse_mode (solver, false, 0);
639,936,562 ( 0.27%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/dense.c:kissat_resume_sparse_mode (7x)
          .           #ifndef QUIET
         42 ( 0.00%)    after.variables = s->variables_extension + s->variables_original;
         21 ( 0.00%)    after.binary = BINARY_CLAUSES;
         21 ( 0.00%)    after.clauses = IRREDUNDANT_CLAUSES;
         21 ( 0.00%)    after.ticks = s->factor_ticks;
         28 ( 0.00%)    delta.variables = after.variables - before.variables;
         28 ( 0.00%)    delta.binary = before.binary - after.binary;
         28 ( 0.00%)    delta.clauses = before.clauses - after.clauses;
         28 ( 0.00%)    delta.ticks = after.ticks - before.ticks;
         84 ( 0.00%)    kissat_very_verbose (solver, "used %f million factorization ticks",
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (7x)
          7 ( 0.00%)                         delta.ticks * 1e-6);
        175 ( 0.00%)    kissat_phase (solver, "factorization", GET (factorizations),
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_factorizations (7x)
          .                           "introduced %" PRId64 " extension variables %.0f%%",
          .                           delta.variables,
         14 ( 0.00%)                  kissat_percent (delta.variables, before.variables));
        175 ( 0.00%)    kissat_phase (solver, "factorization", GET (factorizations),
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_factorizations (7x)
          .                           "removed %" PRId64 " binary clauses %.0f%%", delta.binary,
         14 ( 0.00%)                  kissat_percent (delta.binary, before.binary));
        175 ( 0.00%)    kissat_phase (solver, "factorization", GET (factorizations),
        357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (7x)
        238 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (7x)
         49 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_factorizations (7x)
          .                           "removed %" PRId64 " large clauses %.0f%%", delta.clauses,
         14 ( 0.00%)                  kissat_percent (delta.clauses, before.clauses));
          .           #endif
         14 ( 0.00%)    if (completed)
          4 ( 0.00%)      solver->limits.factor.marked = s->literals_factor;
        105 ( 0.00%)    STOP (factor);
        798 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (7x)
         35 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/watch.c
--------------------------------------------------------------------------------
Ir                   

-- line 37 ----------------------------------------
          .             const watch empty = {.raw = INVALID_VECTOR_ELEMENT};
          .             end[-1] = empty;
          .             assert (solver->vectors.usable < MAX_SECTOR - 1);
          .             solver->vectors.usable += 1;
          .             kissat_check_vectors (solver);
          .           }
          .           
          .           void kissat_remove_blocking_watch (kissat *solver, watches *watches,
     49,224 ( 0.00%)                                     reference ref) {
     28,128 ( 0.00%)    assert (solver->watching);
     42,192 ( 0.00%)    watch *const begin = BEGIN_WATCHES (*watches);
     56,256 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (7,032x)
     42,192 ( 0.00%)    watch *const end = END_WATCHES (*watches);
     56,256 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (7,032x)
     14,064 ( 0.00%)    watch *q = begin;
     14,064 ( 0.00%)    watch const *p = q;
          .           #ifndef NDEBUG
      7,032 ( 0.00%)    bool found = false;
          .           #endif
    186,822 ( 0.00%)    while (p != end) {
    528,980 ( 0.00%)      const watch head = *q++ = *p++;
    211,592 ( 0.00%)      if (head.type.binary)
     16,092 ( 0.00%)        continue;
    448,520 ( 0.00%)      const watch tail = *q++ = *p++;
    134,556 ( 0.00%)      if (tail.raw != ref)
     37,820 ( 0.00%)        continue;
          .           #ifndef NDEBUG
     28,128 ( 0.00%)      assert (!found);
      7,032 ( 0.00%)      found = true;
          .           #endif
     14,064 ( 0.00%)      q -= 2;
          .             }
     14,064 ( 0.00%)    assert (found);
          .           #ifdef COMPACT
          .             watches->size -= 2;
          .           #else
     28,128 ( 0.00%)    assert (begin + 2 <= end);
     35,160 ( 0.00%)    watches->end -= 2;
          .           #endif
      7,032 ( 0.00%)    const watch empty = {.raw = INVALID_VECTOR_ELEMENT};
     56,256 ( 0.00%)    end[-2] = end[-1] = empty;
     28,128 ( 0.00%)    assert (solver->vectors.usable < MAX_SECTOR - 2);
     35,160 ( 0.00%)    solver->vectors.usable += 2;
          .             kissat_check_vectors (solver);
     21,096 ( 0.00%)  }
          .           
          .           void kissat_substitute_large_watch (kissat *solver, watches *watches,
     53,096 ( 0.00%)                                      watch src, watch dst) {
     33,185 ( 0.00%)    assert (!solver->watching);
     39,822 ( 0.00%)    watch *const begin = BEGIN_WATCHES (*watches);
     53,096 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (6,637x)
     39,822 ( 0.00%)    const watch *const end = END_WATCHES (*watches);
     53,096 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (6,637x)
          .           #ifndef NDEBUG
      6,637 ( 0.00%)    bool found = false;
          .           #endif
    205,247 ( 0.00%)    for (watch *p = begin; p != end; p++) {
    119,166 ( 0.00%)      const watch head = *p;
    158,888 ( 0.00%)      if (head.raw != src.raw)
          .                 continue;
          .           #ifndef NDEBUG
      6,637 ( 0.00%)      found = true;
          .           #endif
     26,548 ( 0.00%)      *p = dst;
          .               break;
          .             }
     13,274 ( 0.00%)    assert (found);
     19,911 ( 0.00%)  }
          .           
         60 ( 0.00%)  void kissat_flush_all_connected (kissat *solver) {
         60 ( 0.00%)    assert (!solver->watching);
         72 ( 0.00%)    LOG ("flush all connected binaries and clauses");
         36 ( 0.00%)    watches *all_watches = solver->watches;
  2,885,172 ( 0.00%)    for (all_literals (lit))
  6,491,394 ( 0.00%)      RELEASE_WATCHES (all_watches[lit]);
 72,432,672 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_release_vector (721,266x)
         48 ( 0.00%)  }
          .           
        200 ( 0.00%)  void kissat_flush_large_watches (kissat *solver) {
        160 ( 0.00%)    assert (solver->watching);
        240 ( 0.00%)    LOG ("flush large clause watches");
        120 ( 0.00%)    watches *all_watches = solver->watches;
        120 ( 0.00%)    signed char *marks = solver->marks;
  7,905,480 ( 0.00%)    for (all_literals (lit)) {
 11,857,680 ( 0.01%)      watches *lit_watches = all_watches + lit;
 15,810,240 ( 0.01%)      watch *begin = BEGIN_WATCHES (*lit_watches), *q = begin;
 15,810,240 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,976,280x)
 15,810,240 ( 0.01%)      const watch *const end = END_WATCHES (*lit_watches), *p = q;
 15,810,240 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,976,280x)
 39,997,086 ( 0.02%)      while (p != end) {
106,973,220 ( 0.05%)        const watch watch = *q++ = *p++;
 53,486,610 ( 0.02%)        if (!watch.type.binary)
 27,913,614 ( 0.01%)          p++, q--;
          .                 else {
  4,178,352 ( 0.00%)          const unsigned other = watch.binary.lit;
  8,356,704 ( 0.00%)          if (marks[other]) {
      3,882 ( 0.00%)            if (lit < other) {
      3,882 ( 0.00%)              LOGBINARY (lit, other, "flushing duplicated");
      3,882 ( 0.00%)              kissat_delete_binary (solver, lit, other);
  1,125,736 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (647x)
          .                     }
      2,588 ( 0.00%)            q--;
          .                   } else
  5,565,960 ( 0.00%)            marks[other] = 1;
          .                 }
          .               }
 31,620,480 ( 0.01%)      SET_END_OF_WATCHES (*lit_watches, q);
200,392,241 ( 0.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (1,976,280x)
 15,810,240 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,976,280x)
 17,423,640 ( 0.01%)      for (p = begin; p != q; p++) {
  6,957,450 ( 0.00%)        assert (p->type.binary);
  9,740,430 ( 0.00%)        marks[p->binary.lit] = 0;
          .               }
          .             }
        160 ( 0.00%)  }
          .           
        310 ( 0.00%)  void kissat_watch_large_clauses (kissat *solver) {
        372 ( 0.00%)    LOG ("watching all large clauses");
        248 ( 0.00%)    assert (solver->watching);
          .           
        186 ( 0.00%)    const value *const values = solver->values;
        186 ( 0.00%)    const assigned *const assigned = solver->assigned;
        186 ( 0.00%)    watches *watches = solver->watches;
        186 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
          .           
 68,330,042 ( 0.03%)    for (all_clauses (c)) {
463,268,806 ( 0.20%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (7,592,158x)
 37,960,790 ( 0.02%)      if (c->garbage)
    398,145 ( 0.00%)        continue;
          .           
 21,582,039 ( 0.01%)      unsigned *lits = c->lits;
 64,746,117 ( 0.03%)      kissat_sort_literals (solver, values, assigned, c->size, lits);
784,529,262 ( 0.33%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/sort.c:kissat_sort_literals (7,194,013x)
 14,388,026 ( 0.01%)      c->searched = 2;
          .           
 28,776,052 ( 0.01%)      const reference ref = (ward *) c - arena;
 21,582,039 ( 0.01%)      const unsigned l0 = lits[0];
 21,582,039 ( 0.01%)      const unsigned l1 = lits[1];
          .           
 71,940,130 ( 0.03%)      kissat_push_blocking_watch (solver, watches + l0, l1, ref);
1,669,030,616 ( 0.71%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (7,194,013x)
 71,940,130 ( 0.03%)      kissat_push_blocking_watch (solver, watches + l1, l0, ref);
1,667,819,639 ( 0.71%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (7,194,013x)
          .             }
        186 ( 0.00%)  }
          .           
         50 ( 0.00%)  void kissat_connect_irredundant_large_clauses (kissat *solver) {
         50 ( 0.00%)    assert (!solver->watching);
         60 ( 0.00%)    LOG ("connecting all large irredundant clauses");
          .           
         40 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
      1,540 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (10x)
          .           
         30 ( 0.00%)    const value *const values = solver->values;
         30 ( 0.00%)    watches *all_watches = solver->watches;
         30 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
          .           
 10,623,167 ( 0.00%)    for (all_clauses (c)) {
 72,014,514 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (1,180,343x)
  7,082,058 ( 0.00%)      if (last_irredundant && c > last_irredundant)
          4 ( 0.00%)        break;
  5,901,695 ( 0.00%)      if (c->redundant)
     43,832 ( 0.00%)        continue;
  5,792,115 ( 0.00%)      if (c->garbage)
     60,462 ( 0.00%)        continue;
  1,097,961 ( 0.00%)      bool satisfied = false;
  4,391,844 ( 0.00%)      assert (!solver->level);
 43,823,507 ( 0.02%)      for (all_literals_in_clause (lit, c)) {
 19,541,660 ( 0.01%)        const value value = values[lit];
  7,816,664 ( 0.00%)        if (value <= 0)
  3,907,274 ( 0.00%)          continue;
      1,058 ( 0.00%)        satisfied = true;
      1,058 ( 0.00%)        break;
          .               }
  2,195,922 ( 0.00%)      if (satisfied) {
      5,290 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
  1,393,703 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (1,058x)
      1,058 ( 0.00%)        continue;
          .               }
  4,387,612 ( 0.00%)      const reference ref = (ward *) c - arena;
  7,678,321 ( 0.00%)      kissat_inlined_connect_clause (solver, all_watches, c, ref);
906,965,868 ( 0.38%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_inlined_connect_clause (1,096,903x)
          .             }
         30 ( 0.00%)  }
          .           
        150 ( 0.00%)  void kissat_flush_large_connected (kissat *solver) {
        150 ( 0.00%)    assert (!solver->watching);
        180 ( 0.00%)    LOG ("flushing large connected clause references");
         30 ( 0.00%)    size_t flushed = 0;
  6,591,486 ( 0.00%)    for (all_literals (lit)) {
 18,125,844 ( 0.01%)      watches *watches = &WATCHES (lit);
 13,182,432 ( 0.01%)      watch *begin = BEGIN_WATCHES (*watches), *q = begin;
 13,182,432 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,647,804x)
 13,182,432 ( 0.01%)      const watch *const end_watches = END_WATCHES (*watches), *p = q;
 13,182,432 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,647,804x)
 31,082,928 ( 0.01%)      while (p != end_watches) {
 40,819,520 ( 0.02%)        const watch head = *p++;
 32,655,616 ( 0.01%)        if (head.type.binary)
  4,353,636 ( 0.00%)          *q++ = head;
          .                 else
  7,438,298 ( 0.00%)          flushed++;
          .               }
 26,364,864 ( 0.01%)      SET_END_OF_WATCHES (*watches, q);
127,703,826 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (1,647,804x)
 13,182,432 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,647,804x)
          .             }
        180 ( 0.00%)    LOG ("flushed %zu large clause references", flushed);
          .             (void) flushed;
         90 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/internal.c
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           #include "search.h"
         .           
         .           #include <assert.h>
         .           #include <inttypes.h>
         .           #include <limits.h>
         .           #include <stdio.h>
         .           #include <stdlib.h>
         .           
        72 ( 0.00%)  void kissat_reset_last_learned (kissat *solver) {
       486 ( 0.00%)    for (really_all_last_learned (p))
       144 ( 0.00%)      *p = INVALID_REF;
        72 ( 0.00%)  }
         .           
         4 ( 0.00%)  kissat *kissat_init (void) {
         5 ( 0.00%)    kissat *solver = kissat_calloc (0, 1, sizeof *solver);
    11,433 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (1x)
         .           #ifndef NOPTIONS
         4 ( 0.00%)    kissat_init_options (&solver->options);
     7,191 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/options.c:kissat_init_options (1x)
         .           #else
         .             kissat_init_options ();
         .           #endif
         .           #ifndef QUIET
         4 ( 0.00%)    kissat_init_profiles (&solver->profiles);
       601 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_init_profiles (1x)
         .           #endif
        14 ( 0.00%)    START (total);
       524 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (1x)
         3 ( 0.00%)    kissat_init_queue (solver);
        27 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/queue.c:kissat_init_queue (1x)
         .             assert (INTERNAL_MAX_LIT < UINT_MAX);
         4 ( 0.00%)    kissat_push_frame (solver, UINT_MAX);
       495 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineframes.h:kissat_push_frame (1x)
         2 ( 0.00%)    solver->watching = true;
         2 ( 0.00%)    solver->conflict.size = 2;
         3 ( 0.00%)    solver->scinc = 1.0;
         2 ( 0.00%)    solver->first_reducible = INVALID_REF;
         2 ( 0.00%)    solver->last_irredundant = INVALID_REF;
         3 ( 0.00%)    kissat_reset_last_learned (solver);
        43 ( 0.00%)  => build/../src/internal.c:kissat_reset_last_learned (1x)
         .           #ifndef NDEBUG
         3 ( 0.00%)    kissat_init_checker (solver);
     1,716 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_init_checker (1x)
         .           #endif
         .           #if MLR
         .             kissat_init_mlr (solver);
         .           #endif
         .           
         .           #if MAB
         2 ( 0.00%)    solver->mab_heuristics = 2;
         3 ( 0.00%)    solver-> mab_decisions = 0;
         2 ( 0.00%)    solver-> mab_chosen_tot = 0;
         2 ( 0.00%)    solver-> reset_conflicts = 0;
         2 ( 0.00%)    solver-> reset_conflicts = 0;
         2 ( 0.00%)    solver-> reset_decisions = 0;
         3 ( 0.00%)    solver-> resetPrevLever = 0;
         3 ( 0.00%)    solver-> learningRateEMA = 0;
         3 ( 0.00%)    solver-> resetDecay = 0.8;
         3 ( 0.00%)    solver-> reset_wins = 1;
         3 ( 0.00%)    solver-> reset_loses = 1;
         3 ( 0.00%)    solver-> restart_wins = 1;
         2 ( 0.00%)    solver-> restart_loses = 1;
         2 ( 0.00%)    solver-> resetTotalTimes = 0;
         2 ( 0.00%)    solver-> nof_restarts = 0;
         .             solver-> nof_resets   = 0;
         .           #endif
         1 ( 0.00%)  
         2 ( 0.00%)    return solver;
         .           }
         .           
         .           #define DEALLOC_GENERIC(NAME, ELEMENTS_PER_BLOCK) \
         .             do { \
         .               const size_t block_size = ELEMENTS_PER_BLOCK * sizeof *solver->NAME; \
         .               kissat_dealloc (solver, solver->NAME, solver->size, block_size); \
         .               solver->NAME = 0; \
         .             } while (0)
-- line 79 ----------------------------------------
-- line 87 ----------------------------------------
         .               for (all_stack (unsigned, IDX_RILIS, solver->active)) { \
         .                 const unsigned LIT_RILIS = LIT (IDX_RILIS); \
         .                 const unsigned NOT_LIT_RILIS = NOT (LIT_RILIS); \
         .                 RELEASE_STACK (ACCESS (LIT_RILIS)); \
         .                 RELEASE_STACK (ACCESS (NOT_LIT_RILIS)); \
         .               } \
         .               DEALLOC_LITERAL_INDEXED (NAME); \
         .             } while (0)
         5 ( 0.00%)  
         2 ( 0.00%)  void kissat_release (kissat *solver) {
         6 ( 0.00%)    kissat_require_initialized (solver);
     1,041 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_release_heap (1x)
         6 ( 0.00%)    kissat_release_heap (solver, SCORES);
       109 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_release_heap (1x)
         3 ( 0.00%)    kissat_release_heap (solver, &solver->schedule);
       312 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_release_vectors (1x)
         3 ( 0.00%)    kissat_release_vectors (solver);
       689 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/phases.c:kissat_release_phases (1x)
         .             kissat_release_phases (solver);
        24 ( 0.00%)  
       296 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->export);
       237 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->import);
        14 ( 0.00%)  
       278 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        14 ( 0.00%)    DEALLOC_VARIABLE_INDEXED (assigned);
       278 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        14 ( 0.00%)    DEALLOC_VARIABLE_INDEXED (flags);
       158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             DEALLOC_VARIABLE_INDEXED (links);
        14 ( 0.00%)  
       325 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        14 ( 0.00%)    DEALLOC_LITERAL_INDEXED (marks);
       309 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        14 ( 0.00%)    DEALLOC_LITERAL_INDEXED (values);
       325 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             DEALLOC_LITERAL_INDEXED (watches);
        24 ( 0.00%)  
        13 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        23 ( 0.00%)    RELEASE_STACK (solver->import);
       278 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->eliminated);
       237 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->extend);
        13 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->witness);
        13 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->etrail);
        24 ( 0.00%)  
       226 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->delayed);
        24 ( 0.00%)  
       226 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->clause);
       309 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->shadow);
        24 ( 0.00%)  #if defined(LOGGING) || !defined(NDEBUG)
       251 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->resolvent);
         .           #endif
        24 ( 0.00%)  
       165 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->arena);
        24 ( 0.00%)  
       267 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        27 ( 0.00%)    RELEASE_STACK (solver->units);
       288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->frames);
       188 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->sorter);
        11 ( 0.00%)  
       158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_ARRAY (solver->trail, solver->size);
        24 ( 0.00%)  
       265 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->analyzed);
       232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->levels);
       188 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->minimize);
       226 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->poisoned);
       232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->promote);
       271 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->removable);
       284 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->shrinkable);
        13 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->xorted[0]);
        13 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->xorted[1]);
        24 ( 0.00%)  
       271 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->sweep_schedule);
        24 ( 0.00%)  
       265 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->ranks);
        24 ( 0.00%)  
       282 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->antecedents[0]);
       251 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->antecedents[1]);
       232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->gates[0]);
       257 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->gates[1]);
       299 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->resolvents);
         .           
        24 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS)
       226 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
        24 ( 0.00%)    RELEASE_STACK (solver->added);
       226 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->removed);
         .           #endif
         .           
        24 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS) || defined(LOGGING)
       158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->original);
         .           #endif
         .           
        24 ( 0.00%)  #ifndef QUIET
       207 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
         .             RELEASE_STACK (solver->profiles.stack);
         .           #endif
         .           
         3 ( 0.00%)  #ifndef NDEBUG
69,228,760 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_release_checker (1x)
         .             kissat_release_checker (solver);
         .           #endif
         3 ( 0.00%)  #if !defined(NDEBUG) && defined(METRICS)
         2 ( 0.00%)    uint64_t leaked = solver->statistics.allocated_current;
         .             if (leaked)
         .               if (!getenv ("LEAK"))
         .                 kissat_fatal ("internally leaking %" PRIu64 " bytes", leaked);
         .           #endif
         5 ( 0.00%)  
       188 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
         3 ( 0.00%)    kissat_free (0, solver, sizeof *solver);
         .           }
         6 ( 0.00%)  
         2 ( 0.00%)  void kissat_reserve (kissat *solver, int max_var) {
         2 ( 0.00%)    kissat_require_initialized (solver);
         .             kissat_require (0 <= max_var, "negative maximum variable argument '%d'",
         2 ( 0.00%)                    max_var);
         .             kissat_require (max_var <= EXTERNAL_MAX_VAR,
         5 ( 0.00%)                    "invalid maximum variable argument '%d'", max_var);
   262,138 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resize.c:kissat_increase_size (1x)
         4 ( 0.00%)    kissat_increase_size (solver, (unsigned) max_var);
         .             if (!GET_OPTION (tumble)) {
         .               for (int idx = 1; idx <= max_var; idx++)
         .                 (void) kissat_import_literal (solver, idx);
         .               for (unsigned idx = 0; idx != (unsigned) max_var; idx++)
         .                 kissat_activate_literal (solver, LIT (idx));
         3 ( 0.00%)    }
         .           }
         6 ( 0.00%)  
         2 ( 0.00%)  int kissat_get_option (kissat *solver, const char *name) {
         2 ( 0.00%)    kissat_require_initialized (solver);
         .             kissat_require (name, "name zero pointer");
         6 ( 0.00%)  #ifndef NOPTIONS
       429 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/options.c:kissat_options_get (1x)
         .             return kissat_options_get (&solver->options, name);
         .           #else
         .             (void) solver;
         .             return kissat_options_get (name);
         2 ( 0.00%)  #endif
         .           }
         .           
         .           int kissat_set_option (kissat *solver, const char *name, int new_value) {
         .           #ifndef NOPTIONS
         .             kissat_require_initialized (solver);
         .             kissat_require (name, "name zero pointer");
         .           #ifndef NOPTIONS
         .             return kissat_options_set (&solver->options, name, new_value);
-- line 213 ----------------------------------------
-- line 238 ----------------------------------------
         .             limited *limited = &solver->limited;
         .             statistics *statistics = &solver->statistics;
         .             limited->conflicts = true;
         .             assert (UINT64_MAX - limit >= statistics->conflicts);
         .             limits->conflicts = statistics->conflicts + limit;
         .             LOG ("set conflict limit to %" PRIu64 " after %u conflicts",
         .                  limits->conflicts, limit);
         .           }
         5 ( 0.00%)  
         .           void kissat_print_statistics (kissat *solver) {
         2 ( 0.00%)  #ifndef QUIET
         4 ( 0.00%)    kissat_require_initialized (solver);
        27 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_verbosity (1x)
         2 ( 0.00%)    const int verbosity = kissat_verbosity (solver);
         .             if (verbosity < 0)
         4 ( 0.00%)      return;
         5 ( 0.00%)    if (GET_OPTION (profile)) {
     6,854 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_section (1x)
         3 ( 0.00%)      kissat_section (solver, "profiling");
   112,241 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_profiles_print (1x)
         .               kissat_profiles_print (solver);
         5 ( 0.00%)    }
         5 ( 0.00%)    const bool complete = GET_OPTION (statistics);
     6,778 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_section (1x)
         7 ( 0.00%)    kissat_section (solver, "statistics");
         5 ( 0.00%)    const bool verbose = (complete || verbosity > 0);
   793,604 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_statistics_print (1x)
         .             kissat_statistics_print (solver, verbose);
         4 ( 0.00%)  #ifndef NPROOFS
         .             if (solver->proof) {
         .               kissat_section (solver, "proof");
         .               kissat_print_proof_statistics (solver, verbose);
         .             }
         .           #endif
         4 ( 0.00%)  #ifndef NDEBUG
         5 ( 0.00%)    if (GET_OPTION (check) > 1) {
     7,008 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_section (1x)
         5 ( 0.00%)      kissat_section (solver, "checker");
    14,326 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_print_checker_statistics (1x)
         .               kissat_print_checker_statistics (solver, verbose);
         .             }
         5 ( 0.00%)  #endif
     6,778 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_section (1x)
         3 ( 0.00%)    kissat_section (solver, "glue usage");
    67,383 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_print_glue_usage (1x)
         5 ( 0.00%)    kissat_print_glue_usage (solver);
     6,854 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_section (1x)
         4 ( 0.00%)    kissat_section (solver, "resources");
    16,635 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/resources.c:kissat_print_resources (1x)
         .             kissat_print_resources (solver);
         .           #endif
         2 ( 0.00%)    (void) solver;
         .           }
 4,126,026 ( 0.00%)  
 1,375,342 ( 0.00%)  void kissat_add (kissat *solver, int elit) {
 4,126,026 ( 0.00%)    kissat_require_initialized (solver);
 4,813,697 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_searches (687,671x)
         .             kissat_require (!GET (searches), "incremental solving not supported");
 2,750,684 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS) || defined(LOGGING)
 4,813,697 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_checking (687,671x)
 2,750,684 ( 0.00%)    const int checking = kissat_checking (solver);
 6,189,039 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_logging (687,671x)
 2,750,684 ( 0.00%)    const bool logging = kissat_logging (solver);
 6,189,039 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_proving (687,671x)
         .             const bool proving = kissat_proving (solver);
 1,375,342 ( 0.00%)  #endif
13,104,780 ( 0.01%)    if (elit) {
         .               kissat_require_valid_external_internal (elit);
 1,008,060 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS) || defined(LOGGING)
 6,552,624 ( 0.00%)      if (checking || logging || proving)
   266,267 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (18x)
         .                 PUSH_STACK (solver->original, elit);
 3,024,180 ( 0.00%)  #endif
69,295,297 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/import.c:kissat_import_literal (504,030x)
         .               unsigned ilit = kissat_import_literal (solver, elit);
 5,544,330 ( 0.00%)  
 1,008,060 ( 0.00%)      const mark mark = MARK (ilit);
 3,024,180 ( 0.00%)      if (!mark) {
11,088,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_fixed (504,030x)
 1,008,060 ( 0.00%)        const value value = kissat_fixed (solver, ilit);
         .                 if (value > 0) {
         .                   if (!solver->clause_satisfied) {
         .                     LOG ("adding root level satisfied literal %u(%d)@0=1", ilit,
         .                          elit);
         .                     solver->clause_satisfied = true;
 1,008,060 ( 0.00%)          }
         .                 } else if (value < 0) {
         .                   LOG ("adding root level falsified literal %u(%d)@0=-1", ilit, elit);
         .                   if (!solver->clause_shrink) {
         .                     solver->clause_shrink = true;
         .                     LOG ("thus original clause needs shrinking");
         .                   }
 5,040,300 ( 0.00%)        } else {
12,600,750 ( 0.01%)          MARK (ilit) = 1;
 5,040,300 ( 0.00%)          MARK (NOT (ilit)) = -1;
 6,552,468 ( 0.00%)          assert (SIZE_STACK (solver->clause) < UINT_MAX);
     2,938 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (6x)
         .                   PUSH_STACK (solver->clause, ilit);
         .                 }
         .               } else if (mark < 0) {
         .                 assert (mark < 0);
         .                 if (!solver->clause_trivial) {
         .                   LOG ("adding dual literal %u(%d) and %u(%d)", NOT (ilit), -elit,
         .                        ilit, elit);
         .                   solver->clause_trivial = true;
-- line 323 ----------------------------------------
-- line 326 ----------------------------------------
         .                 assert (mark > 0);
         .                 LOG ("adding duplicated literal %u(%d)", ilit, elit);
         .                 if (!solver->clause_shrink) {
         .                   solver->clause_shrink = true;
         .                   LOG ("thus original clause needs shrinking");
         .                 }
         .               }
         .             } else {
   550,923 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS) || defined(LOGGING)
 1,652,769 ( 0.00%)      const size_t offset = solver->offset_of_last_original_clause;
 1,101,846 ( 0.00%)      size_t esize = SIZE_STACK (solver->original) - offset;
   550,923 ( 0.00%)      int *elits = BEGIN_STACK (solver->original) + offset;
         .               assert (esize <= UINT_MAX);
 1,836,410 ( 0.00%)  #endif
411,611,388 ( 0.17%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_add_unchecked_external (183,641x)
 1,469,128 ( 0.00%)      ADD_UNCHECKED_EXTERNAL (esize, elits);
   550,923 ( 0.00%)      const size_t isize = SIZE_STACK (solver->clause);
   367,282 ( 0.00%)      unsigned *ilits = BEGIN_STACK (solver->clause);
         .               assert (isize < (unsigned) INT_MAX);
   734,564 ( 0.00%)  
         .               if (solver->inconsistent)
   734,564 ( 0.00%)        LOG ("inconsistent thus skipping original clause");
         .               else if (solver->clause_satisfied)
   734,564 ( 0.00%)        LOG ("skipping satisfied original clause");
         .               else if (solver->clause_trivial)
         .                 LOG ("skipping trivial original clause");
 1,285,487 ( 0.00%)      else {
56,057,900 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_activate_literals (183,641x)
         .                 kissat_activate_literals (solver, isize, ilits);
   367,282 ( 0.00%)  
         .                 if (!isize) {
         .                   if (solver->clause_shrink)
         .                     LOG ("all original clause literals root level falsified");
         .                   else
         .                     LOG ("found empty original clause");
         .           
         .                   if (!solver->inconsistent) {
         .                     LOG ("thus solver becomes inconsistent");
         .                     solver->inconsistent = true;
         .                     CHECK_AND_ADD_EMPTY ();
         .                     ADD_EMPTY_TO_PROOF ();
   367,282 ( 0.00%)          }
         .                 } else if (isize == 1) {
         .                   unsigned unit = TOP_STACK (solver->clause);
         .           
         .                   if (solver->clause_shrink)
         .                     LOGUNARY (unit, "original clause shrinks to");
         .                   else
         .                     LOGUNARY (unit, "found original");
         .           
         .                   kissat_original_unit (solver, unit);
         .           
         .                   COVER (solver->level);
         .                   if (!solver->level)
         .                     (void) kissat_search_propagate (solver);
   734,564 ( 0.00%)        } else {
240,312,891 ( 0.10%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_original_clause (183,641x)
         .                   reference res = kissat_new_original_clause (solver);
   550,923 ( 0.00%)  
   550,923 ( 0.00%)          const unsigned a = ilits[0];
         .                   const unsigned b = ilits[1];
 2,020,051 ( 0.00%)  
 2,020,051 ( 0.00%)          const value u = VALUE (a);
         .                   const value v = VALUE (b);
   734,564 ( 0.00%)  
   734,564 ( 0.00%)          const unsigned k = u ? LEVEL (a) : UINT_MAX;
         .                   const unsigned l = v ? LEVEL (b) : UINT_MAX;
   183,641 ( 0.00%)  
         .                   bool assign = false;
   734,564 ( 0.00%)  
         .                   if (!u && v < 0) {
         .                     LOG ("original clause immediately forcing");
   367,282 ( 0.00%)            assign = true;
         .                   } else if (u < 0 && k == l) {
         .                     LOG ("both watches falsified at level @%u", k);
         .                     assert (v < 0);
         .                     assert (k > 0);
   367,282 ( 0.00%)            kissat_backtrack_without_updating_phases (solver, k - 1);
         .                   } else if (u < 0) {
         .                     LOG ("watches falsified at levels @%u and @%u", k, l);
         .                     assert (v < 0);
         .                     assert (k > l);
         .                     assert (l > 0);
   367,282 ( 0.00%)            assign = true;
         .                   } else if (u > 0 && v < 0) {
         .                     LOG ("first watch satisfied at level @%u "
         .                          "second falsified at level @%u",
         .                          k, l);
   734,564 ( 0.00%)            assert (k <= l);
         .                   } else if (!u && v > 0) {
         .                     LOG ("first watch unassigned "
         .                          "second falsified at level @%u",
         .                          l);
         .                     assign = true;
   367,282 ( 0.00%)          } else {
   367,282 ( 0.00%)            assert (!u);
         .                     assert (!v);
         .                   }
   367,282 ( 0.00%)  
         .                   if (assign) {
         .                     assert (solver->level > 0);
         .           
         .                     if (isize == 2) {
         .                       assert (res == INVALID_REF);
         .                       kissat_assign_binary (solver, a, b);
         .                     } else {
         .                       assert (res != INVALID_REF);
         .                       clause *c = kissat_dereference_clause (solver, res);
         .                       kissat_assign_reference (solver, a, res, c);
         .                     }
         .                   }
         .                 }
         .               }
         .           
 1,469,128 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS)
         .               if (solver->clause_satisfied || solver->clause_trivial) {
         .           #ifndef NDEBUG
         .                 if (checking > 1)
         .                   kissat_remove_checker_external (solver, esize, elits);
         .           #endif
         .           #ifndef NPROOFS
         .                 if (proving) {
         .                   if (esize == 1)
         .                     LOG ("skipping deleting unit from proof");
         .                   else
         .                     kissat_delete_external_from_proof (solver, esize, elits);
         .                 }
 1,652,769 ( 0.00%)  #endif
         .               } else if (!solver->inconsistent && solver->clause_shrink) {
         .           #ifndef NDEBUG
         .                 if (checking > 1) {
         .                   kissat_check_and_add_internal (solver, isize, ilits);
         .                   kissat_remove_checker_external (solver, esize, elits);
         .                 }
         .           #endif
         .           #ifndef NPROOFS
-- line 458 ----------------------------------------
-- line 459 ----------------------------------------
         .                 if (proving) {
         .                   kissat_add_lits_to_proof (solver, isize, ilits);
         .                   kissat_delete_external_from_proof (solver, esize, elits);
         .                 }
         .           #endif
         .               }
         .           #endif
         .           
   367,282 ( 0.00%)  #if !defined(NDEBUG) || !defined(NPROOFS) || defined(LOGGING)
 1,101,846 ( 0.00%)      if (checking) {
 2,203,718 ( 0.00%)        LOGINTS (esize, elits, "saved original");
     1,221 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (2x)
   550,923 ( 0.00%)        PUSH_STACK (solver->original, 0);
 1,469,128 ( 0.00%)        solver->offset_of_last_original_clause =
         .                     SIZE_STACK (solver->original);
         .               } else if (logging || proving) {
         .                 LOGINTS (esize, elits, "reset original");
         .                 CLEAR_STACK (solver->original);
         .                 solver->offset_of_last_original_clause = 0;
         .               }
 5,364,620 ( 0.00%)  #endif
18,145,080 ( 0.01%)      for (all_stack (unsigned, lit, solver->clause))
         .                 MARK (lit) = MARK (NOT (lit)) = 0;
   734,564 ( 0.00%)  
         .               CLEAR_STACK (solver->clause);
   367,282 ( 0.00%)  
   367,282 ( 0.00%)      solver->clause_satisfied = false;
   367,282 ( 0.00%)      solver->clause_trivial = false;
         .               solver->clause_shrink = false;
 2,567,043 ( 0.00%)    }
         .           }
         5 ( 0.00%)  
         2 ( 0.00%)  int kissat_solve (kissat *solver) {
         6 ( 0.00%)    kissat_require_initialized (solver);
         .             kissat_require (EMPTY_STACK (solver->clause),
         6 ( 0.00%)                    "incomplete clause (terminating zero not added)");
         7 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_searches (1x)
         3 ( 0.00%)    kissat_require (!GET (searches), "incremental solving not supported");
235,151,998,853 (99.47%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/search.c:kissat_search (1x)
         2 ( 0.00%)    return kissat_search (solver);
         .           }
         .           
         .           void kissat_terminate (kissat *solver) {
         .             kissat_require_initialized (solver);
         .             solver->termination.flagged = ~(unsigned) 0;
         .             assert (solver->termination.flagged);
         .           }
         .           
-- line 503 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/gates.c
--------------------------------------------------------------------------------
Ir                  

         .           #include "gates.h"
         .           #include "ands.h"
         .           #include "definition.h"
         .           #include "eliminate.h"
         .           #include "equivalences.h"
         .           #include "ifthenelse.h"
         .           #include "inline.h"
         .           
   836,628 ( 0.00%)  size_t kissat_mark_binaries (kissat *solver, unsigned lit) {
   418,314 ( 0.00%)    value *marks = solver->marks;
   139,438 ( 0.00%)    size_t res = 0;
 1,533,818 ( 0.00%)    watches *watches = &WATCHES (lit);
14,024,920 ( 0.01%)    for (all_binary_large_watches (watch, *watches)) {
 1,115,504 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (139,438x)
 1,115,504 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (139,438x)
 7,926,230 ( 0.00%)      if (!watch.type.binary)
 1,487,893 ( 0.00%)        continue;
   292,059 ( 0.00%)      const unsigned other = watch.binary.lit;
   681,471 ( 0.00%)      assert (!solver->values[other]);
   584,118 ( 0.00%)      if (marks[other])
        97 ( 0.00%)        continue;
   389,024 ( 0.00%)      marks[other] = 1;
   194,512 ( 0.00%)      res++;
         .             }
   139,438 ( 0.00%)    return res;
   278,876 ( 0.00%)  }
         .           
   225,822 ( 0.00%)  void kissat_unmark_binaries (kissat *solver, unsigned lit) {
   112,911 ( 0.00%)    value *marks = solver->marks;
   414,007 ( 0.00%)    watches *watches = &WATCHES (lit);
 5,570,082 ( 0.00%)    for (all_binary_large_watches (watch, *watches))
   301,096 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (37,637x)
   301,096 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (37,637x)
 2,817,359 ( 0.00%)      if (watch.type.binary)
   516,594 ( 0.00%)        marks[watch.binary.lit] = 0;
   112,911 ( 0.00%)  }
         .           
   280,992 ( 0.00%)  bool kissat_find_gates (kissat *solver, unsigned lit) {
    93,664 ( 0.00%)    solver->gate_eliminated = 0;
    93,664 ( 0.00%)    solver->resolve_gate = false;
   187,328 ( 0.00%)    if (!GET_OPTION (extract))
         .               return false;
   187,328 ( 0.00%)    INC (gates_checked);
   702,480 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_gates_checked (46,832x)
   374,656 ( 0.00%)    const unsigned not_lit = NOT (lit);
   655,648 ( 0.00%)    if (EMPTY_WATCHES (WATCHES (not_lit)))
   515,152 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_empty_vector (46,832x)
         .               return false;
    46,832 ( 0.00%)    bool res = false;
   327,824 ( 0.00%)    if (kissat_find_equivalence_gate (solver, lit))
20,683,032 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/equivalences.c:kissat_find_equivalence_gate (46,832x)
       212 ( 0.00%)      res = true;
   373,808 ( 0.00%)    else if (kissat_find_and_gate (solver, lit, 0))
39,198,348 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/ands.c:kissat_find_and_gate (46,726x)
     1,692 ( 0.00%)      res = true;
   367,040 ( 0.00%)    else if (kissat_find_and_gate (solver, not_lit, 1))
26,804,881 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/ands.c:kissat_find_and_gate (45,880x)
     5,026 ( 0.00%)      res = true;
   346,936 ( 0.00%)    else if (kissat_find_if_then_else_gate (solver, lit, 0))
317,373,903 ( 0.13%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/ifthenelse.c:kissat_find_if_then_else_gate (43,367x)
     8,176 ( 0.00%)      res = true;
   314,232 ( 0.00%)    else if (kissat_find_if_then_else_gate (solver, not_lit, 1))
386,236,873 ( 0.16%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/ifthenelse.c:kissat_find_if_then_else_gate (39,279x)
     4,340 ( 0.00%)      res = true;
   259,763 ( 0.00%)    else if (kissat_find_definition (solver, lit))
4,383,828,432 ( 1.85%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/definition.c:kissat_find_definition (37,109x)
    32,211 ( 0.00%)      res = true;
    93,664 ( 0.00%)    if (res)
   167,736 ( 0.00%)      INC (gates_extracted);
   629,010 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_gates_extracted (41,934x)
    46,832 ( 0.00%)    return res;
    93,664 ( 0.00%)  }
         .           
         .           static void get_antecedents (kissat *solver, unsigned lit,
   842,922 ( 0.00%)                               unsigned negative) {
   468,290 ( 0.00%)    assert (!solver->watching);
   280,974 ( 0.00%)    assert (!negative || negative == 1);
         .           
   842,922 ( 0.00%)    statches *gates = solver->gates + negative;
 1,030,238 ( 0.00%)    watches *watches = &WATCHES (lit);
         .           
   842,922 ( 0.00%)    statches *antecedents = solver->antecedents + negative;
   561,948 ( 0.00%)    assert (EMPTY_STACK (*antecedents));
         .           
   280,974 ( 0.00%)    const watch *const begin_gates = BEGIN_STACK (*gates);
   280,974 ( 0.00%)    const watch *const end_gates = END_STACK (*gates);
   187,316 ( 0.00%)    watch const *g = begin_gates;
         .           
   561,948 ( 0.00%)    const watch *const begin_watches = BEGIN_WATCHES (*watches);
   749,264 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (93,658x)
   561,948 ( 0.00%)    const watch *const end_watches = END_WATCHES (*watches);
   749,264 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (93,658x)
   187,316 ( 0.00%)    watch const *w = begin_watches;
         .           
 3,929,692 ( 0.00%)    while (w != end_watches) {
 5,925,100 ( 0.00%)      const watch watch = *w++;
 6,304,460 ( 0.00%)      if (g != end_gates && g->raw == watch.raw)
   481,004 ( 0.00%)        g++;
         .               else
12,278,986 ( 0.01%)        PUSH_STACK (*antecedents, watch);
    18,035 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (21x)
         .             }
         .           
   280,974 ( 0.00%)    assert (g == end_gates);
         .           #ifdef LOGGING
   749,264 ( 0.00%)    size_t size_gates = SIZE_STACK (*gates);
   749,264 ( 0.00%)    size_t size_antecedents = SIZE_STACK (*antecedents);
   374,632 ( 0.00%)    size_t size_watches = SIZE_WATCHES (*watches);
 1,123,896 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (93,658x)
   561,948 ( 0.00%)    LOG ("got %zu antecedent %.0f%% and %zu gate clauses %.0f%% "
         .                  "out of %zu watches of literal %s",
         .                  size_antecedents, kissat_percent (size_antecedents, size_watches),
         .                  size_gates, kissat_percent (size_gates, size_watches), size_watches,
         .                  LOGLIT (lit));
         .           #endif
   561,948 ( 0.00%)  }
         .           
   280,974 ( 0.00%)  void kissat_get_antecedents (kissat *solver, unsigned lit) {
   280,974 ( 0.00%)    get_antecedents (solver, lit, 0);
16,819,747 ( 0.01%)  => build/../src/gates.c:get_antecedents (46,829x)
   608,777 ( 0.00%)    get_antecedents (solver, NOT (lit), 1);
24,948,676 ( 0.01%)  => build/../src/gates.c:get_antecedents (46,829x)
   140,487 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/vector.c
--------------------------------------------------------------------------------
Ir                   

-- line 7 ----------------------------------------
          .           #include "rank.h"
          .           
          .           #include <inttypes.h>
          .           #include <stddef.h>
          .           
          .           #ifndef COMPACT
          .           
          .           static void fix_vector_pointers_after_moving_stack (kissat *solver,
      1,044 ( 0.00%)                                                      ptrdiff_t moved) {
          .           #ifdef LOGGING
        870 ( 0.00%)    uint64_t bytes = moved < 0 ? -moved : moved;
      1,044 ( 0.00%)    LOG ("fixing begin and end pointers of all watches "
          .                  "since the global watches stack has been moved by %s",
          .                  FORMAT_BYTES (bytes));
          .           #endif
        522 ( 0.00%)    struct vector *begin_watches = solver->watches;
      1,566 ( 0.00%)    struct vector *end_watches = begin_watches + LITS;
 35,262,356 ( 0.01%)    for (struct vector *p = begin_watches; p != end_watches; p++) {
          .           
          .           #define FIX_POINTER(PTR) \
          .             do { \
          .               char *old_char_ptr_value = (char *) (PTR); \
          .               if (!old_char_ptr_value) \
          .                 break; \
          .               char *new_char_ptr_value = old_char_ptr_value + moved; \
          .               unsigned *new_unsigned_ptr_value = (unsigned *) new_char_ptr_value; \
          .               (PTR) = new_unsigned_ptr_value; \
          .             } while (0)
          .           
 55,268,311 ( 0.02%)      FIX_POINTER (p->begin);
 55,268,311 ( 0.02%)      FIX_POINTER (p->end);
          .             }
        696 ( 0.00%)  }
          .           
          .           #endif
          .           
 11,753,181 ( 0.00%)  unsigned *kissat_enlarge_vector (kissat *solver, vector *vector) {
  3,917,727 ( 0.00%)    unsigneds *stack = &solver->vectors.stack;
  5,223,636 ( 0.00%)    const size_t old_vector_size = kissat_size_vector (vector);
 15,670,908 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,305,909x)
          .           #ifdef LOGGING
  7,835,454 ( 0.00%)    const size_t old_offset = kissat_offset_vector (solver, vector);
 23,506,143 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_offset_vector (1,305,909x)
  7,835,454 ( 0.00%)    LOG2 ("enlarging vector %zu[%zu] at %p", old_offset, old_vector_size,
          .                   (void *) vector);
          .           #endif
  3,917,727 ( 0.00%)    assert (old_vector_size < MAX_VECTORS / 2);
  7,768,932 ( 0.00%)    const size_t new_vector_size = old_vector_size ? 2 * old_vector_size : 1;
 10,447,272 ( 0.00%)    size_t old_stack_size = SIZE_STACK (*stack);
 10,447,272 ( 0.00%)    size_t capacity = CAPACITY_STACK (*stack);
  6,529,545 ( 0.00%)    assert (kissat_is_power_of_two (MAX_VECTORS));
 19,588,635 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_is_power_of_two (1,305,909x)
  3,917,727 ( 0.00%)    assert (capacity <= MAX_VECTORS);
  3,917,727 ( 0.00%)    size_t available = capacity - old_stack_size;
  3,917,727 ( 0.00%)    if (new_vector_size > available) {
          .           #if !defined(QUIET) || !defined(COMPACT)
        669 ( 0.00%)      unsigned *old_begin_stack = BEGIN_STACK (*stack);
          .           #endif
        223 ( 0.00%)      unsigned enlarged = 0;
          .               do {
      1,115 ( 0.00%)        assert (kissat_is_zero_or_power_of_two (capacity));
      2,230 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_is_zero_or_power_of_two (223x)
          .           
        669 ( 0.00%)        if (capacity == MAX_VECTORS)
          .                   kissat_fatal ("maximum vector stack size "
          .                                 "of 2^%u entries %s exhausted",
          .                                 LD_MAX_VECTORS,
          .                                 FORMAT_BYTES (MAX_VECTORS * sizeof (unsigned)));
        223 ( 0.00%)        enlarged++;
      1,338 ( 0.00%)        kissat_stack_enlarge (solver, (chars *) stack, sizeof (unsigned));
  9,662,960 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (223x)
          .           
      1,784 ( 0.00%)        capacity = CAPACITY_STACK (*stack);
        669 ( 0.00%)        available = capacity - old_stack_size;
        669 ( 0.00%)      } while (new_vector_size > available);
          .           
        446 ( 0.00%)      if (enlarged) {
        892 ( 0.00%)        INC (vectors_enlarged);
      3,345 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vectors_enlarged (223x)
          .           #if !defined(QUIET) || !defined(COMPACT)
        669 ( 0.00%)        unsigned *new_begin_stack = BEGIN_STACK (*stack);
        669 ( 0.00%)        const ptrdiff_t moved =
          .                     (char *) new_begin_stack - (char *) old_begin_stack;
          .           #endif
          .           #ifndef QUIET
      8,202 ( 0.00%)        kissat_phase (solver, "vectors", GET (vectors_enlarged),
    252,079 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (223x)
    206,417 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (223x)
      9,589 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (223x)
      1,561 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vectors_enlarged (223x)
          .                               "enlarged to %s entries %s (%s)",
          .                               FORMAT_COUNT (capacity),
          .                               FORMAT_BYTES (capacity * sizeof (unsigned)),
          .                               (moved ? "moved" : "in place"));
          .           #endif
          .           #ifndef COMPACT
        446 ( 0.00%)        if (moved)
        870 ( 0.00%)          fix_vector_pointers_after_moving_stack (solver, moved);
145,804,720 ( 0.06%)  => build/../src/vector.c:fix_vector_pointers_after_moving_stack (174x)
          .           #endif
          .               }
        669 ( 0.00%)      assert (capacity <= MAX_VECTORS);
        669 ( 0.00%)      assert (new_vector_size <= available);
          .             }
  7,835,454 ( 0.00%)    unsigned *begin_old_vector = kissat_begin_vector (solver, vector);
 10,447,272 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,305,909x)
  3,917,727 ( 0.00%)    unsigned *begin_new_vector = END_STACK (*stack);
  6,529,545 ( 0.00%)    unsigned *middle_new_vector = begin_new_vector + old_vector_size;
  6,529,545 ( 0.00%)    unsigned *end_new_vector = begin_new_vector + new_vector_size;
  5,223,636 ( 0.00%)    assert (end_new_vector <= stack->allocated);
  3,917,727 ( 0.00%)    const size_t old_bytes = old_vector_size * sizeof (unsigned);
  3,917,727 ( 0.00%)    const size_t delta_size = new_vector_size - old_vector_size;
  3,917,727 ( 0.00%)    assert (MAX_SIZE_T / sizeof (unsigned) >= delta_size);
  3,917,727 ( 0.00%)    const size_t delta_bytes = delta_size * sizeof (unsigned);
  2,611,818 ( 0.00%)    if (old_bytes) {
  7,635,888 ( 0.00%)      memcpy (begin_new_vector, begin_old_vector, old_bytes);
 20,120,235 ( 0.01%)  => ???:0x000000000010c650 (1,272,648x)
  6,363,240 ( 0.00%)      memset (begin_old_vector, 0xff, old_bytes);
 22,405,259 ( 0.01%)  => ???:0x000000000010c5b0 (1,272,648x)
          .             }
  7,835,454 ( 0.00%)    solver->vectors.usable += old_vector_size;
  6,529,545 ( 0.00%)    kissat_add_usable (solver, delta_size);
 27,424,089 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_add_usable (1,305,909x)
  2,611,818 ( 0.00%)    if (delta_bytes)
  6,529,545 ( 0.00%)      memset (middle_new_vector, 0xff, delta_bytes);
 23,036,889 ( 0.01%)  => ???:0x000000000010c5b0 (1,305,909x)
          .           #ifdef COMPACT
          .             const uint64_t offset = SIZE_STACK (*stack);
          .             assert (offset <= MAX_VECTORS);
          .             vector->offset = offset;
          .             LOG2 ("enlarged vector at %p to %u[%u]", (void *) vector, vector->offset,
          .                   vector->size);
          .           #else
  3,917,727 ( 0.00%)    vector->begin = begin_new_vector;
  3,917,727 ( 0.00%)    vector->end = middle_new_vector;
          .           #ifdef LOGGING
 10,447,272 ( 0.00%)    const size_t new_offset = vector->begin - stack->begin;
  7,835,454 ( 0.00%)    LOG2 ("enlarged vector at %p to %zu[%zu]", (void *) vector, new_offset,
          .                   old_vector_size);
          .           #endif
          .           #endif
  3,917,727 ( 0.00%)    stack->end = end_new_vector;
  3,917,727 ( 0.00%)    assert (begin_new_vector < end_new_vector);
  6,529,545 ( 0.00%)    assert (kissat_size_vector (vector) == old_vector_size);
 15,670,908 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,305,909x)
  1,305,909 ( 0.00%)    return middle_new_vector;
  7,835,454 ( 0.00%)  }
          .           
          .           #ifdef COMPACT
          .           
          .           typedef unsigned rank;
          .           
          .           static inline rank rank_offset (vector *unsorted, unsigned i) {
          .             return unsorted[i].offset;
          .           }
          .           
          .           #else
          .           
          .           typedef uintptr_t rank;
          .           
  4,783,016 ( 0.00%)  static inline rank rank_offset (vector *unsorted, unsigned i) {
  8,370,278 ( 0.00%)    const unsigned *begin = unsorted[i].begin;
  1,195,754 ( 0.00%)    return (uintptr_t) begin;
  2,391,508 ( 0.00%)  }
          .           
          .           #endif
          .           
          .           #define RANK_OFFSET(A) rank_offset (unsorted, (A))
          .           
          .           void kissat_defrag_vectors (kissat *solver, size_t size_unsorted,
         42 ( 0.00%)                              vector *unsorted) {
          9 ( 0.00%)    unsigneds *stack = &solver->vectors.stack;
         24 ( 0.00%)    const size_t size_vectors = SIZE_STACK (*stack);
          6 ( 0.00%)    if (size_vectors < 2)
          .               return;
         27 ( 0.00%)    START (defrag);
         12 ( 0.00%)    INC (defragmentations);
         45 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_defragmentations (3x)
         18 ( 0.00%)    LOG ("defragmenting vectors size %zu capacity %zu usable %zu",
          .                  size_vectors, CAPACITY_STACK (*stack), solver->vectors.usable);
          9 ( 0.00%)    size_t bytes = size_unsorted * sizeof (unsigned);
         18 ( 0.00%)    unsigned *sorted = kissat_malloc (solver, bytes);
      1,910 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (3x)
          3 ( 0.00%)    unsigned size_sorted = 0;
    686,183 ( 0.00%)    for (unsigned i = 0; i < size_unsorted; i++) {
  1,029,252 ( 0.00%)      vector *vector = unsorted + i;
    857,710 ( 0.00%)      if (kissat_empty_vector (vector))
  1,886,962 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_empty_vector (171,542x)
          .           #ifdef COMPACT
          .                 vector->offset = 0;
          .           #else
    154,504 ( 0.00%)        vector->begin = vector->end = 0;
          .           #endif
          .               else
  1,345,230 ( 0.00%)        sorted[size_sorted++] = i;
          .             }
 36,053,988 ( 0.02%)    RADIX_SORT (unsigned, rank, size_sorted, sorted, RANK_OFFSET);
 16,740,556 ( 0.01%)  => build/../src/vector.c:rank_offset (1,195,754x)
    597,886 ( 0.00%)  => ???:0x000000000010c650 (3x)
      1,668 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (3x)
        658 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (3x)
      1,224 ( 0.00%)  => ???:0x000000000010c5b0 (9x)
          9 ( 0.00%)    unsigned *old_begin_stack = BEGIN_STACK (*stack);
          9 ( 0.00%)    unsigned *p = old_begin_stack + 1;
    597,895 ( 0.00%)    for (unsigned i = 0; i < size_sorted; i++) {
    896,820 ( 0.00%)      unsigned j = sorted[i];
    896,820 ( 0.00%)      vector *vector = unsorted + j;
    597,880 ( 0.00%)      const size_t size = kissat_size_vector (vector);
  1,793,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (149,470x)
    747,350 ( 0.00%)      unsigned *new_end_of_vector = p + size;
          .           #ifdef COMPACT
          .               const unsigned old_offset = vector->offset;
          .               const unsigned new_offset = p - old_begin_stack;
          .               assert (new_offset <= old_offset);
          .               vector->offset = new_offset;
          .               const unsigned *const q = old_begin_stack + old_offset;
          .           #else
    298,940 ( 0.00%)      if (!size) {
          .                 vector->begin = vector->end = 0;
          .                 continue;
          .               }
    448,410 ( 0.00%)      const unsigned *const q = vector->begin;
    448,410 ( 0.00%)      vector->begin = p;
    448,410 ( 0.00%)      vector->end = new_end_of_vector;
          .           #endif
    448,410 ( 0.00%)      assert (MAX_SIZE_T / sizeof (unsigned) >= size);
  1,046,290 ( 0.00%)      memmove (p, q, size * sizeof (unsigned));
  2,292,416 ( 0.00%)  => ???:0x000000000010c860 (149,470x)
    298,940 ( 0.00%)      p = new_end_of_vector;
          .             }
         18 ( 0.00%)    kissat_free (solver, sorted, bytes);
        728 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (3x)
          .           #ifndef QUIET
         15 ( 0.00%)    const size_t freed = END_STACK (*stack) - p;
         54 ( 0.00%)    double freed_fraction = kissat_percent (freed, size_vectors);
        102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (3x)
         78 ( 0.00%)    kissat_phase (solver, "defrag", GET (defragmentations),
      3,834 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (3x)
        153 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (3x)
         21 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_defragmentations (3x)
          .                           "freed %zu usable entries %.0f%% thus %s", freed,
          .                           freed_fraction, FORMAT_BYTES (freed * sizeof (unsigned)));
         12 ( 0.00%)    assert (freed == solver->vectors.usable);
          .           #endif
         45 ( 0.00%)    SET_END_OF_STACK (*stack, p);
          .           #ifndef COMPACT
         12 ( 0.00%)    assert (old_begin_stack == BEGIN_STACK (*stack));
          .           #endif
         36 ( 0.00%)    SHRINK_STACK (*stack);
      1,650 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_shrink_stack (3x)
          .           #ifndef COMPACT
          9 ( 0.00%)    unsigned *new_begin_stack = BEGIN_STACK (*stack);
          9 ( 0.00%)    const ptrdiff_t moved =
          .                 (char *) new_begin_stack - (char *) old_begin_stack;
          6 ( 0.00%)    if (moved)
          .               fix_vector_pointers_after_moving_stack (solver, moved);
          .           #endif
          6 ( 0.00%)    solver->vectors.usable = 0;
          .             kissat_check_vectors (solver);
         27 ( 0.00%)    STOP (defrag);
         30 ( 0.00%)  }
          .           
          .           void kissat_remove_from_vector (kissat *solver, vector *vector,
     80,927 ( 0.00%)                                  unsigned remove) {
     92,488 ( 0.00%)    unsigned *begin = kissat_begin_vector (solver, vector), *p = begin;
     92,488 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (11,561x)
     69,366 ( 0.00%)    const unsigned *const end = kissat_end_vector (solver, vector);
     92,488 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (11,561x)
     34,683 ( 0.00%)    assert (p != end);
    631,844 ( 0.00%)    while (*p != remove)
    585,600 ( 0.00%)      p++, assert (p != end);
  2,973,773 ( 0.00%)    while (++p != end)
  3,644,960 ( 0.00%)      p[-1] = *p;
     34,683 ( 0.00%)    p[-1] = INVALID_VECTOR_ELEMENT;
          .           #ifdef COMPACT
          .             vector->size--;
          .           #else
     69,366 ( 0.00%)    assert (vector->begin < vector->end);
     57,805 ( 0.00%)    vector->end--;
          .           #endif
     34,683 ( 0.00%)    kissat_inc_usable (solver);
    184,976 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_inc_usable (11,561x)
          .             kissat_check_vectors (solver);
          .           #ifndef CHECK_VECTORS
          .             (void) solver;
          .           #endif
     34,683 ( 0.00%)  }
          .           
          .           void kissat_resize_vector (kissat *solver, vector *vector,
345,423,043 ( 0.15%)                             size_t new_size) {
197,384,596 ( 0.08%)    const size_t old_size = kissat_size_vector (vector);
592,153,788 ( 0.25%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (49,346,149x)
148,038,447 ( 0.06%)    assert (new_size <= old_size);
148,038,447 ( 0.06%)    if (new_size == old_size)
 36,390,970 ( 0.02%)      return;
          .           #ifdef COMPACT
          .             vector->size = new_size;
          .           #else
 90,686,253 ( 0.04%)    vector->end = vector->begin + new_size;
          .           #endif
 77,731,074 ( 0.03%)    unsigned *begin = kissat_begin_vector (solver, vector);
103,641,432 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (12,955,179x)
 64,775,895 ( 0.03%)    unsigned *end = begin + new_size;
 38,865,537 ( 0.02%)    size_t delta = old_size - new_size;
 64,775,895 ( 0.03%)    kissat_add_usable (solver, delta);
272,058,759 ( 0.12%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_add_usable (12,955,179x)
 38,865,537 ( 0.02%)    size_t bytes = delta * sizeof (unsigned);
 77,731,074 ( 0.03%)    memset (end, 0xff, bytes);
213,690,574 ( 0.09%)  => ???:0x000000000010c5b0 (12,955,179x)
          .             kissat_check_vectors (solver);
          .           #ifndef CHECK_VECTORS
          .             (void) solver;
          .           #endif
 98,692,298 ( 0.04%)  }
          .           
         55 ( 0.00%)  void kissat_release_vectors (kissat *solver) {
        264 ( 0.00%)    RELEASE_STACK (solver->vectors.stack);
    111,653 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (11x)
         22 ( 0.00%)    solver->vectors.usable = 0;
         33 ( 0.00%)  }
          .           
          .           #ifdef CHECK_VECTORS
          .           
          .           void kissat_check_vector (kissat *solver, vector *vector) {
          .             const unsigned *const begin = kissat_begin_vector (solver, vector);
          .             const unsigned *const end = kissat_end_vector (solver, vector);
          .             if (!solver->transitive_reducing)
          .               for (const unsigned *p = begin; p != end; p++)
-- line 293 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/bump.c
--------------------------------------------------------------------------------
Ir                     

-- line 9 ----------------------------------------
            .           #include "rank.h"
            .           #include "sort.h"
            .           
            .           #define RANK(A) ((A).rank)
            .           #define SMALLER(A, B) (RANK (A) < RANK (B))
            .           
            .           #define RADIX_SORT_BUMP_LIMIT 32
            .           
      107,679 ( 0.00%)  static void sort_bump (kissat *solver) {
       66,264 ( 0.00%)    const size_t size = SIZE_STACK (solver->analyzed);
       16,566 ( 0.00%)    if (size < RADIX_SORT_BUMP_LIMIT) {
       22,260 ( 0.00%)      LOG ("quick sorting %zu analyzed variables", size);
    7,310,158 ( 0.00%)      SORT_STACK (datarank, solver->ranks, SMALLER);
            .             } else {
       27,438 ( 0.00%)      LOG ("radix sorting %zu analyzed variables", size);
1,451,157,605 ( 0.61%)      RADIX_STACK (datarank, unsigned, solver->ranks, RANK);
   48,756,283 ( 0.02%)  => ???:0x000000000010c650 (2,572x)
    1,922,375 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (4,573x)
    1,575,011 ( 0.00%)  => ???:0x000000000010c5b0 (11,763x)
      853,800 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (4,573x)
            .             }
      103,969 ( 0.00%)  }
            .           
           10 ( 0.00%)  void kissat_rescale_scores (kissat *solver) {
            8 ( 0.00%)    INC (rescaled);
           30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_rescaled (2x)
            6 ( 0.00%)    heap *scores = &solver->scores;
           10 ( 0.00%)    const double max_score = kissat_max_score_on_heap (scores);
      424,768 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_max_score_on_heap (2x)
           38 ( 0.00%)    kissat_phase (solver, "rescale", GET (rescaled),
          102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
           14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_rescaled (2x)
            .                           "maximum score %g increment %g", max_score, solver->scinc);
           12 ( 0.00%)    const double rescale = MAX (max_score, solver->scinc);
            8 ( 0.00%)    assert (rescale > 0);
            6 ( 0.00%)    const double factor = 1.0 / rescale;
           14 ( 0.00%)    kissat_rescale_heap (solver, scores, factor);
    3,242,835 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_rescale_heap (2x)
           10 ( 0.00%)    solver->scinc *= factor;
           30 ( 0.00%)    kissat_phase (solver, "rescale", GET (rescaled), "rescaled by factor %g",
          102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
           14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_rescaled (2x)
            .                           factor);
            6 ( 0.00%)  }
            .           
       78,350 ( 0.00%)  void kissat_bump_score_increment (kissat *solver) {
       47,010 ( 0.00%)    const double old_scinc = solver->scinc;
      109,690 ( 0.00%)    const double decay = GET_OPTION (decay) * 1e-3;
      109,690 ( 0.00%)    assert (0 <= decay), assert (decay <= 0.5);
       94,020 ( 0.00%)    const double factor = 1.0 / (1.0 - decay);
       47,010 ( 0.00%)    const double new_scinc = old_scinc * factor;
       94,020 ( 0.00%)    LOG ("new score increment %g = %g * %g", new_scinc, factor, old_scinc);
       47,010 ( 0.00%)    solver->scinc = new_scinc;
       47,010 ( 0.00%)    if (new_scinc > MAX_SCORE)
            .               kissat_rescale_scores (solver);
       62,680 ( 0.00%)  }
            .           
            .           static inline void bump_analyzed_variable_score (kissat *solver,
   24,772,960 ( 0.01%)                                                   unsigned idx) {
   14,863,776 ( 0.01%)    heap *scores = &solver->scores;
   34,682,144 ( 0.01%)    const double old_score = kissat_get_heap_score (scores, idx);
   94,137,248 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (4,954,592x)
   14,863,776 ( 0.01%)    const double inc = solver->scinc;
   14,863,776 ( 0.01%)    const double new_score = old_score + inc;
   29,727,552 ( 0.01%)    LOG ("new score[%u] = %g = %g + %g", idx, new_score, old_score, inc);
   39,636,736 ( 0.02%)    kissat_update_heap (solver, scores, idx, new_score);
1,020,272,703 ( 0.43%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (4,954,592x)
   14,863,776 ( 0.01%)    if (new_score > MAX_SCORE)
            .               kissat_rescale_scores (solver);
   19,818,368 ( 0.01%)  }
            .           
            .           void kissat_bump_variable (kissat *solver, unsigned idx) {
            .             bump_analyzed_variable_score (solver, idx);
            .           }
            .           
       78,350 ( 0.00%)  static void bump_analyzed_variable_scores (kissat *solver) {
       47,010 ( 0.00%)    flags *flags = solver->flags;
            .           
   34,838,907 ( 0.01%)    for (all_stack (unsigned, idx, solver->analyzed))
   44,591,400 ( 0.02%)      if (flags[idx].active)
   24,772,960 ( 0.01%)        bump_analyzed_variable_score (solver, idx);
1,322,502,815 ( 0.56%)  => build/../src/bump.c:bump_analyzed_variable_score (4,954,592x)
            .           
       47,010 ( 0.00%)    kissat_bump_score_increment (solver);
      736,490 ( 0.00%)  => build/../src/bump.c:kissat_bump_score_increment (15,670x)
       47,010 ( 0.00%)  }
            .           
       41,415 ( 0.00%)  static void move_analyzed_variables_to_front_of_queue (kissat *solver) {
       49,698 ( 0.00%)    assert (EMPTY_STACK (solver->ranks));
       24,849 ( 0.00%)    const links *const links = solver->links;
   49,737,036 ( 0.02%)    for (all_stack (unsigned, idx, solver->analyzed)) {
            .               // clang-format off
   85,121,496 ( 0.04%)      const datarank rank = { .data = idx, .rank = links[idx].stamp };
            .               // clang-format on
   92,215,178 ( 0.04%)      PUSH_STACK (solver->ranks, rank);
      289,410 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (16x)
            .             }
            .           
       24,849 ( 0.00%)    sort_bump (solver);
1,511,919,408 ( 0.64%)  => build/../src/bump.c:sort_bump (8,283x)
            .           
       24,849 ( 0.00%)    flags *flags = solver->flags;
            .             unsigned idx;
            .           
   49,737,036 ( 0.02%)    for (all_stack (datarank, rank, solver->ranks))
   78,028,000 ( 0.03%)      if (flags[idx = rank.data].active)
   35,467,100 ( 0.02%)        kissat_move_to_front (solver, idx);
1,703,973,249 ( 0.72%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinequeue.h:kissat_move_to_front (7,093,420x)
            .           
       33,132 ( 0.00%)    CLEAR_STACK (solver->ranks);
       24,849 ( 0.00%)  }
            .           
      119,765 ( 0.00%)  void kissat_bump_analyzed (kissat *solver) {
      215,577 ( 0.00%)    START (bump);
      191,624 ( 0.00%)    const size_t bumped = SIZE_STACK (solver->analyzed);
      119,765 ( 0.00%)    if (!solver->stable)
       33,132 ( 0.00%)      move_analyzed_variables_to_front_of_queue (solver);
3,606,711,554 ( 1.53%)  => build/../src/bump.c:move_analyzed_variables_to_front_of_queue (8,283x)
            .             else
       47,010 ( 0.00%)      bump_analyzed_variable_scores (solver);
1,427,661,952 ( 0.60%)  => build/../src/bump.c:bump_analyzed_variable_scores (15,670x)
      143,718 ( 0.00%)    ADD (literals_bumped, bumped);
      479,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_literals_bumped (23,953x)
      215,577 ( 0.00%)    STOP (bump);
       71,859 ( 0.00%)  }
            .           
           20 ( 0.00%)  void kissat_update_scores (kissat *solver) {
           16 ( 0.00%)    assert (solver->stable);
           12 ( 0.00%)    heap *scores = SCORES;
      380,820 ( 0.00%)    for (all_variables (idx))
    1,993,801 ( 0.00%)      if (ACTIVE (idx) && !kissat_heap_contains (scores, idx))
    1,985,130 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (94,530x)
            .                 kissat_push_heap (solver, scores, idx);
           16 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/backbone.c
--------------------------------------------------------------------------------
Ir                  

-- line 9 ----------------------------------------
         .           #include "print.h"
         .           #include "proprobe.h"
         .           #include "report.h"
         .           #include "terminate.h"
         .           #include "trail.h"
         .           #include "utilities.h"
         .           
         .           static void schedule_backbone_candidates (kissat *solver,
        78 ( 0.00%)                                            unsigneds *candidates) {
        39 ( 0.00%)    flags *flags = solver->flags;
        13 ( 0.00%)    unsigned not_rescheduled = 0;
 1,280,908 ( 0.00%)    for (all_variables (idx)) {
 1,601,005 ( 0.00%)      const struct flags *f = flags + idx;
 1,921,206 ( 0.00%)      if (!f->active)
    11,373 ( 0.00%)        continue;
 2,161,796 ( 0.00%)      const unsigned lit = LIT (idx);
 1,544,140 ( 0.00%)      if (f->backbone0) {
    16,957 ( 0.00%)        PUSH_STACK (*candidates, lit);
    14,501 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (8x)
     7,782 ( 0.00%)        LOG ("rescheduling backbone literal candidate %s", LOGLIT (lit));
         .               } else
   307,531 ( 0.00%)        not_rescheduled++;
 1,544,140 ( 0.00%)      if (f->backbone1) {
     1,240 ( 0.00%)        const unsigned not_lit = NOT (lit);
     2,051 ( 0.00%)        PUSH_STACK (*candidates, not_lit);
     1,721 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (3x)
       930 ( 0.00%)        LOG ("rescheduling backbone literal candidate %s", LOGLIT (not_lit));
         .               } else
   617,346 ( 0.00%)        not_rescheduled++;
         .             }
         .           #ifndef QUIET
       104 ( 0.00%)    const size_t rescheduled = SIZE_STACK (*candidates);
        52 ( 0.00%)    const unsigned active_literals = 2u * solver->active;
       325 ( 0.00%)    kissat_very_verbose (
       663 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (13x)
       442 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (13x)
         .                 solver, "rescheduled %zu backbone candidate literals %.0f%%",
         .                 rescheduled, kissat_percent (rescheduled, active_literals));
         .           #endif
        26 ( 0.00%)    if (not_rescheduled) {
 1,280,908 ( 0.00%)      for (all_variables (idx)) {
 1,601,005 ( 0.00%)        struct flags *f = flags + idx;
 1,921,206 ( 0.00%)        if (!f->active)
    11,373 ( 0.00%)          continue;
 2,161,796 ( 0.00%)        const unsigned lit = LIT (idx);
 2,161,796 ( 0.00%)        if (!f->backbone0) {
 1,845,186 ( 0.00%)          LOG ("scheduling backbone literal candidate %s", LOGLIT (lit));
 4,000,219 ( 0.00%)          PUSH_STACK (*candidates, lit);
 3,382,450 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (193x)
         .                 }
 2,161,796 ( 0.00%)        if (!f->backbone1) {
 2,469,384 ( 0.00%)          const unsigned not_lit = NOT (lit);
 1,852,038 ( 0.00%)          LOG ("scheduling backbone literal candidate %s", LOGLIT (not_lit));
 4,321,458 ( 0.00%)          PUSH_STACK (*candidates, not_lit);
    59,747 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (3x)
         .                 }
         .               }
         .             }
         .           #ifndef QUIET
       104 ( 0.00%)    const size_t total = SIZE_STACK (*candidates);
       325 ( 0.00%)    kissat_very_verbose (solver,
       663 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (13x)
       442 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (13x)
         .                                  "scheduled %zu backbone candidate literals %.0f%%"
         .                                  " in total",
         .                                  total, kissat_percent (total, active_literals));
         .           #endif
        39 ( 0.00%)  }
         .           
         .           static void keep_backbone_candidates (kissat *solver,
        91 ( 0.00%)                                        unsigneds *candidates) {
        39 ( 0.00%)    flags *flags = solver->flags;
        13 ( 0.00%)    size_t prioritized = 0;
        13 ( 0.00%)    size_t remain = 0;
    59,749 ( 0.00%)    for (all_stack (unsigned, lit, *candidates)) {
    68,136 ( 0.00%)      const unsigned idx = IDX (lit);
    42,585 ( 0.00%)      const struct flags *f = flags + idx;
    51,102 ( 0.00%)      if (!f->active)
         .                 continue;
     8,517 ( 0.00%)      remain++;
    76,653 ( 0.00%)      if (NEGATED (lit))
     1,694 ( 0.00%)        prioritized += f->backbone1;
         .               else
    57,925 ( 0.00%)        prioritized += f->backbone0;
         .             }
        39 ( 0.00%)    assert (prioritized <= remain);
        26 ( 0.00%)    if (!remain) {
        72 ( 0.00%)      kissat_very_verbose (solver, "no backbone candidates remain");
       516 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (12x)
         .           #ifndef NDEBUG
 1,111,352 ( 0.00%)      for (all_variables (idx)) {
 1,389,070 ( 0.00%)        const struct flags *f = flags + idx;
 1,666,884 ( 0.00%)        if (!f->active)
     9,858 ( 0.00%)          continue;
 1,875,692 ( 0.00%)        assert (!f->backbone0);
 1,875,692 ( 0.00%)        assert (!f->backbone1);
         .               }
         .           #endif
        12 ( 0.00%)      return;
         .             }
         .           #ifndef QUIET
         5 ( 0.00%)    const size_t active_literals = 2u * solver->active;
         .           #endif
         3 ( 0.00%)    if (prioritized == remain)
         .               kissat_very_verbose (solver,
         .                                    "keeping all remaining %zu backbone "
         .                                    "candidates %.0f%% prioritized (all were)",
         .                                    remain, kissat_percent (remain, active_literals));
         2 ( 0.00%)    else if (!prioritized) {
    59,629 ( 0.00%)      for (all_stack (unsigned, lit, *candidates)) {
    68,136 ( 0.00%)        const unsigned idx = IDX (lit);
    42,585 ( 0.00%)        struct flags *f = flags + idx;
    51,102 ( 0.00%)        if (!f->active)
         .                   continue;
    76,653 ( 0.00%)        if (NEGATED (lit)) {
     1,694 ( 0.00%)          assert (!f->backbone1);
     1,210 ( 0.00%)          f->backbone1 = true;
         .                 } else {
    57,925 ( 0.00%)          assert (!f->backbone0);
    41,375 ( 0.00%)          f->backbone0 = true;
         .                 }
         .               }
        26 ( 0.00%)      kissat_very_verbose (solver,
        51 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (1x)
        34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (1x)
         .                                    "keeping all remaining %zu backbone "
         .                                    "candidates %.0f%% prioritized (none was)",
         .                                    remain, kissat_percent (remain, active_literals));
         .             } else {
         .               kissat_very_verbose (solver,
         .                                    "keeping %zu backbone candidates %.0f%% "
         .                                    "prioritized (%.0f%% of remaining %zu)",
         .                                    prioritized,
         .                                    kissat_percent (prioritized, active_literals),
         .                                    kissat_percent (prioritized, remain), remain);
         .             }
        39 ( 0.00%)  }
         .           
         .           static inline void backbone_assign (kissat *solver, unsigned_array *trail,
         .                                               value *values, assigned *assigned,
 7,526,394 ( 0.00%)                                      unsigned lit, unsigned reason) {
 6,690,128 ( 0.00%)    const unsigned not_lit = NOT (lit);
 5,017,596 ( 0.00%)    assert (!values[lit]);
 5,017,596 ( 0.00%)    assert (!values[not_lit]);
 3,345,064 ( 0.00%)    values[lit] = 1;
 3,345,064 ( 0.00%)    values[not_lit] = -1;
 5,853,862 ( 0.00%)    PUSH_ARRAY (*trail, lit);
 6,690,128 ( 0.00%)    const unsigned idx = IDX (lit);
 5,017,596 ( 0.00%)    struct assigned *a = assigned + idx;
 2,508,798 ( 0.00%)    a->reason = reason;
 3,345,064 ( 0.00%)    a->level = solver->level;
 2,508,798 ( 0.00%)  }
         .           
         .           static inline clause *
         .           backbone_propagate_literal (kissat *solver, const bool stop_early,
         .                                       const watches *const all_watches,
         .                                       unsigned_array *trail, value *values,
 9,987,588 ( 0.00%)                              assigned *assigned, unsigned lit) {
 4,993,794 ( 0.00%)    LOG ("backbone propagating %s", LOGLIT (lit));
 4,161,495 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (lit));
 4,993,794 ( 0.00%)    assert (values[lit] > 0);
         .           
 6,658,392 ( 0.00%)    const unsigned not_lit = NOT (lit);
 4,993,794 ( 0.00%)    assert (values[not_lit] < 0);
         .           
 4,161,495 ( 0.00%)    assert (not_lit < LITS);
 4,993,794 ( 0.00%)    const watches *const watches = all_watches + not_lit;
         .           
 4,993,794 ( 0.00%)    const watch *const begin_watches = BEGIN_CONST_WATCHES (*watches);
 6,658,392 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_const_vector (832,299x)
 4,993,794 ( 0.00%)    const watch *const end_watches = END_CONST_WATCHES (*watches);
 6,658,392 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_const_vector (832,299x)
 1,664,598 ( 0.00%)    const watch *p = begin_watches;
         .           
 5,295,819 ( 0.00%)    while (p != end_watches) {
 6,861,865 ( 0.00%)      const watch watch = *p++;
 5,489,492 ( 0.00%)      if (watch.type.binary) {
 1,968,450 ( 0.00%)        const unsigned other = watch.binary.lit;
 3,280,750 ( 0.00%)        assert (VALID_INTERNAL_LITERAL (other));
 3,280,750 ( 0.00%)        const value value = values[other];
 1,312,300 ( 0.00%)        if (value > 0)
   326,707 ( 0.00%)          continue;
   658,886 ( 0.00%)        if (value < 0)
     4,263 ( 0.00%)          return kissat_binary_conflict (solver, not_lit, other);
    18,270 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_binary_conflict (609x)
   657,668 ( 0.00%)        assert (!value);
 2,959,506 ( 0.00%)        backbone_assign (solver, trail, values, assigned, other, lit);
22,360,712 ( 0.01%)  => build/../src/backbone.c:backbone_assign (328,834x)
 1,973,004 ( 0.00%)        LOG ("backbone assign %s reason binary clause %s %s", LOGLIT (other),
         .                      LOGLIT (other), LOGLIT (not_lit));
         .               } else {
 1,432,446 ( 0.00%)        if (stop_early) {
         .           #ifndef NDEBUG
18,264,741 ( 0.01%)          for (const union watch *q = p + 1; q != end_watches; q++) {
16,563,975 ( 0.01%)            const union watch watch = *q++;
16,563,975 ( 0.01%)            assert (!watch.type.binary);
         .                   }
         .           #endif
   716,223 ( 0.00%)          break;
         .                 }
         .           
         .                 p++;
         .               }
         .             }
         .           
 3,326,760 ( 0.00%)    const size_t touched = p - begin_watches;
 8,316,900 ( 0.00%)    solver->ticks += 1 + kissat_cache_lines (touched, sizeof (watch));
23,469,707 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (831,690x)
         .           
   831,690 ( 0.00%)    return 0;
 4,161,495 ( 0.00%)  }
         .           
         .           static inline clause *backbone_propagate (kissat *solver,
         .                                                     unsigned_array *trail,
         .                                                     value *values,
 3,552,024 ( 0.00%)                                            assigned *assigned) {
 1,522,296 ( 0.00%)    const bool stop_early =
         .                 solver->large_clauses_watched_after_binary_clauses;
         .           
   507,432 ( 0.00%)    clause *conflict = 0;
 1,014,864 ( 0.00%)    solver->ticks = 0;
         .           
 1,522,296 ( 0.00%)    const watches *const watches = solver->watches;
 1,522,296 ( 0.00%)    unsigned *propagate = solver->propagate;
         .           
 8,543,382 ( 0.00%)    while (!conflict && propagate != END_ARRAY (*trail))
10,819,887 ( 0.00%)      conflict = backbone_propagate_literal (
220,009,470 ( 0.09%)  => build/../src/backbone.c:backbone_propagate_literal (832,299x)
 2,496,897 ( 0.00%)          solver, stop_early, watches, trail, values, assigned, *propagate++);
         .           
 2,029,728 ( 0.00%)    assert (solver->propagate <= propagate);
 3,044,592 ( 0.00%)    const unsigned propagated = propagate - solver->propagate;
 1,522,296 ( 0.00%)    solver->propagate = propagate;
         .           
 3,044,592 ( 0.00%)    ADD (backbone_propagations, propagated);
10,148,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_backbone_propagations (507,432x)
 3,044,592 ( 0.00%)    ADD (probing_propagations, propagated);
10,148,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_propagations (507,432x)
 3,044,592 ( 0.00%)    ADD (propagations, propagated);
10,148,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_propagations (507,432x)
         .           
 1,522,296 ( 0.00%)    const uint64_t ticks = solver->ticks;
         .           
 3,044,592 ( 0.00%)    ADD (backbone_ticks, ticks);
10,148,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_backbone_ticks (507,432x)
 3,044,592 ( 0.00%)    ADD (probing_ticks, ticks);
10,148,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_ticks (507,432x)
 3,044,592 ( 0.00%)    ADD (ticks, ticks);
10,148,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_ticks (507,432x)
         .           
   507,432 ( 0.00%)    return conflict;
 1,014,864 ( 0.00%)  }
         .           
         .           static inline void backbone_backtrack (kissat *solver,
         .                                                  unsigned_array *trail, value *values,
         .                                                  unsigned *saved,
     5,728 ( 0.00%)                                         unsigned decision_level) {
     2,864 ( 0.00%)    assert (decision_level <= solver->level);
     2,148 ( 0.00%)    unsigned *end_trail = END_ARRAY (*trail);
     2,148 ( 0.00%)    assert (saved != end_trail);
     4,296 ( 0.00%)    LOG ("backbone backtracking to trail level %zu and decision level %u",
         .                  (size_t) (saved - BEGIN_ARRAY (*trail)), decision_level);
 2,510,946 ( 0.00%)    while (saved != end_trail) {
 3,345,064 ( 0.00%)      const unsigned lit = *--end_trail;
 6,690,128 ( 0.00%)      const unsigned not_lit = NOT (lit);
 5,017,596 ( 0.00%)      LOG ("backbone unassign %s", LOGLIT (lit));
 5,017,596 ( 0.00%)      assert (values[lit] > 0);
 5,017,596 ( 0.00%)      assert (values[not_lit] < 0);
 7,526,394 ( 0.00%)      values[lit] = values[not_lit] = 0;
         .             }
    10,740 ( 0.00%)    SET_END_OF_ARRAY (solver->trail, saved);
     2,148 ( 0.00%)    solver->level = decision_level;
     2,148 ( 0.00%)    solver->propagate = saved;
     2,148 ( 0.00%)  }
         .           
     4,263 ( 0.00%)  static unsigned backbone_analyze (kissat *solver, clause *conflict) {
     1,218 ( 0.00%)    assert (conflict);
     3,654 ( 0.00%)    LOGCLS (conflict, "backbone analyzing");
     2,436 ( 0.00%)    assert (conflict->size == 2);
         .           
     1,827 ( 0.00%)    assigned *const assigned = solver->assigned;
         .           
     9,744 ( 0.00%)    kissat_push_analyzed (solver, assigned, IDX (conflict->lits[0]));
    29,232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (609x)
     9,744 ( 0.00%)    kissat_push_analyzed (solver, assigned, IDX (conflict->lits[1]));
    29,232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (609x)
         .           
     1,827 ( 0.00%)    const unsigned *t = END_ARRAY (solver->trail);
         .           
     3,947 ( 0.00%)    for (;;) {
    23,440 ( 0.00%)      assert (t > BEGIN_ARRAY (solver->trail));
         .           
    23,440 ( 0.00%)      unsigned lit = *--t;
         .           
    46,880 ( 0.00%)      const unsigned lit_idx = IDX (lit);
    35,160 ( 0.00%)      const struct assigned *a = assigned + lit_idx;
    35,160 ( 0.00%)      if (!a->analyzed)
     3,947 ( 0.00%)        continue;
         .           
    11,478 ( 0.00%)      LOG ("backbone analyzing %s", LOGLIT (lit));
     5,739 ( 0.00%)      const unsigned reason = a->reason;
     3,826 ( 0.00%)      assert (reason != UNIT_REASON);
     3,826 ( 0.00%)      assert (reason != DECISION_REASON);
    15,304 ( 0.00%)      const unsigned reason_idx = IDX (reason);
    11,478 ( 0.00%)      const struct assigned *b = assigned + reason_idx;
    11,478 ( 0.00%)      if (!b->analyzed) {
     7,824 ( 0.00%)        LOG ("reason %s of %s not yet analyzed", LOGLIT (reason),
         .                      LOGLIT (lit));
     9,128 ( 0.00%)        kissat_push_analyzed (solver, assigned, reason_idx);
    62,592 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (1,304x)
         .               } else {
     3,654 ( 0.00%)        LOG ("backbone UIP %s", LOGLIT (reason));
     1,827 ( 0.00%)        kissat_reset_only_analyzed_literals (solver);
   124,803 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/analyze.c:kissat_reset_only_analyzed_literals (609x)
     1,218 ( 0.00%)        return reason;
         .               }
         .             }
     1,827 ( 0.00%)  }
         .           
         .           #ifndef NDEBUG
         .           
         .           static void
        65 ( 0.00%)  check_large_clauses_watched_after_binary_clauses (kissat *solver) {
 2,561,725 ( 0.00%)    for (all_literals (lit)) {
   640,402 ( 0.00%)      bool large = false;
72,898,000 ( 0.03%)      for (all_binary_blocking_watches (watch, WATCHES (lit)))
 5,123,216 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (640,402x)
 5,123,216 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (640,402x)
14,342,062 ( 0.01%)        if (watch.type.binary)
 1,867,992 ( 0.00%)          assert (!large);
         .                 else
 3,001,768 ( 0.00%)          large = true;
         .             }
        52 ( 0.00%)  }
         .           
         .           #endif
         .           
       130 ( 0.00%)  static unsigned compute_backbone (kissat *solver) {
         .           #ifndef NDEBUG
        52 ( 0.00%)    if (solver->large_clauses_watched_after_binary_clauses)
        39 ( 0.00%)      check_large_clauses_watched_after_binary_clauses (solver);
105,558,498 ( 0.04%)  => build/../src/backbone.c:check_large_clauses_watched_after_binary_clauses (13x)
         .           #endif
        13 ( 0.00%)    size_t failed = 0;
         .             unsigneds units;
         .             unsigneds candidates;
        65 ( 0.00%)    INIT_STACK (candidates);
        65 ( 0.00%)    INIT_STACK (units);
        65 ( 0.00%)    schedule_backbone_candidates (solver, &candidates);
40,268,304 ( 0.02%)  => build/../src/backbone.c:schedule_backbone_candidates (13x)
         .           #ifndef QUIET
        65 ( 0.00%)    const size_t scheduled = SIZE_STACK (candidates);
         .           #endif
         .           #if defined(METRICS) && (!defined(QUIET) || !defined(NDEBUG))
        39 ( 0.00%)    const uint64_t implied_before = solver->statistics.backbone_implied;
         .           #endif
        39 ( 0.00%)    unsigned_array *trail = &solver->trail;
        39 ( 0.00%)    value *values = solver->values;
        39 ( 0.00%)    flags *flags = solver->flags;
        39 ( 0.00%)    assigned *assigned = solver->assigned;
         .           
        65 ( 0.00%)    assert (kissat_propagated (solver));
       312 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (13x)
        65 ( 0.00%)    assert (kissat_trail_flushed (solver));
       234 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_trail_flushed (13x)
         .           
        13 ( 0.00%)    unsigned inconsistent = INVALID_LIT;
         .           
     1,795 ( 0.00%)    SET_EFFORT_LIMIT (ticks_limit, backbone, backbone_ticks);
    89,016 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (102x)
       559 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (13x)
     1,222 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (26x)
        52 ( 0.00%)    size_t round_limit = GET_OPTION (backbonerounds);
        52 ( 0.00%)    assert (solver->statistics.backbone_computations);
        65 ( 0.00%)    round_limit *= solver->statistics.backbone_computations;
        52 ( 0.00%)    const size_t max_rounds = GET_OPTION (backbonemaxrounds);
        39 ( 0.00%)    if (round_limit > max_rounds)
         6 ( 0.00%)      round_limit = max_rounds;
         .           
        13 ( 0.00%)    size_t round = 0;
         .           
        95 ( 0.00%)    for (;;) {
       324 ( 0.00%)      if (round >= round_limit) {
         .                 kissat_very_verbose (solver, "backbone round limit %zu hit", round);
         .                 break;
         .               }
       324 ( 0.00%)      const uint64_t ticks = solver->statistics.backbone_ticks;
       324 ( 0.00%)      if (ticks > ticks_limit) {
         7 ( 0.00%)        kissat_very_verbose (solver,
        43 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (1x)
         .                                      "backbone ticks limit %" PRIu64 " hit "
         .                                      "after %" PRIu64 " ticks",
         .                                      ticks_limit, ticks);
         1 ( 0.00%)        break;
         .               }
       214 ( 0.00%)      size_t previous = failed;
       535 ( 0.00%)      assert (!solver->inconsistent);
     1,177 ( 0.00%)      if (TERMINATED (backbone_terminated_1))
     2,354 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (107x)
         .                 break;
       107 ( 0.00%)      round++;
       428 ( 0.00%)      INC (backbone_rounds);
     1,605 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_backbone_rounds (107x)
       642 ( 0.00%)      LOG ("starting backbone round %zu", round);
       214 ( 0.00%)      unsigned *const begin_candidates = BEGIN_STACK (candidates);
       428 ( 0.00%)      assert (!solver->level);
         .           #if !defined(QUIET) && defined(METRICS)
       107 ( 0.00%)      size_t decisions = 0;
       321 ( 0.00%)      uint64_t propagated = solver->statistics.backbone_propagations;
         .           #endif
       321 ( 0.00%)      unsigned active_before = solver->active;
         .               {
       214 ( 0.00%)        unsigned *q = begin_candidates;
       214 ( 0.00%)        const unsigned *p = begin_candidates;
       214 ( 0.00%)        const unsigned *const end_candidates = END_STACK (candidates);
 3,052,806 ( 0.00%)        while (p != end_candidates) {
 5,087,125 ( 0.00%)          assert (!solver->inconsistent);
10,174,250 ( 0.00%)          const unsigned probe = *q++ = *p++;
 5,087,125 ( 0.00%)          const value value = values[probe];
 2,034,850 ( 0.00%)          if (value > 0) {
   102,293 ( 0.00%)            q--;
   613,758 ( 0.00%)            LOG ("removing satisfied backbone probe %s", LOGLIT (probe));
   818,344 ( 0.00%)            const unsigned idx = IDX (probe);
   511,465 ( 0.00%)            struct flags *f = flags + idx;
   920,637 ( 0.00%)            if (NEGATED (probe))
   364,175 ( 0.00%)              f->backbone1 = false;
         .                     else
   117,832 ( 0.00%)              f->backbone0 = false;
    29,458 ( 0.00%)            continue;
         .                   }
 1,830,264 ( 0.00%)          if (value < 0) {
 3,266,464 ( 0.00%)            const unsigned idx = IDX (probe);
 2,449,848 ( 0.00%)            struct assigned *a = assigned + idx;
 1,633,232 ( 0.00%)            if (a->level)
 2,449,710 ( 0.00%)              LOG ("skipping falsified backbone probe %s", LOGLIT (probe));
         .                     else {
       138 ( 0.00%)              LOG ("removing root-level falsified backbone probe %s",
         .                            LOGLIT (probe));
        23 ( 0.00%)              q--;
         .                     }
        23 ( 0.00%)            continue;
         .                   }
 2,027,296 ( 0.00%)          if (solver->statistics.backbone_ticks > ticks_limit)
         2 ( 0.00%)            break;
 5,575,053 ( 0.00%)          if (TERMINATED (backbone_terminated_2))
11,150,106 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (506,823x)
         .                     break;
 1,520,469 ( 0.00%)          const unsigned level = solver->level;
 1,520,469 ( 0.00%)          unsigned *const saved = END_ARRAY (*trail);
 1,013,646 ( 0.00%)          assert (level != UINT_MAX);
         .           #if !defined(QUIET) && defined(METRICS)
   506,823 ( 0.00%)          decisions++;
         .           #endif
 2,027,292 ( 0.00%)          solver->level = level + 1;
 2,027,292 ( 0.00%)          INC (backbone_probes);
 7,602,345 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_backbone_probes (506,823x)
 4,561,407 ( 0.00%)          backbone_assign (solver, trail, values, assigned, probe,
34,463,964 ( 0.01%)  => build/../src/backbone.c:backbone_assign (506,823x)
         .                                    DECISION_REASON);
 3,040,938 ( 0.00%)          LOG ("backbone assume %s", LOGLIT (probe));
         .                   clause *conflict =
 3,547,761 ( 0.00%)              backbone_propagate (solver, trail, values, assigned);
340,092,961 ( 0.14%)  => build/../src/backbone.c:backbone_propagate (506,823x)
 1,013,646 ( 0.00%)          if (!conflict) {
 3,037,284 ( 0.00%)            LOG ("propagating backbone probe %s successful", LOGLIT (probe));
         .                     continue;
         .                   }
         .           
       609 ( 0.00%)          failed++;
     2,436 ( 0.00%)          INC (backbone_units);
     9,135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_backbone_units (609x)
       609 ( 0.00%)          q--;
         .           
     3,654 ( 0.00%)          LOG ("propagating backbone probe %s failed", LOGLIT (probe));
     3,654 ( 0.00%)          unsigned uip = backbone_analyze (solver, conflict);
   541,153 ( 0.00%)  => build/../src/backbone.c:backbone_analyze (609x)
     4,872 ( 0.00%)          unsigned not_uip = NOT (uip);
     4,872 ( 0.00%)          backbone_backtrack (solver, trail, values, saved, level);
   308,427 ( 0.00%)  => build/../src/backbone.c:backbone_backtrack (609x)
         .           
     5,771 ( 0.00%)          PUSH_STACK (units, not_uip);
    13,750 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (29x)
     5,481 ( 0.00%)          backbone_assign (solver, trail, values, assigned, not_uip,
    41,412 ( 0.00%)  => build/../src/backbone.c:backbone_assign (609x)
         .                                    UNIT_REASON);
     3,654 ( 0.00%)          LOG ("backbone forced assign %s", LOGLIT (not_uip));
     4,872 ( 0.00%)          assert (failed == SIZE_STACK (units));
         .           
     4,263 ( 0.00%)          conflict = backbone_propagate (solver, trail, values, assigned);
   218,483 ( 0.00%)  => build/../src/backbone.c:backbone_propagate (609x)
     1,218 ( 0.00%)          if (conflict) {
         .                     LOG ("propagating backbone forced %s failed", LOGLIT (not_uip));
         .                     inconsistent = not_uip;
         .                     break;
         .                   }
         .           
     3,654 ( 0.00%)          LOG ("propagating backbone forced %s successful", LOGLIT (not_uip));
         .                 }
         .           #ifndef QUIET
       428 ( 0.00%)        size_t remain = end_candidates - p;
       214 ( 0.00%)        if (remain)
        26 ( 0.00%)          kissat_extremely_verbose (solver,
        51 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (1x)
        34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (1x)
         .                                             "backbone round %zu aborted with "
         .                                             "%zu candidates %.0f%% remaining",
         .                                             round, remain,
         .                                             kissat_percent (remain, scheduled));
         .                 else
       742 ( 0.00%)          kissat_extremely_verbose (solver,
     4,558 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (106x)
         .                                             "backbone round %zu completed with "
         .                                             "all %zu scheduled candidates tried",
         .                                             round, scheduled);
         .           #endif
    25,975 ( 0.00%)        while (p != end_candidates)
    68,128 ( 0.00%)          *q++ = *p++;
         .           
     1,163 ( 0.00%)        SET_END_OF_STACK (candidates, q);
         .               }
       214 ( 0.00%)      if (inconsistent == INVALID_LIT) {
       642 ( 0.00%)        LOG ("flushing satisfied probe candidates");
       214 ( 0.00%)        unsigned *q = begin_candidates;
       214 ( 0.00%)        const unsigned *p = begin_candidates;
       214 ( 0.00%)        const unsigned *const end_candidates = END_STACK (candidates);
 2,769,476 ( 0.00%)        while (p != end_candidates) {
 9,230,160 ( 0.00%)          const unsigned probe = *q++ = *p++;
 4,615,080 ( 0.00%)          const value value = values[probe];
 1,846,032 ( 0.00%)          if (value > 0) {
   506,214 ( 0.00%)            q--;
 3,037,284 ( 0.00%)            LOG ("removing satisfied backbone probe %s", LOGLIT (probe));
 4,049,712 ( 0.00%)            const unsigned idx = IDX (probe);
 2,531,070 ( 0.00%)            struct flags *f = flags + idx;
 4,555,926 ( 0.00%)            if (NEGATED (probe))
 1,178,540 ( 0.00%)              f->backbone1 = false;
         .                     else
 1,082,024 ( 0.00%)              f->backbone0 = false;
   270,506 ( 0.00%)            continue;
         .                   }
   833,604 ( 0.00%)          if (value < 0) {
 2,449,788 ( 0.00%)            LOG ("keeping falsified probe %s", LOGLIT (probe));
         .                     continue;
         .                   }
    17,008 ( 0.00%)          assert (!value);
    51,024 ( 0.00%)          LOG ("keeping unassigned probe %s", LOGLIT (probe));
         .                 }
       642 ( 0.00%)        LOG ("flushed %zu probe candidates",
         .                      (size_t) (q - BEGIN_STACK (candidates)));
     1,175 ( 0.00%)        SET_END_OF_STACK (candidates, q);
         .               }
       642 ( 0.00%)      if (!EMPTY_ARRAY (*trail))
       856 ( 0.00%)        backbone_backtrack (solver, trail, values, BEGIN_ARRAY (*trail), 0);
34,851,261 ( 0.01%)  => build/../src/backbone.c:backbone_backtrack (107x)
       535 ( 0.00%)      if (inconsistent == INVALID_LIT && previous < failed) {
     2,562 ( 0.00%)        for (size_t i = previous; i < failed; i++) {
     7,308 ( 0.00%)          const unsigned unit = PEEK_STACK (units, i);
     3,654 ( 0.00%)          LOG ("assigning backbone unit %s", LOGLIT (unit));
     3,045 ( 0.00%)          kissat_learned_unit (solver, unit);
 7,204,785 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (609x)
         .                 }
       147 ( 0.00%)        if (kissat_probing_propagate (solver, 0, true))
   403,494 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (21x)
         .                   break;
         .               }
       428 ( 0.00%)      assert (solver->active <= active_before);
       535 ( 0.00%)      unsigned implied = active_before - solver->active;
         .               assert (failed <= failed);
       642 ( 0.00%)      ADD (backbone_implied, implied);
     2,140 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_backbone_implied (107x)
         .           #ifndef QUIET
         .           #ifdef METRICS
       428 ( 0.00%)      propagated = solver->statistics.backbone_propagations - propagated;
     2,675 ( 0.00%)      kissat_very_verbose (solver,
     5,457 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (107x)
     1,819 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (107x)
         .                                    "backbone round %zu with %zu decisions "
         .                                    "(%.2f propagations per decision)",
         .                                    round, decisions,
         .                                    kissat_average (propagated, decisions));
         .           #endif
       535 ( 0.00%)      size_t left = SIZE_STACK (candidates);
     3,317 ( 0.00%)      kissat_very_verbose (solver,
     5,457 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (107x)
     3,638 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (107x)
         .                                    "backbone round %zu produced %zu failed literals"
         .                                    " %u implied (%zu candidates left %.0f%%)",
         .                                    round, failed - previous, implied, left,
         .                                    kissat_percent (left, scheduled));
         .           #endif
       214 ( 0.00%)      if (inconsistent != INVALID_LIT)
         .                 break;
       428 ( 0.00%)      if (EMPTY_STACK (candidates))
        12 ( 0.00%)        break;
         .             }
         .           
        26 ( 0.00%)    if (inconsistent != INVALID_LIT && !solver->inconsistent) {
         .               LOG ("assuming forced unit %s", LOGLIT (inconsistent));
         .               kissat_learned_unit (solver, inconsistent);
         .               (void) kissat_probing_propagate (solver, 0, true);
         .               assert (solver->inconsistent);
         .             }
       195 ( 0.00%)    RELEASE_STACK (units);
     1,764 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (13x)
        52 ( 0.00%)    if (solver->inconsistent)
         .               kissat_phase (solver, "backbone", GET (backbone_computations),
         .                             "inconsistent binary clauses");
         .             else {
        65 ( 0.00%)      keep_backbone_candidates (solver, &candidates);
 8,696,199 ( 0.00%)  => build/../src/backbone.c:keep_backbone_candidates (13x)
         .           #if defined(METRICS) && (!defined(QUIET) || !defined(NDEBUG))
        52 ( 0.00%)      assert (implied_before <= solver->statistics.backbone_implied);
         .           #endif
         .           #if defined(METRICS) && !defined(QUIET)
        26 ( 0.00%)      const uint64_t total_implied =
        26 ( 0.00%)          solver->statistics.backbone_implied - implied_before;
       260 ( 0.00%)      kissat_phase (solver, "backbone", GET (backbone_computations),
       559 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (13x)
        91 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_backbone_computations (13x)
         .                             "found %zu backbone literals %" PRIu64
         .                             " implied in %zu rounds",
         .                             failed, total_implied, round);
         .           #endif
         .             }
       195 ( 0.00%)    RELEASE_STACK (candidates);
     3,974 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (13x)
        13 ( 0.00%)    return failed;
       104 ( 0.00%)  }
         .           
        65 ( 0.00%)  void kissat_binary_clauses_backbone (kissat *solver) {
        52 ( 0.00%)    if (solver->inconsistent)
         .               return;
        52 ( 0.00%)    if (!GET_OPTION (backbone))
         .               return;
       143 ( 0.00%)    if (TERMINATED (backbone_terminated_3))
       286 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (13x)
         .               return;
        52 ( 0.00%)    assert (solver->watching);
        52 ( 0.00%)    assert (solver->probing);
        52 ( 0.00%)    assert (!solver->level);
       182 ( 0.00%)    START (backbone);
     1,248 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (13x)
        52 ( 0.00%)    INC (backbone_computations);
       195 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_backbone_computations (13x)
         .           #if !defined(NDEBUG) || defined(METRICS)
        65 ( 0.00%)    assert (!solver->backbone_computing);
        26 ( 0.00%)    solver->backbone_computing = true;
         .           #endif
         .           #ifndef QUIET
         .             const unsigned failed =
         .           #endif
        52 ( 0.00%)        compute_backbone (solver);
702,723,514 ( 0.30%)  => build/../src/backbone.c:compute_backbone (13x)
       104 ( 0.00%)    REPORT (!failed, 'b');
   246,305 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (13x)
         .           #if !defined(NDEBUG) || defined(METRICS)
        52 ( 0.00%)    assert (solver->backbone_computing);
        26 ( 0.00%)    solver->backbone_computing = false;
         .           #endif
       195 ( 0.00%)    STOP (backbone);
     1,482 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (13x)
        26 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/ands.c
--------------------------------------------------------------------------------
Ir                 

        .           #include "ands.h"
        .           #include "eliminate.h"
        .           #include "gates.h"
        .           #include "inline.h"
        .           
        .           bool kissat_find_and_gate (kissat *solver, unsigned lit,
  648,242 ( 0.00%)                             unsigned negative) {
  370,424 ( 0.00%)    if (!GET_OPTION (ands))
        .               return false;
  555,636 ( 0.00%)    size_t marked = kissat_mark_binaries (solver, lit);
22,001,910 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/gates.c:kissat_mark_binaries (92,606x)
  185,212 ( 0.00%)    if (!marked)
  130,198 ( 0.00%)      return false;
   55,014 ( 0.00%)    if (marked < 2) {
   84,285 ( 0.00%)      kissat_unmark_binaries (solver, lit);
3,459,335 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/gates.c:kissat_unmark_binaries (16,857x)
   33,714 ( 0.00%)      return false;
        .             }
        .           
   85,200 ( 0.00%)    unsigned not_lit = NOT (lit);
  117,150 ( 0.00%)    watches *not_watches = &WATCHES (not_lit);
        .           
   31,950 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
   31,950 ( 0.00%)    value *marks = solver->marks;
   31,950 ( 0.00%)    const value *const values = solver->values;
        .           
   10,650 ( 0.00%)    clause *base = 0;
2,639,179 ( 0.00%)    for (all_binary_large_watches (watch, *not_watches)) {
   85,200 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (10,650x)
   85,200 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (10,650x)
1,387,980 ( 0.00%)      if (watch.type.binary)
   15,814 ( 0.00%)        continue;
  993,543 ( 0.00%)      const reference ref = watch.large.ref;
3,311,810 ( 0.00%)      assert (ref < SIZE_STACK (solver->arena));
1,987,086 ( 0.00%)      clause *c = (clause *) (arena + ref);
2,318,267 ( 0.00%)      assert (!c->garbage);
  662,362 ( 0.00%)      base = c;
6,702,834 ( 0.00%)      for (all_literals_in_clause (other, c)) {
1,305,603 ( 0.00%)        if (other == not_lit)
   68,999 ( 0.00%)          continue;
1,831,010 ( 0.00%)        const value value = values[other];
  732,404 ( 0.00%)        if (value > 0) {
        .                   kissat_eliminate_clause (solver, c, INVALID_LIT);
        .                   base = 0;
        .                   break;
        .                 }
  732,404 ( 0.00%)        if (value < 0)
      482 ( 0.00%)          continue;
2,927,688 ( 0.00%)        const unsigned not_other = NOT (other);
1,829,805 ( 0.00%)        signed char mark = marks[not_other];
  731,922 ( 0.00%)        if (mark)
   38,139 ( 0.00%)          continue;
  327,822 ( 0.00%)        base = 0;
  327,822 ( 0.00%)        break;
        .               }
  662,362 ( 0.00%)      if (base)
    3,359 ( 0.00%)        break;
        .             }
   21,300 ( 0.00%)    if (!base) {
   36,455 ( 0.00%)      kissat_unmark_binaries (solver, lit);
3,646,947 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/gates.c:kissat_unmark_binaries (7,291x)
   14,582 ( 0.00%)      return false;
        .             }
   20,154 ( 0.00%)    LOGCLS (base, "found and gate %s base clause", LOGLIT (not_lit));
  145,816 ( 0.00%)    for (all_literals_in_clause (other, base)) {
   40,899 ( 0.00%)      if (other == not_lit)
    3,359 ( 0.00%)        continue;
   61,644 ( 0.00%)      if (values[other])
      176 ( 0.00%)        continue;
   80,784 ( 0.00%)      const unsigned not_other = NOT (other);
   60,588 ( 0.00%)      assert (marks[not_other]);
   50,490 ( 0.00%)      marks[not_other] = 0;
        .             }
   10,077 ( 0.00%)    watch tmp = kissat_binary_watch (0);
   73,898 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (3,359x)
   36,949 ( 0.00%)    watches *watches = &WATCHES (lit);
  310,429 ( 0.00%)    for (all_binary_large_watches (watch, *watches)) {
   26,872 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (3,359x)
   26,872 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (3,359x)
  171,350 ( 0.00%)      if (!watch.type.binary)
   23,016 ( 0.00%)        continue;
   33,762 ( 0.00%)      const unsigned other = watch.binary.lit;
   78,778 ( 0.00%)      assert (!solver->values[other]);
   67,524 ( 0.00%)      if (marks[other]) {
    4,464 ( 0.00%)        marks[other] = 0;
    1,116 ( 0.00%)        continue;
        .               }
   81,104 ( 0.00%)      tmp.binary.lit = other;
  415,691 ( 0.00%)      PUSH_STACK (solver->gates[negative], tmp);
      311 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
        .             }
   26,872 ( 0.00%)    tmp = kissat_large_watch (kissat_reference_clause (solver, base));
  377,999 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (3,359x)
   77,257 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_large_watch (3,359x)
  167,950 ( 0.00%)    PUSH_STACK (solver->gates[!negative], tmp);
   13,436 ( 0.00%)    solver->gate_eliminated = GATE_ELIMINATED (ands);
   13,436 ( 0.00%)    INC (ands_extracted);
   50,385 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_ands_extracted (3,359x)
    3,359 ( 0.00%)    return true;
  185,212 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/inlinevector.h
--------------------------------------------------------------------------------
Ir                   

          .           #ifndef _inlinevector_h_INCLUDED
          .           #define _inlinevector_h_INCLUDED
          .           
          .           #include "internal.h"
          .           
          .           static inline unsigned *kissat_begin_vector (kissat *solver,
686,251,620 ( 0.29%)                                               vector *vector) {
          .           #ifdef COMPACT
          .             return BEGIN_STACK (solver->vectors.stack) + vector->offset;
          .           #else
          .             (void) solver;
343,125,810 ( 0.15%)    return vector->begin;
          .           #endif
343,125,810 ( 0.15%)  }
          .           
610,947,584 ( 0.26%)  static inline unsigned *kissat_end_vector (kissat *solver, vector *vector) {
          .           #ifdef COMPACT
          .             return kissat_begin_vector (solver, vector) + vector->size;
          .           #else
          .             (void) solver;
305,473,792 ( 0.13%)    return vector->end;
          .           #endif
305,473,792 ( 0.13%)  }
          .           
          .           static inline const unsigned *
  3,329,196 ( 0.00%)  kissat_begin_const_vector (kissat *solver, const vector *vector) {
          .           #ifdef COMPACT
          .             return BEGIN_STACK (solver->vectors.stack) + vector->offset;
          .           #else
          .             (void) solver;
  1,664,598 ( 0.00%)    return vector->begin;
          .           #endif
  1,664,598 ( 0.00%)  }
          .           
          .           static inline const unsigned *
  3,329,196 ( 0.00%)  kissat_end_const_vector (kissat *solver, const vector *vector) {
          .           #ifdef COMPACT
          .             return kissat_begin_const_vector (solver, vector) + vector->size;
          .           #else
          .             (void) solver;
  1,664,598 ( 0.00%)    return vector->end;
          .           #endif
  1,664,598 ( 0.00%)  }
          .           
          .           #if defined(LOGGING) || defined(TEST_VECTOR)
          .           
  5,223,636 ( 0.00%)  static inline size_t kissat_offset_vector (kissat *solver, vector *vector) {
          .           #ifdef COMPACT
          .             (void) solver;
          .             return vector->offset;
          .           #else
  3,917,727 ( 0.00%)    unsigned *begin_vector = vector->begin;
  3,917,727 ( 0.00%)    unsigned *begin_stack = BEGIN_STACK (solver->vectors.stack);
  7,835,235 ( 0.00%)    return begin_vector ? begin_vector - begin_stack : 0;
          .           #endif
  2,611,818 ( 0.00%)  }
          .           
          .           #endif
          .           
356,597,475 ( 0.15%)  static inline size_t kissat_size_vector (const vector *vector) {
          .           #ifdef COMPACT
          .             return vector->size;
          .           #else
832,060,775 ( 0.35%)    return vector->end - vector->begin;
          .           #endif
237,731,650 ( 0.10%)  }
          .           
131,827,677 ( 0.06%)  static inline bool kissat_empty_vector (vector *vector) {
          .           #ifdef COMPACT
          .             return !vector->size;
          .           #else
263,655,354 ( 0.11%)    return vector->end == vector->begin;
          .           #endif
 87,885,118 ( 0.04%)  }
          .           
     46,244 ( 0.00%)  static inline void kissat_inc_usable (kissat *solver) {
     46,244 ( 0.00%)    assert (MAX_SECTOR > solver->vectors.usable);
     57,805 ( 0.00%)    solver->vectors.usable++;
     34,683 ( 0.00%)  }
          .           
 71,305,440 ( 0.03%)  static inline void kissat_add_usable (kissat *solver, size_t inc) {
 99,827,616 ( 0.04%)    assert (MAX_SECTOR - inc >= solver->vectors.usable);
 85,566,528 ( 0.04%)    solver->vectors.usable += inc;
 42,783,264 ( 0.02%)  }
          .           
          .           static inline unsigned *kissat_last_vector_pointer (kissat *solver,
          .                                                               vector *vector) {
          .             assert (!kissat_empty_vector (vector));
          .           #ifdef COMPACT
          .             assert (vector->size);
          .             unsigned *begin = kissat_begin_vector (solver, vector);
          .             return begin + vector->size - 1;
-- line 92 ----------------------------------------
-- line 108 ----------------------------------------
          .             *--vector->end = INVALID_VECTOR_ELEMENT;
          .             (void) solver;
          .           #endif
          .             kissat_inc_usable (solver);
          .           }
          .           
          .           #endif
          .           
  3,833,010 ( 0.00%)  static inline void kissat_release_vector (kissat *solver, vector *vector) {
  4,599,612 ( 0.00%)    kissat_resize_vector (solver, vector, 0);
 67,347,223 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (766,602x)
  2,299,806 ( 0.00%)  }
          .           
340,167,072 ( 0.14%)  static inline void kissat_dec_usable (kissat *solver) {
340,167,072 ( 0.14%)    assert (solver->vectors.usable > 0);
425,208,840 ( 0.18%)    solver->vectors.usable--;
255,125,304 ( 0.11%)  }
          .           
          .           static inline void kissat_push_vectors (kissat *solver, vector *vector,
517,996,722 ( 0.22%)                                          unsigned e) {
258,998,361 ( 0.11%)    unsigneds *stack = &solver->vectors.stack;
172,665,574 ( 0.07%)    assert (e != INVALID_VECTOR_ELEMENT);
172,665,574 ( 0.07%)    if (
          .           #ifdef COMPACT
          .                 !vector->size && !vector->offset
          .           #else
172,665,574 ( 0.07%)        !vector->begin
          .           #endif
          .             ) {
  3,867,402 ( 0.00%)      if (EMPTY_STACK (*stack))
        264 ( 0.00%)        PUSH_STACK (*stack, 0);
      3,221 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (11x)
  3,867,402 ( 0.00%)      if (FULL_STACK (*stack)) {
        438 ( 0.00%)        unsigned *end = kissat_enlarge_vector (solver, vector);
 53,456,056 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_enlarge_vector (73x)
        292 ( 0.00%)        assert (*end == INVALID_VECTOR_ELEMENT);
        219 ( 0.00%)        *end = e;
        292 ( 0.00%)        kissat_dec_usable (solver);
      1,168 ( 0.00%)  => build/../src/inlinevector.h:kissat_dec_usable (73x)
          .               } else {
          .           #ifdef COMPACT
          .                 assert ((uint64_t) SIZE_STACK (*stack) < MAX_VECTORS);
          .                 vector->offset = SIZE_STACK (*stack);
          .                 assert (vector->offset);
          .                 *stack->end++ = e;
          .           #else
  3,866,964 ( 0.00%)        assert (stack->end < stack->allocated);
  7,089,434 ( 0.00%)        *(vector->begin = stack->end++) = e;
          .           #endif
          .               }
          .           #if !defined(COMPACT)
  3,222,835 ( 0.00%)      vector->end = vector->begin;
          .           #endif
          .             } else {
514,129,320 ( 0.22%)      unsigned *end = kissat_end_vector (solver, vector);
685,505,760 ( 0.29%)  => build/../src/inlinevector.h:kissat_end_vector (85,688,220x)
342,752,880 ( 0.14%)      if (end == END_STACK (*stack)) {
  3,879,180 ( 0.00%)        if (FULL_STACK (*stack)) {
         30 ( 0.00%)          end = kissat_enlarge_vector (solver, vector);
  2,317,825 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_enlarge_vector (5x)
         20 ( 0.00%)          assert (*end == INVALID_VECTOR_ELEMENT);
         15 ( 0.00%)          *end = e;
         20 ( 0.00%)          kissat_dec_usable (solver);
         80 ( 0.00%)  => build/../src/inlinevector.h:kissat_dec_usable (5x)
          .                 } else
  5,172,200 ( 0.00%)          *stack->end++ = e;
          .               } else {
340,166,760 ( 0.14%)        if (*end != INVALID_VECTOR_ELEMENT)
  7,834,986 ( 0.00%)          end = kissat_enlarge_vector (solver, vector);
500,938,295 ( 0.21%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_enlarge_vector (1,305,831x)
340,166,760 ( 0.14%)        assert (*end == INVALID_VECTOR_ELEMENT);
255,125,070 ( 0.11%)        *end = e;
255,125,070 ( 0.11%)        kissat_dec_usable (solver);
1,360,667,040 ( 0.58%)  => build/../src/inlinevector.h:kissat_dec_usable (85,041,690x)
          .               }
          .             }
          .           #ifndef COMPACT
431,663,935 ( 0.18%)    vector->end++;
          .           #else
          .             vector->size++;
          .           #endif
          .             kissat_check_vectors (solver);
258,998,361 ( 0.11%)  }
          .           
          .           #ifdef TEST_VECTOR
          .           
          .           #define all_vector(E, V) \
          .             unsigned E, *E##_PTR = kissat_begin_vector (solver, &V), \
          .                         *const E##_END = kissat_end_vector (solver, &V); \
          .             E##_PTR != E##_END && (E = *E##_PTR, true); \
          .             E##_PTR++
-- line 189 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/flags.c
--------------------------------------------------------------------------------
Ir                  

         .           #include "inline.h"
         .           #include "inlineheap.h"
         .           #include "inlinequeue.h"
         .           
 2,533,435 ( 0.00%)  static inline void activate_literal (kissat *solver, unsigned lit) {
 4,053,496 ( 0.00%)    const unsigned idx = IDX (lit);
 5,066,870 ( 0.00%)    flags *f = FLAGS (idx);
 2,533,435 ( 0.00%)    if (f->active)
   461,643 ( 0.00%)      return;
   270,264 ( 0.00%)    lit = STRIP (lit);
   270,264 ( 0.00%)    LOG ("activating %s", LOGVAR (idx));
   180,176 ( 0.00%)    f->active = true;
   270,264 ( 0.00%)    assert (!f->fixed);
   315,308 ( 0.00%)    assert (!f->eliminated);
   225,220 ( 0.00%)    solver->active++;
   180,176 ( 0.00%)    INC (variables_activated);
   675,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_variables_activated (45,044x)
   225,220 ( 0.00%)    kissat_enqueue (solver, idx);
 8,017,820 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinequeue.h:kissat_enqueue (45,044x)
   540,528 ( 0.00%)    const double score = 1.0 - 1.0 / solver->statistics.variables_activated;
   360,352 ( 0.00%)    kissat_update_heap (solver, &solver->scores, idx, score);
 8,558,186 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_update_heap (45,044x)
   180,176 ( 0.00%)    if (solver->stable) {
     7,686 ( 0.00%)      const unsigned lit = LIT (idx);
    13,176 ( 0.00%)      if (!VALUE (lit))
     7,686 ( 0.00%)        kissat_push_heap (solver, &solver->scores, idx);
   327,939 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_push_heap (1,098x)
         .             }
   180,176 ( 0.00%)    assert (solver->unassigned < UINT_MAX);
   225,220 ( 0.00%)    solver->unassigned++;
   225,220 ( 0.00%)    kissat_mark_removed_literal (solver, lit);
 3,017,948 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (45,044x)
   225,220 ( 0.00%)    kissat_mark_added_literal (solver, lit);
 5,540,412 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (45,044x)
   540,528 ( 0.00%)    assert (!VALUE (lit));
 1,216,188 ( 0.00%)    assert (!VALUE (NOT (lit)));
   495,484 ( 0.00%)    assert (!SAVED (idx));
   495,484 ( 0.00%)    assert (!TARGET (idx));
   495,484 ( 0.00%)    assert (!BEST (idx));
 1,013,374 ( 0.00%)  }
         .           
         .           static inline void deactivate_variable (kissat *solver, flags *f,
   175,032 ( 0.00%)                                          unsigned idx) {
   204,204 ( 0.00%)    assert (solver->flags + idx == f);
   175,032 ( 0.00%)    LOG ("deactivating %s", LOGVAR (idx));
   145,860 ( 0.00%)    assert (f->active);
   157,565 ( 0.00%)    assert (f->eliminated || f->fixed);
   116,688 ( 0.00%)    f->active = false;
   116,688 ( 0.00%)    assert (solver->active > 0);
   145,860 ( 0.00%)    solver->active--;
   145,860 ( 0.00%)    kissat_dequeue (solver, idx);
 2,918,212 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinequeue.h:kissat_dequeue (29,172x)
   233,376 ( 0.00%)    if (kissat_heap_contains (SCORES, idx))
   594,636 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (29,172x)
    78,372 ( 0.00%)      kissat_pop_heap (solver, SCORES, idx);
 3,688,956 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlineheap.h:kissat_pop_heap (11,196x)
    87,516 ( 0.00%)  }
         .           
    15,942 ( 0.00%)  void kissat_activate_literal (kissat *solver, unsigned lit) {
    13,285 ( 0.00%)    activate_literal (solver, lit);
 2,378,464 ( 0.00%)  => build/../src/flags.c:activate_literal (2,657x)
     7,971 ( 0.00%)  }
         .           
         .           void kissat_activate_literals (kissat *solver, unsigned size,
 1,285,487 ( 0.00%)                                 unsigned *lits) {
 2,934,325 ( 0.00%)    for (unsigned i = 0; i < size; i++)
 4,536,270 ( 0.00%)      activate_literal (solver, lits[i]);
46,567,254 ( 0.02%)  => build/../src/flags.c:activate_literal (504,030x)
   734,564 ( 0.00%)  }
         .           
    14,046 ( 0.00%)  void kissat_mark_fixed_literal (kissat *solver, unsigned lit) {
    28,092 ( 0.00%)    assert (VALUE (lit) > 0);
    18,728 ( 0.00%)    const unsigned idx = IDX (lit);
    14,046 ( 0.00%)    LOG ("marking internal %s as fixed", LOGVAR (idx));
    23,410 ( 0.00%)    flags *f = FLAGS (idx);
    11,705 ( 0.00%)    assert (f->active);
    16,387 ( 0.00%)    assert (!f->eliminated);
    14,046 ( 0.00%)    assert (!f->fixed);
     9,364 ( 0.00%)    f->fixed = true;
    14,046 ( 0.00%)    deactivate_variable (solver, f, idx);
 1,125,776 ( 0.00%)  => build/../src/flags.c:deactivate_variable (2,341x)
     9,364 ( 0.00%)    INC (units);
    35,115 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_units (2,341x)
    14,046 ( 0.00%)    int elit = kissat_export_literal (solver, lit);
   144,486 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (2,341x)
     4,682 ( 0.00%)    assert (elit);
    30,589 ( 0.00%)    PUSH_STACK (solver->units, elit);
    22,335 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (12x)
    14,046 ( 0.00%)    LOG ("pushed external unit literal %d (internal %u)", elit, lit);
     7,023 ( 0.00%)  }
         .           
   160,986 ( 0.00%)  void kissat_mark_eliminated_variable (kissat *solver, unsigned idx) {
   187,817 ( 0.00%)    const unsigned lit = LIT (idx);
   321,972 ( 0.00%)    assert (!VALUE (lit));
   160,986 ( 0.00%)    LOG ("marking internal %s as eliminated", LOGVAR (idx));
   268,310 ( 0.00%)    flags *f = FLAGS (idx);
   134,155 ( 0.00%)    assert (f->active);
   187,817 ( 0.00%)    assert (!f->eliminated);
   160,986 ( 0.00%)    assert (!f->fixed);
   107,324 ( 0.00%)    f->eliminated = true;
   160,986 ( 0.00%)    deactivate_variable (solver, f, idx);
 7,858,081 ( 0.00%)  => build/../src/flags.c:deactivate_variable (26,831x)
   160,986 ( 0.00%)    int elit = kissat_export_literal (solver, lit);
 1,636,691 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (26,831x)
    53,662 ( 0.00%)    assert (elit);
    53,662 ( 0.00%)    assert (elit != INT_MIN);
   187,817 ( 0.00%)    unsigned eidx = ABS (elit);
   429,296 ( 0.00%)    import *import = &PEEK_STACK (solver->import, eidx);
   134,155 ( 0.00%)    assert (!import->eliminated);
   107,324 ( 0.00%)    assert (import->imported);
   482,958 ( 0.00%)    assert (STRIP (import->lit) == STRIP (lit));
   187,817 ( 0.00%)    size_t pos = SIZE_STACK (solver->eliminated);
    53,662 ( 0.00%)    assert (pos < (1u << 30));
   107,324 ( 0.00%)    import->lit = pos;
    53,662 ( 0.00%)    import->eliminated = true;
   322,141 ( 0.00%)    PUSH_STACK (solver->eliminated, (value) 0);
   509,874 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (13x)
   160,986 ( 0.00%)    LOG ("marked external variable %u as eliminated", eidx);
   107,324 ( 0.00%)    assert (solver->unassigned > 0);
   134,155 ( 0.00%)    solver->unassigned--;
    80,493 ( 0.00%)  }
         .           
         .           void kissat_mark_removed_literals (kissat *solver, unsigned size,
 1,201,522 ( 0.00%)                                     unsigned *lits) {
 3,764,698 ( 0.00%)    for (unsigned i = 0; i < size; i++)
 6,539,553 ( 0.00%)      kissat_mark_removed_literal (solver, lits[i]);
27,590,405 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (726,617x)
   686,584 ( 0.00%)  }
         .           
         .           void kissat_mark_added_literals (kissat *solver, unsigned size,
 1,924,594 ( 0.00%)                                   unsigned *lits) {
 6,025,334 ( 0.00%)    for (unsigned i = 0; i < size; i++)
10,463,904 ( 0.00%)      kissat_mark_added_literal (solver, lits[i]);
63,887,999 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (1,162,656x)
 1,099,768 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/definition.c
--------------------------------------------------------------------------------
Ir                  

-- line 8 ----------------------------------------
         .           typedef struct definition_extractor definition_extractor;
         .           
         .           struct definition_extractor {
         .             unsigned lit;
         .             kissat *solver;
         .             watches *watches[2];
         .           };
         .           
 1,210,632 ( 0.00%)  static void traverse_definition_core (void *state, unsigned id) {
   403,544 ( 0.00%)    definition_extractor *extractor = state;
   605,316 ( 0.00%)    kissat *solver = extractor->solver;
         .             watch watch;
   605,316 ( 0.00%)    watches *watches0 = extractor->watches[0];
   605,316 ( 0.00%)    watches *watches1 = extractor->watches[1];
   807,088 ( 0.00%)    const size_t size_watches0 = SIZE_WATCHES (*watches0);
 2,421,264 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (201,772x)
   605,316 ( 0.00%)    assert (size_watches0 <= UINT_MAX);
         .             unsigned sign;
   605,316 ( 0.00%)    if (id < size_watches0) {
 1,038,191 ( 0.00%)      watch = BEGIN_WATCHES (*watches0)[id];
   755,048 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (94,381x)
   377,524 ( 0.00%)      LOGWATCH (extractor->lit, watch, "gate[0]");
   188,762 ( 0.00%)      sign = 0;
         .             } else {
   536,955 ( 0.00%)      unsigned tmp = id - size_watches0;
         .           #ifndef NDEBUG
   429,564 ( 0.00%)      const size_t size_watches1 = SIZE_WATCHES (*watches1);
 1,288,692 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (107,391x)
   322,173 ( 0.00%)      assert (size_watches1 <= UINT_MAX);
   322,173 ( 0.00%)      assert (tmp < size_watches1);
         .           #endif
 1,181,301 ( 0.00%)      watch = BEGIN_WATCHES (*watches1)[tmp];
   859,128 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (107,391x)
   429,564 ( 0.00%)      LOGWATCH (NOT (extractor->lit), watch, "gate[1]");
   107,391 ( 0.00%)      sign = 1;
         .             }
 8,273,015 ( 0.00%)    PUSH_STACK (solver->gates[sign], watch);
     5,389 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (11x)
   605,316 ( 0.00%)  }
         .           
         .           #if !defined(NDEBUG) || !defined(NPROOFS)
         .           
         .           typedef struct lemma_extractor lemma_extractor;
         .           
         .           struct lemma_extractor {
         .             kissat *solver;
         .             unsigned lemmas;
         .             unsigned unit;
         .           };
         .           
         .           static void traverse_one_sided_core_lemma (void *state, bool learned,
         .                                                      size_t size,
       135 ( 0.00%)                                             const unsigned *lits) {
        60 ( 0.00%)    if (!learned)
        11 ( 0.00%)      return;
         8 ( 0.00%)    lemma_extractor *extractor = state;
        12 ( 0.00%)    kissat *solver = extractor->solver;
        12 ( 0.00%)    const unsigned unit = extractor->unit;
        12 ( 0.00%)    unsigneds *added = &solver->added;
        34 ( 0.00%)    assert (extractor->lemmas || EMPTY_STACK (*added));
         8 ( 0.00%)    if (size) {
        15 ( 0.00%)      PUSH_STACK (*added, size + 1);
         8 ( 0.00%)      const size_t offset = SIZE_STACK (*added);
        13 ( 0.00%)      PUSH_STACK (*added, unit);
         5 ( 0.00%)      const unsigned *end = lits + size;
        10 ( 0.00%)      for (const unsigned *p = lits; p != end; p++)
        14 ( 0.00%)        PUSH_STACK (*added, *p);
        15 ( 0.00%)      unsigned *extended = &PEEK_STACK (*added, offset);
        13 ( 0.00%)      assert (offset + size + 1 == SIZE_STACK (*added));
        11 ( 0.00%)      CHECK_AND_ADD_LITS (size + 1, extended);
     3,288 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (1x)
         4 ( 0.00%)      ADD_LITS_TO_PROOF (size + 1, extended);
         .             } else {
        15 ( 0.00%)      kissat_learned_unit (solver, unit);
     8,379 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (3x)
         9 ( 0.00%)      const unsigned *end = END_STACK (*added);
         9 ( 0.00%)      unsigned *begin = BEGIN_STACK (*added);
        24 ( 0.00%)      for (unsigned *p = begin, size; p != end; p += size) {
         5 ( 0.00%)        size = *p++;
         6 ( 0.00%)        assert (p + size <= end);
        10 ( 0.00%)        REMOVE_CHECKER_LITS (size, p);
     6,118 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (1x)
         4 ( 0.00%)        DELETE_LITS_FROM_PROOF (size, p);
         .               }
        12 ( 0.00%)      CLEAR_STACK (*added);
         .             }
        24 ( 0.00%)    extractor->lemmas++;
        30 ( 0.00%)  }
         .           
         .           #endif
         .           
   445,308 ( 0.00%)  bool kissat_find_definition (kissat *solver, unsigned lit) {
   148,436 ( 0.00%)    if (!GET_OPTION (definitions))
         .               return false;
   333,981 ( 0.00%)    START (definition);
   111,327 ( 0.00%)    struct kitten *kitten = solver->kitten;
    74,218 ( 0.00%)    assert (kitten);
   111,327 ( 0.00%)    kitten_clear (kitten);
347,650,480 ( 0.15%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_clear (37,109x)
   296,872 ( 0.00%)    const unsigned not_lit = NOT (lit);
         .             definition_extractor extractor;
    74,218 ( 0.00%)    extractor.lit = lit;
    74,218 ( 0.00%)    extractor.solver = solver;
   408,199 ( 0.00%)    extractor.watches[0] = &WATCHES (lit);
   408,199 ( 0.00%)    extractor.watches[1] = &WATCHES (not_lit);
   111,327 ( 0.00%)    kitten_track_antecedents (kitten);
 1,001,943 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_track_antecedents (37,109x)
    37,109 ( 0.00%)    unsigned exported = 0;
         .           #if !defined(QUIET) || !defined(NDEBUG)
    74,218 ( 0.00%)    size_t occs[2] = {0, 0};
         .           #endif
   371,090 ( 0.00%)    for (unsigned sign = 0; sign < 2; sign++) {
   333,981 ( 0.00%)      const unsigned except = sign ? not_lit : lit;
 8,846,329 ( 0.00%)      for (all_binary_large_watches (watch, *extractor.watches[sign])) {
   593,744 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (74,218x)
   593,744 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (74,218x)
 4,046,240 ( 0.00%)        if (watch.type.binary) {
   154,356 ( 0.00%)          const unsigned other = watch.binary.lit;
   463,068 ( 0.00%)          kitten_clause_with_id_and_exception (kitten, exported, 1, &other,
28,106,127 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_clause_with_id_and_exception (51,452x)
         .                                                        INVALID_LIT);
         .                 } else {
 2,841,735 ( 0.00%)          const reference ref = watch.large.ref;
 5,683,470 ( 0.00%)          clause *c = kissat_dereference_clause (solver, ref);
129,155,713 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (947,245x)
10,419,695 ( 0.00%)          kitten_clause_with_id_and_exception (kitten, exported, c->size,
1,543,120,392 ( 0.65%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_clause_with_id_and_exception (947,245x)
 1,894,490 ( 0.00%)                                               c->lits, except);
         .                 }
         .           #if !defined(QUIET) || !defined(NDEBUG)
 4,993,485 ( 0.00%)        occs[sign]++;
         .           #endif
   998,697 ( 0.00%)        exported++;
         .               }
         .             }
    37,109 ( 0.00%)    bool res = false;
   222,654 ( 0.00%)    LOG ("exported %u = %zu + %zu environment clauses to sub-solver",
         .                  exported, occs[0], occs[1]);
   148,436 ( 0.00%)    INC (definitions_checked);
   556,635 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_definitions_checked (37,109x)
   148,436 ( 0.00%)    const size_t limit = GET_OPTION (definitionticks);
   185,545 ( 0.00%)    kitten_set_ticks_limit (kitten, limit);
 1,150,379 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_set_ticks_limit (37,109x)
   148,436 ( 0.00%)    int status = kitten_solve (kitten);
1,078,010,452 ( 0.46%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_solve (37,109x)
    74,218 ( 0.00%)    if (status == 20) {
   193,266 ( 0.00%)      LOG ("sub-solver result UNSAT shows definition exists");
         .               uint64_t learned;
   193,266 ( 0.00%)      unsigned reduced = kitten_compute_clausal_core (kitten, &learned);
123,348,898 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_compute_clausal_core (32,211x)
   193,266 ( 0.00%)      LOG ("1st sub-solver core of size %u original clauses out of %u",
         .                    reduced, exported);
   354,321 ( 0.00%)      for (int i = 2; i <= GET_OPTION (definitioncores); i++) {
    96,633 ( 0.00%)        kitten_shrink_to_clausal_core (kitten);
194,211,829 ( 0.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_shrink_to_clausal_core (32,211x)
    96,633 ( 0.00%)        kitten_shuffle_clauses (kitten);
263,489,772 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_shuffle_clauses (32,211x)
   322,110 ( 0.00%)        kitten_set_ticks_limit (kitten, 10 * limit);
   998,541 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_set_ticks_limit (32,211x)
   128,844 ( 0.00%)        int tmp = kitten_solve (kitten);
444,869,578 ( 0.19%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_solve (32,211x)
   128,844 ( 0.00%)        assert (!tmp || tmp == 20);
    64,422 ( 0.00%)        if (!tmp) {
         .                   LOG ("aborting core extraction");
         .                   goto ABORT;
         .                 }
         .           #ifndef NDEBUG
    64,422 ( 0.00%)        unsigned previous = reduced;
         .           #endif
   193,266 ( 0.00%)        reduced = kitten_compute_clausal_core (kitten, &learned);
119,203,692 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_compute_clausal_core (32,211x)
   193,266 ( 0.00%)        LOG ("%s sub-solver core of size %u original clauses out of %u",
         .                      FORMAT_ORDINAL (i), reduced, exported);
    96,633 ( 0.00%)        assert (reduced <= previous);
         .           #if defined(QUIET) && defined(NDEBUG)
         .                 (void) reduced;
         .           #endif
         .               }
   128,844 ( 0.00%)      INC (definitions_extracted);
   483,165 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_definitions_extracted (32,211x)
   193,266 ( 0.00%)      kitten_traverse_core_ids (kitten, &extractor, traverse_definition_core);
53,788,034 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_traverse_core_ids (32,211x)
         .               size_t size[2];
   257,688 ( 0.00%)      size[0] = SIZE_STACK (solver->gates[0]);
   257,688 ( 0.00%)      size[1] = SIZE_STACK (solver->gates[1]);
         .           #if !defined(QUIET) || !defined(NDEBUG)
   193,266 ( 0.00%)      assert (reduced == size[0] + size[1]);
         .           #ifdef METRICS
 1,224,018 ( 0.00%)      kissat_extremely_verbose (
 1,642,761 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (32,211x)
 1,095,174 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (32,211x)
         .                   solver,
         .                   "definition extracted[%" PRIu64 "] "
         .                   "size %u = %zu + %zu clauses %.0f%% "
         .                   "of %u = %zu + %zu (checked %" PRIu64 ")",
         .                   solver->statistics.definitions_extracted, reduced, size[0], size[1],
         .                   kissat_percent (reduced, exported), exported, occs[0], occs[1],
         .                   solver->statistics.definitions_checked);
         .           #else
-- line 178 ----------------------------------------
-- line 180 ----------------------------------------
         .                                         "definition extracted with core "
         .                                         "size %u = %zu + %zu clauses %.0f%% "
         .                                         "of %u = %zu + %zu",
         .                                         reduced, size[0], size[1],
         .                                         kissat_percent (reduced, exported), exported,
         .                                         occs[0], occs[1]);
         .           #endif
         .           #endif
    32,211 ( 0.00%)      unsigned unit = INVALID_LIT;
    96,633 ( 0.00%)      if (!size[0]) {
         6 ( 0.00%)        unit = not_lit;
         9 ( 0.00%)        assert (size[1]);
    96,624 ( 0.00%)      } else if (!size[1])
         .                 unit = lit;
         .           
    64,422 ( 0.00%)      if (unit != INVALID_LIT) {
        12 ( 0.00%)        INC (definition_units);
        45 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_definition_units (3x)
         .           
        18 ( 0.00%)        kissat_extremely_verbose (solver, "one sided core "
       129 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (3x)
         .                                                   "definition extraction yields "
         .                                                   "failed literal");
         .           #if !defined(NDEBUG) || !defined(NPROOFS)
         6 ( 0.00%)        if (false
         .           #ifndef NDEBUG
         6 ( 0.00%)            || GET_OPTION (check) > 1
         .           #endif
         .           #ifndef NPROOFS
         .                     || solver->proof
         .           #endif
         3 ( 0.00%)        ) {
         .                   lemma_extractor extractor;
         6 ( 0.00%)          extractor.solver = solver;
         6 ( 0.00%)          extractor.unit = unit;
         3 ( 0.00%)          extractor.lemmas = 0;
        18 ( 0.00%)          kitten_traverse_core_clauses (kitten, &extractor,
    22,454 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kitten.c:kitten_traverse_core_clauses (3x)
         .                                                 traverse_one_sided_core_lemma);
         .                 } else
         .           #endif
         .                   kissat_learned_unit (solver, unit);
         .               }
   128,844 ( 0.00%)      solver->gate_eliminated = GATE_ELIMINATED (definitions);
    64,422 ( 0.00%)      solver->resolve_gate = true;
    64,422 ( 0.00%)      res = true;
         .             } else {
     9,796 ( 0.00%)    ABORT:
    29,388 ( 0.00%)      LOG ("sub-solver failed to show that definition exists");
         .             }
   148,436 ( 0.00%)    CLEAR_STACK (solver->analyzed);
   333,981 ( 0.00%)    STOP (definition);
    37,109 ( 0.00%)    return res;
   333,981 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/allocate.c
--------------------------------------------------------------------------------
Ir                  

-- line 7 ----------------------------------------
         .           #define LOGPREFIX "ALLOCATE"
         .           
         .           #include <string.h>
         .           
         .           #ifdef LOGGING
         .           #include <inttypes.h>
         .           #endif
         .           
19,261,776 ( 0.01%)  static void inc_bytes (kissat *solver, size_t bytes) {
         .           #ifdef METRICS
 6,420,592 ( 0.00%)    if (!solver)
         1 ( 0.00%)      return;
19,261,770 ( 0.01%)    ADD (allocated_current, bytes);
64,205,900 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_allocated_current (3,210,295x)
19,261,770 ( 0.01%)    LOG5 ("allocated_current = %s",
         .                   FORMAT_BYTES (solver->statistics.allocated_current));
12,841,180 ( 0.01%)    if (solver->statistics.allocated_current >=
 6,420,590 ( 0.00%)        solver->statistics.allocated_max) {
 2,233,996 ( 0.00%)      solver->statistics.allocated_max = solver->statistics.allocated_current;
 3,350,994 ( 0.00%)      LOG5 ("allocated_max = %s",
         .                     FORMAT_BYTES (solver->statistics.allocated_max));
         .             }
         .           #else
         .             (void) solver;
         .             (void) bytes;
         .           #endif
 6,420,592 ( 0.00%)  }
         .           
21,535,068 ( 0.01%)  static void dec_bytes (kissat *solver, size_t bytes) {
         .           #ifdef METRICS
 7,178,356 ( 0.00%)    if (!solver)
         1 ( 0.00%)      return;
21,535,062 ( 0.01%)    SUB (allocated_current, bytes);
61,016,009 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_sub_allocated_current (3,589,177x)
21,535,062 ( 0.01%)    LOG5 ("allocated_current = %s",
         .                   FORMAT_BYTES (solver->statistics.allocated_current));
         .           #else
         .             (void) solver;
         .             (void) bytes;
         .           #endif
 7,178,356 ( 0.00%)  }
         .           
11,541,120 ( 0.00%)  void *kissat_malloc (kissat *solver, size_t bytes) {
         .             void *res;
 3,847,040 ( 0.00%)    if (!bytes)
         .               return 0;
 7,694,080 ( 0.00%)    res = malloc (bytes);
148,048,863 ( 0.06%)  => ???:0x000000000010c7b0 (1,923,520x)
11,541,120 ( 0.00%)    LOG4 ("malloc (%zu) = %p", bytes, res);
 3,847,040 ( 0.00%)    if (!res)
         .               kissat_fatal ("out-of-memory allocating %zu bytes", bytes);
 9,617,600 ( 0.00%)    inc_bytes (solver, bytes);
95,379,500 ( 0.04%)  => build/../src/allocate.c:inc_bytes (1,923,520x)
 1,923,520 ( 0.00%)    return res;
 3,847,040 ( 0.00%)  }
         .           
16,122,568 ( 0.01%)  void kissat_free (kissat *solver, void *ptr, size_t bytes) {
 4,606,448 ( 0.00%)    if (ptr) {
13,819,340 ( 0.01%)      LOG4 ("free (%p[%zu])", ptr, bytes);
11,516,120 ( 0.00%)      dec_bytes (solver, bytes);
89,825,708 ( 0.04%)  => build/../src/allocate.c:dec_bytes (2,303,224x)
 6,909,672 ( 0.00%)      free (ptr);
265,854,247 ( 0.11%)  => ???:0x000000000010c780 (2,303,224x)
         .             } else
         .               assert (!bytes);
 9,212,896 ( 0.00%)  }
         .           
       189 ( 0.00%)  void *kissat_nalloc (kissat *solver, size_t n, size_t size) {
         .             void *res;
       108 ( 0.00%)    if (!n || !size)
         .               return 0;
       189 ( 0.00%)    if (MAX_SIZE_T / size < n)
         .               kissat_fatal ("invalid 'kissat_nalloc (..., %zu, %zu)' call", n, size);
        81 ( 0.00%)    const size_t bytes = n * size;
       108 ( 0.00%)    res = malloc (bytes);
     8,912 ( 0.00%)  => ???:0x000000000010c7b0 (27x)
       162 ( 0.00%)    LOG4 ("nalloc (%zu, %zu) = %p", n, size, res);
        54 ( 0.00%)    if (!res)
         .               kissat_fatal ("out-of-memory allocating "
         .                             "%zu = %zu x %zu bytes",
         .                             bytes, n, size);
       135 ( 0.00%)    inc_bytes (solver, bytes);
     1,306 ( 0.00%)  => build/../src/allocate.c:inc_bytes (27x)
        27 ( 0.00%)    return res;
        54 ( 0.00%)  }
         .           
     5,565 ( 0.00%)  void *kissat_calloc (kissat *solver, size_t n, size_t size) {
         .             void *res;
     3,180 ( 0.00%)    if (!n || !size)
         .               return 0;
     5,565 ( 0.00%)    if (MAX_SIZE_T / size < n)
         .               kissat_fatal ("invalid 'kissat_calloc (..., %zu, %zu)' call", n, size);
     4,770 ( 0.00%)    res = calloc (n, size);
45,375,839 ( 0.02%)  => ???:0x000000000010c610 (795x)
     4,766 ( 0.00%)    LOG4 ("calloc (%zu, %zu) = %p", n, size, res);
     2,385 ( 0.00%)    const size_t bytes = n * size;
     1,590 ( 0.00%)    if (!res)
         .               kissat_fatal ("out-of-memory allocating "
         .                             "%zu = %zu x %zu bytes",
         .                             bytes, n, size);
     3,975 ( 0.00%)    inc_bytes (solver, bytes);
    38,423 ( 0.00%)  => build/../src/allocate.c:inc_bytes (795x)
       795 ( 0.00%)    return res;
     1,590 ( 0.00%)  }
         .           
 4,749,896 ( 0.00%)  void kissat_dealloc (kissat *solver, void *ptr, size_t n, size_t size) {
 1,946,844 ( 0.00%)    if (!n || !size)
   214,052 ( 0.00%)      return;
 2,657,795 ( 0.00%)    if (MAX_SIZE_T / size < n)
         .               kissat_fatal ("invalid 'kissat_dealloc (..., %zu, %zu)' call", n, size);
 1,139,055 ( 0.00%)    const size_t bytes = n * size;
 2,657,795 ( 0.00%)    kissat_free (solver, ptr, bytes);
100,142,788 ( 0.04%)  => build/../src/allocate.c:kissat_free (379,685x)
 1,187,474 ( 0.00%)  }
         .           
         .           void *kissat_realloc (kissat *solver, void *p, size_t old_bytes,
10,287,632 ( 0.00%)                        size_t new_bytes) {
 3,857,862 ( 0.00%)    if (old_bytes == new_bytes)
         .               return p;
 2,571,908 ( 0.00%)    if (!new_bytes) {
         .               kissat_free (solver, p, old_bytes);
         .               return 0;
         .             }
 6,429,770 ( 0.00%)    dec_bytes (solver, old_bytes);
50,152,206 ( 0.02%)  => build/../src/allocate.c:dec_bytes (1,285,954x)
 7,715,724 ( 0.00%)    void *res = realloc (p, new_bytes);
391,538,752 ( 0.17%)  => ???:0x000000000010c870 (1,285,954x)
 7,715,724 ( 0.00%)    LOG4 ("realloc (%p[%zu], %zu) = %p", p, old_bytes, new_bytes, res);
 5,143,816 ( 0.00%)    if (new_bytes && !res)
         .               kissat_fatal ("out-of-memory reallocating from %zu to %zu bytes",
         .                             old_bytes, new_bytes);
 6,429,770 ( 0.00%)    inc_bytes (solver, new_bytes);
64,259,932 ( 0.03%)  => build/../src/allocate.c:inc_bytes (1,285,954x)
 1,285,954 ( 0.00%)    return res;
 2,571,908 ( 0.00%)  }
         .           
         .           void *kissat_nrealloc (kissat *solver, void *p, size_t o, size_t n,
     2,529 ( 0.00%)                         size_t size) {
       562 ( 0.00%)    if (!size) {
         .               assert (!p);
         .               assert (!o);
         .               return 0;
         .             }
     1,124 ( 0.00%)    const size_t max = MAX_SIZE_T / size;
     1,686 ( 0.00%)    if (max < o || max < n)
         .               kissat_fatal ("invalid 'kissat_nrealloc (..., %zu, %zu, %zu)' call", o,
         .                             n, size);
     2,810 ( 0.00%)    return kissat_realloc (solver, p, o * size, n * size);
 8,241,509 ( 0.00%)  => build/../src/allocate.c:kissat_realloc (281x)
       562 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/arena.c
--------------------------------------------------------------------------------
Ir                   

          .           #include "error.h"
          .           #include "internal.h"
          .           #include "logging.h"
          .           #include "print.h"
          .           
          .           static void report_resized (kissat *solver, const char *mode,
        171 ( 0.00%)                              arena before) {
          .           #ifndef QUIET
         38 ( 0.00%)    ward *const old_begin = BEGIN_STACK (before);
         57 ( 0.00%)    ward *const new_begin = BEGIN_STACK (solver->arena);
         76 ( 0.00%)    const bool moved = (new_begin != old_begin);
        152 ( 0.00%)    const uint64_t capacity = CAPACITY_STACK (solver->arena);
         57 ( 0.00%)    const uint64_t bytes = capacity * sizeof (ward);
        741 ( 0.00%)    kissat_phase (solver, "arena", GET (arena_resized),
     21,756 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (19x)
     17,063 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (19x)
        817 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (19x)
        133 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_arena_resized (19x)
          .                           "%s to %s %d-byte-words %s (%s)", mode,
          .                           FORMAT_COUNT (capacity), (int) sizeof (ward),
          .                           FORMAT_BYTES (bytes), (moved ? "moved" : "in place"));
          .           #else
          .             (void) solver;
          .             (void) mode;
          .             (void) before;
          .           #endif
        133 ( 0.00%)  }
          .           
  1,668,660 ( 0.00%)  reference kissat_allocate_clause (kissat *solver, size_t size) {
    834,330 ( 0.00%)    assert (size <= UINT_MAX);
  2,224,880 ( 0.00%)    const size_t res = SIZE_STACK (solver->arena);
    834,330 ( 0.00%)    assert (res <= MAX_REF);
  1,112,440 ( 0.00%)    const size_t bytes = kissat_bytes_of_clause (size);
 10,992,552 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_bytes_of_clause (278,110x)
  1,390,550 ( 0.00%)    assert (kissat_aligned_word (bytes));
  2,502,990 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_aligned_word (278,110x)
    834,330 ( 0.00%)    const size_t needed = bytes / sizeof (ward);
    834,330 ( 0.00%)    assert (needed <= UINT_MAX);
  2,224,880 ( 0.00%)    size_t capacity = CAPACITY_STACK (solver->arena);
  1,390,550 ( 0.00%)    assert (kissat_is_power_of_two (MAX_ARENA));
  4,171,650 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_is_power_of_two (278,110x)
    834,330 ( 0.00%)    assert (capacity <= MAX_ARENA);
    834,330 ( 0.00%)    size_t available = capacity - res;
    834,330 ( 0.00%)    if (needed > available) {
        133 ( 0.00%)      const arena before = solver->arena;
          .               do {
        100 ( 0.00%)        assert (kissat_is_zero_or_power_of_two (capacity));
        200 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_is_zero_or_power_of_two (20x)
         60 ( 0.00%)        if (capacity == MAX_ARENA)
          .                   kissat_fatal ("maximum arena capacity "
          .                                 "of 2^%u %zu-byte-words %s exhausted"
          .           #ifdef COMPACT
          .                                 " (consider a configuration without '--compact')"
          .           #endif
          .                                 ,
          .                                 LD_MAX_ARENA, sizeof (ward),
          .                                 FORMAT_BYTES (MAX_ARENA * sizeof (ward)));
        140 ( 0.00%)        kissat_stack_enlarge (solver, (chars *) &solver->arena,
    268,287 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (20x)
          .                                       sizeof (ward));
        160 ( 0.00%)        capacity = CAPACITY_STACK (solver->arena);
         60 ( 0.00%)        available = capacity - res;
         60 ( 0.00%)      } while (needed > available);
         76 ( 0.00%)      INC (arena_resized);
        285 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_arena_resized (19x)
         76 ( 0.00%)      INC (arena_enlarged);
        285 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_arena_enlarged (19x)
        190 ( 0.00%)      report_resized (solver, "enlarged", before);
     41,194 ( 0.00%)  => build/../src/arena.c:report_resized (19x)
         57 ( 0.00%)      assert (capacity <= MAX_ARENA);
          .             }
  1,946,770 ( 0.00%)    solver->arena.end += needed;
  1,668,660 ( 0.00%)    LOG ("allocated clause[%zu] of size %zu bytes %s", res, size,
          .                  FORMAT_BYTES (bytes));
    278,110 ( 0.00%)    return (reference) res;
    556,220 ( 0.00%)  }
          .           
        104 ( 0.00%)  void kissat_shrink_arena (kissat *solver) {
         91 ( 0.00%)    const arena before = solver->arena;
         65 ( 0.00%)    const size_t capacity = CAPACITY_STACK (before);
         65 ( 0.00%)    const size_t size = SIZE_STACK (before);
          .           #ifndef QUIET
         39 ( 0.00%)    const size_t capacity_bytes = capacity * sizeof (ward);
        416 ( 0.00%)    kissat_phase (solver, "arena", GET (arena_resized),
     16,618 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (13x)
     13,637 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (13x)
        559 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (13x)
         91 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_arena_resized (13x)
          .                           "capacity of %s %d-byte-words %s", FORMAT_COUNT (capacity),
          .                           (int) sizeof (ward), FORMAT_BYTES (capacity_bytes));
         39 ( 0.00%)    const size_t size_bytes = size * sizeof (ward);
        650 ( 0.00%)    kissat_phase (solver, "arena", GET (arena_resized),
     16,618 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (13x)
     11,089 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (13x)
        663 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (13x)
        442 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (13x)
         91 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_arena_resized (13x)
          .                           "filled %.0f%% with %s %d-byte-words %s",
          .                           kissat_percent (size, capacity), FORMAT_COUNT (size),
          .                           (int) sizeof (ward), FORMAT_BYTES (size_bytes));
          .           #endif
         52 ( 0.00%)    if (size > capacity / 4) {
        182 ( 0.00%)      kissat_phase (solver, "arena", GET (arena_resized),
        559 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (13x)
         91 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_arena_resized (13x)
          .                             "not shrinking since more than 25%% filled");
          .               return;
          .             }
          .             INC (arena_resized);
          .             INC (arena_shrunken);
          .             SHRINK_STACK (solver->arena);
          .             report_resized (solver, "shrunken", before);
         78 ( 0.00%)  }
          .           
          .           #if !defined(NDEBUG) || defined(LOGGING)
          .           
793,655,682 ( 0.34%)  bool kissat_clause_in_arena (const kissat *solver, const clause *c) {
793,655,682 ( 0.34%)    if (!kissat_aligned_pointer (c))
2,380,967,046 ( 1.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_aligned_pointer (132,275,947x)
          .               return false;
264,551,894 ( 0.11%)    const char *p = (char *) c;
396,827,841 ( 0.17%)    const char *begin = (char *) BEGIN_STACK (solver->arena);
396,827,841 ( 0.17%)    const char *end = (char *) END_STACK (solver->arena);
396,827,841 ( 0.17%)    if (p < begin)
          .               return false;
661,379,735 ( 0.28%)    const size_t bytes = kissat_bytes_of_clause (c->size);
5,231,393,708 ( 2.21%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_bytes_of_clause (132,275,947x)
661,379,735 ( 0.28%)    if (end < p + bytes)
          .               return false;
132,275,947 ( 0.06%)    return true;
264,551,894 ( 0.11%)  }
          .           
          .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/vivify.c
--------------------------------------------------------------------------------
Ir                   

-- line 17 ----------------------------------------
          .           #include "trail.h"
          .           
          .           #include "cover.h"
          .           
          .           #include <inttypes.h>
          .           #include <string.h>
          .           
          .           static inline bool more_occurrences (unsigned *counts, unsigned a,
 11,875,340 ( 0.01%)                                       unsigned b) {
 28,500,816 ( 0.01%)    const unsigned s = counts[a], t = counts[b];
 33,250,952 ( 0.01%)    return ((t - s) | ((b - a) & ~(s - t))) >> 31;
  4,750,136 ( 0.00%)  }
          .           
          .           #define MORE_OCCURRENCES(A, B) more_occurrences (counts, (A), (B))
          .           
          .           static void vivify_sort_lits_by_counts (kissat *solver, size_t size,
    450,464 ( 0.00%)                                          unsigned *lits, unsigned *counts) {
 66,589,858 ( 0.03%)    SORT (unsigned, size, lits, MORE_OCCURRENCES);
 78,377,244 ( 0.03%)  => build/../src/vivify.c:more_occurrences (2,375,068x)
    168,924 ( 0.00%)  }
          .           
          .           static void vivify_sort_stack_by_counts (kissat *solver, unsigneds *stack,
    253,064 ( 0.00%)                                           unsigned *counts) {
    289,216 ( 0.00%)    const size_t size = SIZE_STACK (*stack);
    108,456 ( 0.00%)    unsigned *lits = BEGIN_STACK (*stack);
    216,912 ( 0.00%)    vivify_sort_lits_by_counts (solver, size, lits, counts);
 49,980,018 ( 0.02%)  => build/../src/vivify.c:vivify_sort_lits_by_counts (36,152x)
    108,456 ( 0.00%)  }
          .           
          .           static void vivify_sort_clause_by_counts (kissat *solver, clause *c,
    141,092 ( 0.00%)                                            unsigned *counts) {
    241,872 ( 0.00%)    vivify_sort_lits_by_counts (solver, c->size, c->lits, counts);
 95,606,472 ( 0.04%)  => build/../src/vivify.c:vivify_sort_lits_by_counts (20,156x)
     60,468 ( 0.00%)  }
          .           
 44,354,696 ( 0.02%)  static inline void count_literal (unsigned lit, unsigned *counts) {
210,684,806 ( 0.09%)    counts[lit] += counts[lit] < (unsigned) INT_MAX;
 33,266,022 ( 0.01%)  }
          .           
 16,939,956 ( 0.01%)  static void count_clause (clause *c, unsigned *counts) {
131,059,282 ( 0.06%)    for (all_literals_in_clause (lit, c))
 55,443,370 ( 0.02%)      count_literal (lit, counts);
288,305,524 ( 0.12%)  => build/../src/vivify.c:count_literal (11,088,674x)
  8,469,978 ( 0.00%)  }
          .           
          .           static bool simplify_vivification_candidate (kissat *solver,
  4,253,394 ( 0.00%)                                               clause *const c) {
  2,835,596 ( 0.00%)    assert (!solver->level);
  2,835,596 ( 0.00%)    CLEAR_STACK (solver->clause);
          .           
  2,126,697 ( 0.00%)    const value *const values = solver->values;
          .           
 30,076,778 ( 0.01%)    for (all_literals_in_clause (lit, c)) {
 13,906,115 ( 0.01%)      const value value = values[lit];
  5,568,763 ( 0.00%)      if (value > 0) {
     37,902 ( 0.00%)        LOGCLS (c, "vivification %s satisfied candidate", LOGLIT (lit));
     31,585 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
  9,980,980 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (6,317x)
     12,634 ( 0.00%)        return true;
          .               }
  5,549,812 ( 0.00%)      if (!value)
 35,946,469 ( 0.02%)        PUSH_STACK (solver->clause, lit);
          .             }
          .           
  5,620,656 ( 0.00%)    unsigned non_false = SIZE_STACK (solver->clause);
  2,810,328 ( 0.00%)    assert (non_false <= c->size);
  2,810,328 ( 0.00%)    if (non_false == c->size)
  1,391,214 ( 0.00%)      return false;
          .           
     13,950 ( 0.00%)    if (non_false == 2) {
     20,670 ( 0.00%)      const unsigned first = PEEK_STACK (solver->clause, 0);
     26,871 ( 0.00%)      const unsigned second = PEEK_STACK (solver->clause, 1);
     12,402 ( 0.00%)      LOGBINARY (first, second, "vivification shrunken candidate");
     12,402 ( 0.00%)      kissat_new_binary_clause (solver, first, second);
  6,139,593 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_binary_clause (2,067x)
     10,335 ( 0.00%)      kissat_mark_clause_as_garbage (solver, c);
  5,420,611 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (2,067x)
      4,134 ( 0.00%)      return true;
          .             }
          .           
      9,816 ( 0.00%)    assert (2 < non_false);
          .           
     88,344 ( 0.00%)    CHECK_AND_ADD_STACK (solver->clause);
 49,214,744 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (4,908x)
     19,632 ( 0.00%)    ADD_STACK_TO_PROOF (solver->clause);
          .           
     44,172 ( 0.00%)    REMOVE_CHECKER_CLAUSE (c);
 28,320,672 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_clause (4,908x)
     19,632 ( 0.00%)    DELETE_CLAUSE_FROM_PROOF (c);
          .           
     14,724 ( 0.00%)    const unsigned old_size = c->size;
     19,632 ( 0.00%)    unsigned new_size = 0, *lits = c->lits;
    227,908 ( 0.00%)    for (unsigned i = 0; i < old_size; i++) {
    305,052 ( 0.00%)      const unsigned lit = lits[i];
    254,210 ( 0.00%)      const value value = values[lit];
    101,684 ( 0.00%)      assert (value <= 0);
    101,684 ( 0.00%)      if (!value)
    394,020 ( 0.00%)        lits[new_size++] = lit;
          .             }
          .           
      9,816 ( 0.00%)    assert (2 < new_size);
     14,724 ( 0.00%)    assert (new_size == non_false);
     14,724 ( 0.00%)    assert (new_size < old_size);
          .           
     14,724 ( 0.00%)    c->size = new_size;
      9,816 ( 0.00%)    c->searched = 2;
          .           
     29,140 ( 0.00%)    if (c->redundant && c->glue >= new_size)
        280 ( 0.00%)      kissat_promote_clause (solver, c, new_size - 1);
      4,592 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.c:kissat_promote_clause (40x)
     29,448 ( 0.00%)    if (!c->shrunken) {
     18,780 ( 0.00%)      c->shrunken = true;
     32,865 ( 0.00%)      lits[old_size - 1] = INVALID_LIT;
          .             }
          .           
     29,448 ( 0.00%)    LOGCLS (c, "vivification shrunken candidate");
     29,448 ( 0.00%)    LOG ("vivification candidate does not need to be simplified");
          .           
      4,908 ( 0.00%)    return false;
  1,417,798 ( 0.00%)  }
          .           
        120 ( 0.00%)  static unsigned vivify_tier1_limit (kissat *solver) {
         60 ( 0.00%)    return GET_OPTION (vivifyfocusedtiers) ? solver->tier1[0] : TIER1;
         60 ( 0.00%)  }
          .           
        216 ( 0.00%)  static unsigned vivify_tier2_limit (kissat *solver) {
        378 ( 0.00%)    return GET_OPTION (vivifyfocusedtiers) ? solver->tier2[0] : TIER2;
        108 ( 0.00%)  }
          .           
          .           #define COUNTREF_COUNTS 1
          .           #define LD_MAX_COUNTREF_SIZE 31
          .           #define MAX_COUNTREF_SIZE ((1u << LD_MAX_COUNTREF_SIZE) - 1)
          .           
          .           struct countref {
          .             unsigned vivify : 1;
          .             unsigned size : LD_MAX_COUNTREF_SIZE;
-- line 142 ----------------------------------------
-- line 159 ----------------------------------------
          .             const char *name;
          .             char tag;
          .           #endif
          .             int tier;
          .           };
          .           
          .           typedef struct vivifier vivifier;
          .           
         36 ( 0.00%)  static void init_vivifier (kissat *solver, vivifier *vivifier) {
         18 ( 0.00%)    vivifier->solver = solver;
         66 ( 0.00%)    vivifier->counts = kissat_calloc (solver, LITS, sizeof (unsigned));
  1,115,360 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (6x)
         60 ( 0.00%)    INIT_STACK (vivifier->schedule);
         60 ( 0.00%)    INIT_STACK (vivifier->countrefs);
         60 ( 0.00%)    INIT_STACK (vivifier->sorted);
         36 ( 0.00%)    LOG ("initialized vivifier");
         18 ( 0.00%)  }
          .           
        144 ( 0.00%)  static void set_vivifier_mode (vivifier *vivifier, int tier) {
         72 ( 0.00%)    vivifier->tier = tier;
          .           #ifndef QUIET
        150 ( 0.00%)    switch (tier) {
          .             case 1:
         18 ( 0.00%)      vivifier->mode = "vivify-tier1";
         18 ( 0.00%)      vivifier->name = "tier1";
         12 ( 0.00%)      vivifier->tag = 'u';
          6 ( 0.00%)      break;
          .             case 2:
         18 ( 0.00%)      vivifier->mode = "vivify-tier2";
         18 ( 0.00%)      vivifier->name = "tier2";
         12 ( 0.00%)      vivifier->tag = 'v';
          6 ( 0.00%)      break;
          .             case 3:
         12 ( 0.00%)      assert (tier == 3);
         18 ( 0.00%)      vivifier->mode = "vivify-tier3";
         18 ( 0.00%)      vivifier->name = "tier3";
         12 ( 0.00%)      vivifier->tag = 'w';
          6 ( 0.00%)      break;
          .             default:
         12 ( 0.00%)      assert (tier == 0);
         18 ( 0.00%)      vivifier->mode = "vivify-irredundant";
         18 ( 0.00%)      vivifier->name = "irredundant";
         12 ( 0.00%)      vivifier->tag = 'x';
          6 ( 0.00%)      break;
          .             }
          .           #ifdef LOGGING
         72 ( 0.00%)    kissat *solver = vivifier->solver;
        144 ( 0.00%)    LOG ("set vivifier tier %d mode '%s' with tag '%c'", tier, vivifier->mode,
          .                  vivifier->tag);
          .           #endif
          .           #endif
         72 ( 0.00%)  }
          .           
         90 ( 0.00%)  static void clear_vivifier (vivifier *vivifier) {
         54 ( 0.00%)    kissat *solver = vivifier->solver;
        108 ( 0.00%)    LOG ("clearing vivifier");
         54 ( 0.00%)    unsigned *counts = vivifier->counts;
        162 ( 0.00%)    memset (counts, 0, LITS * sizeof *counts);
  3,334,110 ( 0.00%)  => ???:0x000000000010c5b0 (18x)
         72 ( 0.00%)    CLEAR_STACK (vivifier->schedule);
         72 ( 0.00%)    CLEAR_STACK (vivifier->countrefs);
         72 ( 0.00%)    CLEAR_STACK (vivifier->sorted);
         54 ( 0.00%)  }
          .           
         30 ( 0.00%)  static void release_vivifier (vivifier *vivifier) {
         18 ( 0.00%)    kissat *solver = vivifier->solver;
         36 ( 0.00%)    LOG ("releasing vivifier");
         18 ( 0.00%)    unsigned *counts = vivifier->counts;
         54 ( 0.00%)    kissat_dealloc (solver, counts, LITS, sizeof *counts);
    115,947 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (6x)
        144 ( 0.00%)    RELEASE_STACK (vivifier->schedule);
      1,629 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (6x)
        162 ( 0.00%)    RELEASE_STACK (vivifier->countrefs);
         78 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (6x)
        144 ( 0.00%)    RELEASE_STACK (vivifier->sorted);
      1,426 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (6x)
         18 ( 0.00%)  }
          .           
        144 ( 0.00%)  static void schedule_vivification_candidates (vivifier *vivifier) {
         72 ( 0.00%)    kissat *solver = vivifier->solver;
        144 ( 0.00%)    LOG ("scheduling vivification candidates");
         72 ( 0.00%)    int tier = vivifier->tier;
          .             unsigned lower_glue_limit, upper_glue_limit;
         96 ( 0.00%)    unsigned tier1 = vivify_tier1_limit (solver);
        192 ( 0.00%)  => build/../src/vivify.c:vivify_tier1_limit (24x)
        240 ( 0.00%)    unsigned tier2 = MAX (tier1, vivify_tier2_limit (solver));
        624 ( 0.00%)  => build/../src/vivify.c:vivify_tier2_limit (48x)
         72 ( 0.00%)    assert (tier1 <= tier2);
        150 ( 0.00%)    switch (tier) {
          .             case 1:
          6 ( 0.00%)      lower_glue_limit = 0;
         12 ( 0.00%)      upper_glue_limit = tier1;
          6 ( 0.00%)      break;
          .             case 2:
         42 ( 0.00%)      lower_glue_limit = tier1 < tier2 ? tier1 + 1 : 0;
         12 ( 0.00%)      upper_glue_limit = tier2;
          6 ( 0.00%)      break;
          .             case 3:
         18 ( 0.00%)      lower_glue_limit = tier2 + 1;
          6 ( 0.00%)      upper_glue_limit = UINT_MAX;
          6 ( 0.00%)      break;
          .             default:
         12 ( 0.00%)      assert (tier == 0);
          6 ( 0.00%)      lower_glue_limit = 0;
          6 ( 0.00%)      upper_glue_limit = UINT_MAX;
          6 ( 0.00%)      break;
          .             }
         72 ( 0.00%)    assert (lower_glue_limit <= upper_glue_limit);
         72 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
         24 ( 0.00%)    size_t prioritized = 0;
         72 ( 0.00%)    unsigned *counts = vivifier->counts;
         72 ( 0.00%)    references *schedule = &vivifier->schedule;
        240 ( 0.00%)    for (unsigned prioritize = 0; prioritize < 2; prioritize++) {
 53,299,776 ( 0.02%)      for (all_clauses (c)) {
361,144,929 ( 0.15%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (5,922,144x)
 29,610,720 ( 0.01%)        if (c->garbage)
    269,952 ( 0.00%)          continue;
 11,304,384 ( 0.00%)        if (prioritize)
 14,116,630 ( 0.01%)          count_clause (c, counts);
500,218,110 ( 0.21%)  => build/../src/vivify.c:count_clause (2,823,326x)
 11,304,384 ( 0.00%)        if (tier) {
 29,725,318 ( 0.01%)          if (!c->redundant)
  8,262,012 ( 0.00%)            continue;
    577,340 ( 0.00%)          if (c->glue < lower_glue_limit)
     58,028 ( 0.00%)            continue;
    432,270 ( 0.00%)          if (c->glue > upper_glue_limit)
     45,892 ( 0.00%)            continue;
  7,028,590 ( 0.00%)        } else if (c->redundant)
     68,064 ( 0.00%)          continue;
  9,885,736 ( 0.00%)        if (c->vivify != prioritize)
  1,406,698 ( 0.00%)          continue;
  4,962,293 ( 0.00%)        if (simplify_vivification_candidate (solver, c))
218,252,252 ( 0.09%)  => build/../src/vivify.c:simplify_vivification_candidate (708,899x)
      8,384 ( 0.00%)          continue;
  1,401,030 ( 0.00%)        if (prioritize)
    498,383 ( 0.00%)          prioritized++;
  2,802,060 ( 0.00%)        const reference ref = (ward *) c - arena;
  9,808,434 ( 0.00%)        PUSH_STACK (*schedule, ref);
  2,735,903 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (102x)
          .               }
          .             }
         96 ( 0.00%)    CLEAR_STACK (solver->clause);
        192 ( 0.00%)    size_t scheduled = SIZE_STACK (*schedule);
         48 ( 0.00%)    if (prioritized) {
        560 ( 0.00%)      kissat_phase (solver, vivifier->mode, GET (vivifications),
        816 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (16x)
        544 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (16x)
        112 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (16x)
          .                             "prioritized %zu clauses %.0f%%", prioritized,
          .                             kissat_percent (prioritized, scheduled));
          .             } else {
        128 ( 0.00%)      kissat_phase (solver, vivifier->mode, GET (vivifications),
        344 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (8x)
         56 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (8x)
          .                             "prioritizing all %zu scheduled clauses", scheduled);
    954,005 ( 0.00%)      for (all_stack (reference, ref, *schedule)) {
    817,650 ( 0.00%)        clause *c = (clause *) (arena + ref);
    953,925 ( 0.00%)        assert (kissat_clause_in_arena (solver, c));
 12,752,642 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_clause_in_arena (136,275x)
    545,100 ( 0.00%)        c->vivify = true;
          .               }
          .             }
         72 ( 0.00%)    vivifier->scheduled = scheduled;
        144 ( 0.00%)    vivifier->tried = vivifier->vivified = 0;
         96 ( 0.00%)  }
          .           
          .           static inline bool worse_candidate (kissat *solver, unsigned *counts,
  1,774,052 ( 0.00%)                                      reference r, reference s) {
  1,520,616 ( 0.00%)    const clause *const c = kissat_dereference_clause (solver, r);
 34,493,944 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (253,436x)
  1,520,616 ( 0.00%)    const clause *const d = kissat_dereference_clause (solver, s);
 34,478,496 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (253,436x)
          .           
  2,417,112 ( 0.00%)    if (!c->vivify && d->vivify)
      7,920 ( 0.00%)      return true;
          .           
  2,121,148 ( 0.00%)    if (c->vivify && !d->vivify)
        402 ( 0.00%)      return false;
          .           
    747,825 ( 0.00%)    unsigned const *p = BEGIN_LITS (c);
    747,825 ( 0.00%)    unsigned const *q = BEGIN_LITS (d);
  1,994,200 ( 0.00%)    const unsigned *const e = END_LITS (c);
  1,994,200 ( 0.00%)    const unsigned *const f = END_LITS (d);
          .           
    498,550 ( 0.00%)    unsigned a = INVALID_LIT, b = INVALID_LIT;
          .           
  3,432,980 ( 0.00%)    while (p != e && q != f) {
  2,642,685 ( 0.00%)      a = *p++;
  2,642,685 ( 0.00%)      b = *q++;
  3,171,222 ( 0.00%)      const unsigned u = counts[a];
  3,171,222 ( 0.00%)      const unsigned v = counts[b];
  1,585,611 ( 0.00%)      if (u < v)
    260,936 ( 0.00%)        return true;
  1,194,207 ( 0.00%)      if (u > v)
    229,508 ( 0.00%)        return false;
          .             }
          .           
     12,483 ( 0.00%)    if (p != e && q == f)
        216 ( 0.00%)      return true;
          .           
     23,670 ( 0.00%)    if (p == e && q != f)
        750 ( 0.00%)      return false;
          .           
     21,420 ( 0.00%)    assert (p == e && q == f);
          .           
     10,710 ( 0.00%)    if (a < b)
      2,056 ( 0.00%)      return true;
      7,626 ( 0.00%)    if (a > b)
      4,738 ( 0.00%)      return false;
          .           
        519 ( 0.00%)    return r < s;
    506,872 ( 0.00%)  }
          .           
          .           #define WORSE_CANDIDATE(A, B) worse_candidate (solver, counts, (A), (B))
          .           
          .           static void
         90 ( 0.00%)  sort_vivification_candidates_after_sorting_literals (vivifier *vivifier) {
         54 ( 0.00%)    kissat *solver = vivifier->solver;
         54 ( 0.00%)    unsigned *counts = vivifier->counts;
         54 ( 0.00%)    references *schedule = &vivifier->schedule;
  5,933,244 ( 0.00%)    SORT_STACK (reference, *schedule, WORSE_CANDIDATE);
103,239,022 ( 0.04%)  => build/../src/vivify.c:worse_candidate (253,436x)
         54 ( 0.00%)  }
          .           
         90 ( 0.00%)  static void sort_scheduled_candidate_literals (vivifier *vivifier) {
         54 ( 0.00%)    kissat *solver = vivifier->solver;
         54 ( 0.00%)    unsigned *counts = vivifier->counts;
         54 ( 0.00%)    references *schedule = &vivifier->schedule;
    161,428 ( 0.00%)    for (all_stack (reference, ref, *schedule)) {
    120,936 ( 0.00%)      clause *c = kissat_dereference_clause (solver, ref);
  2,743,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (20,156x)
    120,936 ( 0.00%)      vivify_sort_clause_by_counts (solver, c, counts);
 96,049,904 ( 0.04%)  => build/../src/vivify.c:vivify_sort_clause_by_counts (20,156x)
          .             }
         54 ( 0.00%)  }
          .           
          .           static inline void init_countref (countref *cr, clause *c, reference ref,
          .                                             unsigned *counts) {
          .             assert (COUNTREF_COUNTS <= c->size);
          .             assert (c->size <= MAX_COUNTREF_SIZE);
          .             cr->size = c->size;
          .             cr->vivify = c->vivify;
          .             cr->ref = ref;
-- line 378 ----------------------------------------
-- line 434 ----------------------------------------
          .             references *schedule = &vivifier->schedule;
          .             countrefs *countrefs = &vivifier->countrefs;
          .             assert (EMPTY_STACK (*schedule));
          .             for (all_stack (countref, cr, *countrefs))
          .               PUSH_STACK (*schedule, cr.ref);
          .             RELEASE_STACK (*countrefs);
          .           }
          .           
         90 ( 0.00%)  static void sort_vivification_candidates (vivifier *vivifier) {
          .           #ifndef QUIET
         54 ( 0.00%)    kissat *solver = vivifier->solver;
          .           #endif
        162 ( 0.00%)    START (vivifysort);
         72 ( 0.00%)    if (vivifier->tier) {
        144 ( 0.00%)      kissat_extremely_verbose (
        774 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (18x)
          .                   solver, "sorting %s vivification candidates precisely",
          .                   vivifier->name);
         54 ( 0.00%)      sort_scheduled_candidate_literals (vivifier);
 99,196,570 ( 0.04%)  => build/../src/vivify.c:sort_scheduled_candidate_literals (18x)
         72 ( 0.00%)      sort_vivification_candidates_after_sorting_literals (vivifier);
109,172,572 ( 0.05%)  => build/../src/vivify.c:sort_vivification_candidates_after_sorting_literals (18x)
          .             } else {
          .               kissat_extremely_verbose (
          .                   solver,
          .                   "sorting %s vivification candidates imprecisely "
          .                   "by first %u literals",
          .                   vivifier->name, (unsigned) COUNTREF_COUNTS);
          .               init_countrefs (vivifier);
          .               rank_vivification_candidates (vivifier);
          .               copy_countrefs (vivifier);
          .             }
        162 ( 0.00%)    STOP (vivifysort);
         54 ( 0.00%)  }
          .           
          .           static void vivify_deduce (vivifier *vivifier, clause *candidate,
          .                                      clause *conflict, unsigned implied,
    361,520 ( 0.00%)                             clause **subsuming_ptr, bool *redundant_ptr) {
    108,456 ( 0.00%)    kissat *solver = vivifier->solver;
    216,912 ( 0.00%)    LOG ("starting vivification conflict analysis");
     36,152 ( 0.00%)    bool redundant = false;
     36,152 ( 0.00%)    bool subsumes = false;
          .           
    144,608 ( 0.00%)    assert (solver->level);
    216,912 ( 0.00%)    assert (EMPTY_STACK (solver->clause));
    216,912 ( 0.00%)    assert (EMPTY_STACK (solver->analyzed));
          .           
     72,304 ( 0.00%)    if (implied != INVALID_LIT) {
     47,032 ( 0.00%)      unsigned not_implied = NOT (implied);
     35,274 ( 0.00%)      LOG ("vivify analyzing %s", LOGLIT (not_implied));
    105,822 ( 0.00%)      assigned *const a = ASSIGNED (not_implied);
     23,516 ( 0.00%)      assert (a->level);
     35,274 ( 0.00%)      assert (!a->analyzed);
     23,516 ( 0.00%)      a->analyzed = true;
     76,427 ( 0.00%)      PUSH_STACK (solver->analyzed, not_implied);
     82,306 ( 0.00%)      PUSH_STACK (solver->clause, implied);
          .             } else {
    127,286 ( 0.00%)      clause *reason = conflict ? conflict : candidate;
    272,457 ( 0.00%)      assert (reason), assert (!reason->garbage);
    151,365 ( 0.00%)      if (reason->redundant)
      1,441 ( 0.00%)        redundant = true;
    121,092 ( 0.00%)      subsumes = (reason != candidate);
  1,388,770 ( 0.00%)      for (all_literals_in_clause (other, reason)) {
  1,602,300 ( 0.00%)        assert (VALUE (other) < 0);
    801,150 ( 0.00%)        const value value = kissat_fixed (solver, other);
  5,607,856 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_fixed (133,525x)
    267,050 ( 0.00%)        if (value < 0)
        194 ( 0.00%)          continue;
    799,986 ( 0.00%)        LOG ("vivify analyzing %s", LOGLIT (other));
    266,662 ( 0.00%)        assert (!value);
  2,399,958 ( 0.00%)        assigned *const a = ASSIGNED (other);
    533,324 ( 0.00%)        assert (a->level);
    799,986 ( 0.00%)        assert (!a->analyzed);
    533,324 ( 0.00%)        a->analyzed = true;
  1,733,303 ( 0.00%)        PUSH_STACK (solver->analyzed, other);
    933,317 ( 0.00%)        if (solver->marks[other] <= 0)
     42,326 ( 0.00%)          subsumes = false;
          .               }
    121,789 ( 0.00%)      if (reason != candidate && reason->redundant)
      2,880 ( 0.00%)        kissat_recompute_and_promote (solver, reason);
    204,257 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/deduce.c:kissat_recompute_and_promote (576x)
     60,546 ( 0.00%)      if (subsumes) {
         24 ( 0.00%)        LOGCLS (candidate, "vivify subsumed");
         24 ( 0.00%)        LOGCLS (reason, "vivify subsuming");
         12 ( 0.00%)        *subsuming_ptr = reason;
          4 ( 0.00%)        return;
          .               }
          .             }
          .           
    108,444 ( 0.00%)    const mark *const marks = solver->marks;
     36,148 ( 0.00%)    size_t analyzed = 0;
  5,731,429 ( 0.00%)    while (analyzed < SIZE_STACK (solver->analyzed)) {
  9,570,448 ( 0.00%)      const unsigned not_lit = PEEK_STACK (solver->analyzed, analyzed);
  4,785,224 ( 0.00%)      const unsigned lit = NOT (not_lit);
  7,177,836 ( 0.00%)      assert (VALUE (lit) > 0);
    598,153 ( 0.00%)      analyzed++;
 10,766,754 ( 0.00%)      assigned *a = ASSIGNED (lit);
  2,392,612 ( 0.00%)      assert (a->level);
  2,990,765 ( 0.00%)      assert (a->analyzed);
  2,392,612 ( 0.00%)      if (a->reason == DECISION_REASON) {
  1,017,144 ( 0.00%)        LOG ("vivify analyzing decision %s", LOGLIT (not_lit));
  2,373,336 ( 0.00%)        PUSH_STACK (solver->clause, not_lit);
  2,143,145 ( 0.00%)      } else if (a->binary) {
    302,892 ( 0.00%)        const unsigned other = a->reason;
    610,440 ( 0.00%)        if (marks[lit] > 0 && marks[other] > 0) {
      3,390 ( 0.00%)          LOGCLS (candidate, "vivify subsumed");
      3,390 ( 0.00%)          LOGBINARY (lit, other, "vivify subsuming"); // Might be jumped!
      4,520 ( 0.00%)          *subsuming_ptr = kissat_binary_conflict (solver, lit, other);
     16,950 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_binary_conflict (565x)
        565 ( 0.00%)          return;
          .                 }
  1,204,788 ( 0.00%)        assert (VALUE (other) < 0);
  1,807,182 ( 0.00%)        assigned *b = ASSIGNED (other);
    401,596 ( 0.00%)        assert (b->level);
    501,995 ( 0.00%)        if (b->analyzed)
     77,961 ( 0.00%)          continue;
    134,628 ( 0.00%)        LOGBINARY (lit, other, "vivify analyzing %s reason", LOGLIT (lit));
     89,752 ( 0.00%)        b->analyzed = true;
    314,132 ( 0.00%)        PUSH_STACK (solver->analyzed, other);
          .               } else {
    982,995 ( 0.00%)        const reference ref = a->reason;
  1,965,990 ( 0.00%)        LOGREF (ref, "vivify analyzing %s reason", LOGLIT (lit));
  1,965,990 ( 0.00%)        clause *reason = kissat_dereference_clause (solver, ref);
 44,849,385 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (327,665x)
    982,995 ( 0.00%)        assert (reason != candidate);
  1,638,325 ( 0.00%)        if (reason->redundant)
     16,399 ( 0.00%)          redundant = true;
    327,665 ( 0.00%)        subsumes = true;
 13,038,307 ( 0.01%)        for (all_literals_in_clause (other, reason)) {
  7,941,358 ( 0.00%)          if (marks[other] <= 0)
    978,502 ( 0.00%)            subsumes = false;
  3,481,428 ( 0.00%)          if (other == lit)
    655,330 ( 0.00%)            continue;
  2,498,433 ( 0.00%)          assert (other != not_lit);
  9,993,732 ( 0.00%)          assert (VALUE (other) < 0);
 14,990,598 ( 0.01%)          assigned *b = ASSIGNED (other);
  3,331,244 ( 0.00%)          if (!b->level)
     29,052 ( 0.00%)            continue;
  4,091,425 ( 0.00%)          if (b->analyzed)
    375,783 ( 0.00%)            continue;
  1,770,008 ( 0.00%)          b->analyzed = true;
  6,195,028 ( 0.00%)          PUSH_STACK (solver->analyzed, other);
          .                 }
  1,638,325 ( 0.00%)        if (reason->redundant)
     81,995 ( 0.00%)          kissat_recompute_and_promote (solver, reason);
  5,250,858 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/deduce.c:kissat_recompute_and_promote (16,399x)
    655,330 ( 0.00%)        if (subsumes) {
      5,562 ( 0.00%)          LOGCLS (candidate, "vivify subsumed");
      5,562 ( 0.00%)          LOGCLS (reason, "vivify subsuming");
      2,781 ( 0.00%)          *subsuming_ptr = reason;
        927 ( 0.00%)          return;
          .                 }
          .               }
          .             }
          .           
    207,936 ( 0.00%)    LOG ("vivification analysis %s redundant clause",
          .                  redundant ? "used" : "without");
    207,936 ( 0.00%)    LOGTMP ("vivification analysis");
          .           
    103,968 ( 0.00%)    *redundant_ptr = redundant;
     72,304 ( 0.00%)  }
          .           
    180,760 ( 0.00%)  static void reset_vivify_analyzed (vivifier *vivifier) {
    108,456 ( 0.00%)    kissat *solver = vivifier->solver;
    216,912 ( 0.00%)    LOG ("reset vivification conflict analysis");
    108,456 ( 0.00%)    struct assigned *assigned = solver->assigned;
  4,590,570 ( 0.00%)    for (all_stack (unsigned, lit, solver->analyzed)) {
  4,833,200 ( 0.00%)      const unsigned idx = IDX (lit);
  3,624,900 ( 0.00%)      struct assigned *a = assigned + idx;
  2,416,600 ( 0.00%)      a->analyzed = false;
          .             }
    144,608 ( 0.00%)    CLEAR_STACK (solver->analyzed);
    144,608 ( 0.00%)    CLEAR_STACK (solver->clause);
    108,456 ( 0.00%)  }
          .           
          .           static bool vivify_shrinkable (kissat *solver, unsigneds *sorted,
    242,592 ( 0.00%)                                 clause *conflict) {
    519,840 ( 0.00%)    assert (SIZE_STACK (solver->clause) <= SIZE_STACK (*sorted));
    485,184 ( 0.00%)    if (SIZE_STACK (solver->clause) == SIZE_STACK (*sorted))
     62,264 ( 0.00%)      return false;
     10,572 ( 0.00%)    const assigned *const assigned = solver->assigned;
     10,572 ( 0.00%)    const value *const values = solver->values;
      3,524 ( 0.00%)    unsigned count_implied = 0;
    181,122 ( 0.00%)    for (all_stack (unsigned, lit, *sorted)) {
    114,270 ( 0.00%)      value value = values[lit];
     45,968 ( 0.00%)      if (!value) {
      1,560 ( 0.00%)        LOG ("vivification unassigned %s thus shrinking", LOGLIT (lit));
        520 ( 0.00%)        return true;
          .               }
     45,188 ( 0.00%)      if (value > 0) {
      2,058 ( 0.00%)        LOG ("vivification implied satisfied %s", LOGLIT (lit));
        686 ( 0.00%)        if (conflict) {
        858 ( 0.00%)          LOG ("at least one implied literal with conflict thus shrinking");
        286 ( 0.00%)          return true;
          .                 }
      1,000 ( 0.00%)        if (count_implied++) {
        108 ( 0.00%)          LOG ("at least two implied literals thus shrinking");
         36 ( 0.00%)          return true;
          .                 }
          .               } else {
     44,502 ( 0.00%)        assert (value < 0);
    178,008 ( 0.00%)        const unsigned idx = IDX (lit);
    133,506 ( 0.00%)        const struct assigned *const a = assigned + idx;
     89,004 ( 0.00%)        assert (a->level);
    133,506 ( 0.00%)        if (!a->analyzed) {
      8,364 ( 0.00%)          LOG ("vivification non-analyzed %s thus shrinking", LOGLIT (lit));
      2,788 ( 0.00%)          return true;
          .                 }
     83,428 ( 0.00%)        if (a->reason != DECISION_REASON) {
     10,254 ( 0.00%)          LOG ("vivification implied falsified %s thus shrinking",
          .                        LOGLIT (lit));
      3,418 ( 0.00%)          return true;
          .                 }
          .               }
          .             }
          .             LOG ("vivification learned clause not shrinkable");
          .             return false;
     69,312 ( 0.00%)  }
          .           
        300 ( 0.00%)  static void vivify_learn_unit (kissat *solver, clause *c) {
        300 ( 0.00%)    LOG ("vivification learns unit clause");
        400 ( 0.00%)    assert (SIZE_STACK (solver->clause) == 1);
        200 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, 0);
  2,886,991 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (50x)
        500 ( 0.00%)    const unsigned unit = PEEK_STACK (solver->clause, 0);
        250 ( 0.00%)    kissat_learned_unit (solver, unit);
  9,204,114 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (50x)
        100 ( 0.00%)    solver->iterating = true;
        250 ( 0.00%)    kissat_mark_clause_as_garbage (solver, c);
    408,073 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (50x)
        200 ( 0.00%)    assert (!solver->level);
        300 ( 0.00%)    clause *conflict = kissat_probing_propagate (solver, 0, true);
  1,301,773 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (50x)
        100 ( 0.00%)    assert (!conflict || solver->inconsistent);
        200 ( 0.00%)    INC (vivify_units);
        750 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivify_units (50x)
          .             (void) conflict;
        150 ( 0.00%)  }
          .           
      2,370 ( 0.00%)  static void vivify_learn_binary (kissat *solver, clause *c) {
      2,370 ( 0.00%)    LOG ("vivification learns binary clause");
      1,580 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, 0);
 14,788,121 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (395x)
      3,160 ( 0.00%)    assert (SIZE_STACK (solver->clause) == 2);
      1,975 ( 0.00%)    if (c->redundant)
        830 ( 0.00%)      (void) kissat_new_redundant_clause (solver, 1);
 14,491,173 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_redundant_clause (166x)
          .             else
        687 ( 0.00%)      (void) kissat_new_irredundant_clause (solver);
  7,887,914 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (229x)
      1,975 ( 0.00%)    kissat_mark_clause_as_garbage (solver, c);
  1,145,210 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (395x)
      1,185 ( 0.00%)  }
          .           
          .           static void swap_first_literal_with_best_watch (kissat *solver,
          .                                                           unsigned *lits,
     52,080 ( 0.00%)                                                  unsigned size) {
     13,020 ( 0.00%)    assert (size);
     13,020 ( 0.00%)    unsigned *best_ptr = lits;
     32,550 ( 0.00%)    unsigned first = *best_ptr, best = first;
     71,610 ( 0.00%)    signed char value = VALUE (best);
    123,690 ( 0.00%)    unsigned best_level = LEVEL (best);
     32,550 ( 0.00%)    const unsigned *const end = lits + size;
    286,638 ( 0.00%)    for (unsigned *p = lits + 1; value < 0 && p != end; p++) {
    118,275 ( 0.00%)      unsigned lit = *p;
    433,675 ( 0.00%)      const signed char value = VALUE (lit);
     78,850 ( 0.00%)      if (value < 0) {
    659,832 ( 0.00%)        const unsigned level = LEVEL (lit);
    104,184 ( 0.00%)        if (level <= best_level)
     25,493 ( 0.00%)          continue;
     18,470 ( 0.00%)        best_level = level;
          .               }
     27,864 ( 0.00%)      best_ptr = p;
     41,796 ( 0.00%)      best = lit;
          .             }
     19,530 ( 0.00%)    if (best_ptr == lits)
      3,265 ( 0.00%)      return;
     19,470 ( 0.00%)    LOG ("better watch %s instead of %s", LOGLIT (best), LOGLIT (first));
      9,735 ( 0.00%)    *best_ptr = first;
     12,980 ( 0.00%)    *lits = best;
     19,530 ( 0.00%)  }
          .           
     19,530 ( 0.00%)  static void vivify_unwatch_clause (kissat *solver, clause *c) {
      9,765 ( 0.00%)    unsigned *lits = c->lits;
     19,530 ( 0.00%)    const reference ref = kissat_reference_clause (solver, c);
    364,155 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (3,255x)
     22,785 ( 0.00%)    kissat_unwatch_blocking (solver, lits[0], ref);
  1,051,303 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_unwatch_blocking (3,255x)
     26,040 ( 0.00%)    kissat_unwatch_blocking (solver, lits[1], ref);
  1,020,744 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_unwatch_blocking (3,255x)
      9,765 ( 0.00%)  }
          .           
     19,530 ( 0.00%)  static void vivify_watch_clause (kissat *solver, clause *c) {
      9,765 ( 0.00%)    unsigned size = c->size;
      9,765 ( 0.00%)    unsigned *lits = c->lits;
     19,530 ( 0.00%)    const reference ref = kissat_reference_clause (solver, c);
    364,859 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (3,255x)
     19,530 ( 0.00%)    swap_first_literal_with_best_watch (solver, lits, size);
    901,704 ( 0.00%)  => build/../src/vivify.c:swap_first_literal_with_best_watch (3,255x)
     26,040 ( 0.00%)    swap_first_literal_with_best_watch (solver, lits + 1, size - 1);
  1,316,403 ( 0.00%)  => build/../src/vivify.c:swap_first_literal_with_best_watch (3,255x)
     29,295 ( 0.00%)    kissat_watch_blocking (solver, lits[0], lits[1], ref);
    850,113 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_blocking (3,255x)
     29,295 ( 0.00%)    kissat_watch_blocking (solver, lits[1], lits[0], ref);
    849,808 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_blocking (3,255x)
      9,765 ( 0.00%)  }
          .           
          .           static void vivify_learn_large (kissat *solver, clause *c,
     21,553 ( 0.00%)                                  unsigned implied) {
     21,553 ( 0.00%)    assert (!c->garbage);
     18,474 ( 0.00%)    LOG ("vivification learns large clause");
          .           
     55,422 ( 0.00%)    CHECK_AND_ADD_STACK (solver->clause);
681,144,064 ( 0.29%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (3,079x)
     12,316 ( 0.00%)    ADD_STACK_TO_PROOF (solver->clause);
          .           
     27,711 ( 0.00%)    REMOVE_CHECKER_CLAUSE (c);
 26,442,034 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_clause (3,079x)
     12,316 ( 0.00%)    DELETE_CLAUSE_FROM_PROOF (c);
          .           
     15,395 ( 0.00%)    vivify_unwatch_clause (solver, c);
  2,421,085 ( 0.00%)  => build/../src/vivify.c:vivify_unwatch_clause (3,079x)
          .           
     33,869 ( 0.00%)    bool irredundant = !c->redundant;
          .           
      6,158 ( 0.00%)    if (irredundant) { // TODO this could be made more precise.
     31,305 ( 0.00%)      for (all_literals_in_clause (lit, c))
     15,975 ( 0.00%)        kissat_mark_removed_literal (solver, lit);
    118,161 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (3,195x)
          .             }
          .           
      9,237 ( 0.00%)    unsigneds *learned = &solver->clause;
      9,237 ( 0.00%)    const unsigned old_size = c->size;
     24,632 ( 0.00%)    const unsigned new_size = SIZE_STACK (*learned);
      9,237 ( 0.00%)    assert (new_size <= old_size);
          .           
      9,237 ( 0.00%)    unsigned *lits = c->lits;
     24,632 ( 0.00%)    memcpy (lits, BEGIN_STACK (*learned), new_size * sizeof *lits);
     49,486 ( 0.00%)  => ???:0x000000000010c650 (3,079x)
          .           
      6,158 ( 0.00%)    if (irredundant)
     31,305 ( 0.00%)      for (all_literals_in_clause (lit, c))
     15,975 ( 0.00%)        kissat_mark_added_literal (solver, lit);
    168,895 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (3,195x)
          .           
      9,237 ( 0.00%)    assert (new_size < old_size);
     18,474 ( 0.00%)    if (!c->shrunken) {
      9,344 ( 0.00%)      c->shrunken = true;
     16,352 ( 0.00%)      lits[old_size - 1] = INVALID_LIT;
          .             }
      9,237 ( 0.00%)    c->size = new_size;
     25,796 ( 0.00%)    if (!irredundant && c->glue >= new_size)
      2,338 ( 0.00%)      kissat_promote_clause (solver, c, new_size - 1);
     38,346 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.c:kissat_promote_clause (334x)
      6,158 ( 0.00%)    c->searched = 2;
          .           
      6,158 ( 0.00%)    if (implied == INVALID_LIT) {
     12,336 ( 0.00%)      LOGCLS (c, "vivified shrunken after conflict");
     14,392 ( 0.00%)      kissat_backtrack_without_updating_phases (solver, new_size - 2);
113,904,720 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (2,056x)
          .             } else {
      6,138 ( 0.00%)      LOGCLS (c, "vivified shrunken after implied");
      6,138 ( 0.00%)      assert (solver->level >= new_size - 1);
          .             }
          .           
     15,395 ( 0.00%)    vivify_watch_clause (solver, c);
  4,225,000 ( 0.00%)  => build/../src/vivify.c:vivify_watch_clause (3,079x)
      9,237 ( 0.00%)  }
          .           
     24,668 ( 0.00%)  static void vivify_learn (kissat *solver, clause *c, unsigned implied) {
     28,192 ( 0.00%)    size_t size = SIZE_STACK (solver->clause);
      7,048 ( 0.00%)    if (size == 1)
        250 ( 0.00%)      vivify_learn_unit (solver, c);
 13,804,951 ( 0.01%)  => build/../src/vivify.c:vivify_learn_unit (50x)
      6,948 ( 0.00%)    else if (size == 2)
      1,975 ( 0.00%)      vivify_learn_binary (solver, c);
 38,328,550 ( 0.02%)  => build/../src/vivify.c:vivify_learn_binary (395x)
          .             else
     18,474 ( 0.00%)      vivify_learn_large (solver, c, implied);
829,090,218 ( 0.35%)  => build/../src/vivify.c:vivify_learn_large (3,079x)
     11,017 ( 0.00%)  }
          .           
          .           static void binary_strengthen_after_instantiation (kissat *solver,
          .                                                              clause *c,
        483 ( 0.00%)                                                     unsigned remove) {
        414 ( 0.00%)    LOG ("vivification instantiation yields binary clause");
        276 ( 0.00%)    assert (solver->level == 3);
          .           
        138 ( 0.00%)    unsigned first = INVALID_LIT, second = INVALID_LIT;
      2,491 ( 0.00%)    for (all_literals_in_clause (lit, c))
        763 ( 0.00%)      if (lit != remove) {
      1,668 ( 0.00%)        assert (VALUE (lit) < 0);
      2,780 ( 0.00%)        if (LEVEL (lit)) {
        276 ( 0.00%)          if (first == INVALID_LIT)
        207 ( 0.00%)            first = lit;
          .                   else {
        138 ( 0.00%)            assert (second == INVALID_LIT);
        138 ( 0.00%)            second = lit;
          .                   }
          .                 }
          .               }
        138 ( 0.00%)    assert (first != INVALID_LIT);
        138 ( 0.00%)    assert (second != INVALID_LIT);
        414 ( 0.00%)    LOGBINARY (first, second, "vivified strengthened through instantiation");
        276 ( 0.00%)    CLEAR_STACK (solver->clause);
        897 ( 0.00%)    PUSH_STACK (solver->clause, first);
        897 ( 0.00%)    PUSH_STACK (solver->clause, second);
        345 ( 0.00%)    if (c->redundant)
         55 ( 0.00%)      (void) kissat_new_redundant_clause (solver, 1);
  1,694,301 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_redundant_clause (11x)
          .             else
        174 ( 0.00%)      (void) kissat_new_irredundant_clause (solver);
  4,835,946 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_new_irredundant_clause (58x)
          .           
        345 ( 0.00%)    kissat_mark_clause_as_garbage (solver, c);
    159,926 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (69x)
        276 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, 0);
  2,041,384 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (69x)
        207 ( 0.00%)  }
          .           
          .           static void large_strengthen_after_instantiation (kissat *solver, clause *c,
      1,232 ( 0.00%)                                                    unsigned remove) {
      1,056 ( 0.00%)    LOG ("vivification instantiation yields large clause");
        704 ( 0.00%)    assert (solver->level > 3);
          .           
        704 ( 0.00%)    SHRINK_CLAUSE_IN_PROOF (c, remove, INVALID_LIT);
      1,760 ( 0.00%)    CHECK_SHRINK_CLAUSE (c, remove, INVALID_LIT);
 59,883,476 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_shrink_clause (176x)
          .           
        880 ( 0.00%)    vivify_unwatch_clause (solver, c);
    122,532 ( 0.00%)  => build/../src/vivify.c:vivify_unwatch_clause (176x)
          .           
      1,936 ( 0.00%)    bool irredundant = !c->redundant;
        528 ( 0.00%)    const unsigned old_size = c->size;
        352 ( 0.00%)    assert (old_size > 3);
        704 ( 0.00%)    unsigned new_size = 0, *lits = c->lits;
      9,860 ( 0.00%)    for (unsigned i = 0; i != old_size; i++) {
     13,470 ( 0.00%)      const unsigned lit = lits[i];
      6,735 ( 0.00%)      if (lit == remove) {
        352 ( 0.00%)        if (irredundant)
        102 ( 0.00%)          kissat_mark_removed_literal (solver, lit);
        629 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (17x)
     14,483 ( 0.00%)      } else if (kissat_fixed (solver, lit) >= 0) {
     86,883 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_fixed (2,069x)
     18,486 ( 0.00%)        lits[new_size++] = lit;
      4,108 ( 0.00%)        if (irredundant)
        575 ( 0.00%)          kissat_mark_added_literal (solver, lit);
      6,705 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (115x)
          .               }
          .             }
        352 ( 0.00%)    assert (2 < new_size);
        528 ( 0.00%)    assert (new_size < old_size);
      1,056 ( 0.00%)    if (!c->shrunken) {
        376 ( 0.00%)      c->shrunken = true;
        658 ( 0.00%)      lits[old_size - 1] = INVALID_LIT;
          .             }
        528 ( 0.00%)    c->size = new_size;
      1,499 ( 0.00%)    if (!irredundant && c->glue >= new_size)
         28 ( 0.00%)      kissat_promote_clause (solver, c, new_size - 1);
        460 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.c:kissat_promote_clause (4x)
        352 ( 0.00%)    c->searched = 2;
      1,056 ( 0.00%)    LOGCLS (c, "vivified strengthened through instantiation");
          .           
      1,232 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, solver->level - 2);
  7,360,621 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (176x)
        880 ( 0.00%)    vivify_watch_clause (solver, c);
    230,402 ( 0.00%)  => build/../src/vivify.c:vivify_watch_clause (176x)
        528 ( 0.00%)  }
          .           
          .           static void vivify_strengthen_after_instantiation (kissat *solver,
          .                                                              clause *c,
      1,715 ( 0.00%)                                                     unsigned remove) {
        980 ( 0.00%)    assert (solver->level >= 3);
      2,940 ( 0.00%)    assert (VALUE (remove) > 0);
      5,390 ( 0.00%)    assert (LEVEL (remove) == solver->level);
          .           
        980 ( 0.00%)    if (solver->level == 3)
        414 ( 0.00%)      binary_strengthen_after_instantiation (solver, c, remove);
  8,745,491 ( 0.00%)  => build/../src/vivify.c:binary_strengthen_after_instantiation (69x)
          .             else
      1,056 ( 0.00%)      large_strengthen_after_instantiation (solver, c, remove);
 67,778,808 ( 0.03%)  => build/../src/vivify.c:large_strengthen_after_instantiation (176x)
        804 ( 0.00%)  }
          .           
    180,760 ( 0.00%)  static void vivify_mark_sorted_literals (vivifier *vivifier) {
    108,456 ( 0.00%)    kissat *solver = vivifier->solver;
    216,912 ( 0.00%)    LOG ("marking sorted literals");
    108,456 ( 0.00%)    unsigneds *sorted = &vivifier->sorted;
    108,456 ( 0.00%)    value *marks = solver->marks;
  1,854,193 ( 0.00%)    for (all_stack (unsigned, lit, *sorted))
  4,478,019 ( 0.00%)      assert (!marks[lit]), marks[lit] = 1, marks[NOT (lit)] = -1;
    108,456 ( 0.00%)  }
          .           
    180,760 ( 0.00%)  static void vivify_unmark_sorted_literals (vivifier *vivifier) {
    108,456 ( 0.00%)    kissat *solver = vivifier->solver;
    216,912 ( 0.00%)    LOG ("unmarking sorted literals");
    108,456 ( 0.00%)    unsigneds *sorted = &vivifier->sorted;
    108,456 ( 0.00%)    value *marks = solver->marks;
  1,854,193 ( 0.00%)    for (all_stack (unsigned, lit, *sorted))
  4,264,780 ( 0.00%)      assert (solver->marks[lit] > 0), assert (marks[NOT (lit)] < 0),
  3,411,824 ( 0.00%)          marks[lit] = marks[NOT (lit)] = 0;
    108,456 ( 0.00%)  }
          .           
          .           static void reestablish_watch_invariant_for_candidate (kissat *solver,
    216,912 ( 0.00%)                                                         clause *candidate) {
    144,608 ( 0.00%)    if (!solver->level)
      1,050 ( 0.00%)      return;
    178,135 ( 0.00%)    if (candidate->garbage)
     10,102 ( 0.00%)      return;
     91,728 ( 0.00%)    unsigned *lits = candidate->lits;
     91,728 ( 0.00%)    unsigned first = lits[0];
     91,728 ( 0.00%)    unsigned second = lits[1];
    336,336 ( 0.00%)    const signed char first_val = VALUE (first);
    336,336 ( 0.00%)    const signed char second_val = VALUE (second);
    147,792 ( 0.00%)    unsigned first_level = first_val ? LEVEL (first) : 0;
    155,370 ( 0.00%)    unsigned second_level = second_val ? LEVEL (second) : 0;
          .             unsigned new_level;
    121,666 ( 0.00%)    if (first_val >= 0 && second_val >= 0)
     57,154 ( 0.00%)      return;
      4,636 ( 0.00%)    if (first_val < 0 && !second_val)
        486 ( 0.00%)      new_level = first_level;
      3,988 ( 0.00%)    else if (first_val < 0 && second_val > 0) {
        147 ( 0.00%)      if (first_level >= second_level)
         98 ( 0.00%)        return;
          .               new_level = first_level;
      7,152 ( 0.00%)    } else if (second_val < 0 && !first_val)
      1,749 ( 0.00%)      new_level = second_level;
      4,820 ( 0.00%)    else if (second_val < 0 && first_val > 0) {
      3,291 ( 0.00%)      if (second_level >= first_level)
      1,097 ( 0.00%)        return;
          .               new_level = second_level;
          .             } else {
        432 ( 0.00%)      assert (first_val < 0), assert (second_val < 0);
        540 ( 0.00%)      new_level = MIN (first_level, second_level);
          .             }
      1,706 ( 0.00%)    assert (new_level);
      5,118 ( 0.00%)    LOGCLS (candidate, "reestablish watch invariant by backtracking to %u",
          .                     new_level - 1);
      5,971 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, new_level - 1);
  8,536,652 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (853x)
     72,304 ( 0.00%)  }
          .           
    436,152 ( 0.00%)  static bool vivify_clause (vivifier *vivifier, clause *candidate) {
          .           
    254,422 ( 0.00%)    assert (!candidate->garbage);
          .           
    109,038 ( 0.00%)    kissat *solver = vivifier->solver;
          .           
    145,384 ( 0.00%)    assert (solver->probing);
    145,384 ( 0.00%)    assert (solver->watching);
    181,730 ( 0.00%)    assert (!solver->inconsistent);
          .           
    218,076 ( 0.00%)    LOGCLS (candidate, "vivifying candidate");
    218,076 ( 0.00%)    LOGCOUNTEDCLS (candidate, vivifier->counts,
          .                            "vivifying unsorted counted candidate");
          .           
    109,038 ( 0.00%)    unsigneds *sorted = &vivifier->sorted;
    145,384 ( 0.00%)    CLEAR_STACK (*sorted);
          .           
  2,044,332 ( 0.00%)    for (all_literals_in_clause (lit, candidate)) {
  1,285,548 ( 0.00%)      const value value = kissat_fixed (solver, lit);
  6,276,093 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_fixed (214,258x)
    428,516 ( 0.00%)      if (value < 0)
        577 ( 0.00%)        continue;
    427,362 ( 0.00%)      if (value > 0) {
        996 ( 0.00%)        LOGCLS (candidate, "%s satisfied", LOGLIT (lit));
        830 ( 0.00%)        kissat_mark_clause_as_garbage (solver, candidate);
    273,731 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (166x)
        332 ( 0.00%)        return false;
          .               }
  2,776,235 ( 0.00%)      PUSH_STACK (*sorted, lit);
     35,362 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (45x)
          .             }
          .           
    253,260 ( 0.00%)    assert (!candidate->garbage);
          .           
    289,440 ( 0.00%)    const unsigned non_false = SIZE_STACK (*sorted);
          .           
     72,360 ( 0.00%)    assert (1 < non_false);
    144,720 ( 0.00%)    assert (non_false <= candidate->size);
          .           
          .           #ifdef LOGGING
    144,720 ( 0.00%)    if (non_false == candidate->size)
    214,968 ( 0.00%)      LOG ("all literals root level unassigned");
          .             else
      2,112 ( 0.00%)      LOG ("found %u root level non-falsified literals", non_false);
          .           #endif
          .           
     72,360 ( 0.00%)    if (non_false == 2) {
        168 ( 0.00%)      LOGCLS (candidate, "skipping actually binary");
         56 ( 0.00%)      return false;
          .             }
          .           
    144,608 ( 0.00%)    INC (vivify_checks);
    542,280 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivify_checks (36,152x)
          .           
     36,152 ( 0.00%)    unsigned unit = INVALID_LIT;
    764,519 ( 0.00%)    for (all_literals_in_clause (lit, candidate)) {
    565,323 ( 0.00%)      const value value = VALUE (lit);
    102,786 ( 0.00%)      if (value < 0)
     13,304 ( 0.00%)        continue;
     76,178 ( 0.00%)      if (!value) {
     33,774 ( 0.00%)        unit = INVALID_LIT;
     33,774 ( 0.00%)        break;
          .               }
      8,630 ( 0.00%)      assert (value > 0);
      8,630 ( 0.00%)      if (unit != INVALID_LIT) {
        604 ( 0.00%)        unit = INVALID_LIT;
        604 ( 0.00%)        break;
          .               }
     11,133 ( 0.00%)      unit = lit;
          .             }
    216,912 ( 0.00%)    reference cand_ref = kissat_reference_clause (solver, candidate);
  4,058,940 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (36,152x)
     72,304 ( 0.00%)    if (unit != INVALID_LIT) {
     31,932 ( 0.00%)      assigned *a = ASSIGNED (unit);
      7,096 ( 0.00%)      assert (a->level);
      8,870 ( 0.00%)      if (a->binary)
        110 ( 0.00%)        unit = INVALID_LIT;
          .               else {
      6,876 ( 0.00%)        if (a->reason != cand_ref)
        533 ( 0.00%)          unit = INVALID_LIT;
          .               }
          .             }
     72,304 ( 0.00%)    if (unit == INVALID_LIT)
    209,796 ( 0.00%)      LOG ("non-reason candidate clause");
          .             else {
      7,116 ( 0.00%)      LOG ("candidate is the reason of %s", LOGLIT (unit));
     22,534 ( 0.00%)      const unsigned level = LEVEL (unit);
      2,372 ( 0.00%)      assert (level > 0);
      7,116 ( 0.00%)      LOG ("forced to backtrack to level %u", level - 1);
      7,116 ( 0.00%)      kissat_backtrack_without_updating_phases (solver, level - 1);
 21,951,715 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (1,186x)
          .             }
          .           
    216,912 ( 0.00%)    assert (EMPTY_STACK (solver->analyzed));
    216,912 ( 0.00%)    assert (EMPTY_STACK (solver->clause));
          .           
    108,456 ( 0.00%)    unsigned *counts = vivifier->counts;
    216,912 ( 0.00%)    vivify_sort_stack_by_counts (solver, sorted, counts);
 50,956,122 ( 0.02%)  => build/../src/vivify.c:vivify_sort_stack_by_counts (36,152x)
          .           
          .           #ifdef LOGGING
    180,760 ( 0.00%)    if (candidate->redundant)
     61,962 ( 0.00%)      LOGCOUNTEDREFLITS (cand_ref, SIZE_STACK (*sorted), sorted->begin,
          .                                  counts, "vivifying sorted redundant glue %u",
          .                                  candidate->glue);
          .             else
    154,950 ( 0.00%)      LOGCOUNTEDREFLITS (cand_ref, SIZE_STACK (*sorted), sorted->begin,
          .                                  counts, "vivifying sorted irredundant");
          .           #endif
          .           
    108,456 ( 0.00%)    vivify_mark_sorted_literals (vivifier);
  7,163,708 ( 0.00%)  => build/../src/vivify.c:vivify_mark_sorted_literals (36,152x)
          .           
     36,152 ( 0.00%)    unsigned implied = INVALID_LIT;
     36,152 ( 0.00%)    clause *conflict = 0;
     36,152 ( 0.00%)    unsigned level = 0;
          .           
  1,626,820 ( 0.00%)    for (all_stack (unsigned, lit, *sorted)) {
  1,382,241 ( 0.00%)      if (level++ < solver->level) {
  1,510,278 ( 0.00%)        frame *frame = &FRAME (level);
    549,192 ( 0.00%)        const unsigned not_lit = NOT (lit);
    274,596 ( 0.00%)        if (frame->decision == not_lit) {
    244,338 ( 0.00%)          LOG ("reusing assumption %s", LOGLIT (not_lit));
    162,892 ( 0.00%)          INC (vivify_reused);
    610,845 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivify_reused (40,723x)
    162,892 ( 0.00%)          INC (vivify_probes);
    610,845 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivify_probes (40,723x)
    488,676 ( 0.00%)          assert (VALUE (lit) < 0);
     81,446 ( 0.00%)          continue;
          .                 }
          .           
    167,556 ( 0.00%)        LOG ("forced to backtrack to decision level %u", level - 1);
    167,556 ( 0.00%)        kissat_backtrack_without_updating_phases (solver, level - 1);
367,699,844 ( 0.16%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (27,926x)
          .               }
          .           
  1,616,263 ( 0.00%)      const value value = VALUE (lit);
    446,566 ( 0.00%)      assert (!value || LEVEL (lit) <= level);
          .           
    293,866 ( 0.00%)      if (value < 0) {
    142,480 ( 0.00%)        assert (LEVEL (lit));
     42,744 ( 0.00%)        LOG ("literal %s already falsified", LOGLIT (lit));
      7,124 ( 0.00%)        continue;
          .               }
          .           
    279,618 ( 0.00%)      if (value > 0) {
     10,220 ( 0.00%)        assert (LEVEL (lit));
      3,066 ( 0.00%)        LOG ("literal %s already initially satisfied", LOGLIT (lit));
      1,022 ( 0.00%)        implied = lit;
        511 ( 0.00%)        break;
          .               }
          .           
    278,596 ( 0.00%)      assert (!value);
          .           
    835,788 ( 0.00%)      LOG ("literal %s unassigned", LOGLIT (lit));
  1,114,384 ( 0.00%)      const unsigned not_lit = NOT (lit);
    557,192 ( 0.00%)      INC (vivify_probes);
  2,089,470 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivify_probes (139,298x)
          .           
    696,490 ( 0.00%)      kissat_internal_assume (solver, not_lit);
 43,689,892 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/decide.c:kissat_internal_assume (139,298x)
    557,192 ( 0.00%)      assert (solver->level >= 1);
          .           
    417,894 ( 0.00%)      const unsigned *p = solver->propagate;
    975,086 ( 0.00%)      conflict = kissat_probing_propagate (solver, candidate, true);
7,239,995,442 ( 3.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (139,298x)
    278,596 ( 0.00%)      if (conflict)
     12,388 ( 0.00%)        break;
          .           
    399,312 ( 0.00%)      const unsigned *end = END_ARRAY (solver->trail);
    399,312 ( 0.00%)      const signed char *const marks = solver->marks;
 10,359,035 ( 0.00%)      while (p != end) {
 16,191,645 ( 0.01%)        const unsigned other = *p++;
 16,191,645 ( 0.01%)        const signed char mark = marks[other];
  6,476,658 ( 0.00%)        if (mark > 0) {
     32,208 ( 0.00%)          LOG ("literal %s already implied satisfied", LOGLIT (other));
     10,736 ( 0.00%)          implied = other;
      5,368 ( 0.00%)          goto EXIT_ASSUMPTION_LOOP;
          .                 }
          .               }
          .             }
     24,079 ( 0.00%)  EXIT_ASSUMPTION_LOOP:;
          .           
          .           #ifdef LOGGING
    132,220 ( 0.00%)    if (!conflict && implied == INVALID_LIT)
    144,474 ( 0.00%)      LOG ("vivification assumptions propagate without conflict nor "
          .                    "producing an implied literal");
          .           #endif
     84,692 ( 0.00%)    assert (!conflict || implied == INVALID_LIT);
          .           
     72,304 ( 0.00%)    if (implied != INVALID_LIT) {
      5,879 ( 0.00%)      unsigned better_implied = INVALID_LIT;
      5,879 ( 0.00%)      unsigned better_implied_trail = INVALID_TRAIL;
    406,221 ( 0.00%)      for (all_stack (unsigned, lit, *sorted)) {
    595,596 ( 0.00%)        if (VALUE (lit) <= 0)
     86,864 ( 0.00%)          continue;
    117,819 ( 0.00%)        unsigned lit_trail = TRAIL (lit);
     18,603 ( 0.00%)        if (lit_trail > better_implied_trail)
        232 ( 0.00%)          continue;
     11,938 ( 0.00%)        better_implied_trail = lit_trail;
     17,907 ( 0.00%)        better_implied = lit;
          .               }
     17,637 ( 0.00%)      if (better_implied != implied) {
        330 ( 0.00%)        LOG ("better implied satisfied literal %s at level %u",
          .                      LOGLIT (better_implied), LEVEL (better_implied));
        110 ( 0.00%)        implied = better_implied;
          .               }
          .             }
          .           
    108,456 ( 0.00%)    unsigned level_after_assumptions = solver->level;
     72,304 ( 0.00%)    assert (level_after_assumptions);
          .           
     36,152 ( 0.00%)    clause *subsuming = 0;
     36,152 ( 0.00%)    bool redundant = false;
    361,520 ( 0.00%)    vivify_deduce (vivifier, candidate, conflict, implied, &subsuming,
208,503,465 ( 0.09%)  => build/../src/vivify.c:vivify_deduce (36,152x)
          .                            &redundant);
          .           
    108,456 ( 0.00%)    vivify_unmark_sorted_literals (vivifier);
 10,362,293 ( 0.00%)  => build/../src/vivify.c:vivify_unmark_sorted_literals (36,152x)
          .           
          .             bool res;
          .           
    108,456 ( 0.00%)    if (subsuming) {
     10,472 ( 0.00%)      assert (!subsuming->garbage);
      7,480 ( 0.00%)      if (candidate->redundant) {
      5,196 ( 0.00%)        LOGCLS (candidate, "vivification subsumed");
      4,330 ( 0.00%)        kissat_mark_clause_as_garbage (solver, candidate);
  9,123,393 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (866x)
     10,342 ( 0.00%)        if (subsuming->redundant && candidate->glue < subsuming->glue) {
        294 ( 0.00%)          LOG ("vivify candidate with smaller glue than subsuming clause");
        441 ( 0.00%)          kissat_promote_clause (solver, subsuming, candidate->glue);
      5,397 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/promote.c:kissat_promote_clause (49x)
          .                 }
      3,464 ( 0.00%)        INC (vivified_subred);
     12,990 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_subred (866x)
      3,464 ( 0.00%)        INC (vivified_subsumed);
     12,990 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_subsumed (866x)
      1,732 ( 0.00%)        res = true;
      4,410 ( 0.00%)      } else if (!subsuming->redundant) {
      4,361 ( 0.00%)        assert (!candidate->redundant);
      3,738 ( 0.00%)        LOGCLS (candidate, "vivification subsumed");
      3,115 ( 0.00%)        kissat_mark_clause_as_garbage (solver, candidate);
  2,556,693 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (623x)
      2,492 ( 0.00%)        INC (vivified_subirr);
      9,345 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_subirr (623x)
      2,492 ( 0.00%)        INC (vivified_subsumed);
      9,345 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_subsumed (623x)
      1,246 ( 0.00%)        res = true;
          .               } else {
         49 ( 0.00%)        assert (!candidate->redundant);
         35 ( 0.00%)        assert (subsuming->redundant);
         42 ( 0.00%)        LOGCLS (candidate, "vivification subsumed");
         35 ( 0.00%)        kissat_mark_clause_as_garbage (solver, candidate);
     23,064 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (7x)
         28 ( 0.00%)        subsuming->redundant = false;
         28 ( 0.00%)        assert (solver->statistics.clauses_redundant);
         35 ( 0.00%)        solver->statistics.clauses_redundant--;
         28 ( 0.00%)        assert (solver->statistics.clauses_irredundant < UINT64_MAX);
         35 ( 0.00%)        solver->statistics.clauses_irredundant++;
         28 ( 0.00%)        INC (vivified_promoted);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_promoted (7x)
         42 ( 0.00%)        LOGCLS (subsuming, "vivification promoted from redundant to");
         35 ( 0.00%)        kissat_update_last_irredundant (solver, subsuming);
      1,682 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/collect.c:kissat_update_last_irredundant (7x)
         56 ( 0.00%)        kissat_mark_added_literals (solver, subsuming->size, subsuming->lits);
      1,730 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_added_literals (7x)
         28 ( 0.00%)        INC (vivified_subirr);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_subirr (7x)
         28 ( 0.00%)        INC (vivified_subsumed);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_subsumed (7x)
         14 ( 0.00%)        res = true;
          .               }
    277,248 ( 0.00%)    } else if (vivify_shrinkable (solver, sorted, conflict)) {
  2,484,298 ( 0.00%)  => build/../src/vivify.c:vivify_shrinkable (34,656x)
     21,144 ( 0.00%)      vivify_learn (solver, candidate, implied);
881,322,291 ( 0.37%)  => build/../src/vivify.c:vivify_learn (3,524x)
     14,096 ( 0.00%)      INC (vivified_shrunken);
     52,860 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_shrunken (3,524x)
     17,620 ( 0.00%)      if (candidate->redundant)
     14,420 ( 0.00%)        INC (vivified_shrunkred);
     43,260 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_shrunkred (2,884x)
          .               else
      2,560 ( 0.00%)        INC (vivified_shrunkirr);
      9,600 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_shrunkirr (640x)
      7,048 ( 0.00%)      res = true;
     78,839 ( 0.00%)    } else if (implied != INVALID_LIT && candidate->redundant) {
     12,756 ( 0.00%)      LOGCLS (candidate, "vivification implied");
     10,630 ( 0.00%)      kissat_mark_clause_as_garbage (solver, candidate);
  7,298,218 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (2,126x)
      8,504 ( 0.00%)      INC (vivified_implied);
     31,890 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_implied (2,126x)
      4,252 ( 0.00%)      res = true;
    118,402 ( 0.00%)    } else if ((conflict || implied != INVALID_LIT) &&
     34,020 ( 0.00%)               !candidate->redundant && !redundant) {
      8,640 ( 0.00%)      LOGCLS (candidate, "vivification asymmetric tautology");
      7,200 ( 0.00%)      kissat_mark_clause_as_garbage (solver, candidate);
  4,282,676 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (1,440x)
      5,760 ( 0.00%)      INC (vivified_asym);
     21,600 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_asym (1,440x)
      2,880 ( 0.00%)      res = true;
     55,132 ( 0.00%)    } else if (implied != INVALID_LIT) {
        738 ( 0.00%)      LOGCLS (candidate,
          .                       "no vivification instantiation with implied literal %s",
          .                       LOGLIT (implied));
        861 ( 0.00%)      assert (!candidate->redundant);
        369 ( 0.00%)      assert (redundant);
        246 ( 0.00%)      res = false;
          .             } else {
    109,772 ( 0.00%)      assert (solver->level > 2);
    329,316 ( 0.00%)      assert (solver->level == SIZE_STACK (*sorted));
    301,873 ( 0.00%)      unsigned lit = TOP_STACK (*sorted);
    329,316 ( 0.00%)      assert (VALUE (lit) < 0);
    603,746 ( 0.00%)      assert (LEVEL (lit) == solver->level);
    164,658 ( 0.00%)      LOG ("trying vivification instantiation of %s#%u respectively %s#%u",
          .                    LOGLIT (lit), counts[lit], LOGLIT (NOT (lit)), counts[NOT (lit)]);
    192,101 ( 0.00%)      kissat_backtrack_without_updating_phases (solver, solver->level - 1);
108,245,487 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (27,443x)
     27,443 ( 0.00%)      conflict = 0;
    329,316 ( 0.00%)      assert (!VALUE (lit));
    137,215 ( 0.00%)      kissat_internal_assume (solver, lit);
  8,615,566 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/decide.c:kissat_internal_assume (27,443x)
    164,658 ( 0.00%)      LOGCLS (candidate, "vivification instantiation candidate");
    192,101 ( 0.00%)      conflict = kissat_probing_propagate (solver, candidate, true);
550,026,059 ( 0.23%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (27,443x)
     54,886 ( 0.00%)      if (conflict) {
      1,470 ( 0.00%)        LOG ("vivification instantiation succeeded");
      1,470 ( 0.00%)        vivify_strengthen_after_instantiation (solver, candidate, lit);
 76,538,578 ( 0.03%)  => build/../src/vivify.c:vivify_strengthen_after_instantiation (245x)
        980 ( 0.00%)        INC (vivified_instantiated);
      3,675 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_instantiated (245x)
      1,225 ( 0.00%)        if (candidate->redundant)
        850 ( 0.00%)          INC (vivified_instred);
      2,550 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_instred (170x)
          .                 else
        300 ( 0.00%)          INC (vivified_instirr);
      1,125 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_instirr (75x)
        490 ( 0.00%)        res = true;
          .               } else {
    163,188 ( 0.00%)        LOG ("vivification instantiation failed");
    190,386 ( 0.00%)        kissat_backtrack_without_updating_phases (solver, solver->level - 2);
 98,354,870 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (27,198x)
     27,198 ( 0.00%)        res = false;
          .               }
          .             }
          .           
    108,456 ( 0.00%)    reset_vivify_analyzed (vivifier);
 16,477,526 ( 0.01%)  => build/../src/vivify.c:reset_vivify_analyzed (36,152x)
     82,504 ( 0.00%)    if (conflict && solver->level == level_after_assumptions) {
      2,712 ( 0.00%)      LOG ("forcing backtracking at least one level after conflict");
      3,164 ( 0.00%)      kissat_backtrack_without_updating_phases (solver, solver->level - 1);
 18,405,170 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (452x)
          .             }
    180,760 ( 0.00%)    reestablish_watch_invariant_for_candidate (solver, candidate);
 10,630,832 ( 0.00%)  => build/../src/vivify.c:reestablish_watch_invariant_for_candidate (36,152x)
          .           
     72,304 ( 0.00%)    if (res) {
     35,324 ( 0.00%)      INC (vivified);
    132,465 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified (8,831x)
     75,971 ( 0.00%)      switch (vivifier->tier) {
          .               case 1:
      5,816 ( 0.00%)        INC (vivified_tier1);
     21,810 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_tier1 (1,454x)
      1,454 ( 0.00%)        break;
          .               case 2:
     10,224 ( 0.00%)        INC (vivified_tier2);
     38,340 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_tier2 (2,556x)
      2,556 ( 0.00%)        break;
          .               case 3:
      8,144 ( 0.00%)        INC (vivified_tier3);
     30,540 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_tier3 (2,036x)
      2,036 ( 0.00%)        break;
          .               default:
     11,140 ( 0.00%)        assert (vivifier->tier == 0);
     11,140 ( 0.00%)        INC (vivified_irredundant);
     41,775 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivified_irredundant (2,785x)
      2,785 ( 0.00%)        break;
          .               }
          .             }
          .           
    216,912 ( 0.00%)    LOG ("vivification %s", res ? "succeeded" : "failed");
     36,152 ( 0.00%)    return res;
    327,114 ( 0.00%)  }
          .           
        216 ( 0.00%)  static void vivify_round (vivifier *vivifier, uint64_t limit) {
         72 ( 0.00%)    int tier = vivifier->tier;
         72 ( 0.00%)    kissat *solver = vivifier->solver;
          .           
        120 ( 0.00%)    if (tier && !REDUNDANT_CLAUSES)
          .               return;
          .           
         96 ( 0.00%)    assert (0 <= tier && tier <= 3);
         96 ( 0.00%)    assert (solver->watching);
         96 ( 0.00%)    assert (solver->probing);
          .           
         72 ( 0.00%)    kissat_flush_large_watches (solver);
349,208,962 ( 0.15%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_large_watches (24x)
          .           
         72 ( 0.00%)    schedule_vivification_candidates (vivifier);
1,295,256,604 ( 0.55%)  => build/../src/vivify.c:schedule_vivification_candidates (24x)
         96 ( 0.00%)    if (GET_OPTION (vivifysort)) {
        102 ( 0.00%)      if (tier || IRREDUNDANT_CLAUSES / 10 <= REDUNDANT_CLAUSES)
         72 ( 0.00%)        sort_vivification_candidates (vivifier);
208,370,780 ( 0.09%)  => build/../src/vivify.c:sort_vivification_candidates (18x)
          .               else
         48 ( 0.00%)        kissat_extremely_verbose (
        258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (6x)
          .                     solver, "not sorting %s vivification candidates", vivifier->name);
          .             }
          .           
         72 ( 0.00%)    kissat_watch_large_clauses (solver);
1,906,532,523 ( 0.81%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_watch_large_clauses (24x)
          .           #ifndef QUIET
         72 ( 0.00%)    uint64_t start = solver->statistics.probing_ticks;
         72 ( 0.00%)    uint64_t delta = limit - start;
        288 ( 0.00%)    kissat_very_verbose (solver,
      1,032 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (24x)
          .                                  "vivification %s effort limit %" PRIu64 " = %" PRIu64
          .                                  " + %" PRIu64 " 'probing_ticks'",
          .                                  vivifier->name, limit, start, delta);
        138 ( 0.00%)    const size_t total = tier ? REDUNDANT_CLAUSES : IRREDUNDANT_CLAUSES;
        192 ( 0.00%)    const size_t scheduled = SIZE_STACK (vivifier->schedule);
        864 ( 0.00%)    kissat_phase (solver, vivifier->mode, GET (vivifications),
      1,224 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (24x)
        816 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (24x)
        168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (24x)
          .                           "scheduled %zu clauses %.0f%% of %zu", scheduled,
          .                           kissat_percent (scheduled, total), total);
          .           #endif
         96 ( 0.00%)    assert (!vivifier->vivified);
         96 ( 0.00%)    assert (!vivifier->tried);
    218,225 ( 0.00%)    while (!EMPTY_STACK (vivifier->schedule)) {
    109,095 ( 0.00%)      const uint64_t probing_ticks = solver->statistics.probing_ticks;
    109,095 ( 0.00%)      if (probing_ticks > limit) {
        190 ( 0.00%)        kissat_extremely_verbose (solver,
        817 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (19x)
          .                                           "vivification %s ticks limit %" PRIu64
          .                                           " hit after %" PRIu64 " 'probing_ticks'",
          .                                           vivifier->name, limit, probing_ticks);
         19 ( 0.00%)        break;
          .               }
    399,806 ( 0.00%)      if (TERMINATED (vivify_terminated_1))
    799,612 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (36,346x)
          .                 break;
    545,190 ( 0.00%)      const reference ref = POP_STACK (vivifier->schedule);
    218,076 ( 0.00%)      clause *candidate = kissat_dereference_clause (solver, ref);
  4,953,090 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (36,346x)
    254,422 ( 0.00%)      assert (!candidate->garbage);
    181,730 ( 0.00%)      vivifier->tried++;
    254,422 ( 0.00%)      if (vivify_clause (vivifier, candidate))
9,846,977,784 ( 4.17%)  => build/../src/vivify.c:vivify_clause (36,346x)
     44,155 ( 0.00%)        vivifier->vivified++;
    145,384 ( 0.00%)      if (solver->inconsistent)
          .                 break;
    145,384 ( 0.00%)      candidate->vivify = false;
          .             }
         96 ( 0.00%)    if (solver->level)
         84 ( 0.00%)      kissat_backtrack_without_updating_phases (solver, 0);
  2,753,142 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (21x)
          .           #ifndef QUIET
        864 ( 0.00%)    kissat_phase (solver, vivifier->mode, GET (vivifications),
      1,224 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (24x)
        816 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (24x)
        168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (24x)
          .                           "vivified %zu clauses %.0f%% out of %zu tried",
          .                           vivifier->vivified,
         96 ( 0.00%)                  kissat_percent (vivifier->vivified, vivifier->tried),
          .                           vivifier->tried);
        120 ( 0.00%)    if (!solver->inconsistent) {
        192 ( 0.00%)      size_t remain = SIZE_STACK (vivifier->schedule);
         48 ( 0.00%)      if (remain) {
        684 ( 0.00%)        kissat_phase (solver, vivifier->mode, GET (vivifications),
        969 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (19x)
        646 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (19x)
        133 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (19x)
          .                               "%zu clauses remain %.0f%% out of %zu scheduled",
          .                               remain, kissat_percent (remain, scheduled), scheduled);
          .           
         57 ( 0.00%)        ward *const arena = BEGIN_STACK (solver->arena);
         19 ( 0.00%)        size_t prioritized = 0;
  3,985,147 ( 0.00%)        while (!EMPTY_STACK (vivifier->schedule)) {
  9,962,535 ( 0.00%)          const reference ref = POP_STACK (vivifier->schedule);
  3,985,014 ( 0.00%)          clause *c = (clause *) (arena + ref);
  3,320,845 ( 0.00%)          if (c->vivify)
    603,923 ( 0.00%)            prioritized++;
          .                 }
         38 ( 0.00%)        if (!prioritized)
         75 ( 0.00%)          kissat_phase (solver, vivifier->mode, GET (vivifications),
        215 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (5x)
         35 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (5x)
          .                                 "no remaining prioritized clauses");
          .                 else
        490 ( 0.00%)          kissat_phase (solver, vivifier->mode, GET (vivifications),
        714 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (14x)
        476 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (14x)
         98 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (14x)
          .                                 "keeping all %zu remaining clauses "
          .                                 "prioritized %.0f%%",
          .                                 prioritized, kissat_percent (prioritized, remain));
          .               } else
         70 ( 0.00%)        kissat_phase (solver, vivifier->mode, GET (vivifications),
        215 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (5x)
         35 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (5x)
          .                               "no untried clauses remain");
          .             }
          .           #endif
        312 ( 0.00%)    REPORT (!vivifier->vivified, vivifier->tag);
    733,166 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (24x)
        144 ( 0.00%)  }
          .           
         36 ( 0.00%)  static void vivify_tier1 (vivifier *vivifier, uint64_t limit) {
          .           #ifndef QUIET
         18 ( 0.00%)    kissat *solver = vivifier->solver;
          .           #endif
         54 ( 0.00%)    START (vivify1);
         24 ( 0.00%)    set_vivifier_mode (vivifier, 1);
        216 ( 0.00%)  => build/../src/vivify.c:set_vivifier_mode (6x)
         30 ( 0.00%)    vivify_round (vivifier, limit);
2,415,702,692 ( 1.02%)  => build/../src/vivify.c:vivify_round (6x)
         54 ( 0.00%)    STOP (vivify1);
         18 ( 0.00%)  }
          .           
         36 ( 0.00%)  static void vivify_tier2 (vivifier *vivifier, uint64_t limit) {
          .           #ifndef QUIET
         18 ( 0.00%)    kissat *solver = vivifier->solver;
          .           #endif
         54 ( 0.00%)    START (vivify2);
         18 ( 0.00%)    clear_vivifier (vivifier);
  1,111,616 ( 0.00%)  => build/../src/vivify.c:clear_vivifier (6x)
         24 ( 0.00%)    set_vivifier_mode (vivifier, 2);
        228 ( 0.00%)  => build/../src/vivify.c:set_vivifier_mode (6x)
         30 ( 0.00%)    vivify_round (vivifier, limit);
3,173,999,528 ( 1.34%)  => build/../src/vivify.c:vivify_round (6x)
         54 ( 0.00%)    STOP (vivify2);
         18 ( 0.00%)  }
          .           
         36 ( 0.00%)  static void vivify_tier3 (vivifier *vivifier, uint64_t limit) {
          .           #ifndef QUIET
         18 ( 0.00%)    kissat *solver = vivifier->solver;
          .           #endif
         54 ( 0.00%)    START (vivify3);
         18 ( 0.00%)    clear_vivifier (vivifier);
  1,111,616 ( 0.00%)  => build/../src/vivify.c:clear_vivifier (6x)
         24 ( 0.00%)    set_vivifier_mode (vivifier, 3);
        204 ( 0.00%)  => build/../src/vivify.c:set_vivifier_mode (6x)
         30 ( 0.00%)    vivify_round (vivifier, limit);
3,931,042,720 ( 1.66%)  => build/../src/vivify.c:vivify_round (6x)
         54 ( 0.00%)    STOP (vivify3);
         18 ( 0.00%)  }
          .           
         36 ( 0.00%)  static void vivify_irredundant (vivifier *vivifier, uint64_t limit) {
          .           #ifndef QUIET
         18 ( 0.00%)    kissat *solver = vivifier->solver;
          .           #endif
         54 ( 0.00%)    START (vivify0);
         18 ( 0.00%)    clear_vivifier (vivifier);
  1,111,616 ( 0.00%)  => build/../src/vivify.c:clear_vivifier (6x)
         24 ( 0.00%)    set_vivifier_mode (vivifier, 0);
        246 ( 0.00%)  => build/../src/vivify.c:set_vivifier_mode (6x)
         30 ( 0.00%)    vivify_round (vivifier, limit);
4,119,339,948 ( 1.74%)  => build/../src/vivify.c:vivify_round (6x)
         54 ( 0.00%)    STOP (vivify0);
         18 ( 0.00%)  }
          .           
         60 ( 0.00%)  void kissat_vivify (kissat *solver) {
         24 ( 0.00%)    if (solver->inconsistent)
          .               return;
         24 ( 0.00%)    assert (!solver->level);
         24 ( 0.00%)    assert (solver->probing);
         24 ( 0.00%)    assert (solver->watching);
         24 ( 0.00%)    if (!GET_OPTION (vivify))
          .               return;
         66 ( 0.00%)    if (TERMINATED (vivify_terminated_2))
        132 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (6x)
          .               return;
         84 ( 0.00%)    double irr_budget = DELAYING (vivifyirr) ? 0 : GET_OPTION (vivifyirr);
        606 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_delaying (6x)
         30 ( 0.00%)    double tier1_budget = GET_OPTION (vivifytier1);
         30 ( 0.00%)    double tier2_budget = GET_OPTION (vivifytier2);
         30 ( 0.00%)    double tier3_buget = GET_OPTION (vivifytier3);
         24 ( 0.00%)    if (!REDUNDANT_CLAUSES)
          .               tier1_budget = tier2_budget = tier3_buget = 0;
         36 ( 0.00%)    double sum = irr_budget + tier1_budget + tier2_budget + tier3_buget;
         36 ( 0.00%)    if (!sum)
          .               return;
          .           
         84 ( 0.00%)    START (vivify);
        576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (6x)
         24 ( 0.00%)    INC (vivifications);
         90 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_vivifications (6x)
          .           #if !defined(NDEBUG) || defined(METRICS)
         30 ( 0.00%)    assert (!solver->vivifying);
         12 ( 0.00%)    solver->vivifying = true;
          .           #endif
          .           
        834 ( 0.00%)    SET_EFFORT_LIMIT (limit, vivify, probing_ticks);
     41,197 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (48x)
        564 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (12x)
        258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (6x)
         30 ( 0.00%)    const uint64_t total = limit - solver->statistics.probing_ticks;
         18 ( 0.00%)    limit = solver->statistics.probing_ticks;
         24 ( 0.00%)    unsigned tier1_limit = vivify_tier1_limit (solver);
         48 ( 0.00%)  => build/../src/vivify.c:vivify_tier1_limit (6x)
         24 ( 0.00%)    unsigned tier2_limit = vivify_tier2_limit (solver);
         78 ( 0.00%)  => build/../src/vivify.c:vivify_tier2_limit (6x)
         90 ( 0.00%)    if (tier1_budget && tier2_budget && tier1_limit == tier2_limit) {
          .               tier1_budget += tier2_budget, tier2_budget = 0;
          .               LOG ("vivification tier1 matches tier2 "
          .                    "thus using tier2 budget for tier1");
          .             }
          .           
          .             {
          .               vivifier vivifier;
         30 ( 0.00%)      init_vivifier (solver, &vivifier);
  1,115,714 ( 0.00%)  => build/../src/vivify.c:init_vivifier (6x)
         36 ( 0.00%)      if (tier1_budget) {
        132 ( 0.00%)        limit += (total * tier1_budget) / sum;
         30 ( 0.00%)        vivify_tier1 (&vivifier, limit);
2,415,703,142 ( 1.02%)  => build/../src/vivify.c:vivify_tier1 (6x)
          .               }
         78 ( 0.00%)      if (tier2_budget && !solver->inconsistent &&
         60 ( 0.00%)          !TERMINATED (vivify_terminated_3)) {
        132 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (6x)
        132 ( 0.00%)        limit += (total * tier2_budget) / sum;
         30 ( 0.00%)        vivify_tier2 (&vivifier, limit);
3,175,111,624 ( 1.34%)  => build/../src/vivify.c:vivify_tier2 (6x)
          .               }
         78 ( 0.00%)      if (tier3_buget && !solver->inconsistent &&
         60 ( 0.00%)          !TERMINATED (vivify_terminated_4)) {
        132 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (6x)
        132 ( 0.00%)        limit += (total * tier3_buget) / sum;
         30 ( 0.00%)        vivify_tier3 (&vivifier, limit);
3,932,154,792 ( 1.66%)  => build/../src/vivify.c:vivify_tier3 (6x)
          .               }
         78 ( 0.00%)      if (irr_budget && !solver->inconsistent &&
         60 ( 0.00%)          !TERMINATED (vivify_terminated_5)) {
        132 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (6x)
        132 ( 0.00%)        limit += (total * irr_budget) / sum;
         30 ( 0.00%)        vivify_irredundant (&vivifier, limit);
4,120,452,062 ( 1.74%)  => build/../src/vivify.c:vivify_irredundant (6x)
        114 ( 0.00%)        if (kissat_average (vivifier.vivified, vivifier.tried) < 0.01)
        102 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_average (6x)
          .                   BUMP_DELAY (vivifyirr);
          .                 else
         36 ( 0.00%)          REDUCE_DELAY (vivifyirr);
         90 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_reduce_delay (6x)
          .               }
         18 ( 0.00%)      release_vivifier (&vivifier);
    119,704 ( 0.00%)  => build/../src/vivify.c:release_vivifier (6x)
          .             }
          .           
          .           #ifndef QUIET
         24 ( 0.00%)    if (solver->statistics.probing_ticks < limit) {
          .               uint64_t delta = limit - solver->statistics.probing_ticks;
          .               kissat_phase (solver, "vivify-limit", GET (vivifications),
          .                             "has %" PRIu64 " ticks left %.2f%%", delta,
          .                             kissat_percent (delta, total));
          .             } else {
         24 ( 0.00%)      uint64_t delta = solver->statistics.probing_ticks - limit;
        198 ( 0.00%)      kissat_phase (solver, "vivify-limit", GET (vivifications),
        306 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (6x)
        204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (6x)
         42 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_vivifications (6x)
          .                             "exceeded by %" PRIu64 " ticks %.2f%%", delta,
          .                             kissat_percent (delta, total));
          .             }
          .           #endif
          .           #if !defined(NDEBUG) || defined(METRICS)
         24 ( 0.00%)    assert (solver->vivifying);
         12 ( 0.00%)    solver->vivifying = false;
          .           #endif
         90 ( 0.00%)    STOP (vivify);
        684 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (6x)
         48 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/collect.c
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .           #include "sort.c"
         .           #include "trail.h"
         .           
         .           #include <inttypes.h>
         .           #include <string.h>
         .           
         .           static void flush_watched_clauses_by_literal (kissat *solver, unsigned lit,
         .                                                         bool compact,
 4,986,666 ( 0.00%)                                                reference start) {
 1,108,148 ( 0.00%)    assert (start != INVALID_REF);
         .           
 1,662,222 ( 0.00%)    const value *const values = solver->values;
 1,662,222 ( 0.00%)    const assigned *const all_assigned = solver->assigned;
         .           
 2,770,370 ( 0.00%)    const value lit_value = values[lit];
 7,202,962 ( 0.00%)    const assigned *const lit_assigned = all_assigned + IDX (lit);
 2,222,356 ( 0.00%)    const value lit_fixed =
   588,608 ( 0.00%)        (lit_value && !lit_assigned->level) ? lit_value : 0;
 3,878,518 ( 0.00%)    const unsigned mlit = kissat_map_literal (solver, lit, true);
65,245,147 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (554,074x)
         .           
 6,094,814 ( 0.00%)    watches *lit_watches = &WATCHES (lit);
 4,432,592 ( 0.00%)    watch *begin = BEGIN_WATCHES (*lit_watches), *q = begin;
 4,432,592 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (554,074x)
 4,432,592 ( 0.00%)    const watch *const end_of_watches = END_WATCHES (*lit_watches), *p = q;
 4,432,592 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (554,074x)
         .           
10,644,919 ( 0.00%)    while (p != end_of_watches) {
14,047,705 ( 0.01%)      watch head = *p++;
11,238,164 ( 0.00%)      if (head.type.binary) {
   856,164 ( 0.00%)        const unsigned other = head.binary.lit;
 2,283,104 ( 0.00%)        const unsigned other_idx = IDX (other);
 1,426,940 ( 0.00%)        const value other_value = values[other];
 1,142,924 ( 0.00%)        const value other_fixed =
   942,528 ( 0.00%)            (other_value && !all_assigned[other_idx].level) ? other_value : 0;
 1,997,716 ( 0.00%)        const unsigned mother = kissat_map_literal (solver, other, compact);
11,361,970 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (285,388x)
 1,705,790 ( 0.00%)        if (lit_fixed > 0 || other_fixed > 0 || mother == INVALID_LIT) {
     7,567 ( 0.00%)          if (lit < other)
     6,486 ( 0.00%)            kissat_delete_binary (solver, lit, other);
   761,692 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (1,081x)
         .                 } else {
   566,452 ( 0.00%)          assert (!lit_fixed);
   566,452 ( 0.00%)          assert (!other_fixed);
         .           
         .                   {
 2,265,808 ( 0.00%)            head.binary.lit = mother;
 1,416,130 ( 0.00%)            *q++ = head;
         .           #ifdef LOGGING
   849,678 ( 0.00%)            if (lit < other) {
   849,678 ( 0.00%)              LOGBINARY (lit, other, "SRC");
   849,678 ( 0.00%)              LOGBINARY (mlit, mother, "DST");
         .                     }
         .           #endif
         .                   }
         .                 }
         .               } else {
10,096,612 ( 0.00%)        assert (solver->watching);
12,620,765 ( 0.01%)        const watch tail = *p++;
 5,048,306 ( 0.00%)        if (!lit_fixed) {
 7,566,810 ( 0.00%)          const reference ref = tail.large.ref;
 7,566,810 ( 0.00%)          if (ref < start) {
 9,059,345 ( 0.00%)            *q++ = head;
 9,059,345 ( 0.00%)            *q++ = tail;
         .                   }
         .                 }
         .               }
         .             }
         .           
 1,126,328 ( 0.00%)    assert (!lit_fixed || q == begin);
 8,865,184 ( 0.00%)    SET_END_OF_WATCHES (*lit_watches, q);
29,120,811 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (554,074x)
 4,432,592 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (554,074x)
         .           #ifdef LOGGING
 2,216,296 ( 0.00%)    const size_t size_lit_watches = SIZE_WATCHES (*lit_watches);
 6,648,888 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (554,074x)
 3,324,444 ( 0.00%)    LOG ("keeping %zu watches[%u]", size_lit_watches, lit);
         .           #endif
 2,216,296 ( 0.00%)    if (!compact)
   754,656 ( 0.00%)      return;
         .           
   353,492 ( 0.00%)    if (mlit == INVALID_LIT)
    53,662 ( 0.00%)      return;
         .           
 1,353,924 ( 0.00%)    watches *mlit_watches = &WATCHES (mlit);
         .           #if defined(LOGGING) || !defined(NDEBUG)
   492,336 ( 0.00%)    const size_t size_mlit_watches = SIZE_WATCHES (*mlit_watches);
 1,477,008 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (123,084x)
         .           #endif
   246,168 ( 0.00%)    if (lit_fixed)
     6,928 ( 0.00%)      assert (!size_mlit_watches);
   358,860 ( 0.00%)    else if (mlit < lit) {
   238,756 ( 0.00%)      assert (mlit != INVALID_LIT);
   358,134 ( 0.00%)      assert (mlit < lit);
   716,268 ( 0.00%)      *mlit_watches = *lit_watches;
   716,268 ( 0.00%)      LOG ("copied watches[%u] = watches[%u] (size %zu)", mlit, lit,
         .                    size_mlit_watches);
   716,268 ( 0.00%)      memset (lit_watches, 0, sizeof *lit_watches);
 1,671,292 ( 0.00%)  => ???:0x000000000010c5b0 (119,378x)
         .             } else
       726 ( 0.00%)      assert (mlit == lit);
 1,108,148 ( 0.00%)  }
         .           
         .           static void flush_all_watched_clauses (kissat *solver, bool compact,
        88 ( 0.00%)                                         reference start) {
        44 ( 0.00%)    assert (solver->watching);
        66 ( 0.00%)    LOG ("starting to flush watches at clause[%" REFERENCE_FORMAT "]", start);
 1,108,236 ( 0.00%)    for (all_variables (idx)) {
 1,939,259 ( 0.00%)      const unsigned lit = LIT (idx);
 1,662,222 ( 0.00%)      flush_watched_clauses_by_literal (solver, lit, compact, start);
142,297,677 ( 0.06%)  => build/../src/collect.c:flush_watched_clauses_by_literal (277,037x)
 2,216,296 ( 0.00%)      const unsigned not_lit = NOT (lit);
 1,662,222 ( 0.00%)      flush_watched_clauses_by_literal (solver, not_lit, compact, start);
168,233,995 ( 0.07%)  => build/../src/collect.c:flush_watched_clauses_by_literal (277,037x)
         .             }
        44 ( 0.00%)  }
         .           
         .           static void update_large_reason (kissat *solver, assigned *assigned,
   159,056 ( 0.00%)                                   unsigned forced, clause *dst) {
    99,410 ( 0.00%)    assert (dst->reason);
    39,764 ( 0.00%)    assert (forced != INVALID_LIT);
   119,292 ( 0.00%)    reference dst_ref = kissat_reference_clause (solver, dst);
 2,244,722 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (19,882x)
   159,056 ( 0.00%)    const unsigned forced_idx = IDX (forced);
   119,292 ( 0.00%)    struct assigned *a = assigned + forced_idx;
   139,174 ( 0.00%)    assert (!a->binary);
    79,528 ( 0.00%)    if (a->reason != dst_ref) {
   117,936 ( 0.00%)      LOG ("reason reference %u of %s updated to %u", a->reason,
         .                    LOGLIT (forced), dst_ref);
    58,968 ( 0.00%)      a->reason = dst_ref;
         .             }
    79,528 ( 0.00%)    dst->reason = false;
    59,646 ( 0.00%)  }
         .           
    18,594 ( 0.00%)  static unsigned get_forced (const value *values, clause *dst) {
    15,495 ( 0.00%)    assert (dst->reason);
     3,099 ( 0.00%)    unsigned forced = INVALID_LIT;
    61,739 ( 0.00%)    for (all_literals_in_clause (lit, dst)) {
    19,750 ( 0.00%)      const value value = values[lit];
     7,900 ( 0.00%)      if (value <= 0)
       851 ( 0.00%)        continue;
     6,198 ( 0.00%)      forced = lit;
     3,099 ( 0.00%)      break;
         .             }
     6,198 ( 0.00%)    assert (forced != INVALID_LIT);
     3,099 ( 0.00%)    return forced;
     6,198 ( 0.00%)  }
         .           
         .           static void get_forced_and_update_large_reason (kissat *solver,
         .                                                           assigned *assigned,
         .                                                           const value *const values,
    24,792 ( 0.00%)                                                  clause *dst) {
    18,594 ( 0.00%)    const unsigned forced = get_forced (values, dst);
   152,220 ( 0.00%)  => build/../src/collect.c:get_forced (3,099x)
    18,594 ( 0.00%)    update_large_reason (solver, assigned, forced, dst);
   540,042 ( 0.00%)  => build/../src/collect.c:update_large_reason (3,099x)
     9,297 ( 0.00%)  }
         .           
         .           static void update_first_reducible (kissat *solver, const clause *end,
       119 ( 0.00%)                                      clause *first_reducible) {
        51 ( 0.00%)    if (first_reducible >= end) {
         .               LOG ("first reducible after end of arena");
         .               solver->first_reducible = INVALID_REF;
        34 ( 0.00%)    } else if (first_reducible) {
       102 ( 0.00%)      LOGCLS (first_reducible, "updating first reducible clause to");
        34 ( 0.00%)      solver->first_reducible =
        85 ( 0.00%)          kissat_reference_clause (solver, first_reducible);
     1,897 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (17x)
         .             } else {
         .               LOG ("first reducible clause becomes invalid");
         .               solver->first_reducible = INVALID_REF;
         .             }
        68 ( 0.00%)  }
         .           
         .           static void update_last_irredundant (kissat *solver, const clause *end,
       147 ( 0.00%)                                       clause *last_irredundant) {
        42 ( 0.00%)    if (!last_irredundant) {
         .               LOG ("no more large irredundant clauses left");
         .               solver->last_irredundant = INVALID_REF;
        63 ( 0.00%)    } else if (end <= last_irredundant) {
         .               LOG ("last irredundant clause after end of arena");
         .               solver->last_irredundant = INVALID_REF;
         .             } else {
       126 ( 0.00%)      LOGCLS (last_irredundant, "updating last irredundant clause to");
       126 ( 0.00%)      reference ref = kissat_reference_clause (solver, last_irredundant);
     2,369 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (21x)
        63 ( 0.00%)      solver->last_irredundant = ref;
         .             }
        63 ( 0.00%)  }
         .           
         .           void kissat_update_first_reducible (kissat *solver, clause *reducible) {
         .             assert (reducible);
         .             assert (!reducible->garbage);
         .             assert (reducible->redundant);
         .             if (solver->first_reducible != INVALID_REF) {
         .               reference ref = kissat_reference_clause (solver, reducible);
         .               if (ref >= solver->first_reducible) {
-- line 189 ----------------------------------------
-- line 190 ----------------------------------------
         .                 LOG ("no need to update larger first reducible");
         .                 return;
         .               }
         .             }
         .             clause *end = (clause *) END_STACK (solver->arena);
         .             update_first_reducible (solver, end, reducible);
         .           }
         .           
        42 ( 0.00%)  void kissat_update_last_irredundant (kissat *solver, clause *irredundant) {
        14 ( 0.00%)    assert (irredundant);
        49 ( 0.00%)    assert (!irredundant->garbage);
        49 ( 0.00%)    assert (!irredundant->redundant);
        28 ( 0.00%)    if (solver->last_irredundant != INVALID_REF) {
        42 ( 0.00%)      reference ref = kissat_reference_clause (solver, irredundant);
       787 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (7x)
        28 ( 0.00%)      if (ref <= solver->last_irredundant) {
        18 ( 0.00%)        LOG ("no need to update smaller last irredundant");
         3 ( 0.00%)        return;
         .               }
         .             }
        12 ( 0.00%)    clause *end = (clause *) END_STACK (solver->arena);
        28 ( 0.00%)    update_last_irredundant (solver, end, irredundant);
       568 ( 0.00%)  => build/../src/collect.c:update_last_irredundant (4x)
        14 ( 0.00%)  }
         .           
         .           static void move_redundant_clauses_to_the_end (kissat *solver,
        28 ( 0.00%)                                                 reference ref) {
        16 ( 0.00%)    INC (moved);
        60 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_moved (4x)
         8 ( 0.00%)    assert (ref != INVALID_REF);
         .           #ifndef NDEBUG
        32 ( 0.00%)    const size_t size = SIZE_STACK (solver->arena);
        12 ( 0.00%)    assert ((size_t) ref <= size);
         .           #endif
        24 ( 0.00%)    clause *begin = (clause *) (BEGIN_STACK (solver->arena) + ref);
        12 ( 0.00%)    clause *end = (clause *) END_STACK (solver->arena);
        12 ( 0.00%)    size_t bytes_redundant = (char *) end - (char *) begin;
        84 ( 0.00%)    kissat_phase (solver, "move", GET (moved),
     5,165 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (4x)
       172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (4x)
        28 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_moved (4x)
         .                           "moving redundant clauses of %s to the end",
         .                           FORMAT_BYTES (bytes_redundant));
        20 ( 0.00%)    kissat_mark_reason_clauses (solver, ref);
 1,983,758 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/trail.c:kissat_mark_reason_clauses (4x)
        24 ( 0.00%)    clause *redundant = (clause *) kissat_malloc (solver, bytes_redundant);
    73,118 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (4x)
        24 ( 0.00%)    clause *p = begin, *q = begin, *r = redundant;
         .           
        12 ( 0.00%)    const value *const values = solver->values;
        12 ( 0.00%)    assigned *assigned = solver->assigned;
         .           
        16 ( 0.00%)    clause *last_irredundant = kissat_last_irredundant_clause (solver);
       616 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (4x)
         .           
   139,312 ( 0.00%)    while (p != end) {
   278,592 ( 0.00%)      assert (!p->shrunken);
   232,160 ( 0.00%)      size_t bytes = kissat_bytes_of_clause (p->size);
 1,830,392 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_bytes_of_clause (46,432x)
   232,160 ( 0.00%)      if (p->redundant) {
    81,522 ( 0.00%)        memcpy (r, p, bytes);
   245,361 ( 0.00%)  => ???:0x000000000010c650 (13,587x)
    40,761 ( 0.00%)        r = (clause *) (bytes + (char *) r);
         .               } else {
   197,070 ( 0.00%)        LOGCLS (p, "old DST");
   197,070 ( 0.00%)        memmove (q, p, bytes);
   465,567 ( 0.00%)  => ???:0x000000000010c860 (32,845x)
   197,070 ( 0.00%)        LOGCLS (q, "new DST");
    65,690 ( 0.00%)        last_irredundant = q;
   164,225 ( 0.00%)        if (q->reason)
    16,194 ( 0.00%)          get_forced_and_update_large_reason (solver, assigned, values, q);
   667,017 ( 0.00%)  => build/../src/collect.c:get_forced_and_update_large_reason (2,699x)
    65,690 ( 0.00%)        q = (clause *) (bytes + (char *) q);
         .               }
    92,864 ( 0.00%)      p = (clause *) (bytes + (char *) p);
         .             }
         8 ( 0.00%)    r = redundant;
         4 ( 0.00%)    clause *first_reducible = 0;
    40,777 ( 0.00%)    while (q != end) {
    67,935 ( 0.00%)      size_t bytes = kissat_bytes_of_clause (r->size);
   531,768 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_bytes_of_clause (13,587x)
    81,522 ( 0.00%)      memcpy (q, r, bytes);
   245,505 ( 0.00%)  => ???:0x000000000010c650 (13,587x)
    81,522 ( 0.00%)      LOGCLS (q, "new DST");
    67,935 ( 0.00%)      if (q->reason)
     2,400 ( 0.00%)        get_forced_and_update_large_reason (solver, assigned, values, q);
    96,522 ( 0.00%)  => build/../src/collect.c:get_forced_and_update_large_reason (400x)
    67,935 ( 0.00%)      assert (q->redundant);
    27,174 ( 0.00%)      if (!first_reducible)
         8 ( 0.00%)        first_reducible = q;
    27,174 ( 0.00%)      r = (clause *) (bytes + (char *) r);
    27,174 ( 0.00%)      q = (clause *) (bytes + (char *) q);
         .             }
        20 ( 0.00%)    assert ((char *) r <= (char *) redundant + bytes_redundant);
        24 ( 0.00%)    kissat_free (solver, redundant, bytes_redundant);
       936 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (4x)
         .           
        20 ( 0.00%)    assert (!first_reducible || first_reducible < q);
         .           
        24 ( 0.00%)    update_first_reducible (solver, q, first_reducible);
       560 ( 0.00%)  => build/../src/collect.c:update_first_reducible (4x)
        24 ( 0.00%)    update_last_irredundant (solver, q, last_irredundant);
       572 ( 0.00%)  => build/../src/collect.c:update_last_irredundant (4x)
        12 ( 0.00%)    kissat_reset_last_learned (solver);
       172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/internal.c:kissat_reset_last_learned (4x)
        16 ( 0.00%)  }
         .           
         .           static reference sparse_sweep_garbage_clauses (kissat *solver, bool compact,
       110 ( 0.00%)                                                 reference start) {
        44 ( 0.00%)    assert (solver->watching);
        66 ( 0.00%)    LOG ("sparse garbage collection starting at clause[%" REFERENCE_FORMAT
         .                  "]",
         .                  start);
         .           #ifdef CHECKING_OR_PROVING
        44 ( 0.00%)    const bool checking_or_proving = kissat_checking_or_proving (solver);
       231 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_checking_or_proving (11x)
         .           #endif
        66 ( 0.00%)    assert (EMPTY_STACK (solver->added));
        66 ( 0.00%)    assert (EMPTY_STACK (solver->removed));
         .           
        33 ( 0.00%)    const value *const values = solver->values;
        33 ( 0.00%)    assigned *assigned = solver->assigned;
         .           
         .           #ifndef QUIET
        11 ( 0.00%)    size_t flushed_garbage_clauses = 0;
        11 ( 0.00%)    size_t flushed_satisfied_clauses = 0;
         .           #endif
        11 ( 0.00%)    size_t flushed = 0;
         .           
        33 ( 0.00%)    clause *begin = (clause *) BEGIN_STACK (solver->arena);
        33 ( 0.00%)    const clause *const end = (clause *) END_STACK (solver->arena);
         .           
         .             clause *first, *src, *dst;
        22 ( 0.00%)    if (start)
        56 ( 0.00%)      first = kissat_dereference_clause (solver, start);
     1,088 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (8x)
         .             else
         6 ( 0.00%)      first = begin;
        44 ( 0.00%)    src = dst = first;
         .           
        11 ( 0.00%)    clause *first_redundant = 0;
        11 ( 0.00%)    clause *first_reducible = 0;
         .             clause *last_irredundant;
         .           
        22 ( 0.00%)    if (start)
        40 ( 0.00%)      last_irredundant = kissat_last_irredundant_clause (solver);
     1,232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_last_irredundant_clause (8x)
         .             else
         3 ( 0.00%)      last_irredundant = 0;
         .           #ifdef LOGGING
        11 ( 0.00%)    size_t redundant_bytes = 0;
         .           #endif
 2,253,464 ( 0.00%)    for (clause *next; src != end; src = next) {
 2,253,420 ( 0.00%)      if (src->garbage) {
   616,284 ( 0.00%)        next = kissat_delete_clause (solver, src);
12,359,152 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_clause (102,714x)
         .           #ifndef QUIET
   102,714 ( 0.00%)        flushed_garbage_clauses++;
         .           #endif
   308,142 ( 0.00%)        if (last_irredundant == src) {
         .                   if (first == begin)
         .                     last_irredundant = 0;
         .                   else
         .                     last_irredundant = first;
         .                 }
   205,428 ( 0.00%)        continue;
         .               }
         .           
 1,391,880 ( 0.00%)      assert (src->size > 1);
 2,087,820 ( 0.00%)      LOGCLS (src, "SRC");
 1,391,880 ( 0.00%)      next = kissat_next_clause (src);
21,176,405 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (347,970x)
         .           #if !defined(NDEBUG) || defined(CHECKING_OR_PROVING)
 1,043,910 ( 0.00%)      const unsigned old_size = src->size;
         .           #endif
         .               assert (SIZE_OF_CLAUSE_HEADER == sizeof (unsigned));
 1,391,880 ( 0.00%)      *(unsigned *) dst = *(unsigned *) src;
         .           
 1,043,910 ( 0.00%)      unsigned *q = dst->lits;
         .           
   347,970 ( 0.00%)      unsigned mfirst = INVALID_LIT;
   347,970 ( 0.00%)      unsigned msecond = INVALID_LIT;
   347,970 ( 0.00%)      unsigned forced = INVALID_LIT;
   347,970 ( 0.00%)      unsigned other = INVALID_LIT;
   347,970 ( 0.00%)      unsigned non_false = 0;
         .           
   347,970 ( 0.00%)      bool satisfied = false;
         .           
16,910,880 ( 0.01%)      for (all_literals_in_clause (lit, src)) {
         .           #ifdef CHECKING_OR_PROVING
 5,010,570 ( 0.00%)        if (checking_or_proving)
21,712,587 ( 0.01%)          PUSH_STACK (solver->removed, lit);
    41,525 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (9x)
         .           #endif
 3,340,380 ( 0.00%)        if (satisfied)
     7,056 ( 0.00%)          continue;
         .           
 8,315,670 ( 0.00%)        const value tmp = values[lit];
13,305,072 ( 0.01%)        const unsigned idx = IDX (lit);
10,934,964 ( 0.00%)        const unsigned level = tmp ? assigned[idx].level : INVALID_LEVEL;
         .           
 4,172,870 ( 0.00%)        if (tmp < 0 && !level)
     8,146 ( 0.00%)          flushed++;
 3,898,996 ( 0.00%)        else if (tmp > 0 && !level) {
     5,620 ( 0.00%)          assert (!satisfied);
     9,835 ( 0.00%)          assert (!dst->reason);
     8,430 ( 0.00%)          LOG ("SRC satisfied by %s", LOGLIT (lit));
     2,810 ( 0.00%)          satisfied = true;
         .                 } else {
11,603,592 ( 0.00%)          const unsigned mlit = kissat_map_literal (solver, lit, compact);
151,232,517 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_map_literal (1,657,656x)
         .           
 3,315,312 ( 0.00%)          if (tmp > 0) {
   578,064 ( 0.00%)            assert (level);
 2,475,271 ( 0.00%)            forced = non_false++ ? INVALID_LIT : lit;
 2,737,248 ( 0.00%)          } else if (tmp < 0)
   838,456 ( 0.00%)            other = lit;
         .           
 3,315,312 ( 0.00%)          if (mfirst == INVALID_LIT)
 1,043,079 ( 0.00%)            mfirst = mlit;
 2,619,926 ( 0.00%)          else if (msecond == INVALID_LIT)
   693,988 ( 0.00%)            msecond = mlit;
         .           
 8,288,280 ( 0.00%)          *q++ = mlit;
         .           
         .           #ifdef CHECKING_OR_PROVING
 3,315,312 ( 0.00%)          if (checking_or_proving)
23,207,301 ( 0.01%)            PUSH_STACK (solver->added, lit);
     5,419 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (9x)
         .           #endif
         .                 }
         .               }
         .           
   695,940 ( 0.00%)      if (satisfied) {
     7,025 ( 0.00%)        if (dst->redundant)
     4,440 ( 0.00%)          DEC (clauses_redundant);
    13,320 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_dec_clauses_redundant (888x)
         .                 else
     2,068 ( 0.00%)          DEC (clauses_irredundant);
     7,755 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_dec_clauses_irredundant (517x)
         .           #ifndef QUIET
     1,405 ( 0.00%)        flushed_satisfied_clauses++;
         .           #endif
         .           #ifdef CHECKING_OR_PROVING
     2,810 ( 0.00%)        if (checking_or_proving) {
    25,290 ( 0.00%)          REMOVE_CHECKER_STACK (solver->removed);
 2,804,602 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (1,405x)
     5,620 ( 0.00%)          DELETE_STACK_FROM_PROOF (solver->removed);
     5,620 ( 0.00%)          CLEAR_STACK (solver->added);
     5,620 ( 0.00%)          CLEAR_STACK (solver->removed);
         .                 }
         .           #endif
     4,215 ( 0.00%)        if (last_irredundant == src) {
         .                   if (first == begin)
         .                     last_irredundant = 0;
         .                   else
         .                     last_irredundant = first;
         .                 }
     2,810 ( 0.00%)        continue;
         .               }
         .           
 2,079,390 ( 0.00%)      const unsigned new_size = q - dst->lits;
 1,039,695 ( 0.00%)      assert (new_size <= old_size);
   693,130 ( 0.00%)      assert (1 < new_size);
         .           
   693,130 ( 0.00%)      if (new_size == 2) {
       726 ( 0.00%)        assert (mfirst != INVALID_LIT);
       726 ( 0.00%)        assert (msecond != INVALID_LIT);
         .           
     1,089 ( 0.00%)        statistics *statistics = &solver->statistics;
     1,452 ( 0.00%)        assert (statistics->clauses_binary < UINT64_MAX);
     1,815 ( 0.00%)        statistics->clauses_binary++;
     1,815 ( 0.00%)        bool redundant = dst->redundant;
       726 ( 0.00%)        if (redundant) {
       216 ( 0.00%)          assert (statistics->clauses_redundant > 0);
       270 ( 0.00%)          statistics->clauses_redundant--;
       108 ( 0.00%)          redundant = false;
         .                 } else {
     1,236 ( 0.00%)          assert (statistics->clauses_irredundant > 0);
     1,545 ( 0.00%)          statistics->clauses_irredundant--;
         .                 }
     2,178 ( 0.00%)        LOGBINARY (mfirst, msecond, "DST");
     2,178 ( 0.00%)        kissat_watch_binary (solver, mfirst, msecond);
   113,619 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_binary (363x)
         .           
     1,815 ( 0.00%)        if (dst->reason) {
       244 ( 0.00%)          assert (non_false == 1);
       244 ( 0.00%)          assert (other != INVALID_LIT);
       244 ( 0.00%)          assert (forced != INVALID_LIT);
         .           
       976 ( 0.00%)          const unsigned forced_idx = IDX (forced);
       732 ( 0.00%)          struct assigned *a = assigned + forced_idx;
       854 ( 0.00%)          assert (!a->binary);
         .           
       732 ( 0.00%)          LOGBINARY (mfirst, msecond,
         .                              "reason clause[%u] of %s updated to binary reason",
         .                              a->reason, LOGLIT (forced));
         .           
       488 ( 0.00%)          a->binary = true;
       366 ( 0.00%)          a->reason = other;
         .                 }
         .           
     2,541 ( 0.00%)        if (!redundant && last_irredundant == src) {
         .                   if (first == begin)
         .                     last_irredundant = 0;
         .                   else
         .                     last_irredundant = first;
         .                 }
         .               } else {
   692,404 ( 0.00%)        assert (2 < new_size);
         .           
 1,038,606 ( 0.00%)        dst->size = new_size;
 1,384,808 ( 0.00%)        dst->shrunken = false;
   692,404 ( 0.00%)        dst->searched = 2;
         .           
 2,077,212 ( 0.00%)        LOGCLS (dst, "DST");
 1,731,010 ( 0.00%)        if (dst->reason)
   100,698 ( 0.00%)          update_large_reason (solver, assigned, forced, dst);
 2,935,330 ( 0.00%)  => build/../src/collect.c:update_large_reason (16,783x)
         .           
 1,384,808 ( 0.00%)        clause *next_dst = kissat_next_clause (dst);
20,960,042 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (346,202x)
         .           
 1,731,010 ( 0.00%)        if (dst->redundant) {
    76,104 ( 0.00%)          if (!first_reducible)
        22 ( 0.00%)            first_reducible = dst;
         .           #ifdef LOGGING
   114,156 ( 0.00%)          redundant_bytes += (char *) next_dst - (char *) dst;
         .           #endif
    76,104 ( 0.00%)          if (!first_redundant)
        33 ( 0.00%)            first_redundant = dst;
         .                 } else
   616,300 ( 0.00%)          last_irredundant = dst;
         .           
   692,404 ( 0.00%)        dst = next_dst;
         .               }
         .           
         .           #ifdef CHECKING_OR_PROVING
 1,386,260 ( 0.00%)      if (!checking_or_proving)
         .                 continue;
         .           
 1,039,695 ( 0.00%)      if (new_size != old_size) {
     7,262 ( 0.00%)        assert (1 < new_size);
    10,893 ( 0.00%)        assert (new_size < old_size);
         .           
    65,358 ( 0.00%)        CHECK_AND_ADD_STACK (solver->added);
81,763,183 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_internal (3,631x)
    14,524 ( 0.00%)        ADD_STACK_TO_PROOF (solver->added);
         .           
    65,358 ( 0.00%)        REMOVE_CHECKER_STACK (solver->removed);
39,989,332 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_internal (3,631x)
    14,524 ( 0.00%)        DELETE_STACK_FROM_PROOF (solver->removed);
         .               }
 1,386,260 ( 0.00%)      CLEAR_STACK (solver->added);
 1,732,825 ( 0.00%)      CLEAR_STACK (solver->removed);
         .           #endif
         .             }
         .           
        66 ( 0.00%)    update_first_reducible (solver, dst, first_reducible);
     1,546 ( 0.00%)  => build/../src/collect.c:update_first_reducible (11x)
        66 ( 0.00%)    update_last_irredundant (solver, dst, last_irredundant);
     1,573 ( 0.00%)  => build/../src/collect.c:update_last_irredundant (11x)
        33 ( 0.00%)    kissat_reset_last_learned (solver);
       473 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/internal.c:kissat_reset_last_learned (11x)
         .           
        22 ( 0.00%)    if (first_redundant)
        66 ( 0.00%)      LOGCLS (first_redundant, "determined first redundant clause as");
         .           
         .           #if !defined(QUIET) || defined(METRICS)
        44 ( 0.00%)    size_t bytes = (char *) END_STACK (solver->arena) - (char *) dst;
         .           #endif
         .           #ifndef QUIET
        22 ( 0.00%)    if (flushed)
       165 ( 0.00%)      kissat_phase (solver, "collect", GET (garbage_collections),
       473 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (11x)
        77 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_garbage_collections (11x)
         .                             "flushed %zu falsified literals in large clauses",
         .                             flushed);
        44 ( 0.00%)    size_t flushed_clauses =
         .                 flushed_satisfied_clauses + flushed_garbage_clauses;
        22 ( 0.00%)    if (flushed_satisfied_clauses)
       297 ( 0.00%)      kissat_phase (
       459 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (9x)
       306 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (9x)
        63 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_garbage_collections (9x)
         .                   solver, "collect", GET (garbage_collections),
         .                   "flushed %zu satisfied large clauses %.0f%%",
         .                   flushed_satisfied_clauses,
         .                   kissat_percent (flushed_satisfied_clauses, flushed_clauses));
        22 ( 0.00%)    if (flushed_garbage_clauses)
       363 ( 0.00%)      kissat_phase (
       561 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (11x)
       374 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (11x)
        77 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_garbage_collections (11x)
         .                   solver, "collect", GET (garbage_collections),
         .                   "flushed %zu large garbage clauses %.0f%%", flushed_garbage_clauses,
         .                   kissat_percent (flushed_garbage_clauses, flushed_clauses));
       231 ( 0.00%)    kissat_phase (solver, "collect", GET (garbage_collections),
    14,135 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (11x)
       473 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (11x)
        77 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_garbage_collections (11x)
         .                           "collected %s in total", FORMAT_BYTES (bytes));
         .           #endif
        66 ( 0.00%)    ADD (flushed, flushed);
       220 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_flushed (11x)
         .           #ifdef METRICS
        66 ( 0.00%)    ADD (allocated_collected, bytes);
       220 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_allocated_collected (11x)
         .           #endif
         .           
        11 ( 0.00%)    reference res = INVALID_REF;
         .           
        77 ( 0.00%)    if (first_redundant && last_irredundant &&
         .                 first_redundant < last_irredundant) {
         .           #ifdef LOGGING
        12 ( 0.00%)      size_t move_bytes = (char *) dst - (char *) first_redundant;
        24 ( 0.00%)      LOG ("redundant bytes %s (%.0f%%) out of %s moving bytes",
         .                    FORMAT_BYTES (redundant_bytes),
         .                    kissat_percent (redundant_bytes, move_bytes),
         .                    FORMAT_BYTES (move_bytes));
         .           #endif
        12 ( 0.00%)      assert (first_redundant < dst);
        24 ( 0.00%)      res = kissat_reference_clause (solver, first_redundant);
       444 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (4x)
         8 ( 0.00%)      assert (res != INVALID_REF);
         .             }
         .           
       165 ( 0.00%)    SET_END_OF_STACK (solver->arena, (ward *) dst);
        33 ( 0.00%)    kissat_shrink_arena (solver);
    52,665 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_shrink_arena (11x)
         .           
         .           #ifdef METRICS
        44 ( 0.00%)    if (solver->statistics.arena_garbage)
       120 ( 0.00%)      kissat_very_verbose (solver, "still %s garbage left in arena",
     8,908 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (8x)
       344 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (8x)
         .                                    FORMAT_BYTES (solver->statistics.arena_garbage));
         .             else
        18 ( 0.00%)      kissat_very_verbose (solver, "all garbage clauses in arena collected");
       129 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (3x)
         .           #endif
         .           
        11 ( 0.00%)    return res;
        55 ( 0.00%)  }
         .           
        66 ( 0.00%)  static void rewatch_clauses (kissat *solver, reference start) {
        66 ( 0.00%)    LOG ("rewatching clause[%" REFERENCE_FORMAT "] and following clauses",
         .                  start);
        44 ( 0.00%)    assert (solver->watching);
         .           
        33 ( 0.00%)    const value *const values = solver->values;
        33 ( 0.00%)    const assigned *const assigned = solver->assigned;
        33 ( 0.00%)    watches *watches = solver->watches;
        33 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
         .           
        33 ( 0.00%)    clause *end = (clause *) END_STACK (solver->arena);
        66 ( 0.00%)    clause *c = (clause *) (BEGIN_STACK (solver->arena) + start);
        33 ( 0.00%)    assert (c <= end);
         .           
 1,731,043 ( 0.00%)    for (clause *next; c != end; c = next) {
 1,384,808 ( 0.00%)      next = kissat_next_clause (c);
20,960,042 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (346,202x)
         .           
 1,038,606 ( 0.00%)      unsigned *lits = c->lits;
 3,115,818 ( 0.00%)      kissat_sort_literals (solver, values, assigned, c->size, lits);
68,815,145 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/sort.c:kissat_sort_literals (346,202x)
   692,404 ( 0.00%)      c->searched = 2;
         .           
 1,384,808 ( 0.00%)      const reference ref = (ward *) c - arena;
 1,038,606 ( 0.00%)      const unsigned l0 = lits[0];
 1,038,606 ( 0.00%)      const unsigned l1 = lits[1];
         .           
 3,462,020 ( 0.00%)      kissat_push_blocking_watch (solver, watches + l0, l1, ref);
76,963,501 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (346,202x)
 3,462,020 ( 0.00%)      kissat_push_blocking_watch (solver, watches + l1, l0, ref);
76,923,888 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (346,202x)
         .             }
        44 ( 0.00%)  }
         .           
       121 ( 0.00%)  void kissat_sparse_collect (kissat *solver, bool compact, reference start) {
        44 ( 0.00%)    assert (solver->watching);
        99 ( 0.00%)    START (collect);
        44 ( 0.00%)    INC (garbage_collections);
       165 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_garbage_collections (11x)
        44 ( 0.00%)    INC (sparse_gcs);
       165 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_sparse_gcs (11x)
        55 ( 0.00%)    REPORT (1, 'G');
       649 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (11x)
         .             unsigned vars, mfixed;
        22 ( 0.00%)    if (compact)
        21 ( 0.00%)      vars = kissat_compact_literals (solver, &mfixed);
 9,733,471 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/compact.c:kissat_compact_literals (3x)
         .             else {
        24 ( 0.00%)      vars = solver->vars;
         8 ( 0.00%)      mfixed = INVALID_LIT;
         .             }
        66 ( 0.00%)    flush_all_watched_clauses (solver, compact, start);
319,120,149 ( 0.13%)  => build/../src/collect.c:flush_all_watched_clauses (11x)
        77 ( 0.00%)    reference move = sparse_sweep_garbage_clauses (solver, compact, start);
524,769,490 ( 0.22%)  => build/../src/collect.c:sparse_sweep_garbage_clauses (11x)
        22 ( 0.00%)    if (compact)
        18 ( 0.00%)      kissat_finalize_compacting (solver, vars, mfixed);
100,276,984 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/compact.c:kissat_finalize_compacting (3x)
        22 ( 0.00%)    if (move != INVALID_REF)
        20 ( 0.00%)      move_redundant_clauses_to_the_end (solver, move);
 8,639,713 ( 0.00%)  => build/../src/collect.c:move_redundant_clauses_to_the_end (4x)
        55 ( 0.00%)    rewatch_clauses (solver, start);
262,011,799 ( 0.11%)  => build/../src/collect.c:rewatch_clauses (11x)
        55 ( 0.00%)    REPORT (1, 'C');
       649 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (11x)
        33 ( 0.00%)    kissat_check_statistics (solver);
181,211,054 ( 0.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.c:kissat_check_statistics (11x)
        99 ( 0.00%)    STOP (collect);
        66 ( 0.00%)  }
         .           
        66 ( 0.00%)  bool kissat_compacting (kissat *solver) {
        44 ( 0.00%)    if (!GET_OPTION (compact))
         .               return false;
        77 ( 0.00%)    unsigned inactive = solver->vars - solver->active;
       198 ( 0.00%)    unsigned limit = GET_OPTION (compactlim) / 1e2 * solver->vars;
        44 ( 0.00%)    bool compact = (inactive > limit);
        66 ( 0.00%)    LOG ("%u inactive variables %.0f%% <= limit %u %.0f%%", inactive,
         .                  kissat_percent (inactive, solver->vars), limit,
         .                  kissat_percent (limit, solver->vars));
        11 ( 0.00%)    return compact;
        33 ( 0.00%)  }
         .           
         5 ( 0.00%)  void kissat_initial_sparse_collect (kissat *solver) {
         4 ( 0.00%)    assert (!solver->level);
         5 ( 0.00%)    assert (!solver->inconsistent);
         4 ( 0.00%)    assert (solver->watching);
         5 ( 0.00%)    assert (kissat_trail_flushed (solver));
        18 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_trail_flushed (1x)
         4 ( 0.00%)    if (solver->statistics.units) {
         .               bool compact = GET_OPTION (compact);
         .               kissat_sparse_collect (solver, compact, 0);
         .             }
         5 ( 0.00%)    REPORT (0, '.');
    26,698 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (1x)
         3 ( 0.00%)  }
         .           
        12 ( 0.00%)  static void dense_sweep_garbage_clauses (kissat *solver) {
         8 ( 0.00%)    assert (!solver->level);
        10 ( 0.00%)    assert (!solver->watching);
         .           
        12 ( 0.00%)    LOG ("dense garbage collection");
         .           
         .           #ifndef QUIET
         2 ( 0.00%)    size_t flushed_garbage_clauses = 0;
         .           #endif
         2 ( 0.00%)    clause *first_reducible = 0;
         2 ( 0.00%)    clause *last_irredundant = 0;
         .           
         6 ( 0.00%)    clause *begin = (clause *) BEGIN_STACK (solver->arena);
         6 ( 0.00%)    const clause *const end = (clause *) END_STACK (solver->arena);
         .           
         4 ( 0.00%)    clause *src = begin;
         4 ( 0.00%)    clause *dst = src;
         .           
 1,502,348 ( 0.00%)    for (clause *next; src != end; src = next) {
 1,502,340 ( 0.00%)      if (src->garbage) {
   525,204 ( 0.00%)        next = kissat_delete_clause (solver, src);
10,500,289 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_clause (87,534x)
         .           #ifndef QUIET
    87,534 ( 0.00%)        flushed_garbage_clauses++;
         .           #endif
    87,534 ( 0.00%)        continue;
         .               }
   851,736 ( 0.00%)      assert (src->size > 1);
 1,277,604 ( 0.00%)      LOGCLS (src, "SRC");
   851,736 ( 0.00%)      next = kissat_next_clause (src);
12,947,268 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (212,934x)
         .               assert (SIZE_OF_CLAUSE_HEADER == sizeof (unsigned));
   851,736 ( 0.00%)      *(unsigned *) dst = *(unsigned *) src;
   851,736 ( 0.00%)      dst->searched = src->searched;
   851,736 ( 0.00%)      dst->size = src->size;
   851,736 ( 0.00%)      dst->shrunken = false;
 2,342,274 ( 0.00%)      memmove (dst->lits, src->lits, src->size * sizeof (unsigned));
 3,123,223 ( 0.00%)  => ???:0x000000000010c860 (212,934x)
 1,277,604 ( 0.00%)      LOGCLS (dst, "DST");
 1,490,538 ( 0.00%)      if (!dst->redundant)
   602,910 ( 0.00%)        last_irredundant = dst;
    23,928 ( 0.00%)      else if (!first_reducible)
         4 ( 0.00%)        first_reducible = dst;
   851,736 ( 0.00%)      dst = kissat_next_clause (dst);
12,902,306 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (212,934x)
         .             }
         .           
        12 ( 0.00%)    update_first_reducible (solver, dst, first_reducible);
       284 ( 0.00%)  => build/../src/collect.c:update_first_reducible (2x)
        12 ( 0.00%)    update_last_irredundant (solver, dst, last_irredundant);
       286 ( 0.00%)  => build/../src/collect.c:update_last_irredundant (2x)
         6 ( 0.00%)    kissat_reset_last_learned (solver);
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/internal.c:kissat_reset_last_learned (2x)
         .           
         .           #if !defined(QUIET) || defined(METRICS)
         8 ( 0.00%)    size_t bytes = (char *) END_STACK (solver->arena) - (char *) dst;
         .           #endif
        30 ( 0.00%)    kissat_phase (solver, "collect", GET (garbage_collections),
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_garbage_collections (2x)
         .                           "flushed %zu large garbage clauses",
         .                           flushed_garbage_clauses);
        42 ( 0.00%)    kissat_phase (solver, "collect", GET (garbage_collections),
     2,573 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_bytes (2x)
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (2x)
        14 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_garbage_collections (2x)
         .                           "collected %s in total", FORMAT_BYTES (bytes));
         .           #ifdef METRICS
        12 ( 0.00%)    ADD (allocated_collected, bytes);
        40 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_allocated_collected (2x)
         .           #endif
         .           
        30 ( 0.00%)    SET_END_OF_STACK (solver->arena, (ward *) dst);
         6 ( 0.00%)    kissat_shrink_arena (solver);
     9,574 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_shrink_arena (2x)
         .           
         .           #ifdef METRICS
         8 ( 0.00%)    if (solver->statistics.arena_garbage)
         .               kissat_very_verbose (solver, "still %s garbage left in arena",
         .                                    FORMAT_BYTES (solver->statistics.arena_garbage));
         .             else
        12 ( 0.00%)      kissat_very_verbose (solver, "all garbage clauses in arena collected");
        86 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (2x)
         .           #endif
         8 ( 0.00%)  }
         .           
        10 ( 0.00%)  void kissat_dense_collect (kissat *solver) {
        10 ( 0.00%)    assert (!solver->watching);
         8 ( 0.00%)    assert (!solver->level);
        18 ( 0.00%)    START (collect);
         8 ( 0.00%)    INC (garbage_collections);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_garbage_collections (2x)
         8 ( 0.00%)    INC (dense_garbage_collections);
        30 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_dense_garbage_collections (2x)
        10 ( 0.00%)    REPORT (1, 'G');
       118 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (2x)
         6 ( 0.00%)    dense_sweep_garbage_clauses (solver);
56,168,443 ( 0.02%)  => build/../src/collect.c:dense_sweep_garbage_clauses (2x)
        10 ( 0.00%)    REPORT (1, 'C');
       118 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (2x)
        18 ( 0.00%)    STOP (collect);
         6 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/analyze.c
--------------------------------------------------------------------------------
Ir                  

-- line 9 ----------------------------------------
         .           #include "rank.h"
         .           #include "shrink.h"
         .           #include "sort.h"
         .           #include "tiers.h"
         .           
         .           #include <inttypes.h>
         .           
         .           static bool one_literal_on_conflict_level (kissat *solver, clause *conflict,
   169,428 ( 0.00%)                                             unsigned *conflict_level_ptr) {
    48,408 ( 0.00%)    assert (conflict);
    96,816 ( 0.00%)    assert (conflict->size > 1);
         .           
    24,204 ( 0.00%)    unsigned jump_level = INVALID_LEVEL;
    24,204 ( 0.00%)    unsigned conflict_level = INVALID_LEVEL;
    24,204 ( 0.00%)    unsigned literals_on_conflict_level = 0;
    24,204 ( 0.00%)    unsigned forced_lit = INVALID_LIT;
         .           
    72,612 ( 0.00%)    assigned *all_assigned = solver->assigned;
         .           
    72,612 ( 0.00%)    unsigned *lits = conflict->lits;
    72,612 ( 0.00%)    const unsigned conflict_size = conflict->size;
   121,020 ( 0.00%)    const unsigned *const end_of_lits = lits + conflict_size;
         .           
   249,327 ( 0.00%)    for (const unsigned *p = lits; p != end_of_lits; p++) {
   149,688 ( 0.00%)      const unsigned lit = *p;
   598,752 ( 0.00%)      assert (VALUE (lit) < 0);
   399,168 ( 0.00%)      const unsigned idx = IDX (lit);
   349,272 ( 0.00%)      const unsigned lit_level = all_assigned[idx].level;
   176,868 ( 0.00%)      if (conflict_level == INVALID_LEVEL || conflict_level < lit_level) {
    24,212 ( 0.00%)        literals_on_conflict_level = 1;
    48,424 ( 0.00%)        jump_level = conflict_level;
    48,424 ( 0.00%)        conflict_level = lit_level;
    72,636 ( 0.00%)        forced_lit = lit;
         .               } else {
    55,826 ( 0.00%)        if (jump_level == INVALID_LEVEL || jump_level < lit_level)
    48,404 ( 0.00%)          jump_level = lit_level;
    77,052 ( 0.00%)        if (conflict_level == lit_level)
    23,979 ( 0.00%)          literals_on_conflict_level++;
         .               }
   195,812 ( 0.00%)      if (literals_on_conflict_level > 1 && conflict_level == solver->level)
    23,937 ( 0.00%)        break;
         .             }
    48,408 ( 0.00%)    assert (conflict_level != INVALID_LEVEL);
    48,408 ( 0.00%)    assert (literals_on_conflict_level);
         .           
   145,224 ( 0.00%)    LOG ("found %u literals on conflict level %u", literals_on_conflict_level,
         .                  conflict_level);
    72,612 ( 0.00%)    *conflict_level_ptr = conflict_level;
         .           
    48,408 ( 0.00%)    if (!conflict_level) {
         .               solver->inconsistent = true;
         .               LOG ("learned empty clause from conflict at conflict level zero");
         .               CHECK_AND_ADD_EMPTY ();
         .               ADD_EMPTY_TO_PROOF ();
         .               return false;
         .             }
         .           
    96,816 ( 0.00%)    if (conflict_level < solver->level) {
       120 ( 0.00%)      LOG ("forced backtracking due to conflict level %u < level %u",
         .                    conflict_level, solver->level);
       100 ( 0.00%)      kissat_backtrack_after_conflict (solver, conflict_level);
 2,931,912 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_after_conflict (20x)
         .             }
         .           
    48,408 ( 0.00%)    if (conflict_size > 2) {
   219,500 ( 0.00%)      for (unsigned i = 0; i < 2; i++) {
   263,400 ( 0.00%)        const unsigned lit = lits[i];
   351,200 ( 0.00%)        const unsigned lit_idx = IDX (lit);
    87,800 ( 0.00%)        unsigned highest_position = i;
    87,800 ( 0.00%)        unsigned highest_literal = lit;
   307,300 ( 0.00%)        unsigned highest_level = all_assigned[lit_idx].level;
 1,150,202 ( 0.00%)        for (unsigned j = i + 1; j < conflict_size; j++) {
 1,198,578 ( 0.00%)          const unsigned other = lits[j];
 1,598,104 ( 0.00%)          const unsigned other_idx = IDX (other);
 1,398,341 ( 0.00%)          const unsigned level = all_assigned[other_idx].level;
   599,289 ( 0.00%)          if (highest_level >= level)
   199,752 ( 0.00%)            continue;
        22 ( 0.00%)          highest_literal = other;
        22 ( 0.00%)          highest_position = j;
        22 ( 0.00%)          highest_level = level;
        34 ( 0.00%)          if (highest_level == conflict_level)
        10 ( 0.00%)            break;
         .                 }
   131,700 ( 0.00%)        if (highest_position == i)
    43,890 ( 0.00%)          continue;
        10 ( 0.00%)        reference ref = INVALID_REF;
        20 ( 0.00%)        if (highest_position > 1) {
        30 ( 0.00%)          ref = kissat_reference_clause (solver, conflict);
       561 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (5x)
        30 ( 0.00%)          kissat_unwatch_blocking (solver, lit, ref);
     2,470 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_unwatch_blocking (5x)
         .                 }
        60 ( 0.00%)        lits[highest_position] = lit;
        60 ( 0.00%)        lits[i] = highest_literal;
        20 ( 0.00%)        if (highest_position > 1)
        82 ( 0.00%)          kissat_watch_blocking (solver, lits[i], lits[!i], ref);
     1,305 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_blocking (5x)
         .               }
         .             }
         .           
    48,408 ( 0.00%)    if (literals_on_conflict_level > 1)
    47,906 ( 0.00%)      return false;
         .           
       502 ( 0.00%)    assert (literals_on_conflict_level == 1);
       502 ( 0.00%)    assert (forced_lit != INVALID_LIT);
       502 ( 0.00%)    assert (jump_level != INVALID_LEVEL);
       753 ( 0.00%)    assert (jump_level < conflict_level);
         .           
     1,506 ( 0.00%)    LOG ("reusing conflict as driving clause of %s", LOGLIT (forced_lit));
         .           
     1,506 ( 0.00%)    unsigned new_level = kissat_determine_new_level (solver, jump_level);
    13,779 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/learn.c:kissat_determine_new_level (251x)
     1,255 ( 0.00%)    kissat_backtrack_after_conflict (solver, new_level);
23,616,826 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_after_conflict (251x)
         .           
       502 ( 0.00%)    if (conflict_size == 2) {
       240 ( 0.00%)      assert (conflict == &solver->conflict);
       480 ( 0.00%)      const unsigned other = lits[0] ^ lits[1] ^ forced_lit;
       420 ( 0.00%)      kissat_assign_binary (solver, forced_lit, other);
    16,686 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_assign_binary (60x)
         .             } else {
     1,146 ( 0.00%)      const reference ref = kissat_reference_clause (solver, conflict);
    21,435 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (191x)
     1,146 ( 0.00%)      kissat_assign_reference (solver, forced_lit, ref, conflict);
   141,645 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_assign_reference (191x)
         .             }
         .           
       251 ( 0.00%)    return true;
    48,408 ( 0.00%)  }
         .           
         .           static inline void mark_reason_side_literal (kissat *solver,
         .                                                        assigned *all_assigned,
 7,620,864 ( 0.00%)                                               unsigned lit) {
10,161,152 ( 0.00%)    const unsigned idx = IDX (lit);
 7,620,864 ( 0.00%)    const assigned *a = all_assigned + idx;
12,681,748 ( 0.01%)    if (a->level && !a->analyzed)
 4,366,824 ( 0.00%)      kissat_push_analyzed (solver, all_assigned, idx);
34,934,592 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (727,804x)
 3,810,432 ( 0.00%)  }
         .           
         .           static inline void analyze_reason_side_literal (kissat *solver,
         .                                                           size_t limit, ward *arena,
         .                                                           assigned *all_assigned,
 3,758,152 ( 0.00%)                                                  unsigned lit) {
 3,758,152 ( 0.00%)    const unsigned idx = IDX (lit);
 2,818,614 ( 0.00%)    const assigned *a = all_assigned + idx;
 1,879,076 ( 0.00%)    assert (a->level);
 2,348,845 ( 0.00%)    assert (a->analyzed);
 1,879,076 ( 0.00%)    assert (a->reason != UNIT_REASON);
 1,879,076 ( 0.00%)    if (a->reason == DECISION_REASON)
   265,140 ( 0.00%)      return;
 1,685,995 ( 0.00%)    if (a->binary) {
   265,347 ( 0.00%)      const unsigned other = a->reason;
   619,143 ( 0.00%)      mark_reason_side_literal (solver, all_assigned, other);
 5,627,295 ( 0.00%)  => build/../src/analyze.c:mark_reason_side_literal (88,449x)
         .             } else {
   746,250 ( 0.00%)      const reference ref = a->reason;
 2,487,500 ( 0.00%)      assert (ref < SIZE_STACK (solver->arena));
 1,492,500 ( 0.00%)      clause *c = (clause *) (arena + ref);
 1,990,000 ( 0.00%)      const unsigned not_lit = NOT (lit);
   995,000 ( 0.00%)      INC (search_ticks);
 3,731,250 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_search_ticks (248,750x)
13,744,037 ( 0.01%)      for (all_literals_in_clause (other, c))
 5,473,018 ( 0.00%)        if (other != not_lit) {
 3,545,085 ( 0.00%)          assert (other != lit);
 7,090,170 ( 0.00%)          mark_reason_side_literal (solver, all_assigned, other);
75,569,181 ( 0.03%)  => build/../src/analyze.c:mark_reason_side_literal (1,181,695x)
10,635,255 ( 0.00%)          if (SIZE_STACK (solver->analyzed) > limit)
        75 ( 0.00%)            break;
         .                 }
         .             }
   939,538 ( 0.00%)  }
         .           
   117,470 ( 0.00%)  static void analyze_reason_side_literals (kissat *solver) {
    93,976 ( 0.00%)    if (!GET_OPTION (bump))
         .               return;
    93,976 ( 0.00%)    if (!GET_OPTION (bumpreasons))
         .               return;
    93,976 ( 0.00%)    if (solver->probing)
         .               return;
   187,952 ( 0.00%)    if (DELAYING (bumpreasons))
   587,818 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_delaying (23,494x)
       156 ( 0.00%)      return;
   351,240 ( 0.00%)    const double decision_rate = AVERAGE (decision_rate);
    70,248 ( 0.00%)    const int decision_rate_limit = GET_OPTION (bumpreasonsrate);
   117,080 ( 0.00%)    if (decision_rate >= decision_rate_limit) {
     8,988 ( 0.00%)      LOG ("decision rate %g >= limit %d", decision_rate,
         .                    decision_rate_limit);
     1,498 ( 0.00%)      return;
         .             }
    65,754 ( 0.00%)    assigned *all_assigned = solver->assigned;
         .           #ifndef NDEBUG
 3,508,466 ( 0.00%)    for (all_stack (unsigned, lit, solver->clause))
 7,518,368 ( 0.00%)      assert (all_assigned[IDX (lit)].analyzed);
         .           #endif
   131,508 ( 0.00%)    LOG ("trying to bump reason side literals too");
   175,344 ( 0.00%)    const size_t saved = SIZE_STACK (solver->analyzed);
   131,508 ( 0.00%)    const size_t limit = GET_OPTION (bumpreasonslimit) * saved;
   131,508 ( 0.00%)    LOG ("analyzed already %zu literals thus limit %zu", saved, limit);
    65,754 ( 0.00%)    ward *arena = BEGIN_STACK (solver->arena);
 3,507,259 ( 0.00%)    for (all_stack (unsigned, lit, solver->clause)) {
 3,758,152 ( 0.00%)      analyze_reason_side_literal (solver, limit, arena, all_assigned, lit);
155,222,770 ( 0.07%)  => build/../src/analyze.c:analyze_reason_side_literal (469,769x)
 4,227,921 ( 0.00%)      if (SIZE_STACK (solver->analyzed) > limit)
        76 ( 0.00%)        break;
         .             }
   197,262 ( 0.00%)    if (SIZE_STACK (solver->analyzed) > limit) {
       456 ( 0.00%)      LOG ("too many additional reason side literals");
    45,756 ( 0.00%)      while (SIZE_STACK (solver->analyzed) > saved) {
    75,120 ( 0.00%)        const unsigned idx = POP_STACK (solver->analyzed);
    30,048 ( 0.00%)        struct assigned *a = all_assigned + idx;
    30,048 ( 0.00%)        LOG ("marking %s as not analyzed", LOGVAR (idx));
    25,040 ( 0.00%)        assert (a->analyzed);
    20,032 ( 0.00%)        a->analyzed = false;
         .               }
       532 ( 0.00%)      BUMP_DELAY (bumpreasons);
     2,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_bump_delay (76x)
         .             } else
   152,894 ( 0.00%)      REDUCE_DELAY (bumpreasons);
   329,150 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/kimits.c:kissat_reduce_delay (21,842x)
    46,988 ( 0.00%)  }
         .           
         .           #define RADIX_SORT_LEVELS_LIMIT 32
         .           
         .           #define RANK_LEVEL(A) (A)
         .           #define SMALLER_LEVEL(A, B) (RANK_LEVEL (A) < RANK_LEVEL (B))
         .           
   305,422 ( 0.00%)  static void sort_levels (kissat *solver) {
    70,482 ( 0.00%)    unsigneds *levels = &solver->levels;
   187,952 ( 0.00%)    size_t glue = SIZE_STACK (*levels);
    46,988 ( 0.00%)    if (glue < RADIX_SORT_LEVELS_LIMIT)
20,449,205 ( 0.01%)      SORT_STACK (unsigned, *levels, SMALLER_LEVEL);
         .             else
 1,258,883 ( 0.00%)      RADIX_STACK (unsigned, unsigned, *levels, RANK_LEVEL);
    37,153 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (233x)
    34,956 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (233x)
    32,232 ( 0.00%)  => ???:0x000000000010c5b0 (237x)
     7,030 ( 0.00%)  => ???:0x000000000010c650 (229x)
   140,964 ( 0.00%)    LOG ("sorted %zu levels", glue);
   281,928 ( 0.00%)  }
         .           
   117,470 ( 0.00%)  static void sort_deduced_clause (kissat *solver) {
    70,482 ( 0.00%)    sort_levels (solver);
22,853,195 ( 0.01%)  => build/../src/analyze.c:sort_levels (23,494x)
         .           #ifndef NDEBUG
   258,434 ( 0.00%)    const size_t size_frames = SIZE_STACK (solver->frames);
         .           #endif
    70,482 ( 0.00%)    frame *frames = BEGIN_STACK (solver->frames);
    23,494 ( 0.00%)    unsigned pos = 1;
    70,482 ( 0.00%)    const unsigned *const begin_levels = BEGIN_STACK (solver->levels);
    70,482 ( 0.00%)    const unsigned *const end_levels = END_STACK (solver->levels);
    46,988 ( 0.00%)    unsigned const *p = end_levels;
   672,265 ( 0.00%)    while (p != begin_levels) {
   771,052 ( 0.00%)      const unsigned level = *--p;
   578,289 ( 0.00%)      assert (level < size_frames);
 1,734,867 ( 0.00%)      frame *f = frames + level;
   578,289 ( 0.00%)      const unsigned used = f->used;
         .           #ifndef NDEBUG
   578,289 ( 0.00%)      f->saved = used;
         .           #endif
   385,526 ( 0.00%)      assert (used > 0);
   771,052 ( 0.00%)      assert (UINT_MAX - used >= pos);
   578,289 ( 0.00%)      f->used = pos;
   385,526 ( 0.00%)      pos += used;
         .             }
    70,482 ( 0.00%)    unsigneds *clause = &solver->clause;
   187,952 ( 0.00%)    const size_t size_clause = SIZE_STACK (*clause);
         .           #ifndef NDEBUG
    70,482 ( 0.00%)    assert (pos == size_clause);
         .           #endif
    70,482 ( 0.00%)    unsigned const *begin_clause = BEGIN_STACK (*clause);
    70,482 ( 0.00%)    const unsigned *const end_clause = END_STACK (*clause);
    70,482 ( 0.00%)    assert (begin_clause < end_clause);
         .           
    70,482 ( 0.00%)    unsigneds *shadow = &solver->shadow;
17,420,071 ( 0.01%)    while (SIZE_STACK (*shadow) < size_clause)
22,913,604 ( 0.01%)      PUSH_STACK (*shadow, INVALID_LIT);
     5,618 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (8x)
         .           
   117,470 ( 0.00%)    const unsigned not_uip = *begin_clause++;
   234,940 ( 0.00%)    POKE_STACK (*shadow, 0, not_uip);
         .           
    70,482 ( 0.00%)    const assigned *const assigned = solver->assigned;
         .           
 7,684,824 ( 0.00%)    for (const unsigned *p = begin_clause; p != end_clause; p++) {
 5,657,895 ( 0.00%)      const unsigned lit = *p;
15,087,720 ( 0.01%)      const unsigned idx = IDX (lit);
11,315,790 ( 0.00%)      const struct assigned *a = assigned + idx;
 5,657,895 ( 0.00%)      const unsigned level = a->level;
 5,657,895 ( 0.00%)      assert (level < size_frames);
16,973,685 ( 0.01%)      frame *f = frames + level;
11,315,790 ( 0.00%)      const unsigned pos = f->used++;
32,061,405 ( 0.01%)      POKE_STACK (*shadow, pos, lit);
         .             }
         .           
   258,434 ( 0.00%)    assert (size_clause == SIZE_STACK (*shadow));
   516,868 ( 0.00%)    SWAP (unsigneds, *clause, *shadow);
         .           
    23,494 ( 0.00%)    pos = 1;
    46,988 ( 0.00%)    p = end_levels;
   672,265 ( 0.00%)    while (p != begin_levels) {
   771,052 ( 0.00%)      const unsigned level = *--p;
   578,289 ( 0.00%)      assert (level < size_frames);
 1,734,867 ( 0.00%)      frame *f = frames + level;
   578,289 ( 0.00%)      const unsigned end = f->used;
   578,289 ( 0.00%)      assert (pos < end);
   963,815 ( 0.00%)      f->used = end - pos;
 1,156,578 ( 0.00%)      assert (f->used == f->saved);
   385,526 ( 0.00%)      pos = end;
         .             }
         .           
    93,976 ( 0.00%)    CLEAR_STACK (*shadow);
   140,964 ( 0.00%)    LOGTMP ("level sorted deduced");
         .           
         .           #ifndef NDEBUG
    70,482 ( 0.00%)    unsigned prev_level = solver->level;
13,601,153 ( 0.01%)    for (all_stack (unsigned, lit, solver->clause)) {
15,275,672 ( 0.01%)      const unsigned idx = IDX (lit);
13,366,213 ( 0.01%)      const unsigned lit_level = assigned[idx].level;
 5,728,377 ( 0.00%)      assert (prev_level >= lit_level);
 3,818,918 ( 0.00%)      prev_level = lit_level;
         .             }
         .           #endif
    70,482 ( 0.00%)  }
         .           
   119,690 ( 0.00%)  static void reset_levels (kissat *solver) {
   143,628 ( 0.00%)    LOG ("reset %zu marked levels", SIZE_STACK (solver->levels));
    71,814 ( 0.00%)    frame *frames = BEGIN_STACK (solver->frames);
         .           #ifndef NDEBUG
   263,318 ( 0.00%)    const size_t size_frames = SIZE_STACK (solver->frames);
         .           #endif
 1,599,767 ( 0.00%)    for (all_stack (unsigned, level, solver->levels)) {
   583,023 ( 0.00%)      assert (level < size_frames);
 1,749,069 ( 0.00%)      frame *f = frames + level;
   777,364 ( 0.00%)      assert (f->used > 0);
   388,682 ( 0.00%)      f->used = 0;
         .             }
    95,752 ( 0.00%)    CLEAR_STACK (solver->levels);
    71,814 ( 0.00%)  }
         .           
   122,810 ( 0.00%)  void kissat_reset_only_analyzed_literals (kissat *solver) {
   147,372 ( 0.00%)    LOG ("reset %zu analyzed variables", SIZE_STACK (solver->analyzed));
    73,686 ( 0.00%)    assigned *assigned = solver->assigned;
84,599,687 ( 0.04%)    for (all_stack (unsigned, idx, solver->analyzed)) {
48,202,324 ( 0.02%)      assert (idx < VARS);
72,303,486 ( 0.03%)      struct assigned *a = assigned + idx;
84,354,067 ( 0.04%)      assert (!a->poisoned);
84,354,067 ( 0.04%)      assert (!a->removable);
84,354,067 ( 0.04%)      assert (!a->shrinkable);
48,202,324 ( 0.02%)      a->analyzed = false;
         .             }
    98,248 ( 0.00%)    CLEAR_STACK (solver->analyzed);
    73,686 ( 0.00%)  }
         .           
   119,690 ( 0.00%)  static void reset_removable (kissat *solver) {
   143,628 ( 0.00%)    LOG ("reset %zu removable variables", SIZE_STACK (solver->removable));
    71,814 ( 0.00%)    assigned *assigned = solver->assigned;
         .           #ifndef NDEBUG
    23,938 ( 0.00%)    unsigned not_removable = 0;
         .           #endif
46,203,214 ( 0.02%)    for (all_stack (unsigned, idx, solver->removable)) {
26,265,048 ( 0.01%)      assert (idx < VARS);
39,397,572 ( 0.02%)      struct assigned *a = assigned + idx;
32,948,780 ( 0.01%)      assert (a->removable || !not_removable++);
26,265,048 ( 0.01%)      a->removable = false;
         .             }
    95,752 ( 0.00%)    CLEAR_STACK (solver->removable);
    71,814 ( 0.00%)  }
         .           
   119,690 ( 0.00%)  static void reset_analysis_but_not_analyzed_literals (kissat *solver) {
    71,814 ( 0.00%)    reset_removable (solver);
171,606,298 ( 0.07%)  => build/../src/analyze.c:reset_removable (23,938x)
    71,814 ( 0.00%)    reset_levels (solver);
 5,863,921 ( 0.00%)  => build/../src/analyze.c:reset_levels (23,938x)
   143,628 ( 0.00%)    LOG ("reset %zu learned literals", SIZE_STACK (solver->clause));
    95,752 ( 0.00%)    CLEAR_STACK (solver->clause);
    71,814 ( 0.00%)  }
         .           
   118,800 ( 0.00%)  static void update_trail_average (kissat *solver) {
   118,800 ( 0.00%)    assert (!solver->probing);
         .           #if defined(LOGGING) || !defined(QUIET)
   190,080 ( 0.00%)    const unsigned size = SIZE_ARRAY (solver->trail);
   118,800 ( 0.00%)    const unsigned assigned = size - solver->unflushed;
    71,280 ( 0.00%)    const unsigned active = solver->active;
   427,680 ( 0.00%)    const double filled = kissat_percent (assigned, active);
   807,840 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (23,760x)
         .           #else
         .             (void) solver;
         .           #endif
   142,560 ( 0.00%)    LOG ("trail filled %.0f%% (size %u, unflushed %u, active %u)", filled,
         .                  size, solver->unflushed, active);
         .           #ifndef QUIET
   475,200 ( 0.00%)    UPDATE_AVERAGE (trail, filled);
 2,114,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/smooth.c:kissat_update_smooth (23,760x)
         .           #endif
    71,280 ( 0.00%)  }
         .           
   118,800 ( 0.00%)  static void update_decision_rate_average (kissat *solver) {
   118,800 ( 0.00%)    assert (!solver->probing);
    71,280 ( 0.00%)    const uint64_t current = DECISIONS;
   285,120 ( 0.00%)    const uint64_t previous =
    71,280 ( 0.00%)        solver->averages[solver->stable].saved_decisions;
    71,280 ( 0.00%)    assert (previous <= current);
    71,280 ( 0.00%)    const uint64_t decisions = current - previous;
   356,400 ( 0.00%)    solver->averages[solver->stable].saved_decisions = current;
   617,760 ( 0.00%)    UPDATE_AVERAGE (decision_rate, decisions);
 2,114,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/smooth.c:kissat_update_smooth (23,760x)
    71,280 ( 0.00%)  }
         .           
       105 ( 0.00%)  static void analyze_failed_literal (kissat *solver, clause *conflict) {
        60 ( 0.00%)    assert (solver->level == 1);
       195 ( 0.00%)    const unsigned failed = FRAME (1).decision;
         .           
        90 ( 0.00%)    LOGCLS (conflict, "analyzing failed literal %s conflict",
         .                     LOGLIT (failed));
         .           
        45 ( 0.00%)    unsigneds *units = &solver->clause;
        90 ( 0.00%)    assert (EMPTY_STACK (*units));
        90 ( 0.00%)    assert (EMPTY_STACK (solver->analyzed));
         .           
       120 ( 0.00%)    const unsigned not_failed = NOT (failed);
        45 ( 0.00%)    assigned *all_assigned = solver->assigned;
         .           #ifndef NDEBUG
        45 ( 0.00%)    const value *const values = solver->values;
         .           #endif
        45 ( 0.00%)    unsigned const *t = END_ARRAY (solver->trail);
        15 ( 0.00%)    unsigned unresolved = 0;
        15 ( 0.00%)    unsigned unit = INVALID_LIT;
         .           
     1,142 ( 0.00%)    for (all_literals_in_clause (lit, conflict)) {
       393 ( 0.00%)      assert (lit != failed);
       393 ( 0.00%)      if (lit == not_failed) {
         .                 LOG ("negation %s of failed literal %s occurs in conflict",
         .                      LOGLIT (not_failed), LOGLIT (failed));
         .                 goto DONE;
         .               }
       786 ( 0.00%)      assert (values[lit] < 0);
     1,048 ( 0.00%)      const unsigned idx = IDX (lit);
       786 ( 0.00%)      assigned *a = all_assigned + idx;
       524 ( 0.00%)      if (!a->level)
         2 ( 0.00%)        continue;
       516 ( 0.00%)      assert (a->level == 1);
       774 ( 0.00%)      LOG ("analyzing conflict literal %s", LOGLIT (lit));
       774 ( 0.00%)      kissat_push_analyzed (solver, all_assigned, idx);
     6,192 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (129x)
       258 ( 0.00%)      unresolved++;
         .             }
         .           
         .             for (;;) {
         .               unsigned lit;
         .               assigned *a;
         .               do {
   147,552 ( 0.00%)        assert (t > BEGIN_ARRAY (solver->trail));
   147,552 ( 0.00%)        lit = *--t;
   221,328 ( 0.00%)        assert (values[lit] > 0);
   295,104 ( 0.00%)        const unsigned idx = IDX (lit);
   221,328 ( 0.00%)        a = all_assigned + idx;
   221,328 ( 0.00%)      } while (!a->analyzed);
     9,870 ( 0.00%)      if (unresolved == 1) {
        32 ( 0.00%)        unit = NOT (lit);
        24 ( 0.00%)        LOG ("learning additional unit %s", LOGLIT (unit));
        52 ( 0.00%)        PUSH_STACK (*units, unit);
         .               }
    24,675 ( 0.00%)      if (a->binary) {
     2,649 ( 0.00%)        const unsigned other = a->reason;
     5,298 ( 0.00%)        LOGBINARY (lit, other, "resolving %s reason", LOGLIT (lit));
     2,649 ( 0.00%)        assert (other != failed);
     2,649 ( 0.00%)        assert (other != unit);
     5,298 ( 0.00%)        assert (values[other] < 0);
     2,649 ( 0.00%)        if (other == not_failed) {
        36 ( 0.00%)          LOG ("negation %s of failed literal %s in reason",
         .                        LOGLIT (not_failed), LOGLIT (failed));
        12 ( 0.00%)          goto DONE;
         .                 }
     7,016 ( 0.00%)        const unsigned idx = IDX (other);
     5,262 ( 0.00%)        assigned *b = all_assigned + idx;
     3,508 ( 0.00%)        assert (b->level == 1);
     5,262 ( 0.00%)        if (!b->analyzed) {
     1,416 ( 0.00%)          LOG ("analyzing reason literal %s", LOGLIT (other));
     1,416 ( 0.00%)          kissat_push_analyzed (solver, all_assigned, idx);
    11,328 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (236x)
       472 ( 0.00%)          unresolved++;
         .                 }
         .               } else {
    16,208 ( 0.00%)        assert (a->reason != UNIT_REASON);
    16,208 ( 0.00%)        assert (a->reason != DECISION_REASON);
    12,156 ( 0.00%)        const reference ref = a->reason;
    24,312 ( 0.00%)        LOGREF (ref, "resolving %s reason", LOGLIT (lit));
    24,312 ( 0.00%)        clause *reason = kissat_dereference_clause (solver, ref);
   555,004 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (4,052x)
   152,934 ( 0.00%)        for (all_literals_in_clause (other, reason)) {
   118,530 ( 0.00%)          assert (other != NOT (lit));
    39,510 ( 0.00%)          assert (other != failed);
    39,510 ( 0.00%)          if (other == lit)
     8,104 ( 0.00%)            continue;
    27,354 ( 0.00%)          if (other == unit)
         .                     continue;
    27,354 ( 0.00%)          if (other == not_failed) {
        54 ( 0.00%)            LOG ("negation %s of failed literal %s occurs in reason",
         .                          LOGLIT (not_failed), LOGLIT (failed));
         9 ( 0.00%)            goto DONE;
         .                   }
    54,654 ( 0.00%)          assert (values[other] < 0);
    72,872 ( 0.00%)          const unsigned idx = IDX (other);
    54,654 ( 0.00%)          assigned *b = all_assigned + idx;
    36,436 ( 0.00%)          if (!b->level)
        50 ( 0.00%)            continue;
    36,336 ( 0.00%)          assert (b->level == 1);
    45,420 ( 0.00%)          if (b->analyzed)
     3,896 ( 0.00%)            continue;
    31,128 ( 0.00%)          LOG ("analyzing reason literal %s", LOGLIT (other));
    31,128 ( 0.00%)          kissat_push_analyzed (solver, all_assigned, idx);
   249,024 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_analyzed (5,188x)
    10,376 ( 0.00%)          unresolved++;
         .                 }
         .               }
     9,840 ( 0.00%)      assert (unresolved > 0);
     4,920 ( 0.00%)      unresolved--;
    29,520 ( 0.00%)      LOG ("after resolving %s there are %u unresolved literals",
         .                    LOGLIT (lit), unresolved);
         .             }
         .           DONE:
        90 ( 0.00%)    LOG ("learning negated failed literal %s", LOGLIT (not_failed));
       195 ( 0.00%)    PUSH_STACK (*units, not_failed);
         .           
        75 ( 0.00%)    if (!solver->probing)
        75 ( 0.00%)      kissat_update_learned (solver, 0, 1);
     6,357 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/learn.c:kissat_update_learned (15x)
         .           
        90 ( 0.00%)    LOG ("failed literal %s produced %zu units", LOGLIT (failed),
         .                  SIZE_STACK (*units));
         .           
        60 ( 0.00%)    kissat_backtrack_without_updating_phases (solver, 0);
 7,237,771 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/backtrack.c:kissat_backtrack_without_updating_phases (15x)
         .           
       302 ( 0.00%)    for (all_stack (unsigned, lit, *units))
        95 ( 0.00%)      kissat_learned_unit (solver, lit);
20,538,347 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (19x)
        60 ( 0.00%)    CLEAR_STACK (*units);
        75 ( 0.00%)    if (!solver->probing) {
        30 ( 0.00%)      solver->iterating = true;
        60 ( 0.00%)      INC (iterations);
       225 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_iterations (15x)
         .             }
        60 ( 0.00%)  }
         .           
        65 ( 0.00%)  static void update_tier_limits (kissat *solver) {
        52 ( 0.00%)    INC (retiered);
       195 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_retiered (13x)
        39 ( 0.00%)    kissat_compute_and_set_tier_limits (solver);
    19,705 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/tiers.c:kissat_compute_and_set_tier_limits (13x)
        52 ( 0.00%)    if (solver->limits.glue.interval < (1u << 16))
        65 ( 0.00%)      solver->limits.glue.interval *= 2;
        91 ( 0.00%)    solver->limits.glue.conflicts = CONFLICTS + solver->limits.glue.interval;
        39 ( 0.00%)  }
         .           
   213,849 ( 0.00%)  int kissat_analyze (kissat *solver, clause *conflict) {
    95,044 ( 0.00%)    if (solver->inconsistent) {
         4 ( 0.00%)      assert (!solver->level);
         2 ( 0.00%)      return 20;
         .             }
         .           
   213,840 ( 0.00%)    START (analyze);
   118,800 ( 0.00%)    if (!solver->probing) {
    71,280 ( 0.00%)      update_trail_average (solver);
 4,656,960 ( 0.00%)  => build/../src/analyze.c:update_trail_average (23,760x)
    71,280 ( 0.00%)      update_decision_rate_average (solver);
 3,967,920 ( 0.00%)  => build/../src/analyze.c:update_decision_rate_average (23,760x)
         .           #ifndef QUIET
   665,280 ( 0.00%)      UPDATE_AVERAGE (level, solver->level);
 2,114,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/smooth.c:kissat_update_smooth (23,760x)
         .           #endif
         .             }
         .             int res;
         .             do {
   145,224 ( 0.00%)      LOGCLS (conflict, "analyzing conflict %" PRIu64, CONFLICTS);
         .               unsigned conflict_level;
   193,632 ( 0.00%)      if (one_literal_on_conflict_level (solver, conflict, &conflict_level))
38,339,939 ( 0.02%)  => build/../src/analyze.c:one_literal_on_conflict_level (24,204x)
       502 ( 0.00%)        res = 1;
    71,859 ( 0.00%)      else if (!conflict_level)
         .                 res = -1;
    71,859 ( 0.00%)      else if (conflict_level == 1) {
        75 ( 0.00%)        analyze_failed_literal (solver, conflict);
30,876,093 ( 0.01%)  => build/../src/analyze.c:analyze_failed_literal (15x)
        30 ( 0.00%)        res = 1;
    47,876 ( 0.00%)      } else if ((conflict =
   143,628 ( 0.00%)                      kissat_deduce_first_uip_clause (solver, conflict))) {
50,014,913,699 (21.16%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/deduce.c:kissat_deduce_first_uip_clause (23,938x)
     1,332 ( 0.00%)        reset_analysis_but_not_analyzed_literals (solver);
    82,962 ( 0.00%)  => build/../src/analyze.c:reset_analysis_but_not_analyzed_literals (444x)
     1,776 ( 0.00%)        INC (conflicts);
     6,660 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_conflicts (444x)
     2,664 ( 0.00%)        if (CONFLICTS > solver->limits.glue.conflicts)
        39 ( 0.00%)          update_tier_limits (solver);
    20,303 ( 0.00%)  => build/../src/analyze.c:update_tier_limits (13x)
       888 ( 0.00%)        res = 0; // And continue with new conflict analysis.
         .               } else {
    93,976 ( 0.00%)        if (GET_OPTION (minimize)) {
    70,482 ( 0.00%)          sort_deduced_clause (solver);
243,831,872 ( 0.10%)  => build/../src/analyze.c:sort_deduced_clause (23,494x)
    70,482 ( 0.00%)          kissat_minimize_clause (solver);
133,917,643 ( 0.06%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/minimize.c:kissat_minimize_clause (23,494x)
    93,976 ( 0.00%)          if (GET_OPTION (shrink))
    70,482 ( 0.00%)            kissat_shrink_clause (solver);
5,671,744,950 ( 2.40%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/shrink.c:kissat_shrink_clause (23,494x)
         .                 }
    70,482 ( 0.00%)        analyze_reason_side_literals (solver);
181,124,752 ( 0.08%)  => build/../src/analyze.c:analyze_reason_side_literals (23,494x)
    70,482 ( 0.00%)        kissat_learn_clause (solver); // TODO: assume this is the only entrance for learning a clause
29,139,491,858 (12.33%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/learn.c:kissat_learn_clause (23,494x)
    70,482 ( 0.00%)        reset_analysis_but_not_analyzed_literals (solver);
177,961,769 ( 0.08%)  => build/../src/analyze.c:reset_analysis_but_not_analyzed_literals (23,494x)
    23,494 ( 0.00%)        res = 1;
         .               }
   145,224 ( 0.00%)      if (!EMPTY_STACK (solver->analyzed)) {
   215,577 ( 0.00%)        if (!solver->probing && GET_OPTION (bump))
    71,859 ( 0.00%)          kissat_bump_analyzed (solver);
5,036,010,593 ( 2.13%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/bump.c:kissat_bump_analyzed (23,953x)
    71,859 ( 0.00%)        kissat_reset_only_analyzed_literals (solver);
506,761,021 ( 0.21%)  => build/../src/analyze.c:kissat_reset_only_analyzed_literals (23,953x)
         .               }
    48,408 ( 0.00%)    } while (!res);
   213,840 ( 0.00%)    STOP (analyze);
    95,040 ( 0.00%)    return res > 0 ? 0 : 20;
   118,805 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/transitive.c
--------------------------------------------------------------------------------
Ir                  

-- line 9 ----------------------------------------
         .           #include "proprobe.h"
         .           #include "report.h"
         .           #include "sort.h"
         .           #include "terminate.h"
         .           #include "trail.h"
         .           
         .           #include <stddef.h>
         .           
 7,154,850 ( 0.00%)  static void transitive_assign (kissat *solver, unsigned lit) {
 7,154,850 ( 0.00%)    LOG ("transitive assign %s", LOGLIT (lit));
 3,577,425 ( 0.00%)    value *values = solver->values;
 9,539,800 ( 0.00%)    const unsigned not_lit = NOT (lit);
 7,154,850 ( 0.00%)    assert (!values[lit]);
 7,154,850 ( 0.00%)    assert (!values[not_lit]);
 4,769,900 ( 0.00%)    values[lit] = 1;
 4,769,900 ( 0.00%)    values[not_lit] = -1;
 8,347,325 ( 0.00%)    PUSH_ARRAY (solver->trail, lit);
 3,577,425 ( 0.00%)  }
         .           
   363,222 ( 0.00%)  static void transitive_backtrack (kissat *solver, unsigned *saved) {
   181,611 ( 0.00%)    value *values = solver->values;
         .           
   181,611 ( 0.00%)    unsigned *end_trail = END_ARRAY (solver->trail);
   181,611 ( 0.00%)    assert (saved <= end_trail);
         .           
 3,759,036 ( 0.00%)    while (end_trail != saved) {
 4,769,900 ( 0.00%)      const unsigned lit = *--end_trail;
 7,154,850 ( 0.00%)      LOG ("transitive unassign %s", LOGLIT (lit));
 9,539,800 ( 0.00%)      const unsigned not_lit = NOT (lit);
 7,154,850 ( 0.00%)      assert (values[lit] > 0);
 7,154,850 ( 0.00%)      assert (values[not_lit] < 0);
10,732,275 ( 0.00%)      values[lit] = values[not_lit] = 0;
         .             }
         .           
   908,055 ( 0.00%)    SET_END_OF_ARRAY (solver->trail, saved);
   181,611 ( 0.00%)    solver->propagate = saved;
   121,074 ( 0.00%)    solver->level = 0;
   181,611 ( 0.00%)  }
         .           
        48 ( 0.00%)  static void prioritize_binaries (kissat *solver) {
        24 ( 0.00%)    assert (solver->watching);
         .             statches large;
        30 ( 0.00%)    INIT_STACK (large);
        18 ( 0.00%)    watches *all_watches = solver->watches;
 1,111,310 ( 0.00%)    for (all_literals (lit)) {
 1,111,256 ( 0.00%)      assert (EMPTY_STACK (large));
 1,666,884 ( 0.00%)      watches *watches = all_watches + lit;
 2,222,512 ( 0.00%)      watch *begin_watches = BEGIN_WATCHES (*watches), *q = begin_watches;
 2,222,512 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (277,814x)
 2,222,512 ( 0.00%)      const watch *const end_watches = END_WATCHES (*watches), *p = q;
 2,222,512 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (277,814x)
 5,712,884 ( 0.00%)      while (p != end_watches) {
15,338,760 ( 0.01%)        const watch head = *q++ = *p++;
 6,295,286 ( 0.00%)        if (head.type.binary)
         .                   continue;
 6,870,470 ( 0.00%)        const watch tail = *p++;
12,367,446 ( 0.01%)        PUSH_STACK (large, head);
   128,239 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (60x)
12,366,846 ( 0.01%)        PUSH_STACK (large, tail);
 1,374,094 ( 0.00%)        q--;
         .               }
   555,628 ( 0.00%)      const watch *const end_large = END_STACK (large);
   555,628 ( 0.00%)      watch const *r = BEGIN_STACK (large);
 9,355,820 ( 0.00%)      while (r != end_large)
21,985,504 ( 0.01%)        *q++ = *r++;
   833,442 ( 0.00%)      assert (q == end_watches);
   555,628 ( 0.00%)      CLEAR_STACK (large);
         .             }
        90 ( 0.00%)    RELEASE_STACK (large);
     1,381 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (6x)
        36 ( 0.00%)  }
         .           
         .           static bool transitive_reduce (kissat *solver, unsigned src, uint64_t limit,
 2,363,053 ( 0.00%)                                 uint64_t *reduced_ptr, unsigned *units) {
   214,823 ( 0.00%)    bool res = false;
 2,577,876 ( 0.00%)    assert (!VALUE (src));
 1,288,938 ( 0.00%)    LOG ("transitive reduce %s", LOGLIT (src));
   644,469 ( 0.00%)    watches *all_watches = solver->watches;
 1,288,938 ( 0.00%)    watches *src_watches = all_watches + src;
 1,288,938 ( 0.00%)    watch *end_src = END_WATCHES (*src_watches);
 1,718,584 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (214,823x)
 1,288,938 ( 0.00%)    watch *begin_src = BEGIN_WATCHES (*src_watches);
 1,718,584 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (214,823x)
   859,292 ( 0.00%)    const size_t size_src_watches = SIZE_WATCHES (*src_watches);
 2,577,876 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (214,823x)
   429,646 ( 0.00%)    const unsigned src_ticks =
   859,292 ( 0.00%)        1 + kissat_cache_lines (size_src_watches, sizeof (watch));
 6,341,805 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (214,823x)
 1,288,938 ( 0.00%)    ADD (transitive_ticks, src_ticks);
 4,296,460 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_transitive_ticks (214,823x)
 1,288,938 ( 0.00%)    ADD (probing_ticks, src_ticks);
 4,296,460 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_ticks (214,823x)
 1,288,938 ( 0.00%)    ADD (ticks, src_ticks);
 4,296,460 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_ticks (214,823x)
   859,292 ( 0.00%)    INC (transitive_probes);
 3,222,345 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_transitive_probes (214,823x)
 1,718,584 ( 0.00%)    const unsigned not_src = NOT (src);
   214,823 ( 0.00%)    unsigned reduced = 0;
   214,823 ( 0.00%)    bool failed = false;
 1,802,097 ( 0.00%)    for (watch *p = begin_src; p != end_src; p++) {
   984,987 ( 0.00%)      const watch src_watch = *p;
 1,641,645 ( 0.00%)      if (!src_watch.type.binary)
   405,952 ( 0.00%)        break;
   376,059 ( 0.00%)      const unsigned dst = src_watch.binary.lit;
   376,059 ( 0.00%)      if (dst < src)
   127,120 ( 0.00%)        continue;
   741,516 ( 0.00%)      if (VALUE (dst))
     1,256 ( 0.00%)        continue;
   302,685 ( 0.00%)      assert (kissat_propagated (solver));
 1,452,888 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (60,537x)
   181,611 ( 0.00%)      unsigned *saved = solver->propagate;
   242,148 ( 0.00%)      assert (!solver->level);
   121,074 ( 0.00%)      solver->level = 1;
   302,685 ( 0.00%)      transitive_assign (solver, not_src);
 3,208,461 ( 0.00%)  => build/../src/transitive.c:transitive_assign (60,537x)
    60,537 ( 0.00%)      bool transitive = false;
    60,537 ( 0.00%)      unsigned inner_ticks = 0;
   181,611 ( 0.00%)      unsigned *propagate = solver->propagate;
12,453,161 ( 0.01%)      while (!transitive && !failed &&
 2,477,640 ( 0.00%)             propagate != END_ARRAY (solver->trail)) {
 5,896,855 ( 0.00%)        const unsigned lit = *propagate++;
 7,076,226 ( 0.00%)        LOG ("transitive propagate %s", LOGLIT (lit));
14,152,452 ( 0.01%)        assert (VALUE (lit) > 0);
 9,434,968 ( 0.00%)        const unsigned not_lit = NOT (lit);
 7,076,226 ( 0.00%)        watches *lit_watches = all_watches + not_lit;
 7,076,226 ( 0.00%)        const watch *const end_lit = END_WATCHES (*lit_watches);
 9,434,968 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (1,179,371x)
 7,076,226 ( 0.00%)        const watch *const begin_lit = BEGIN_WATCHES (*lit_watches);
 9,434,968 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (1,179,371x)
 4,717,484 ( 0.00%)        const size_t size_lit_watches = SIZE_WATCHES (*lit_watches);
14,152,452 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_size_vector (1,179,371x)
 1,179,371 ( 0.00%)        inner_ticks +=
 5,896,855 ( 0.00%)            1 + kissat_cache_lines (size_lit_watches, sizeof (watch));
31,282,184 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_cache_lines (1,179,371x)
12,315,642 ( 0.01%)        for (const watch *q = begin_lit; q != end_lit; q++) {
 6,664,923 ( 0.00%)          if (p == q)
   121,074 ( 0.00%)            continue;
 6,483,312 ( 0.00%)          const watch lit_watch = *q;
10,805,520 ( 0.00%)          if (!lit_watch.type.binary)
 1,821,398 ( 0.00%)            break;
 6,030,347 ( 0.00%)          if (not_lit == src && lit_watch.binary.lit == ILLEGAL_LIT)
    10,307 ( 0.00%)            continue;
 3,720,294 ( 0.00%)          const unsigned other = lit_watch.binary.lit;
 3,720,294 ( 0.00%)          if (other == dst) {
     1,070 ( 0.00%)            transitive = true;
     1,070 ( 0.00%)            break;
         .                   }
13,629,308 ( 0.01%)          const value value = VALUE (other);
 2,478,056 ( 0.00%)          if (value < 0) {
       108 ( 0.00%)            LOG ("both %s and %s reachable from %s", LOGLIT (NOT (other)),
         .                          LOGLIT (other), LOGLIT (src));
        18 ( 0.00%)            failed = true;
        18 ( 0.00%)            break;
         .                   }
 2,478,020 ( 0.00%)          if (!value)
 6,791,628 ( 0.00%)            transitive_assign (solver, other);
59,992,714 ( 0.03%)  => build/../src/transitive.c:transitive_assign (1,131,938x)
         .                 }
         .               }
         .           
   242,148 ( 0.00%)      assert (solver->probing);
         .           
   242,148 ( 0.00%)      assert (solver->propagate <= propagate);
   363,222 ( 0.00%)      const unsigned propagated = propagate - solver->propagate;
         .           
   363,222 ( 0.00%)      ADD (transitive_propagations, propagated);
 1,210,740 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_transitive_propagations (60,537x)
   363,222 ( 0.00%)      ADD (probing_propagations, propagated);
 1,210,740 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_propagations (60,537x)
   363,222 ( 0.00%)      ADD (propagations, propagated);
 1,210,740 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_propagations (60,537x)
         .           
   363,222 ( 0.00%)      ADD (transitive_ticks, inner_ticks);
 1,210,740 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_transitive_ticks (60,537x)
   363,222 ( 0.00%)      ADD (probing_ticks, inner_ticks);
 1,210,740 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_probing_ticks (60,537x)
   363,222 ( 0.00%)      ADD (ticks, inner_ticks);
 1,210,740 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_ticks (60,537x)
         .           
   302,685 ( 0.00%)      transitive_backtrack (solver, saved);
52,565,967 ( 0.02%)  => build/../src/transitive.c:transitive_backtrack (60,537x)
         .           
   121,074 ( 0.00%)      if (transitive) {
     6,420 ( 0.00%)        LOGBINARY (src, dst, "transitive reduce");
     4,280 ( 0.00%)        INC (transitive_reduced);
    16,050 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_transitive_reduced (1,070x)
     6,420 ( 0.00%)        watches *dst_watches = all_watches + dst;
     2,140 ( 0.00%)        watch dst_watch = src_watch;
     4,280 ( 0.00%)        assert (dst_watch.binary.lit == dst);
     8,560 ( 0.00%)        dst_watch.binary.lit = src;
     6,420 ( 0.00%)        REMOVE_WATCHES (*dst_watches, dst_watch);
   246,010 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_remove_from_vector (1,070x)
     6,420 ( 0.00%)        kissat_delete_binary (solver, src, dst);
 2,086,838 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (1,070x)
     4,280 ( 0.00%)        p->binary.lit = ILLEGAL_LIT;
     1,070 ( 0.00%)        reduced++;
     1,070 ( 0.00%)        res = true;
         .               }
         .           
   121,074 ( 0.00%)      if (failed)
        36 ( 0.00%)        break;
   242,076 ( 0.00%)      if (solver->statistics.transitive_ticks > limit)
         4 ( 0.00%)        break;
   726,204 ( 0.00%)      if (TERMINATED (transitive_terminated_1))
 1,331,374 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (60,517x)
         .                 break;
         .             }
         .           
   429,646 ( 0.00%)    if (reduced) {
     3,066 ( 0.00%)      *reduced_ptr += reduced;
     8,176 ( 0.00%)      assert (begin_src == BEGIN_WATCHES (WATCHES (src)));
     4,088 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (511x)
     8,176 ( 0.00%)      assert (end_src == END_WATCHES (WATCHES (src)));
     4,088 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (511x)
     1,022 ( 0.00%)      watch *q = begin_src;
    60,210 ( 0.00%)      for (const watch *p = begin_src; p != end_src; p++) {
   114,288 ( 0.00%)        const watch src_watch = *q++ = *p;
    71,430 ( 0.00%)        if (!src_watch.type.binary) {
    83,824 ( 0.00%)          *q++ = *++p;
         .                   continue;
         .                 }
    15,232 ( 0.00%)        if (src_watch.binary.lit == ILLEGAL_LIT)
     1,070 ( 0.00%)          q--;
         .               }
     3,577 ( 0.00%)      assert (end_src - q == (ptrdiff_t) reduced);
     8,176 ( 0.00%)      SET_END_OF_WATCHES (*src_watches, q);
     4,088 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (511x)
    58,049 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_resize_vector (511x)
         .             }
         .           
   429,646 ( 0.00%)    if (failed) {
       108 ( 0.00%)      LOG ("transitive failed literal %s", LOGLIT (not_src));
        72 ( 0.00%)      INC (transitive_units);
       270 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_transitive_units (18x)
        90 ( 0.00%)      *units += 1;
        18 ( 0.00%)      res = true;
         .           
        90 ( 0.00%)      kissat_learned_unit (solver, src);
   103,414 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/assign.c:kissat_learned_unit (18x)
         .           
        72 ( 0.00%)      assert (!solver->level);
        90 ( 0.00%)      (void) kissat_probing_propagate (solver, 0, true);
    27,026 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (18x)
         .             }
         .           
   214,823 ( 0.00%)    return res;
 1,074,115 ( 0.00%)  }
         .           
         .           static inline bool less_stable_transitive (kissat *solver,
         .                                                      const flags *const flags,
         .                                                      const heap *scores, unsigned a,
11,186,744 ( 0.00%)                                             unsigned b) {
         .           #ifdef NDEBUG
         .             (void) solver;
         .           #endif
11,186,744 ( 0.00%)    const unsigned i = IDX (a);
11,186,744 ( 0.00%)    const unsigned j = IDX (b);
11,186,744 ( 0.00%)    const bool p = flags[i].transitive;
11,186,744 ( 0.00%)    const bool q = flags[j].transitive;
 8,390,058 ( 0.00%)    if (!p && q)
         .               return true;
 2,796,686 ( 0.00%)    if (p && !q)
         .               return false;
 9,788,401 ( 0.00%)    const double s = kissat_get_heap_score (scores, i);
26,568,517 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (1,398,343x)
 9,788,401 ( 0.00%)    const double t = kissat_get_heap_score (scores, j);
26,568,517 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (1,398,343x)
 4,195,029 ( 0.00%)    if (s < t)
 1,256,562 ( 0.00%)      return true;
 2,310,186 ( 0.00%)    if (s > t)
   895,662 ( 0.00%)      return false;
   966,693 ( 0.00%)    return i < j;
 2,796,686 ( 0.00%)  }
         .           
         .           static inline unsigned less_focused_transitive (kissat *solver,
         .                                                           const flags *const flags,
         .                                                           const links *links,
 7,206,192 ( 0.00%)                                                  unsigned a, unsigned b) {
         .           #ifdef NDEBUG
         .             (void) solver;
         .           #endif
 7,206,192 ( 0.00%)    const unsigned i = IDX (a);
 7,206,192 ( 0.00%)    const unsigned j = IDX (b);
 7,206,192 ( 0.00%)    const bool p = flags[i].transitive;
 7,206,192 ( 0.00%)    const bool q = flags[j].transitive;
 5,404,644 ( 0.00%)    if (!p && q)
         .               return true;
 1,801,548 ( 0.00%)    if (p && !q)
         .               return false;
 9,007,740 ( 0.00%)    const unsigned s = links[i].stamp;
 9,007,740 ( 0.00%)    const unsigned t = links[j].stamp;
 3,603,096 ( 0.00%)    return s < t;
 1,801,548 ( 0.00%)  }
         .           
         .           #define LESS_STABLE_PROBE(A, B) \
         .             less_stable_transitive (solver, flags, scores, (A), (B))
         .           
         .           #define LESS_FOCUSED_PROBE(A, B) \
         .             less_focused_transitive (solver, flags, links, (A), (B))
         .           
        24 ( 0.00%)  static void sort_stable_transitive (kissat *solver, unsigneds *probes) {
        12 ( 0.00%)    const flags *const flags = solver->flags;
        12 ( 0.00%)    const heap *const scores = SCORES;
34,026,894 ( 0.01%)    SORT_STACK (unsigned, *probes, LESS_STABLE_PROBE);
152,255,118 ( 0.06%)  => build/../src/transitive.c:less_stable_transitive (1,398,343x)
        12 ( 0.00%)  }
         .           
        12 ( 0.00%)  static void sort_focused_transitive (kissat *solver, unsigneds *probes) {
         6 ( 0.00%)    const flags *const flags = solver->flags;
         6 ( 0.00%)    const links *const links = solver->links;
21,690,494 ( 0.01%)    SORT_STACK (unsigned, *probes, LESS_FOCUSED_PROBE);
66,657,276 ( 0.03%)  => build/../src/transitive.c:less_focused_transitive (900,774x)
       505 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
         6 ( 0.00%)  }
         .           
        36 ( 0.00%)  static void sort_transitive (kissat *solver, unsigneds *probes) {
        24 ( 0.00%)    if (solver->stable)
        20 ( 0.00%)      sort_stable_transitive (solver, probes);
186,282,072 ( 0.08%)  => build/../src/transitive.c:sort_stable_transitive (4x)
         .             else
        10 ( 0.00%)      sort_focused_transitive (solver, probes);
88,348,305 ( 0.04%)  => build/../src/transitive.c:sort_focused_transitive (2x)
        22 ( 0.00%)  }
         .           
        36 ( 0.00%)  static void schedule_transitive (kissat *solver, unsigneds *probes) {
        36 ( 0.00%)    assert (EMPTY_STACK (*probes));
   555,676 ( 0.00%)    for (all_variables (idx))
 1,805,791 ( 0.00%)      if (ACTIVE (idx))
 1,723,777 ( 0.00%)        PUSH_STACK (*probes, idx);
   668,594 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (88x)
        30 ( 0.00%)    sort_transitive (solver, probes);
274,630,489 ( 0.12%)  => build/../src/transitive.c:sort_transitive (6x)
        42 ( 0.00%)    kissat_very_verbose (solver, "scheduled %zu transitive probes",
       258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (6x)
        42 ( 0.00%)                         SIZE_STACK (*probes));
        18 ( 0.00%)  }
         .           
        66 ( 0.00%)  void kissat_transitive_reduction (kissat *solver) {
        24 ( 0.00%)    if (solver->inconsistent)
         .               return;
        24 ( 0.00%)    assert (solver->watching);
        24 ( 0.00%)    assert (solver->probing);
        24 ( 0.00%)    assert (!solver->level);
        24 ( 0.00%)    if (!GET_OPTION (transitive))
         .               return;
        66 ( 0.00%)    if (TERMINATED (transitive_terminated_2))
       132 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (6x)
         .               return;
        84 ( 0.00%)    START (transitive);
       576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (6x)
        24 ( 0.00%)    INC (transitive_reductions);
        90 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_transitive_reductions (6x)
         .           #if !defined(NDEBUG) || defined(METRICS)
        30 ( 0.00%)    assert (!solver->transitive_reducing);
        12 ( 0.00%)    solver->transitive_reducing = true;
         .           #endif
        18 ( 0.00%)    prioritize_binaries (solver);
107,076,800 ( 0.05%)  => build/../src/transitive.c:prioritize_binaries (6x)
         6 ( 0.00%)    bool success = false;
         6 ( 0.00%)    uint64_t reduced = 0;
         6 ( 0.00%)    unsigned units = 0;
         .           
       834 ( 0.00%)    SET_EFFORT_LIMIT (limit, transitive, transitive_ticks);
    40,906 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/format.c:kissat_format_count (48x)
       564 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (12x)
       258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (6x)
         .           
         .           #ifndef QUIET
        18 ( 0.00%)    const unsigned active = solver->active;
        18 ( 0.00%)    const uint64_t old_ticks = solver->statistics.transitive_ticks;
        42 ( 0.00%)    kissat_extremely_verbose (
       258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (6x)
         .                 solver, "starting with %" PRIu64 " transitive ticks", old_ticks);
         6 ( 0.00%)    unsigned probed = 0;
         .           #endif
         .             unsigneds probes;
        30 ( 0.00%)    INIT_STACK (probes);
        30 ( 0.00%)    schedule_transitive (solver, &probes);
279,384,789 ( 0.12%)  => build/../src/transitive.c:schedule_transitive (6x)
         6 ( 0.00%)    bool terminate = false;
   859,358 ( 0.00%)    while (!terminate && !EMPTY_STACK (probes)) {
 1,074,140 ( 0.00%)      const unsigned idx = POP_STACK (probes);
   859,312 ( 0.00%)      solver->flags[idx].transitive = false;
 1,503,796 ( 0.00%)      if (!ACTIVE (idx))
         .                 continue;
 2,363,104 ( 0.00%)      for (unsigned sign = 0; !terminate && sign < 2; sign++) {
 1,074,140 ( 0.00%)        const unsigned lit = 2 * idx + sign;
 1,503,796 ( 0.00%)        if (solver->values[lit])
         5 ( 0.00%)          continue;
         .           #ifndef QUIET
   214,823 ( 0.00%)        probed++;
         .           #endif
 2,148,230 ( 0.00%)        if (transitive_reduce (solver, lit, limit, &reduced, &units))
417,731,506 ( 0.18%)  => build/../src/transitive.c:transitive_reduce (214,823x)
       528 ( 0.00%)          success = true;
   859,292 ( 0.00%)        if (solver->inconsistent)
         .                   terminate = true;
   859,292 ( 0.00%)        else if (solver->statistics.transitive_ticks > limit)
         4 ( 0.00%)          terminate = true;
 2,363,031 ( 0.00%)        else if (TERMINATED (transitive_terminated_3))
 4,726,062 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (214,821x)
         .                   terminate = true;
         .               }
         .             }
        30 ( 0.00%)    const size_t remain = SIZE_STACK (probes);
        12 ( 0.00%)    if (remain) {
         8 ( 0.00%)      if (!GET_OPTION (transitivekeep)) {
         .                 kissat_very_verbose (
         .                     solver, "dropping remaining %zu transitive candidates", remain);
         .                 while (!EMPTY_STACK (probes)) {
         .                   const unsigned idx = POP_STACK (probes);
         .                   solver->flags[idx].transitive = false;
         .                 }
         .               }
         .             } else
        24 ( 0.00%)      kissat_very_verbose (solver, "transitive reduction complete");
       172 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_very_verbose (4x)
        90 ( 0.00%)    RELEASE_STACK (probes);
    57,152 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (6x)
         .           
         .           #ifndef QUIET
        18 ( 0.00%)    const uint64_t new_ticks = solver->statistics.transitive_ticks;
        18 ( 0.00%)    const uint64_t delta_ticks = new_ticks - old_ticks;
        42 ( 0.00%)    kissat_extremely_verbose (
       258 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_extremely_verbose (6x)
         .                 solver, "finished at %" PRIu64 " after %" PRIu64 " transitive ticks",
         .                 new_ticks, delta_ticks);
         .           #endif
       234 ( 0.00%)    kissat_phase (solver, "transitive", GET (probings),
       306 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_phase (6x)
       204 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (6x)
        42 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_get_probings (6x)
         .                           "probed %u (%.0f%%): reduced %" PRIu64 ", units %u", probed,
        12 ( 0.00%)                  kissat_percent (probed, 2 * active), reduced, units);
         .           
         .           #if !defined(NDEBUG) || defined(METRICS)
        24 ( 0.00%)    assert (solver->transitive_reducing);
        12 ( 0.00%)    solver->transitive_reducing = false;
         .           #endif
        72 ( 0.00%)    REPORT (!success, 't');
   178,899 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/report.c:kissat_report (6x)
        90 ( 0.00%)    STOP (transitive);
       684 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (6x)
         .           #ifdef QUIET
         .             (void) success;
         .           #endif
        54 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/dense.c
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #include "proprobe.h"
         .           #include "propsearch.h"
         .           #include "trail.h"
         .           
         .           #include "sort.c"
         .           
         .           #include <string.h>
         .           
        90 ( 0.00%)  static void flush_large_watches (kissat *solver, litpairs *irredundant) {
        40 ( 0.00%)    assert (!solver->level);
        40 ( 0.00%)    assert (solver->watching);
         .           #ifndef LOGGING
         .             LOG ("flushing large watches");
         .             if (irredundant)
         .               LOG ("flushing and saving irredundant binary clauses too");
         .             else
         .               LOG ("keep watching irredundant binary clauses");
         .           #endif
        30 ( 0.00%)    const value *const values = solver->values;
        30 ( 0.00%)    mark *const marks = solver->marks;
         .           #ifndef NDEBUG
 2,278,530 ( 0.00%)    for (all_literals (lit))
 3,417,660 ( 0.00%)      assert (!marks[lit]);
         .           #endif
        20 ( 0.00%)    size_t flushed = 0, collected = 0;
         .           #ifdef LOGGING
        10 ( 0.00%)    size_t deduplicated = 0;
         .           #endif
        30 ( 0.00%)    watches *all_watches = solver->watches;
        30 ( 0.00%)    unsigneds *marked = &solver->analyzed;
 2,278,530 ( 0.00%)    for (all_literals (lit)) {
 2,848,050 ( 0.00%)      const value lit_value = values[lit];
 3,417,660 ( 0.00%)      watches *watches = all_watches + lit;
 4,556,880 ( 0.00%)      watch *begin = BEGIN_WATCHES (*watches), *q = begin;
 4,556,880 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (569,610x)
 4,556,880 ( 0.00%)      const watch *const end_watches = END_WATCHES (*watches), *p = q;
 4,556,880 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (569,610x)
 3,417,660 ( 0.00%)      assert (EMPTY_STACK (*marked));
10,513,647 ( 0.00%)      while (p != end_watches) {
14,674,695 ( 0.01%)        const watch watch = *p++;
11,739,756 ( 0.00%)        if (watch.type.binary) {
 1,662,582 ( 0.00%)          const unsigned other = watch.binary.lit;
 2,770,970 ( 0.00%)          const value other_value = values[other];
 3,032,373 ( 0.00%)          if (!lit_value && !other_value) {
 2,743,250 ( 0.00%)            const mark mark = marks[other];
 1,097,300 ( 0.00%)            if (mark) {
    19,518 ( 0.00%)              if (lit < other) {
    19,518 ( 0.00%)                kissat_delete_binary (solver, lit, other);
 5,558,830 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (3,253x)
         .           #ifdef LOGGING
     3,253 ( 0.00%)                deduplicated++;
         .           #endif
         .                       }
         .                     } else {
 2,168,576 ( 0.00%)              marks[other] = 1;
 7,048,004 ( 0.00%)              PUSH_STACK (*marked, other);
     6,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (11x)
 1,084,288 ( 0.00%)              if (irredundant) {
 1,626,432 ( 0.00%)                const unsigned other = watch.binary.lit;
 1,626,432 ( 0.00%)                if (lit < other) {
 1,084,288 ( 0.00%)                  const litpair litpair = {.lits = {lit, other}};
 3,525,808 ( 0.00%)                  PUSH_STACK (*irredundant, litpair);
11,069,890 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (156x)
         .                         }
         .                       } else
         .                         *q++ = watch;
         .                     }
         .                   } else {
    16,340 ( 0.00%)            assert (lit_value > 0 || other_value > 0);
    16,632 ( 0.00%)            if (lit < other) {
    16,632 ( 0.00%)              kissat_delete_binary (solver, lit, other);
 1,947,892 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_delete_binary (2,772x)
     5,544 ( 0.00%)              collected++;
         .                     }
         .                   }
         .                 } else {
 2,380,745 ( 0.00%)          flushed++;
 4,761,490 ( 0.00%)          p++;
         .                 }
         .               }
 1,139,220 ( 0.00%)      if (irredundant)
 3,417,660 ( 0.00%)        memset (watches, 0, sizeof *watches);
 7,974,540 ( 0.00%)  => ???:0x000000000010c5b0 (569,610x)
         .               else
         .                 SET_END_OF_WATCHES (*watches, q);
10,033,252 ( 0.00%)      for (all_stack (unsigned, other, *marked))
 2,168,576 ( 0.00%)        marks[other] = 0;
 2,278,440 ( 0.00%)      CLEAR_ARRAY (*marked);
         .             }
        60 ( 0.00%)    assert (EMPTY_STACK (*marked));
        60 ( 0.00%)    LOG ("flushed %zu large watches", flushed);
        60 ( 0.00%)    LOG ("removed %zu duplicated binary clauses", deduplicated);
        60 ( 0.00%)    LOG ("collected %zu satisfied binary clauses", collected);
        20 ( 0.00%)    if (irredundant) {
        60 ( 0.00%)      LOG ("saved %zu irredundant binary clauses", SIZE_STACK (*irredundant));
        30 ( 0.00%)      kissat_release_vectors (solver);
   111,715 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/vector.c:kissat_release_vectors (10x)
         .             }
         .             (void) collected;
         .             (void) flushed;
        60 ( 0.00%)  }
         .           
       156 ( 0.00%)  void kissat_enter_dense_mode (kissat *solver, litpairs *irredundant) {
       104 ( 0.00%)    assert (!solver->level);
       104 ( 0.00%)    assert (solver->watching);
       130 ( 0.00%)    assert (kissat_propagated (solver));
       624 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_propagated (26x)
       156 ( 0.00%)    LOG ("entering dense mode with full occurrence lists");
        52 ( 0.00%)    if (irredundant)
        60 ( 0.00%)      flush_large_watches (solver, irredundant);
155,230,508 ( 0.07%)  => build/../src/dense.c:flush_large_watches (10x)
         .             else
        48 ( 0.00%)      kissat_flush_large_watches (solver);
263,352,155 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_large_watches (16x)
       156 ( 0.00%)    LOG ("switched to full occurrence lists");
        52 ( 0.00%)    solver->watching = false;
        78 ( 0.00%)  }
         .           
         .           static void resume_watching_irredundant_binaries (kissat *solver,
        90 ( 0.00%)                                                    litpairs *binaries) {
        20 ( 0.00%)    assert (binaries);
         .           #ifdef LOGGING
        10 ( 0.00%)    size_t resumed_watching = 0;
         .           #endif
        30 ( 0.00%)    watches *all_watches = solver->watches;
 1,903,764 ( 0.00%)    for (all_stack (litpair, litpair, *binaries)) {
   543,904 ( 0.00%)      const unsigned first = litpair.lits[0];
   543,904 ( 0.00%)      const unsigned second = litpair.lits[1];
         .           
 8,158,560 ( 0.00%)      assert (!ELIMINATED (IDX (first)));
 8,158,560 ( 0.00%)      assert (!ELIMINATED (IDX (second)));
         .           
 1,631,712 ( 0.00%)      watches *first_watches = all_watches + first;
 1,087,808 ( 0.00%)      watch first_watch = kissat_binary_watch (second);
 5,982,944 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (271,952x)
 1,631,712 ( 0.00%)      PUSH_WATCHES (*first_watches, first_watch);
36,119,676 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (271,952x)
         .           
 1,631,712 ( 0.00%)      watches *second_watches = all_watches + second;
 1,087,808 ( 0.00%)      watch second_watch = kissat_binary_watch (first);
 5,982,944 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.h:kissat_binary_watch (271,952x)
 1,631,712 ( 0.00%)      PUSH_WATCHES (*second_watches, second_watch);
43,271,401 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_push_vectors (271,952x)
         .           
         .           #ifdef LOGGING
   271,952 ( 0.00%)      resumed_watching++;
         .           #endif
         .             }
        60 ( 0.00%)    LOG ("resumed watching %zu binary clauses", resumed_watching);
        60 ( 0.00%)  }
         .           
         .           static void
        10 ( 0.00%)  resume_watching_large_clauses_after_elimination (kissat *solver) {
         .           #ifdef LOGGING
         2 ( 0.00%)    size_t resumed_watching_redundant = 0;
         2 ( 0.00%)    size_t resumed_watching_irredundant = 0;
         .           #endif
         6 ( 0.00%)    const flags *const flags = solver->flags;
         6 ( 0.00%)    watches *watches = solver->watches;
         6 ( 0.00%)    const value *const values = solver->values;
         6 ( 0.00%)    const assigned *const assigned = solver->assigned;
         6 ( 0.00%)    ward *const arena = BEGIN_STACK (solver->arena);
         .           
 2,678,681 ( 0.00%)    for (all_clauses (c)) {
18,054,023 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_next_clause (297,629x)
 1,488,145 ( 0.00%)      if (c->garbage)
    63,301 ( 0.00%)        continue;
   234,328 ( 0.00%)      bool collect = false;
 9,780,427 ( 0.00%)      for (all_literals_in_clause (lit, c)) {
 5,378,916 ( 0.00%)        if (values[lit] > 0) {
       468 ( 0.00%)          LOGCLS (c, "%s satisfied", LOGLIT (lit));
        78 ( 0.00%)          collect = true;
        78 ( 0.00%)          break;
         .                 }
 7,171,160 ( 0.00%)        const unsigned idx = IDX (lit);
 7,171,160 ( 0.00%)        if (flags[idx].eliminated) {
    14,238 ( 0.00%)          LOGCLS (c, "containing eliminated %s", LOGLIT (lit));
     2,373 ( 0.00%)          collect = true;
     2,373 ( 0.00%)          break;
         .                 }
         .               }
   468,656 ( 0.00%)      if (collect) {
    12,255 ( 0.00%)        kissat_mark_clause_as_garbage (solver, c);
23,687,361 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.c:kissat_mark_clause_as_garbage (2,451x)
     2,451 ( 0.00%)        continue;
         .               }
         .           
   927,508 ( 0.00%)      assert (c->size > 2);
         .           
   695,631 ( 0.00%)      unsigned *lits = c->lits;
 2,086,893 ( 0.00%)      kissat_sort_literals (solver, values, assigned, c->size, lits);
25,274,948 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/sort.c:kissat_sort_literals (231,877x)
   463,754 ( 0.00%)      c->searched = 2;
         .           
   927,508 ( 0.00%)      const reference ref = (ward *) c - arena;
   695,631 ( 0.00%)      const unsigned l0 = lits[0];
   695,631 ( 0.00%)      const unsigned l1 = lits[1];
         .           
 2,318,770 ( 0.00%)      kissat_push_blocking_watch (solver, watches + l0, l1, ref);
54,662,103 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (231,877x)
 2,318,770 ( 0.00%)      kissat_push_blocking_watch (solver, watches + l1, l0, ref);
54,571,657 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_push_blocking_watch (231,877x)
         .           
         .           #ifdef LOGGING
 1,159,385 ( 0.00%)      if (c->redundant)
     7,062 ( 0.00%)        resumed_watching_redundant++;
         .               else
   228,346 ( 0.00%)        resumed_watching_irredundant++;
         .           #endif
         .             }
        12 ( 0.00%)    LOG ("resumed watching %zu irredundant and %zu redundant large clauses",
         .                  resumed_watching_irredundant, resumed_watching_redundant);
         6 ( 0.00%)  }
         .           
         .           void kissat_resume_sparse_mode (kissat *solver, bool flush_eliminated,
       208 ( 0.00%)                                  litpairs *irredundant) {
       104 ( 0.00%)    assert (!solver->level);
       130 ( 0.00%)    assert (!solver->watching);
       104 ( 0.00%)    if (solver->inconsistent)
         .               return;
       156 ( 0.00%)    LOG ("resuming sparse mode watching clauses");
        78 ( 0.00%)    kissat_flush_large_connected (solver);
314,802,297 ( 0.13%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_flush_large_connected (26x)
       156 ( 0.00%)    LOG ("switched to watching clauses");
        52 ( 0.00%)    solver->watching = true;
        52 ( 0.00%)    if (irredundant) {
        60 ( 0.00%)      LOG ("resuming watching %zu irredundant binaries",
         .                    SIZE_STACK (*irredundant));
        50 ( 0.00%)      resume_watching_irredundant_binaries (solver, irredundant);
119,640,343 ( 0.05%)  => build/../src/dense.c:resume_watching_irredundant_binaries (10x)
         .             }
        52 ( 0.00%)    if (flush_eliminated)
         8 ( 0.00%)      resume_watching_large_clauses_after_elimination (solver);
223,244,131 ( 0.09%)  => build/../src/dense.c:resume_watching_large_clauses_after_elimination (2x)
         .             else
        72 ( 0.00%)      kissat_watch_large_clauses (solver);
2,015,774,225 ( 0.85%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/watch.c:kissat_watch_large_clauses (24x)
       156 ( 0.00%)    LOG ("forcing to propagate units on all clauses");
        78 ( 0.00%)    kissat_reset_propagate (solver);
       260 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reset_propagate (26x)
         .           
         .             clause *conflict;
       104 ( 0.00%)    if (solver->probing)
       154 ( 0.00%)      conflict = kissat_probing_propagate (solver, 0, true);
   123,665 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/proprobe.c:kissat_probing_propagate (22x)
         .             else
        16 ( 0.00%)      conflict = kissat_search_propagate (solver);
     3,736 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/propsearch.c:kissat_search_propagate (4x)
         .           
         .           #ifndef NDEBUG
        52 ( 0.00%)    if (conflict)
         .               assert (solver->inconsistent);
         .             else
       130 ( 0.00%)      assert (kissat_trail_flushed (solver));
       468 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_trail_flushed (26x)
         .           #else
         .             (void) conflict;
         .           #endif
        52 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/check.c
--------------------------------------------------------------------------------
Ir                     

-- line 111 ----------------------------------------
            .             LOGUNSIGNEDS3 (SIZE_STACK (checker->imported), \
            .                            BEGIN_STACK (checker->imported), __VA_ARGS__)
            .           
            .           #define LOGLINE3(...) \
            .             LOGUNSIGNEDS3 (bucket->size, bucket->lits, __VA_ARGS__)
            .           
            .           #define MAX_NONCES (sizeof checker->nonces / sizeof *checker->nonces)
            .           
  247,243,077 ( 0.10%)  static inline bool less_unsigned (unsigned a, unsigned b) { return a < b; }
            .           
   19,167,024 ( 0.01%)  static void sort_line (kissat *solver, checker *checker) {
  921,913,326 ( 0.39%)    SORT_STACK (unsigned, checker->imported, less_unsigned);
  247,243,077 ( 0.10%)  => build/../src/check.c:less_unsigned (27,471,453x)
        1,723 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (4x)
   12,778,016 ( 0.01%)    LOGIMPORTED3 ("sorted checker");
    9,583,512 ( 0.00%)  }
            .           
   12,778,016 ( 0.01%)  static unsigned hash_line (checker *checker) {
    6,389,008 ( 0.00%)    unsigned res = 0, pos = 0;
  109,798,746 ( 0.05%)    for (all_stack (unsigned, lit, checker->imported)) {
  100,097,622 ( 0.04%)      res += checker->nonces[pos++] * lit;
   22,268,141 ( 0.01%)      if (pos == MAX_NONCES)
       24,225 ( 0.00%)        pos = 0;
            .             }
    3,194,504 ( 0.00%)    return res;
    6,389,008 ( 0.00%)  }
            .           
   13,221,080 ( 0.01%)  static size_t bytes_line (unsigned size) {
    9,915,810 ( 0.00%)    return sizeof (bucket) + size * sizeof (unsigned);
    6,610,540 ( 0.00%)  }
            .           
            9 ( 0.00%)  static void init_nonces (kissat *solver, checker *checker) {
            1 ( 0.00%)    generator random = 42;
          100 ( 0.00%)    for (unsigned i = 0; i < MAX_NONCES; i++)
          288 ( 0.00%)      checker->nonces[i] = 1 | kissat_next_random32 (&random);
          928 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_next_random32 (32x)
            6 ( 0.00%)    LOG3 ("initialized %zu checker nonces", MAX_NONCES);
            .           #ifndef LOGGING
            .             (void) solver;
            .           #endif
            6 ( 0.00%)  }
            .           
            5 ( 0.00%)  void kissat_init_checker (kissat *solver) {
            6 ( 0.00%)    LOG ("initializing internal proof checker");
            6 ( 0.00%)    checker *checker = kissat_calloc (solver, 1, sizeof (struct checker));
          350 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (1x)
            3 ( 0.00%)    solver->checker = checker;
            5 ( 0.00%)    init_nonces (solver, checker);
        1,338 ( 0.00%)  => build/../src/check.c:init_nonces (1x)
            3 ( 0.00%)  }
            .           
            6 ( 0.00%)  static void release_hash (kissat *solver, checker *checker) {
    1,310,726 ( 0.00%)    for (unsigned h = 0; h < checker->hashed; h++) {
    3,080,304 ( 0.00%)      for (bucket *bucket = checker->table[h], *next; bucket; bucket = next) {
      344,148 ( 0.00%)        next = bucket->next;
    1,147,160 ( 0.00%)        kissat_free (solver, bucket, bytes_line (bucket->size));
   24,490,177 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (114,716x)
    1,032,444 ( 0.00%)  => build/../src/check.c:bytes_line (114,716x)
            .               }
            .             }
            9 ( 0.00%)    kissat_dealloc (solver, checker->table, checker->hashed,
          158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
            .                             sizeof (bucket *));
            3 ( 0.00%)  }
            .           
            6 ( 0.00%)  static void release_watches (kissat *solver, checker *checker) {
            4 ( 0.00%)    const unsigned lits = 2 * checker->vars;
      360,357 ( 0.00%)    for (unsigned i = 0; i < lits; i++)
    5,855,720 ( 0.00%)      RELEASE_STACK (checker->watches[i]);
   26,890,195 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (90,088x)
           10 ( 0.00%)    kissat_dealloc (solver, checker->watches, 2 * checker->size,
          158 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
            .                             sizeof (buckets));
            3 ( 0.00%)  }
            .           
            5 ( 0.00%)  void kissat_release_checker (kissat *solver) {
            6 ( 0.00%)    LOG ("releasing internal proof checker");
            3 ( 0.00%)    checker *checker = solver->checker;
            5 ( 0.00%)    release_hash (solver, checker);
   31,405,135 ( 0.01%)  => build/../src/check.c:release_hash (1x)
           24 ( 0.00%)    RELEASE_STACK (checker->imported);
          251 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
           24 ( 0.00%)    RELEASE_STACK (checker->trail);
    4,715,570 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (1x)
           10 ( 0.00%)    kissat_free (solver, checker->marks, 2 * checker->size * sizeof (bool));
          240 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
           10 ( 0.00%)    kissat_free (solver, checker->used, 2 * checker->size * sizeof (bool));
          265 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
           10 ( 0.00%)    kissat_free (solver, checker->large, 2 * checker->size * sizeof (bool));
          262 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
           10 ( 0.00%)    kissat_free (solver, checker->values, 2 * checker->size);
          231 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
            5 ( 0.00%)    release_watches (solver, checker);
   33,106,453 ( 0.01%)  => build/../src/check.c:release_watches (1x)
            6 ( 0.00%)    kissat_free (solver, checker, sizeof (struct checker));
          232 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1x)
            3 ( 0.00%)  }
            .           
            .           #ifndef QUIET
            .           
            .           #include <inttypes.h>
            .           
            .           #define PERCENT_ADDED(NAME) kissat_percent (checker->NAME, checker->added)
            .           #define PERCENT_CHECKED(NAME) \
            .             kissat_percent (checker->NAME, checker->checked)
            .           
            7 ( 0.00%)  void kissat_print_checker_statistics (kissat *solver, bool verbose) {
            3 ( 0.00%)    checker *checker = solver->checker;
           45 ( 0.00%)    PRINT_STAT ("checker_added", checker->added, 100, "%", "");
        4,383 ( 0.00%)  => ???:0x000000000010c4c0 (2x)
          263 ( 0.00%)  => ???:0x000000000010c7a0 (2x)
           99 ( 0.00%)  => ???:0x000000000010c740 (1x)
            2 ( 0.00%)    if (verbose)
            .               PRINT_STAT ("checker_blocked", checker->blocked,
            .                           PERCENT_CHECKED (blocked), "%", "checked");
           63 ( 0.00%)    PRINT_STAT ("checker_checked", checker->checked, PERCENT_ADDED (checked),
        4,226 ( 0.00%)  => ???:0x000000000010c4c0 (2x)
          263 ( 0.00%)  => ???:0x000000000010c7a0 (2x)
          171 ( 0.00%)  => ???:0x000000000010c740 (1x)
           34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (1x)
            .                         "%", "added");
            2 ( 0.00%)    if (verbose) {
            .               PRINT_STAT ("checker_collisions", checker->collisions,
            .                           kissat_percent (checker->collisions, checker->searches),
            .                           "%", "per search");
            .               PRINT_STAT ("checker_decisions", checker->decisions,
            .                           kissat_average (checker->decisions, checker->checked), "",
            .                           "per check");
            .               PRINT_STAT ("checker_propagations", checker->propagations,
            .                           kissat_average (checker->propagations, checker->checked),
            .                           "", "per check");
            .               PRINT_STAT ("checker_pure", checker->pure, PERCENT_CHECKED (pure), "%",
            .                           "checked");
            .             }
           63 ( 0.00%)    PRINT_STAT ("checker_removed", checker->removed, PERCENT_ADDED (removed),
        4,229 ( 0.00%)  => ???:0x000000000010c4c0 (2x)
          263 ( 0.00%)  => ???:0x000000000010c7a0 (2x)
          171 ( 0.00%)  => ???:0x000000000010c740 (1x)
           34 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/utilities.h:kissat_percent (1x)
            .                         "%", "added");
            2 ( 0.00%)    if (verbose) {
            .               PRINT_STAT ("checker_satisfied", checker->satisfied,
            .                           PERCENT_CHECKED (satisfied), "%", "checked");
            .               PRINT_STAT ("checker_unchecked", checker->unchecked,
            .                           PERCENT_ADDED (unchecked), "%", "added");
            .             }
            3 ( 0.00%)  }
            .           
            .           #endif
            .           
            .           #define MAX_VARS (1u << 29)
            .           #define MAX_SIZE (1u << 30)
            .           
   20,716,182 ( 0.01%)  static unsigned reduce_hash (unsigned hash, unsigned mod) {
    6,905,394 ( 0.00%)    if (mod < 2)
            2 ( 0.00%)      return 0;
    6,905,392 ( 0.00%)    assert (mod);
    6,905,392 ( 0.00%)    unsigned res = hash;
   31,205,202 ( 0.01%)    for (unsigned shift = 16, mask = 0xffff; res >= mod;
   13,985,368 ( 0.01%)         mask >>= (shift >>= 1))
   24,474,394 ( 0.01%)      res = (res >> shift) & mask;
   10,358,088 ( 0.00%)    assert (res < mod);
    3,452,696 ( 0.00%)    return res;
    6,905,394 ( 0.00%)  }
            .           
          114 ( 0.00%)  static void resize_hash (kissat *solver, checker *checker) {
           57 ( 0.00%)    const unsigned old_hashed = checker->hashed;
           38 ( 0.00%)    assert (old_hashed < MAX_SIZE);
          112 ( 0.00%)    const unsigned new_hashed = old_hashed ? 2 * old_hashed : 1;
          133 ( 0.00%)    bucket **table = kissat_calloc (solver, new_hashed, sizeof (bucket *));
       57,477 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (19x)
           57 ( 0.00%)    bucket **old_table = checker->table;
    1,048,667 ( 0.00%)    for (unsigned i = 0; i < old_hashed; i++) {
    3,407,859 ( 0.00%)      for (bucket *bucket = old_table[i], *next; bucket; bucket = next) {
      786,429 ( 0.00%)        next = bucket->next;
    1,835,001 ( 0.00%)        const unsigned reduced = reduce_hash (bucket->hash, new_hashed);
   10,269,490 ( 0.00%)  => build/../src/check.c:reduce_hash (262,143x)
    1,835,001 ( 0.00%)        bucket->next = table[reduced];
    1,572,858 ( 0.00%)        table[reduced] = bucket;
            .               }
            .             }
          133 ( 0.00%)    kissat_dealloc (solver, checker->table, old_hashed, sizeof (bucket *));
        3,801 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (19x)
           57 ( 0.00%)    checker->hashed = new_hashed;
           57 ( 0.00%)    checker->table = table;
           57 ( 0.00%)  }
            .           
            .           static bucket *new_line (kissat *solver, checker *checker, unsigned size,
   13,221,080 ( 0.01%)                           unsigned hash) {
   14,873,715 ( 0.01%)    bucket *res = kissat_malloc (solver, bytes_line (size));
  260,887,984 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_malloc (1,652,635x)
   14,873,715 ( 0.01%)  => build/../src/check.c:bytes_line (1,652,635x)
    3,305,270 ( 0.00%)    res->next = 0;
    4,957,905 ( 0.00%)    res->size = size;
    4,957,905 ( 0.00%)    res->hash = hash;
   14,873,715 ( 0.01%)    memcpy (res->lits, BEGIN_STACK (checker->imported),
   24,798,432 ( 0.01%)  => ???:0x000000000010c650 (1,652,635x)
            .                     size * sizeof *res->lits);
    1,652,635 ( 0.00%)    return res;
    3,305,270 ( 0.00%)  }
            .           
            .           #define CHECKER_LITS (2 * (checker)->vars)
            .           #define VALID_CHECKER_LIT(LIT) ((LIT) < CHECKER_LITS)
            .           
            .           static bucket decision_line;
            .           static bucket unit_line;
            .           
            .           static void checker_assign (kissat *solver, checker *checker, unsigned lit,
  698,283,152 ( 0.30%)                              bucket *bucket) {
            .           #ifdef LOGGING
  261,856,182 ( 0.11%)    if (bucket == &decision_line)
   31,630,152 ( 0.01%)      LOG3 ("checker assign %u (decision)", lit);
  246,041,106 ( 0.10%)    else if (bucket == &unit_line)
        5,124 ( 0.00%)      LOG3 ("checker assign %u (unit)", lit);
            .             else
  328,051,392 ( 0.14%)      LOGLINE3 ("checker assign %u reason", lit);
            .           #else
            .             (void) bucket;
            .           #endif
  436,426,970 ( 0.18%)    assert (VALID_CHECKER_LIT (lit));
  261,856,182 ( 0.11%)    const unsigned not_lit = lit ^ 1;
  261,856,182 ( 0.11%)    signed char *values = checker->values;
  523,712,364 ( 0.22%)    assert (!values[lit]);
  523,712,364 ( 0.22%)    assert (!values[not_lit]);
  349,141,576 ( 0.15%)    values[lit] = 1;
  349,141,576 ( 0.15%)    values[not_lit] = -1;
1,134,710,330 ( 0.48%)    PUSH_STACK (checker->trail, lit);
      195,522 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (16x)
  261,856,182 ( 0.11%)  }
            .           
  592,501,956 ( 0.25%)  static buckets *checker_watches (checker *checker, unsigned lit) {
  493,751,630 ( 0.21%)    assert (VALID_CHECKER_LIT (lit));
  790,002,608 ( 0.33%)    return checker->watches + lit;
  197,500,652 ( 0.08%)  }
            .           
            .           static void watch_checker_literal (kissat *solver, checker *checker,
  215,965,072 ( 0.09%)                                     bucket *bucket, unsigned lit) {
  107,982,536 ( 0.05%)    LOGLINE3 ("checker watches %u in", lit);
  161,973,804 ( 0.07%)    buckets *buckets = checker_watches (checker, lit);
  566,908,314 ( 0.24%)  => build/../src/check.c:checker_watches (26,995,634x)
  355,143,170 ( 0.15%)    PUSH_STACK (*buckets, bucket);
  167,643,635 ( 0.07%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (349,994x)
   80,986,902 ( 0.03%)  }
            .           
            .           static void unwatch_checker_literal (kissat *solver, checker *checker,
   24,606,704 ( 0.01%)                                       bucket *bucket, unsigned lit) {
   12,303,352 ( 0.01%)    LOGLINE3 ("checker unwatches %u in", lit);
   18,455,028 ( 0.01%)    buckets *buckets = checker_watches (checker, lit);
   64,592,598 ( 0.03%)  => build/../src/check.c:checker_watches (3,075,838x)
  513,378,749 ( 0.22%)    REMOVE_STACK (struct bucket *, *buckets, bucket);
            .           #ifndef LOGGING
            .             (void) solver;
            .           #endif
    9,227,514 ( 0.00%)  }
            .           
            .           static void unwatch_line (kissat *solver, checker *checker,
   10,765,433 ( 0.00%)                            bucket *bucket) {
    6,151,676 ( 0.00%)    assert (bucket->size > 1);
    4,613,757 ( 0.00%)    const unsigned *const lits = bucket->lits;
   10,765,433 ( 0.00%)    unwatch_checker_literal (solver, checker, bucket, lits[0]);
  353,008,181 ( 0.15%)  => build/../src/check.c:unwatch_checker_literal (1,537,919x)
   12,303,352 ( 0.01%)    unwatch_checker_literal (solver, checker, bucket, lits[1]);
  289,555,764 ( 0.12%)  => build/../src/check.c:unwatch_checker_literal (1,537,919x)
    4,613,757 ( 0.00%)  }
            .           
            .           static bool satisfied_or_trivial_imported (kissat *solver,
    9,352,572 ( 0.00%)                                             checker *checker) {
    4,676,286 ( 0.00%)    const unsigned *const lits = BEGIN_STACK (checker->imported);
    4,676,286 ( 0.00%)    const unsigned *const end_of_lits = END_STACK (checker->imported);
    4,676,286 ( 0.00%)    const signed char *values = checker->values;
    4,676,286 ( 0.00%)    bool *marks = checker->marks;
            .             unsigned const *p;
    1,558,762 ( 0.00%)    bool res = false;
   58,517,907 ( 0.02%)    for (p = lits; !res && p != end_of_lits; p++) {
   16,122,306 ( 0.01%)      const unsigned lit = *p;
   32,244,612 ( 0.01%)      if (marks[lit])
            .                 continue;
   21,496,408 ( 0.01%)      marks[lit] = true;
   16,122,306 ( 0.01%)      const unsigned not_lit = lit ^ 1;
   32,244,612 ( 0.01%)      if (marks[not_lit]) {
            .                 LOGIMPORTED3 ("trivial by %u and %u imported checker", not_lit, lit);
            .                 res = true;
   32,244,612 ( 0.01%)      } else if (values[lit] > 0) {
       83,372 ( 0.00%)        LOGIMPORTED3 ("satisfied by %u imported checker", lit);
       41,686 ( 0.00%)        res = true;
            .               }
            .             }
   30,848,980 ( 0.01%)    for (const unsigned *q = lits; q != p; q++)
   32,244,612 ( 0.01%)      marks[*q] = 0;
            .           #ifndef LOGGING
            .             (void) solver;
            .           #endif
    1,558,762 ( 0.00%)    return res;
    3,117,524 ( 0.00%)  }
            .           
    6,151,676 ( 0.00%)  static void mark_line (checker *checker) {
    4,613,757 ( 0.00%)    bool *marks = checker->marks;
   57,997,326 ( 0.02%)    for (all_stack (unsigned, lit, checker->imported))
   21,309,068 ( 0.01%)      marks[lit] = 1;
    3,075,838 ( 0.00%)    checker->marked = true;
    4,613,757 ( 0.00%)  }
            .           
    6,151,676 ( 0.00%)  static void unmark_line (checker *checker) {
    4,613,757 ( 0.00%)    bool *marks = checker->marks;
   57,997,326 ( 0.02%)    for (all_stack (unsigned, lit, checker->imported))
   21,309,068 ( 0.01%)      marks[lit] = 0;
    3,075,838 ( 0.00%)    checker->marked = false;
    4,613,757 ( 0.00%)  }
            .           
    9,939,510 ( 0.00%)  static bool simplify_imported (kissat *solver, checker *checker) {
    6,626,340 ( 0.00%)    if (checker->inconsistent) {
          528 ( 0.00%)      LOG3 ("skipping addition since checker already inconsistent");
          176 ( 0.00%)      return true;
            .             }
    1,656,497 ( 0.00%)    unsigned non_false = 0;
            .           #ifdef LOGGING
    1,656,497 ( 0.00%)    unsigned num_false = 0;
            .           #endif
    4,969,491 ( 0.00%)    const unsigned *const end_of_lits = END_STACK (checker->imported);
    4,969,491 ( 0.00%)    unsigned *lits = BEGIN_STACK (checker->imported);
    4,969,491 ( 0.00%)    const signed char *values = checker->values;
    4,969,491 ( 0.00%)    bool *marks = checker->marks;
    1,656,497 ( 0.00%)    bool res = false;
            .             unsigned *p;
   62,903,698 ( 0.03%)    for (p = lits; !res && p != end_of_lits; p++) {
   17,380,407 ( 0.01%)      const unsigned lit = *p;
   34,760,814 ( 0.01%)      if (marks[lit])
            .                 continue;
   23,173,876 ( 0.01%)      marks[lit] = true;
   17,380,407 ( 0.01%)      const unsigned not_lit = lit ^ 1;
   34,760,814 ( 0.01%)      if (marks[not_lit]) {
            .                 LOG3 ("simplified checker clause trivial (contains %u and %u)",
            .                       not_lit, lit);
            .                 res = true;
            .               } else {
   28,967,345 ( 0.01%)        signed char lit_value = values[lit];
   11,586,938 ( 0.00%)        if (lit_value < 0) {
            .           #ifdef LOGGING
           62 ( 0.00%)          num_false++;
            .           #endif
   11,586,876 ( 0.00%)        } else if (lit_value > 0) {
       18,048 ( 0.00%)          LOG3 ("simplified checker clause satisfied by %u", lit);
        6,016 ( 0.00%)          res = true;
            .                 } else {
   11,580,860 ( 0.00%)          if (!non_false)
   18,193,593 ( 0.01%)            SWAP (unsigned, *p, lits[0]);
    8,272,934 ( 0.00%)          else if (non_false == 1)
   18,179,029 ( 0.01%)            SWAP (unsigned, *p, lits[1]);
   11,580,860 ( 0.00%)          non_false++;
            .                 }
            .               }
            .             }
   33,112,858 ( 0.01%)    for (const unsigned *q = lits; q != p; q++)
   34,760,814 ( 0.01%)      marks[*q] = 0;
    6,625,988 ( 0.00%)    if (!res) {
    3,306,978 ( 0.00%)      if (!non_false) {
            .                 LOG3 ("simplified checker clause inconsistent");
            .                 checker->inconsistent = true;
            .                 res = true;
    3,306,978 ( 0.00%)      } else if (non_false == 1) {
        5,124 ( 0.00%)        LOG3 ("simplified checker clause unit");
        5,978 ( 0.00%)        checker_assign (solver, checker, lits[0], &unit_line);
       57,218 ( 0.00%)  => build/../src/check.c:checker_assign (854x)
          854 ( 0.00%)        res = true;
            .               }
            .             }
    6,625,988 ( 0.00%)    if (!res) {
    9,915,810 ( 0.00%)      LOG3 ("non-trivial and non-satisfied imported checker clause "
            .                     "has %u false and %u non-false literals",
            .                     num_false, non_false);
    6,610,540 ( 0.00%)      LOGIMPORTED3 ("simplified checker");
            .             }
    1,656,497 ( 0.00%)    return res;
    3,313,170 ( 0.00%)  }
            .           
   40,523,854 ( 0.02%)  static void use_literal (kissat *solver, checker *checker, unsigned lit) {
   40,523,854 ( 0.02%)    if (checker->used[lit])
    5,699,056 ( 0.00%)      return;
      450,330 ( 0.00%)    checker->used[lit] = true;
            .           #ifdef LOGGING
      540,396 ( 0.00%)    LOG3 ("used checker literal %u", lit);
            .           #else
            .             (void) solver;
            .           #endif
   11,578,244 ( 0.00%)  }
            .           
   37,039,142 ( 0.02%)  static void large_literal (kissat *solver, checker *checker, unsigned lit) {
   37,039,142 ( 0.02%)    if (checker->large[lit])
    5,214,723 ( 0.00%)      return;
      382,915 ( 0.00%)    checker->large[lit] = true;
            .           #ifdef LOGGING
      459,498 ( 0.00%)    LOG3 ("large checker literal %u", lit);
            .           #else
            .             (void) solver;
            .           #endif
   10,582,612 ( 0.00%)  }
            .           
    9,915,810 ( 0.00%)  static void use_line (kissat *solver, checker *checker) {
   14,873,715 ( 0.01%)    bool large = (SIZE_STACK (checker->imported) > 2);
   57,050,204 ( 0.02%)    for (all_stack (unsigned, lit, checker->imported)) {
   34,734,732 ( 0.01%)      use_literal (solver, checker, lit);
   99,315,734 ( 0.04%)  => build/../src/check.c:use_literal (5,789,122x)
   16,869,550 ( 0.01%)      if (large)
   31,747,836 ( 0.01%)        large_literal (solver, checker, lit);
   90,718,032 ( 0.04%)  => build/../src/check.c:large_literal (5,291,306x)
            .             }
    4,957,905 ( 0.00%)  }
            .           
            .           static void insert_imported (kissat *solver, checker *checker,
   11,568,445 ( 0.00%)                               unsigned hash) {
   13,221,080 ( 0.01%)    size_t size = SIZE_STACK (checker->imported);
    4,957,905 ( 0.00%)    assert (size <= UINT_MAX);
    9,915,810 ( 0.00%)    if (checker->buckets == checker->hashed)
           95 ( 0.00%)      resize_hash (solver, checker);
   20,817,398 ( 0.01%)  => build/../src/check.c:resize_hash (19x)
   16,526,350 ( 0.01%)    bucket *bucket = new_line (solver, checker, size, hash);
  361,707,626 ( 0.15%)  => build/../src/check.c:new_line (1,652,635x)
   11,568,445 ( 0.00%)    const unsigned reduced = reduce_hash (hash, checker->hashed);
   63,104,520 ( 0.03%)  => build/../src/check.c:reduce_hash (1,652,635x)
    9,915,810 ( 0.00%)    struct bucket **p = checker->table + reduced;
    6,610,540 ( 0.00%)    bucket->next = *p;
    4,957,905 ( 0.00%)    *p = bucket;
    6,610,540 ( 0.00%)    LOGLINE3 ("inserted checker");
    4,957,905 ( 0.00%)    const unsigned *const lits = BEGIN_STACK (checker->imported);
    4,957,905 ( 0.00%)    const signed char *values = checker->values;
   13,221,080 ( 0.01%)    assert (!values[lits[0]]);
   14,873,715 ( 0.01%)    assert (!values[lits[1]]);
   11,568,445 ( 0.00%)    watch_checker_literal (solver, checker, bucket, lits[0]);
  147,080,677 ( 0.06%)  => build/../src/check.c:watch_checker_literal (1,652,635x)
   13,221,080 ( 0.01%)    watch_checker_literal (solver, checker, bucket, lits[1]);
  162,646,106 ( 0.07%)  => build/../src/check.c:watch_checker_literal (1,652,635x)
    8,263,175 ( 0.00%)    checker->buckets++;
    8,263,175 ( 0.00%)    checker->added++;
    4,957,905 ( 0.00%)  }
            .           
            .           static void insert_imported_if_not_simplified (kissat *solver,
    9,939,510 ( 0.00%)                                                 checker *checker) {
    8,282,925 ( 0.00%)    sort_line (solver, checker);
  630,730,569 ( 0.27%)  => build/../src/check.c:sort_line (1,656,585x)
    6,626,340 ( 0.00%)    const unsigned hash = hash_line (checker);
  135,804,373 ( 0.06%)  => build/../src/check.c:hash_line (1,656,585x)
   13,252,680 ( 0.01%)    if (!simplify_imported (solver, checker)) {
  461,051,381 ( 0.20%)  => build/../src/check.c:simplify_imported (1,656,585x)
    9,915,810 ( 0.00%)      insert_imported (solver, checker, hash);
  935,493,637 ( 0.40%)  => build/../src/check.c:insert_imported (1,652,635x)
    8,263,175 ( 0.00%)      use_line (solver, checker);
  360,183,518 ( 0.15%)  => build/../src/check.c:use_line (1,652,635x)
            .             }
    4,969,755 ( 0.00%)  }
            .           
            .           static bool match_line (checker *checker, unsigned size, unsigned hash,
   14,886,464 ( 0.01%)                          bucket *bucket) {
    7,443,232 ( 0.00%)    if (bucket->size != size)
      383,398 ( 0.00%)      return false;
    6,676,436 ( 0.00%)    if (bucket->hash != hash)
      262,378 ( 0.00%)      return false;
    7,689,600 ( 0.00%)    if (!checker->marked)
    4,613,757 ( 0.00%)      mark_line (checker);
   97,761,422 ( 0.04%)  => build/../src/check.c:mark_line (1,537,919x)
    4,613,760 ( 0.00%)    const unsigned *const lits = bucket->lits;
   10,765,440 ( 0.00%)    const unsigned *const end_of_lits = lits + bucket->size;
    4,613,760 ( 0.00%)    const bool *const marks = checker->marks;
   30,536,588 ( 0.01%)    for (const unsigned *p = lits; p != end_of_lits; p++)
   47,945,412 ( 0.02%)      if (!marks[*p])
            2 ( 0.00%)        return false;
    1,537,919 ( 0.00%)    return true;
    3,721,616 ( 0.00%)  }
            .           
            .           static void resize_checker (kissat *solver, checker *checker,
      315,308 ( 0.00%)                              unsigned new_vars) {
      135,132 ( 0.00%)    const unsigned vars = checker->vars;
      135,132 ( 0.00%)    const unsigned size = checker->size;
      135,132 ( 0.00%)    if (new_vars > size) {
           34 ( 0.00%)      assert (new_vars <= MAX_SIZE);
          100 ( 0.00%)      unsigned new_size = size ? 2 * size : 1;
           68 ( 0.00%)      while (new_size < new_vars)
            .                 new_size *= 2;
           34 ( 0.00%)      assert (new_size <= MAX_SIZE);
          102 ( 0.00%)      LOG3 ("resizing checker form %u to %u", size, new_size);
           51 ( 0.00%)      const unsigned size2 = 2 * size;
           51 ( 0.00%)      const unsigned new_size2 = 2 * new_size;
          153 ( 0.00%)      checker->marks = kissat_realloc (solver, checker->marks, size2,
      132,952 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (17x)
            .                                                new_size2 * sizeof (bool));
          153 ( 0.00%)      checker->used = kissat_realloc (solver, checker->used, size2,
      133,968 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (17x)
            .                                               new_size2 * sizeof (bool));
          153 ( 0.00%)      checker->large = kissat_realloc (solver, checker->large, size2,
      134,549 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (17x)
            .                                                new_size2 * sizeof (bool));
           34 ( 0.00%)      checker->values =
          119 ( 0.00%)          kissat_realloc (solver, checker->values, size2, new_size2);
      134,113 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (17x)
          289 ( 0.00%)      checker->watches = kissat_realloc (
      292,950 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_realloc (17x)
           34 ( 0.00%)          solver, checker->watches, size2 * sizeof *checker->watches,
            .                   new_size2 * sizeof *checker->watches);
           51 ( 0.00%)      checker->size = new_size;
            .             }
      135,132 ( 0.00%)    const unsigned delta = new_vars - vars;
       90,088 ( 0.00%)    if (delta == 1)
      270,264 ( 0.00%)      LOG3 ("initializing one checker variable %u", vars);
            .             else
            .               LOG3 ("initializing %u checker variables from %u to %u", delta, vars,
            .                     new_vars - 1);
      135,132 ( 0.00%)    const unsigned vars2 = 2 * vars;
      135,132 ( 0.00%)    const unsigned new_vars2 = 2 * new_vars;
      135,132 ( 0.00%)    const unsigned delta2 = 2 * delta;
      180,176 ( 0.00%)    assert (delta2 == new_vars2 - vars2);
      810,792 ( 0.00%)    memset (checker->watches + vars2, 0, delta2 * sizeof *checker->watches);
      630,616 ( 0.00%)  => ???:0x000000000010c5b0 (45,044x)
      405,396 ( 0.00%)    memset (checker->marks + vars2, 0, delta2);
      945,924 ( 0.00%)  => ???:0x000000000010c5b0 (45,044x)
      405,396 ( 0.00%)    memset (checker->used + vars2, 0, delta2);
      945,924 ( 0.00%)  => ???:0x000000000010c5b0 (45,044x)
      405,396 ( 0.00%)    memset (checker->large + vars2, 0, delta2);
      945,924 ( 0.00%)  => ???:0x000000000010c5b0 (45,044x)
      405,396 ( 0.00%)    memset (checker->values + vars2, 0, delta2);
      945,924 ( 0.00%)  => ???:0x000000000010c5b0 (45,044x)
      135,132 ( 0.00%)    checker->vars = new_vars;
      135,132 ( 0.00%)  }
            .           
            .           static inline unsigned
   67,257,648 ( 0.03%)  import_external_checker (kissat *solver, checker *checker, int elit) {
   22,419,216 ( 0.01%)    assert (elit);
   89,676,864 ( 0.04%)    const unsigned var = ABS (elit) - 1;
   44,838,432 ( 0.02%)    if (var >= checker->vars)
      315,308 ( 0.00%)      resize_checker (solver, checker, var + 1);
    9,748,670 ( 0.00%)  => build/../src/check.c:resize_checker (45,044x)
   44,838,432 ( 0.02%)    assert (var < checker->vars);
   67,257,648 ( 0.03%)    return 2 * var + (elit < 0);
   22,419,216 ( 0.01%)  }
            .           
            .           static inline unsigned
   64,233,468 ( 0.03%)  import_internal_checker (kissat *solver, checker *checker, unsigned ilit) {
   64,233,468 ( 0.03%)    const int elit = kissat_export_literal (solver, ilit);
  658,355,312 ( 0.28%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_export_literal (10,705,578x)
   64,233,468 ( 0.03%)    return import_external_checker (solver, checker, elit);
  343,123,181 ( 0.15%)  => build/../src/check.c:import_external_checker (10,705,578x)
   21,411,156 ( 0.01%)  }
            .           
            .           static inline int export_checker (checker *checker, unsigned ilit) {
            .             assert (ilit <= 2 * checker->vars);
            .             return (1 + (ilit >> 1)) * ((ilit & 1) ? -1 : 1);
            .           }
            .           
            .           static bucket *find_line (kissat *solver, checker *checker, size_t size,
   13,841,271 ( 0.01%)                            bool remove) {
    6,151,676 ( 0.00%)    if (!checker->hashed)
            .               return 0;
    7,689,595 ( 0.00%)    sort_line (solver, checker);
  579,956,109 ( 0.25%)  => build/../src/check.c:sort_line (1,537,919x)
    7,689,595 ( 0.00%)    checker->searches++;
    6,151,676 ( 0.00%)    const unsigned hash = hash_line (checker);
  125,134,897 ( 0.05%)  => build/../src/check.c:hash_line (1,537,919x)
   10,765,433 ( 0.00%)    const unsigned reduced = reduce_hash (hash, checker->hashed);
   58,439,494 ( 0.02%)  => build/../src/check.c:reduce_hash (1,537,919x)
            .             struct bucket **p, *bucket;
   10,765,433 ( 0.00%)    for (p = checker->table + reduced;
   27,912,120 ( 0.01%)         (bucket = *p) && !match_line (checker, size, hash, bucket);
  243,451,184 ( 0.10%)  => build/../src/check.c:match_line (1,860,808x)
      645,778 ( 0.00%)         p = &bucket->next)
    1,614,445 ( 0.00%)      checker->collisions++;
    6,151,676 ( 0.00%)    if (checker->marked)
    4,613,757 ( 0.00%)      unmark_line (checker);
   97,761,422 ( 0.04%)  => build/../src/check.c:unmark_line (1,537,919x)
    6,151,676 ( 0.00%)    if (bucket && remove)
    6,151,676 ( 0.00%)      *p = bucket->next;
    1,537,919 ( 0.00%)    return bucket;
    3,075,838 ( 0.00%)  }
            .           
   10,765,433 ( 0.00%)  static void remove_line (kissat *solver, checker *checker, size_t size) {
   10,765,433 ( 0.00%)    bucket *bucket = find_line (solver, checker, size, true);
1,225,652,670 ( 0.52%)  => build/../src/check.c:find_line (1,537,919x)
    3,075,838 ( 0.00%)    if (!bucket) {
            .               kissat_fatal_message_start ();
            .               fputs ("trying to remove non-existing clause:\n", stderr);
            .               for (all_stack (unsigned, lit, checker->imported))
            .                 fprintf (stderr, "%d ", export_checker (checker, lit));
            .               fputs ("0\n", stderr);
            .               fflush (stderr);
            .               kissat_abort ();
            .             }
    9,227,514 ( 0.00%)    unwatch_line (solver, checker, bucket);
  691,777,353 ( 0.29%)  => build/../src/check.c:unwatch_line (1,537,919x)
    6,151,676 ( 0.00%)    LOGLINE3 ("removed checker");
   13,841,271 ( 0.01%)    kissat_free (solver, bucket, bytes_line (size));
  247,079,678 ( 0.10%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (1,537,919x)
   13,841,271 ( 0.01%)  => build/../src/check.c:bytes_line (1,537,919x)
    6,151,676 ( 0.00%)    assert (checker->buckets > 0);
    7,689,595 ( 0.00%)    checker->buckets--;
    7,689,595 ( 0.00%)    checker->removed++;
    4,613,757 ( 0.00%)  }
            .           
            .           static void import_external_literals (kissat *solver, checker *checker,
    1,469,128 ( 0.00%)                                        size_t size, const int *elits) {
      550,923 ( 0.00%)    if (size > UINT_MAX)
            .               kissat_fatal ("can not check handle original clause of size %zu", size);
      734,564 ( 0.00%)    CLEAR_STACK (checker->imported);
    2,934,325 ( 0.00%)    for (size_t i = 0; i < size; i++) {
            .               const unsigned lit =
    5,544,330 ( 0.00%)          import_external_checker (solver, checker, elits[i]);
   25,648,253 ( 0.01%)  => build/../src/check.c:import_external_checker (504,030x)
    6,552,468 ( 0.00%)      PUSH_STACK (checker->imported, lit);
        3,425 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (6x)
            .             }
      734,564 ( 0.00%)    LOGIMPORTED3 ("checker imported external");
      550,923 ( 0.00%)  }
            .           
            .           static void import_internal_literals (kissat *solver, checker *checker,
   22,560,248 ( 0.01%)                                        size_t size, const unsigned *ilits) {
    8,460,093 ( 0.00%)    assert (size <= UINT_MAX);
   11,280,124 ( 0.00%)    CLEAR_STACK (checker->imported);
   55,146,147 ( 0.02%)    for (size_t i = 0; i < size; i++) {
   61,568,988 ( 0.03%)      const unsigned ilit = ilits[i];
   71,830,486 ( 0.03%)      const unsigned lit = import_internal_checker (solver, checker, ilit);
1,164,587,289 ( 0.49%)  => build/../src/check.c:import_internal_checker (10,261,498x)
  133,399,513 ( 0.06%)      PUSH_STACK (checker->imported, lit);
        2,247 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (3x)
            .             }
   11,280,124 ( 0.00%)    LOGIMPORTED3 ("checker imported internal");
    8,460,093 ( 0.00%)  }
            .           
    3,058,356 ( 0.00%)  static void import_clause (kissat *solver, checker *checker, clause *c) {
    4,805,988 ( 0.00%)    import_internal_literals (solver, checker, c->size, c->lits);
  419,299,107 ( 0.18%)  => build/../src/check.c:import_internal_literals (436,908x)
    1,747,632 ( 0.00%)    LOGIMPORTED3 ("checker imported clause");
    1,310,724 ( 0.00%)  }
            .           
            .           static void import_binary (kissat *solver, checker *checker, unsigned a,
    1,621,352 ( 0.00%)                             unsigned b) {
      810,676 ( 0.00%)    CLEAR_STACK (checker->imported);
    1,418,683 ( 0.00%)    const unsigned c = import_internal_checker (solver, checker, a);
   23,576,467 ( 0.01%)  => build/../src/check.c:import_internal_checker (202,669x)
    1,418,683 ( 0.00%)    const unsigned d = import_internal_checker (solver, checker, b);
   23,030,231 ( 0.01%)  => build/../src/check.c:import_internal_checker (202,669x)
    2,634,697 ( 0.00%)    PUSH_STACK (checker->imported, c);
    2,634,697 ( 0.00%)    PUSH_STACK (checker->imported, d);
      810,676 ( 0.00%)    LOGIMPORTED3 ("checker imported binary");
      608,007 ( 0.00%)  }
            .           
            .           static void import_internal_unit (kissat *solver, checker *checker,
       16,387 ( 0.00%)                                    unsigned a) {
        9,364 ( 0.00%)    CLEAR_STACK (checker->imported);
       16,387 ( 0.00%)    const unsigned b = import_internal_checker (solver, checker, a);
      266,218 ( 0.00%)  => build/../src/check.c:import_internal_checker (2,341x)
       30,433 ( 0.00%)    PUSH_STACK (checker->imported, b);
        9,364 ( 0.00%)    LOGIMPORTED3 ("checker imported unit");
        7,023 ( 0.00%)  }
            .           
   26,963,382 ( 0.01%)  static bool checker_propagate (kissat *solver, checker *checker) {
   13,481,691 ( 0.01%)    unsigned propagated = checker->propagated;
   13,481,691 ( 0.01%)    signed char *values = checker->values;
    4,493,897 ( 0.00%)    bool res = true;
  867,926,345 ( 0.37%)    while (res && propagated < SIZE_STACK (checker->trail)) {
1,167,389,184 ( 0.49%)      const unsigned lit = PEEK_STACK (checker->trail, propagated);
  206,009,856 ( 0.09%)      const unsigned not_lit = lit ^ 1;
  412,019,712 ( 0.17%)      LOG3 ("checker propagate %u", lit);
  412,019,712 ( 0.17%)      assert (values[lit] > 0);
  412,019,712 ( 0.17%)      assert (values[not_lit] < 0);
   68,669,952 ( 0.03%)      propagated++;
  412,019,712 ( 0.17%)      buckets *buckets = checker_watches (checker, not_lit);
1,442,068,992 ( 0.61%)  => build/../src/check.c:checker_watches (68,669,952x)
  343,349,760 ( 0.15%)      bucket **begin_of_lines = BEGIN_STACK (*buckets), **q = begin_of_lines;
  343,349,760 ( 0.15%)      bucket *const *end_of_lines = END_STACK (*buckets), *const *p = q;
1,165,452,732 ( 0.49%)      while (p != end_of_lines) {
2,969,243,080 ( 1.26%)        bucket *bucket = *q++ = *p++;
1,187,697,232 ( 0.50%)        if (!res)
   12,453,312 ( 0.01%)          continue;
  853,412,988 ( 0.36%)        unsigned *lits = bucket->lits;
2,560,238,964 ( 1.08%)        const unsigned other = not_lit ^ lits[0] ^ lits[1];
1,422,354,980 ( 0.60%)        const signed char other_value = values[other];
  568,941,992 ( 0.24%)        if (other_value > 0)
  177,314,410 ( 0.08%)          continue;
  750,096,102 ( 0.32%)        const unsigned *const end_of_lits = lits + bucket->size;
            .                 unsigned replacement;
  107,156,586 ( 0.05%)        signed char replacement_value = -1;
            .                 unsigned *r;
1,099,231,356 ( 0.46%)        for (r = lits + 2; r != end_of_lits; r++) {
  270,322,866 ( 0.11%)          replacement = *r;
  270,322,866 ( 0.11%)          if (replacement == other)
            .                     continue;
  270,322,866 ( 0.11%)          if (replacement == not_lit)
            .                     continue;
  450,538,110 ( 0.19%)          replacement_value = values[replacement];
  246,632,502 ( 0.10%)          if (replacement_value >= 0)
   23,690,364 ( 0.01%)            break;
            .                 }
  214,313,172 ( 0.09%)        if (replacement_value >= 0) {
   71,071,092 ( 0.03%)          lits[0] = other;
   94,761,456 ( 0.04%)          lits[1] = replacement;
   71,071,092 ( 0.03%)          *r = not_lit;
   94,761,456 ( 0.04%)          LOGLINE3 ("checker unwatching %u in", not_lit);
  142,142,184 ( 0.06%)          watch_checker_literal (solver, checker, bucket, replacement);
1,346,876,650 ( 0.57%)  => build/../src/check.c:watch_checker_literal (23,690,364x)
   47,380,728 ( 0.02%)          q--;
  166,932,444 ( 0.07%)        } else if (other_value < 0) {
    5,813,496 ( 0.00%)          LOGLINE3 ("checker conflict");
    2,906,748 ( 0.00%)          res = false;
            .                 } else
  492,077,088 ( 0.21%)          checker_assign (solver, checker, other, bucket);
5,331,030,558 ( 2.25%)  => build/../src/check.c:checker_assign (82,012,848x)
            .               }
  910,899,468 ( 0.39%)      SET_END_OF_STACK (*buckets, q);
            .             }
   44,938,970 ( 0.02%)    checker->propagations += propagated - checker->propagated;
   13,481,691 ( 0.01%)    checker->propagated = propagated;
    4,493,897 ( 0.00%)    return res;
    8,987,794 ( 0.00%)  }
            .           
            .           static bool bucket_redundant (kissat *solver, checker *checker,
   10,911,355 ( 0.00%)                                size_t size) {
   12,470,120 ( 0.01%)    if (!checker_propagate (solver, checker)) {
   65,908,005 ( 0.03%)  => build/../src/check.c:checker_propagate (1,558,765x)
            .               LOG3 ("root level checker unit propagations leads to conflict");
            .               LOG2 ("checker becomes inconsistent");
            .               checker->inconsistent = true;
            .               return true;
            .             }
    6,235,060 ( 0.00%)    if (checker->inconsistent) {
            .               LOG3 ("skipping removal since checker already inconsistent");
            .               return true;
            .             }
    3,117,530 ( 0.00%)    if (!size)
            .               kissat_fatal ("checker can not remove empty checker clause");
    3,117,530 ( 0.00%)    if (size == 1) {
           30 ( 0.00%)      const unsigned unit = PEEK_STACK (checker->imported, 0);
           18 ( 0.00%)      const signed char value = checker->values[unit];
            6 ( 0.00%)      if (value < 0 && !checker->inconsistent)
            .                 kissat_fatal ("consistent checker can not remove falsified unit %d",
            .                               export_checker (checker, unit));
            6 ( 0.00%)      if (!value)
            .                 kissat_fatal ("checker can not remove unassigned unit %d",
            .                               export_checker (checker, unit));
           18 ( 0.00%)      LOG3 ("checker skips removal of satisfied unit %u", unit);
            6 ( 0.00%)      return true;
   10,911,334 ( 0.00%)    } else if (satisfied_or_trivial_imported (solver, checker)) {
  306,504,177 ( 0.13%)  => build/../src/check.c:satisfied_or_trivial_imported (1,558,762x)
       83,372 ( 0.00%)      LOGIMPORTED3 ("satisfied imported checker");
       41,686 ( 0.00%)      return true;
            .             } else
    1,537,919 ( 0.00%)      return false;
    3,117,530 ( 0.00%)  }
            .           
            .           static void remove_line_if_not_redundant (kissat *solver,
    9,352,590 ( 0.00%)                                            checker *checker) {
   12,470,120 ( 0.01%)    size_t size = SIZE_STACK (checker->imported);
   14,028,885 ( 0.01%)    if (!bucket_redundant (solver, checker, size))
  423,955,702 ( 0.18%)  => build/../src/check.c:bucket_redundant (1,558,765x)
    9,227,514 ( 0.00%)      remove_line (solver, checker, size);
2,258,322,760 ( 0.96%)  => build/../src/check.c:remove_line (1,537,919x)
    4,676,295 ( 0.00%)  }
            .           
    8,837,136 ( 0.00%)  static void checker_backtrack (checker *checker, unsigned saved) {
    8,837,136 ( 0.00%)    unsigned *begin = BEGIN_STACK (checker->trail) + saved;
    4,418,568 ( 0.00%)    unsigned *p = END_STACK (checker->trail);
    4,418,568 ( 0.00%)    signed char *values = checker->values;
  267,740,595 ( 0.11%)    while (p != begin) {
  349,132,228 ( 0.15%)      const unsigned lit = *--p;
  436,415,285 ( 0.18%)      assert (VALID_CHECKER_LIT (lit));
  261,849,171 ( 0.11%)      const unsigned not_lit = lit ^ 1;
  523,698,342 ( 0.22%)      assert (values[lit] > 0);
  523,698,342 ( 0.22%)      assert (values[not_lit] < 0);
  785,547,513 ( 0.33%)      values[lit] = values[not_lit] = 0;
            .             }
    4,418,568 ( 0.00%)    checker->propagated = saved;
   22,063,917 ( 0.01%)    SET_END_OF_STACK (checker->trail, begin);
    5,881,783 ( 0.00%)  }
            .           
            .           static bool checker_blocked_literal (kissat *solver, checker *checker,
       62,314 ( 0.00%)                                       unsigned lit) {
       26,706 ( 0.00%)    signed char *values = checker->values;
       53,412 ( 0.00%)    assert (values[lit] < 0);
       26,706 ( 0.00%)    const unsigned not_lit = lit ^ 1;
       62,314 ( 0.00%)    if (checker->large[not_lit])
            .               return false;
       53,412 ( 0.00%)    buckets *buckets = checker_watches (checker, not_lit);
      186,942 ( 0.00%)  => build/../src/check.c:checker_watches (8,902x)
       26,706 ( 0.00%)    bucket *const *const begin_of_lines = BEGIN_STACK (*buckets);
       26,706 ( 0.00%)    bucket *const *const end_of_lines = END_STACK (*buckets);
       17,804 ( 0.00%)    bucket *const *p = begin_of_lines;
      101,173 ( 0.00%)    while (p != end_of_lines) {
      109,275 ( 0.00%)      bucket *bucket = *p++;
       65,565 ( 0.00%)      const unsigned *const lits = bucket->lits;
      152,985 ( 0.00%)      const unsigned *const end_of_lits = lits + bucket->size;
       43,710 ( 0.00%)      const unsigned *l = lits;
       87,420 ( 0.00%)      while (l != end_of_lits) {
      109,275 ( 0.00%)        const unsigned other = *l++;
       65,565 ( 0.00%)        if (other == not_lit)
            .                   continue;
      131,130 ( 0.00%)        if (values[other] > 0)
       21,855 ( 0.00%)          goto CONTINUE_WITH_NEXT_BUCKET;
            .               }
            .               return false;
            .             CONTINUE_WITH_NEXT_BUCKET:;
            .             }
            .           #ifdef LOGGING
       53,412 ( 0.00%)    LOG3 ("blocked literal %u", lit);
            .           #else
            .             (void) solver;
            .           #endif
        8,902 ( 0.00%)    return true;
       17,804 ( 0.00%)  }
            .           
       53,412 ( 0.00%)  static bool checker_blocked_imported (kissat *solver, checker *checker) {
      115,726 ( 0.00%)    for (all_stack (unsigned, lit, checker->imported))
       80,118 ( 0.00%)      if (checker_blocked_literal (solver, checker, lit))
    1,511,093 ( 0.00%)  => build/../src/check.c:checker_blocked_literal (8,902x)
       17,804 ( 0.00%)        return true;
            .             return false;
       17,804 ( 0.00%)  }
            .           
    8,837,664 ( 0.00%)  static void check_line (kissat *solver, checker *checker) {
    7,364,720 ( 0.00%)    checker->checked++;
    5,891,776 ( 0.00%)    if (checker->inconsistent)
           87 ( 0.00%)      return;
   11,782,856 ( 0.00%)    if (!checker_propagate (solver, checker)) {
   63,737,761 ( 0.03%)  => build/../src/check.c:checker_propagate (1,472,857x)
            6 ( 0.00%)      LOG3 ("root level checker unit propagations leads to conflict");
            6 ( 0.00%)      LOG2 ("checker becomes inconsistent");
            2 ( 0.00%)      checker->inconsistent = true;
            1 ( 0.00%)      return;
            .             }
   11,782,848 ( 0.00%)    const unsigned saved = SIZE_STACK (checker->trail);
    4,418,568 ( 0.00%)    signed char *values = checker->values;
    2,945,712 ( 0.00%)    bool satisfied = false, pure = false;
    2,945,712 ( 0.00%)    unsigned decisions = 0, prev = INVALID_LIT;
   51,662,364 ( 0.02%)    for (all_stack (unsigned, lit, checker->imported)) {
   15,846,912 ( 0.01%)      assert (prev != lit);
   10,564,608 ( 0.00%)      prev = lit;
   26,411,520 ( 0.01%)      signed char lit_value = values[lit];
   10,564,608 ( 0.00%)      if (lit_value < 0)
           31 ( 0.00%)        continue;
   10,564,546 ( 0.00%)      if (lit_value > 0) {
       18,048 ( 0.00%)        LOG3 ("found satisfied literal %u", lit);
       15,040 ( 0.00%)        checker->satisfied++;
        3,008 ( 0.00%)        satisfied = true;
        3,008 ( 0.00%)        break;
            .               }
   15,837,795 ( 0.01%)      const unsigned not_lit = lit ^ 1;
   31,675,590 ( 0.01%)      bool used = checker->used[not_lit];
   21,117,060 ( 0.01%)      if (!used) {
       45,438 ( 0.00%)        LOG3 ("found pure literal %u", lit);
       37,865 ( 0.00%)        checker->pure++;
        7,573 ( 0.00%)        pure = true;
        7,573 ( 0.00%)        break;
            .               }
   31,630,152 ( 0.01%)      checker_assign (solver, checker, not_lit, &decision_line);
  337,388,580 ( 0.14%)  => build/../src/check.c:checker_assign (5,271,692x)
   10,543,384 ( 0.00%)      decisions++;
            .             }
    8,837,136 ( 0.00%)    checker->decisions += decisions;
   11,770,816 ( 0.00%)    if (!satisfied && !pure) {
   11,698,200 ( 0.00%)      if (!checker_propagate (solver, checker))
29,484,980,884 (12.47%)  => build/../src/check.c:checker_propagate (1,462,275x)
    8,720,238 ( 0.00%)        LOG3 ("checker imported clause unit implied");
       62,314 ( 0.00%)      else if (checker_blocked_imported (solver, checker)) {
    1,795,957 ( 0.00%)  => build/../src/check.c:checker_blocked_imported (8,902x)
       53,412 ( 0.00%)        LOG3 ("checker imported clause binary blocked");
       53,412 ( 0.00%)        checker->blocked++;
            .               } else {
            .                 kissat_fatal_message_start ();
            .                 fputs ("failed to check clause:\n", stderr);
            .                 for (all_stack (unsigned, lit, checker->imported))
            .                   fprintf (stderr, "%d ", export_checker (checker, lit));
            .                 fputs ("0\n", stderr);
            .                 fflush (stderr);
            .                 kissat_abort ();
            .               }
            .             }
    8,837,136 ( 0.00%)    checker_backtrack (checker, saved);
3,206,957,152 ( 1.36%)  => build/../src/check.c:checker_backtrack (1,472,856x)
    2,945,888 ( 0.00%)  }
            .           
            .           void kissat_add_unchecked_external (kissat *solver, size_t size,
    1,285,487 ( 0.00%)                                      const int *elits) {
      734,564 ( 0.00%)    LOGINTS3 (size, elits, "adding unchecked external checker");
      550,923 ( 0.00%)    checker *checker = solver->checker;
      918,205 ( 0.00%)    checker->unchecked++;
    1,101,846 ( 0.00%)    import_external_literals (solver, checker, size, elits);
   44,722,903 ( 0.02%)  => build/../src/check.c:import_external_literals (183,641x)
      918,205 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
  360,828,332 ( 0.15%)  => build/../src/check.c:insert_imported_if_not_simplified (183,641x)
      550,923 ( 0.00%)  }
            .           
            .           void kissat_add_unchecked_internal (kissat *solver, size_t size,
            .                                               unsigned *lits) {
            .             LOGUNSIGNEDS3 (size, lits, "adding unchecked internal checker");
            .             checker *checker = solver->checker;
            .             checker->unchecked++;
            .             assert (size <= UINT_MAX);
            .             import_internal_literals (solver, checker, size, lits);
            .             insert_imported_if_not_simplified (solver, checker);
            .           }
            .           
      457,149 ( 0.00%)  void kissat_check_and_add_binary (kissat *solver, unsigned a, unsigned b) {
      261,228 ( 0.00%)    LOGBINARY3 (a, b, "checking and adding internal checker");
      195,921 ( 0.00%)    checker *checker = solver->checker;
      326,535 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (a));
      326,535 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (b));
      391,842 ( 0.00%)    import_binary (solver, checker, a, b);
   19,240,932 ( 0.01%)  => build/../src/check.c:import_binary (65,307x)
      326,535 ( 0.00%)    check_line (solver, checker);
4,564,957,190 ( 1.93%)  => build/../src/check.c:check_line (65,307x)
      326,535 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
   71,709,054 ( 0.03%)  => build/../src/check.c:insert_imported_if_not_simplified (65,307x)
      195,921 ( 0.00%)  }
            .           
    1,038,378 ( 0.00%)  void kissat_check_and_add_clause (kissat *solver, clause *clause) {
      692,252 ( 0.00%)    LOGCLS3 (clause, "checking and adding internal checker");
      519,189 ( 0.00%)    checker *checker = solver->checker;
    1,038,378 ( 0.00%)    import_clause (solver, checker, clause);
  182,864,001 ( 0.08%)  => build/../src/check.c:import_clause (173,063x)
      865,315 ( 0.00%)    check_line (solver, checker);
24,711,276,171 (10.45%)  => build/../src/check.c:check_line (173,063x)
      865,315 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
  478,034,433 ( 0.20%)  => build/../src/check.c:insert_imported_if_not_simplified (173,063x)
      519,189 ( 0.00%)  }
            .           
            5 ( 0.00%)  void kissat_check_and_add_empty (kissat *solver) {
            6 ( 0.00%)    LOG3 ("checking and adding empty checker clause");
            3 ( 0.00%)    checker *checker = solver->checker;
            4 ( 0.00%)    CLEAR_STACK (checker->imported);
            5 ( 0.00%)    check_line (solver, checker);
           18 ( 0.00%)  => build/../src/check.c:check_line (1x)
            5 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
           88 ( 0.00%)  => build/../src/check.c:insert_imported_if_not_simplified (1x)
            3 ( 0.00%)  }
            .           
            .           void kissat_check_and_add_internal (kissat *solver, size_t size,
    8,578,955 ( 0.00%)                                      const unsigned *lits) {
    4,902,260 ( 0.00%)    LOGUNSIGNEDS3 (size, lits, "checking and adding internal checker");
    3,676,695 ( 0.00%)    checker *checker = solver->checker;
    7,353,390 ( 0.00%)    import_internal_literals (solver, checker, size, lits);
  594,091,326 ( 0.25%)  => build/../src/check.c:import_internal_literals (1,225,565x)
    6,127,825 ( 0.00%)    check_line (solver, checker);
3,976,991,031 ( 1.68%)  => build/../src/check.c:check_line (1,225,565x)
    6,127,825 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
1,659,574,780 ( 0.70%)  => build/../src/check.c:insert_imported_if_not_simplified (1,225,565x)
    3,676,695 ( 0.00%)  }
            .           
       14,046 ( 0.00%)  void kissat_check_and_add_unit (kissat *solver, unsigned a) {
       14,046 ( 0.00%)    LOG3 ("checking and adding internal checker internal unit %u", a);
        7,023 ( 0.00%)    checker *checker = solver->checker;
       11,705 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (a));
       14,046 ( 0.00%)    import_internal_unit (solver, checker, a);
      355,176 ( 0.00%)  => build/../src/check.c:import_internal_unit (2,341x)
       11,705 ( 0.00%)    check_line (solver, checker);
   57,704,726 ( 0.02%)  => build/../src/check.c:check_line (2,341x)
       11,705 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
      523,120 ( 0.00%)  => build/../src/check.c:insert_imported_if_not_simplified (2,341x)
        7,023 ( 0.00%)  }
            .           
            .           void kissat_check_shrink_clause (kissat *solver, clause *c, unsigned remove,
       53,336 ( 0.00%)                                   unsigned keep) {
       26,668 ( 0.00%)    LOGCLS3 (c, "checking and shrinking by %u internal checker", remove);
       20,001 ( 0.00%)    checker *checker = solver->checker;
       26,668 ( 0.00%)    CLEAR_STACK (checker->imported);
       20,001 ( 0.00%)    const value *const values = solver->values;
      401,691 ( 0.00%)    for (all_literals_in_clause (ilit, c)) {
      129,294 ( 0.00%)      if (ilit == remove)
        6,667 ( 0.00%)        continue;
      461,793 ( 0.00%)      if (ilit != keep && values[ilit] < 0 && !LEVEL (ilit))
           30 ( 0.00%)        continue;
      254,807 ( 0.00%)      const unsigned lit = import_internal_checker (solver, checker, ilit);
    4,129,848 ( 0.00%)  => build/../src/check.c:import_internal_checker (36,401x)
      509,614 ( 0.00%)      PUSH_STACK (checker->imported, lit);
            .             }
       26,668 ( 0.00%)    LOGIMPORTED3 ("checker imported internal");
       33,335 ( 0.00%)    check_line (solver, checker);
  129,435,831 ( 0.05%)  => build/../src/check.c:check_line (6,667x)
       33,335 ( 0.00%)    insert_imported_if_not_simplified (solver, checker);
   13,843,866 ( 0.01%)  => build/../src/check.c:insert_imported_if_not_simplified (6,667x)
       40,002 ( 0.00%)    import_clause (solver, checker, c);
    6,528,155 ( 0.00%)  => build/../src/check.c:import_clause (6,667x)
       33,335 ( 0.00%)    remove_line_if_not_redundant (solver, checker);
   17,311,762 ( 0.01%)  => build/../src/check.c:remove_line_if_not_redundant (6,667x)
       20,001 ( 0.00%)  }
            .           
      961,534 ( 0.00%)  void kissat_remove_checker_binary (kissat *solver, unsigned a, unsigned b) {
      549,448 ( 0.00%)    LOGBINARY3 (a, b, "removing internal checker");
      412,086 ( 0.00%)    checker *checker = solver->checker;
      686,810 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (a));
      686,810 ( 0.00%)    assert (VALID_INTERNAL_LITERAL (b));
      824,172 ( 0.00%)    import_binary (solver, checker, a, b);
   39,323,237 ( 0.02%)  => build/../src/check.c:import_binary (137,362x)
      686,810 ( 0.00%)    remove_line_if_not_redundant (solver, checker);
  237,619,710 ( 0.10%)  => build/../src/check.c:remove_line_if_not_redundant (137,362x)
      412,086 ( 0.00%)  }
            .           
    1,543,068 ( 0.00%)  void kissat_remove_checker_clause (kissat *solver, clause *clause) {
    1,028,712 ( 0.00%)    LOGCLS3 (clause, "removing internal checker");
      771,534 ( 0.00%)    checker *checker = solver->checker;
    1,543,068 ( 0.00%)    import_clause (solver, checker, clause);
  240,829,651 ( 0.10%)  => build/../src/check.c:import_clause (257,178x)
    1,285,890 ( 0.00%)    remove_line_if_not_redundant (solver, checker);
  701,378,442 ( 0.30%)  => build/../src/check.c:remove_line_if_not_redundant (257,178x)
      771,534 ( 0.00%)  }
            .           
            .           bool kissat_checker_contains_clause (kissat *solver, clause *clause) {
            .             checker *checker = solver->checker;
            .             import_clause (solver, checker, clause);
            .             size_t size = SIZE_STACK (checker->imported);
            .             if (bucket_redundant (solver, checker, size))
            .               return true;
            .             return find_line (solver, checker, size, false);
-- line 991 ----------------------------------------
-- line 995 ----------------------------------------
            .                                                const int *elits) {
            .             LOGINTS3 (size, elits, "removing external checker");
            .             checker *checker = solver->checker;
            .             import_external_literals (solver, checker, size, elits);
            .             remove_line_if_not_redundant (solver, checker);
            .           }
            .           
            .           void kissat_remove_checker_internal (kissat *solver, size_t size,
    8,102,906 ( 0.00%)                                       const unsigned *ilits) {
    4,630,232 ( 0.00%)    LOGUNSIGNEDS3 (size, ilits, "removing internal checker");
    3,472,674 ( 0.00%)    checker *checker = solver->checker;
    6,945,348 ( 0.00%)    import_internal_literals (solver, checker, size, ilits);
  535,184,919 ( 0.23%)  => build/../src/check.c:import_internal_literals (1,157,558x)
    5,787,790 ( 0.00%)    remove_line_if_not_redundant (solver, checker);
1,775,723,952 ( 0.75%)  => build/../src/check.c:remove_line_if_not_redundant (1,157,558x)
    3,472,674 ( 0.00%)  }
            .           
            .           void dump_line (bucket *bucket) {
            .             printf ("bucket[%p]", (void *) bucket);
            .             for (unsigned i = 0; i < bucket->size; i++)
            .               printf (" %u", bucket->lits[i]);
            .             fputc ('\n', stdout);
            .           }
            .           
-- line 1016 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/parse.c
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           
         .           struct read_buffer {
         .             unsigned char chars[size_buffer];
         .             size_t pos, end;
         .           };
         .           
         .           typedef struct read_buffer read_buffer;
         .           
        30 ( 0.00%)  static size_t fill_buffer (read_buffer *buffer, file *file) {
        10 ( 0.00%)    buffer->pos = 0;
        35 ( 0.00%)    buffer->end = kissat_read (file, buffer->chars, size_buffer);
        10 ( 0.00%)    return buffer->end;
        10 ( 0.00%)  }
         .           
         .           // clang-format off
         .           
         .           static inline int
         .           next (read_buffer *, file *, uint64_t *) ATTRIBUTE_ALWAYS_INLINE;
         .           
         .           static inline bool faster_is_digit (int ch) ATTRIBUTE_ALWAYS_INLINE;
         .           
         .           // clang-format off
         .           
         .           static inline int
         .           next (read_buffer * buffer, file * file, uint64_t * lineno_ptr)
         .           {
20,707,391 ( 0.01%)    if (buffer->pos == buffer->end && !fill_buffer (buffer, file))
     1,253 ( 0.00%)  => build/../src/parse.c:fill_buffer (5x)
         2 ( 0.00%)      return EOF;
31,061,025 ( 0.01%)    int ch = buffer->chars[buffer->pos++];
 6,902,450 ( 0.00%)    if (ch == '\n')
   918,210 ( 0.00%)      *lineno_ptr += 1;
 3,451,225 ( 0.00%)    return ch;
         .           }
         .           
         .           #define NEXT() next (&buffer, file, &lineno)
         .           
         .           #define NONL(STR) \
         .           do { \
         .             if (ch == '\n') \
         .               { \
-- line 51 ----------------------------------------
-- line 56 ----------------------------------------
         .             return STR; \
         .           } while (0)
         .           
         .           #define TRY_RELAXED_PARSING "(try '--relaxed' parsing)"
         .           
         .           static inline bool
         .           faster_is_digit (int ch)
         .           {
24,996,195 ( 0.01%)    return '0' <= ch && ch <= '9';
         .           }
         .           
         .           #define ISDIGIT(CH) faster_is_digit (CH)
         .           
         .           static const char *
         .           parse_dimacs (kissat * solver, file * file,
         .                         strictness strict, uint64_t * lineno_ptr, int * max_var_ptr)
     1,037 ( 0.00%)  {
         .             read_buffer buffer;
         3 ( 0.00%)    buffer.pos = buffer.end = 0;
         5 ( 0.00%)    uint64_t lineno = *lineno_ptr = 1;
         7 ( 0.00%)    bool first = true;
         .             int ch;
         .             for (;;)
         .               {
         1 ( 0.00%)        ch = NEXT ();
         2 ( 0.00%)        if (ch == 'p')
         1 ( 0.00%)  	break;
         .                 else if (ch == EOF)
         .           	{
         .           	  if (first)
         .           	    return "empty file";
         .           	  else
         .           	    return "end-of-file before header";
         .           	}
         .                 first = false;
-- line 90 ----------------------------------------
-- line 211 ----------------------------------------
         .           		      return "expected new-line after carriage-return";
         .           		    break;
         .           		  }
         .           	    }
         .           	}
         .                 else
         .           	return "expected 'c' or 'p' at start of line";
         .               }
         8 ( 0.00%)    assert (ch == 'p');
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (ch != ' ')
         6 ( 0.00%)      NONL ("expected space after 'p'");
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (strict != PEDANTIC_PARSING)
         .               {
         5 ( 0.00%)        while (ch == ' ' || ch == '\t')
         .           	ch = NEXT ();
         .               }
         2 ( 0.00%)    if (ch != 'c')
         6 ( 0.00%)      NONL ("expected 'c' after 'p '");
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (ch != 'n')
         6 ( 0.00%)      NONL ("expected 'n' after 'p c'");
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (ch != 'f')
         6 ( 0.00%)      NONL ("expected 'n' after 'p cn'");
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (ch != ' ')
         6 ( 0.00%)      NONL ("expected space after 'p cnf'");
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (strict != PEDANTIC_PARSING)
         .               {
         7 ( 0.00%)        while (ch == ' ' || ch == '\t')
         .           	ch = NEXT ();
         .               }
         3 ( 0.00%)    if (!ISDIGIT (ch))
         .               NONL ("expected digit after 'p cnf '");
         3 ( 0.00%)    int variables = ch - '0';
        26 ( 0.00%)    while (ISDIGIT (ch = NEXT ()))
         .               {
         8 ( 0.00%)        if (EXTERNAL_MAX_VAR / 10 < variables)
         .           	return "maximum variable too large";
        24 ( 0.00%)        variables *= 10;
        12 ( 0.00%)        const int digit = ch - '0';
        16 ( 0.00%)        if (EXTERNAL_MAX_VAR - digit < variables)
         .           	return "maximum variable too large";
        38 ( 0.00%)        variables += digit;
         .               }
         2 ( 0.00%)    if (ch == EOF)
         .               return "unexpected end-of-file while parsing maximum variable";
         2 ( 0.00%)    if (ch == '\r')
         .               {
         .                 ch = NEXT ();
         .                 if (ch != '\n')
         .           	return "expected new-line after carriage-return";
         .               }
         2 ( 0.00%)    if (ch == '\n')
         .               NONL ("unexpected new-line after maximum variable");
         2 ( 0.00%)    if (ch != ' ')
         6 ( 0.00%)      return "expected space after maximum variable";
         1 ( 0.00%)    ch = NEXT ();
         2 ( 0.00%)    if (strict != PEDANTIC_PARSING)
         .               {
         7 ( 0.00%)        while (ch == ' ' || ch == '\t')
         .           	ch = NEXT ();
         .               }
         3 ( 0.00%)    if (!ISDIGIT (ch))
         .               return "expected number of clauses after maximum variable";
         4 ( 0.00%)    uint64_t clauses = ch - '0';
        31 ( 0.00%)    while (ISDIGIT (ch = NEXT ()))
         .               {
        15 ( 0.00%)        if (UINT64_MAX / 10 < clauses)
         .           	return "number of clauses too large";
        30 ( 0.00%)        clauses *= 10;
        15 ( 0.00%)        const int digit = ch - '0';
        25 ( 0.00%)        if (UINT64_MAX - digit < clauses)
         .           	return "number of clauses too large";
        51 ( 0.00%)        clauses += digit;
         .               }
         2 ( 0.00%)    if (ch == EOF)
         .               return "unexpected end-of-file while parsing number of clauses";
         2 ( 0.00%)    if (strict != PEDANTIC_PARSING)
         .               {
         5 ( 0.00%)        while (ch == ' ' || ch == '\t')
         .           	ch = NEXT ();
         .               }
         2 ( 0.00%)    if (ch == '\r')
         .               {
         .                 ch = NEXT ();
         .                 if (ch != '\n')
         .           	return "expected new-line after carriage-return";
         .               }
         2 ( 0.00%)    if (ch == EOF)
         .               return "unexpected end-of-file after parsing number of clauses";
         2 ( 0.00%)    if (ch != '\n')
         .               return "expected new-line after parsing number of clauses";
         7 ( 0.00%)    kissat_message (solver,
     2,239 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/print.c:kissat_message (1x)
         .           		  "parsed 'p cnf %d %" PRIu64 "' header", variables, clauses);
         3 ( 0.00%)    *max_var_ptr = variables;
         5 ( 0.00%)    kissat_reserve (solver, variables);
   262,162 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/internal.c:kissat_reserve (1x)
         1 ( 0.00%)    uint64_t parsed = 0;
 4,126,033 ( 0.00%)    int lit = 0;
         .             for (;;)
         .               {
   687,672 ( 0.00%)        ch = NEXT ();
 1,375,344 ( 0.00%)        if (ch == ' ')
         .           	continue;
 1,375,344 ( 0.00%)        if (ch == '\t')
         .           	continue;
 1,375,344 ( 0.00%)        if (ch == '\n')
         .           	continue;
 1,375,344 ( 0.00%)        if (ch == '\r')
         .           	{
         .           	  ch = NEXT ();
         .           	  if (ch != '\n')
         .           	    return "expected new-line after carriage-return";
         .           	  continue;
         .           	}
 1,375,344 ( 0.00%)        if (ch == 'c')
         .           	{
         .           	  while ((ch = NEXT ()) != '\n')
         .           	    if (ch == EOF)
         .           	      {
         .           		if (strict != PEDANTIC_PARSING)
         .           		  break;
         .           		return "unexpected end-of-file in comment after header";
         .           	      }
         .           	  if (ch == EOF)
         .           	    break;
         .           	  continue;
         .           	}
 1,375,344 ( 0.00%)        if (ch == EOF)
         1 ( 0.00%)  	break;
         .                 int sign;
 3,015,070 ( 0.00%)        if (ch == '-')
         .           	{
   273,288 ( 0.00%)  	  ch = NEXT ();
   546,576 ( 0.00%)  	  if (ch == EOF)
         .           	    return "unexpected end-of-file after '-'";
   546,576 ( 0.00%)  	  if (ch == '\n')
   546,576 ( 0.00%)  	    NONL ("unexpected new-line after '-'");
   819,864 ( 0.00%)  	  if (!ISDIGIT (ch))
         .           	    return "expected digit after '-'";
   546,576 ( 0.00%)  	  if (ch == '0')
         .           	    return "expected non-zero digit after '-'";
 1,375,342 ( 0.00%)  	  sign = -1;
         .           	}
 1,243,149 ( 0.00%)        else if (!ISDIGIT (ch))
         .           	return "expected digit or '-'";
         .                 else
 1,789,725 ( 0.00%)  	sign = 1;
 1,375,342 ( 0.00%)        assert (ISDIGIT (ch));
 2,063,013 ( 0.00%)        int idx = ch - '0';
13,138,906 ( 0.01%)        while (ISDIGIT (ch = NEXT ()))
         .           	{
 3,605,152 ( 0.00%)  	  if (EXTERNAL_MAX_VAR / 10 < idx)
         .           	    return "variable index too large";
10,815,456 ( 0.00%)  	  idx *= 10;
 5,407,728 ( 0.00%)  	  const int digit = ch - '0';
 7,210,304 ( 0.00%)  	  if (EXTERNAL_MAX_VAR - digit < idx)
         .           	    return "variable index too large";
18,546,634 ( 0.01%)  	  idx += digit;
         .           	}
 1,375,342 ( 0.00%)        if (ch == EOF)
         .           	{
         .           	  if (strict == PEDANTIC_PARSING)
         .           	    {
         .           	      if (idx)
         .           		return "unexpected end-of-file after literal";
         .           	      else
         .           		return "unexpected end-of-file after trailing zero";
         .           	    }
         .           	}
 1,375,342 ( 0.00%)        else if (ch == '\r')
         .           	{
         .           	  ch = NEXT ();
         .           	  if (ch != '\n')
         .           	    return "expected new-line after carriage-return";
         .           	}
 1,375,342 ( 0.00%)        else if (ch == 'c')
         .           	{
         .           	  while ((ch = NEXT ()) != '\n')
         .           	    if (ch == EOF)
         .           	      {
         .           		if (strict != PEDANTIC_PARSING)
         .           		  break;
         .           		return "unexpected end-of-file in comment after literal";
         .           	      }
         .           	}
 2,109,906 ( 0.00%)        else if (ch != ' ' && ch != '\t' && ch != '\n')
         .           	return "expected white space after literal";
 3,438,355 ( 0.00%)        if (strict != RELAXED_PARSING && idx > variables)
         .           	NONL ("maximum variable index exceeded " TRY_RELAXED_PARSING);
 1,375,342 ( 0.00%)        if (idx)
         .           	{
 1,554,636 ( 0.00%)  	  assert (sign == 1 || sign == -1);
 1,008,060 ( 0.00%)  	  assert (idx != INT_MIN);
 2,016,120 ( 0.00%)  	  lit = sign * idx;
         .           	}
         .                 else
         .           	{
   918,205 ( 0.00%)  	  if (strict != RELAXED_PARSING && parsed == clauses)
         .           	    return "too many clauses " TRY_RELAXED_PARSING;
   183,641 ( 0.00%)  	  parsed++;
   183,641 ( 0.00%)  	  lit = 0;
         .           	}
 4,126,026 ( 0.00%)        kissat_add (solver, lit);
954,646,969 ( 0.40%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/internal.c:kissat_add (687,671x)
         .               }
         2 ( 0.00%)    if (lit)
         .               return "trailing zero missing";
         5 ( 0.00%)    if (strict != RELAXED_PARSING && parsed < clauses)
         .               {
         .                 if (parsed + 1 == clauses)
         .           	return "one clause missing " TRY_RELAXED_PARSING;
         .                 return "more than one clause missing " TRY_RELAXED_PARSING;
         .               }
         .           
         3 ( 0.00%)    *lineno_ptr = lineno;
         .           
         1 ( 0.00%)    return 0;
         5 ( 0.00%)  }
         .           
         .           const char *
         .           kissat_parse_dimacs (kissat * solver,
         .           		     strictness strict,
         .           		     file * file, uint64_t * lineno_ptr, int *max_var_ptr)
         9 ( 0.00%)  {
        14 ( 0.00%)    START (parse);
       430 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_start (1x)
         .             const char *res;
         9 ( 0.00%)    res = parse_dimacs (solver, file, strict, lineno_ptr, max_var_ptr);
1,149,921,627 ( 0.49%)  => build/../src/parse.c:parse_dimacs (1x)
         5 ( 0.00%)    if (!solver->inconsistent)
         3 ( 0.00%)      kissat_defrag_watches (solver);
38,257,398 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/collect.h:kissat_defrag_watches (1x)
        14 ( 0.00%)    STOP (parse);
       114 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/profile.c:kissat_stop (1x)
         1 ( 0.00%)    return res;
         2 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/sort.c
--------------------------------------------------------------------------------
Ir                   

          .           #include "internal.h"
          .           #include "logging.h"
          .           
          .           static inline value
          .           move_smallest_literal_to_front (kissat *solver, const value *const values,
          .                                           const assigned *const assigned,
          .                                           bool satisfied_is_enough, unsigned start,
174,161,592 ( 0.07%)                                  unsigned size, unsigned *lits) {
 31,665,744 ( 0.01%)    assert (1 < size);
 47,498,616 ( 0.02%)    assert (start < size);
          .           
 94,997,232 ( 0.04%)    unsigned a = lits[start];
          .           
 79,164,360 ( 0.03%)    value u = values[a];
 32,549,968 ( 0.01%)    if (!u || (u > 0 && satisfied_is_enough))
 31,274,708 ( 0.01%)      return u;
          .           
    586,554 ( 0.00%)    unsigned pos = 0, best = a;
          .           
          .             {
  1,564,144 ( 0.00%)      const unsigned i = IDX (a);
  1,955,180 ( 0.00%)      unsigned k = (u ? assigned[i].level : UINT_MAX);
          .           
    391,036 ( 0.00%)      assert (start < UINT_MAX);
  2,941,222 ( 0.00%)      for (unsigned i = start + 1; i < size; i++) {
  2,595,882 ( 0.00%)        const unsigned b = lits[i];
  2,163,235 ( 0.00%)        const value v = values[b];
          .           
  1,960,800 ( 0.00%)        if (!v || (v > 0 && satisfied_is_enough)) {
     78,996 ( 0.00%)          best = b;
     78,996 ( 0.00%)          pos = i;
     78,996 ( 0.00%)          u = v;
     39,498 ( 0.00%)          break;
          .                 }
          .           
  3,145,192 ( 0.00%)        const unsigned j = IDX (b);
  3,931,490 ( 0.00%)        const unsigned l = (v ? assigned[j].level : UINT_MAX);
          .           
          .                 bool better;
          .           
  1,034,078 ( 0.00%)        if (u < 0 && v > 0)
     76,396 ( 0.00%)          better = true;
  1,248,420 ( 0.00%)        else if (u > 0 && v < 0)
    372,858 ( 0.00%)          better = false;
    337,044 ( 0.00%)        else if (u < 0) {
    171,384 ( 0.00%)          assert (v < 0);
    428,460 ( 0.00%)          better = (k < l);
          .                 } else {
    165,660 ( 0.00%)          assert (u > 0);
    165,660 ( 0.00%)          assert (v > 0);
    331,320 ( 0.00%)          assert (!satisfied_is_enough);
    331,320 ( 0.00%)          better = (k > l);
          .                 }
          .           
  1,572,596 ( 0.00%)        if (!better)
    333,136 ( 0.00%)          continue;
          .           
    120,026 ( 0.00%)        best = b;
    120,026 ( 0.00%)        pos = i;
    120,026 ( 0.00%)        u = v;
    180,039 ( 0.00%)        k = l;
          .               }
          .             }
          .           
    391,036 ( 0.00%)    if (!pos)
    206,754 ( 0.00%)      return u;
          .           
    552,846 ( 0.00%)    lits[start] = best;
    552,846 ( 0.00%)    lits[pos] = a;
          .           
    552,846 ( 0.00%)    LOG ("new smallest literal %s at %u swapped with %s at %u", LOGLIT (best),
          .                  pos, LOGLIT (a), start);
          .           #ifndef LOGGING
          .             (void) solver;
          .           #endif
     92,141 ( 0.00%)    return u;
 47,498,616 ( 0.02%)  }
          .           
          .           #ifdef INLINE_SORT
          .           static inline
          .           #endif
          .               void
          .               kissat_sort_literals (kissat *solver,
          .           #ifdef INLINE_SORT
          .                                     const value *const values,
          .                                     const assigned *assigned,
          .           #endif
 63,462,223 ( 0.03%)                            unsigned size, unsigned *lits) {
          .           #ifndef INLINE_SORT
    550,923 ( 0.00%)    const value *const values = solver->values;
    550,923 ( 0.00%)    const assigned *const assigned = solver->assigned;
          .           #endif
103,424,529 ( 0.04%)    value u = move_smallest_literal_to_front (solver, values, assigned, false,
293,476,474 ( 0.12%)  => build/../src/sort.c:move_smallest_literal_to_front (7,955,733x)
          .                                                       0, size, lits);
 15,911,466 ( 0.01%)    if (size > 2)
118,157,085 ( 0.05%)      move_smallest_literal_to_front (solver, values, assigned, (u >= 0), 1,
276,302,501 ( 0.12%)  => build/../src/sort.c:move_smallest_literal_to_front (7,877,139x)
          .                                               size, lits);
 23,867,199 ( 0.01%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/kitten.c
--------------------------------------------------------------------------------
Ir                   

-- line 269 ----------------------------------------
          .           
          .           #ifdef STAND_ALONE_KITTEN
          .             statistics statistics;
          .           #endif
          .           };
          .           
          .           /*------------------------------------------------------------------------*/
          .           
 18,672,477 ( 0.01%)  static inline bool is_core_klause (klause *c) {
 31,120,795 ( 0.01%)    return c->flags & CORE_FLAG;
 12,448,318 ( 0.01%)  }
          .           
 23,130,528 ( 0.01%)  static inline bool is_learned_klause (klause *c) {
 38,550,880 ( 0.02%)    return c->flags & LEARNED_FLAG;
 15,420,352 ( 0.01%)  }
          .           
  8,922,072 ( 0.00%)  static inline void set_core_klause (klause *c) { c->flags |= CORE_FLAG; }
          .           
  2,770,548 ( 0.00%)  static inline void unset_core_klause (klause *c) { c->flags &= ~CORE_FLAG; }
          .           
108,545,895 ( 0.05%)  static inline klause *dereference_klause (kitten *kitten, unsigned ref) {
130,255,074 ( 0.06%)    unsigned *res = BEGIN_STACK (kitten->klauses) + ref;
 86,836,716 ( 0.04%)    assert (res < END_STACK (kitten->klauses));
 21,709,179 ( 0.01%)    return (klause *) res;
 43,418,358 ( 0.02%)  }
          .           
          .           #ifdef LOGGING
          .           
          .           static inline unsigned reference_klause (kitten *kitten, const klause *c) {
          .             const unsigned *const begin = BEGIN_STACK (kitten->klauses);
          .             const unsigned *p = (const unsigned *) c;
          .             assert (begin <= p);
          .             assert (p < END_STACK (kitten->klauses));
-- line 301 ----------------------------------------
-- line 421 ----------------------------------------
          .             do { \
          .             } while (0)
          .           #define ROG(...) \
          .             do { \
          .             } while (0)
          .           
          .           #endif
          .           
  9,441,396 ( 0.00%)  static void check_queue (kitten *kitten) {
          .           #ifdef CHECK_KITTEN
          .             const unsigned vars = kitten->lits / 2;
          .             unsigned found = 0, prev = INVALID;
          .             kink *links = kitten->links;
          .             uint64_t stamp = 0;
          .             for (unsigned idx = kitten->queue.first, next; idx != INVALID;
          .                  idx = next) {
          .               kink *link = links + idx;
-- line 437 ----------------------------------------
-- line 463 ----------------------------------------
          .               next = link->next;
          .               const unsigned lit = 2 * idx;
          .               assert (first || values[lit]);
          .               first = false;
          .             }
          .           #else
          .             (void) kitten;
          .           #endif
  7,081,047 ( 0.00%)  }
          .           
 63,748,692 ( 0.03%)  static void update_search (kitten *kitten, unsigned idx) {
 42,499,128 ( 0.02%)    if (kitten->queue.search == idx)
    155,488 ( 0.00%)      return;
 31,407,882 ( 0.01%)    kitten->queue.search = idx;
 52,346,470 ( 0.02%)    LOG ("search updated to %u stamped %" PRIu64, idx,
          .                  kitten->links[idx].stamp);
 21,249,564 ( 0.01%)  }
          .           
 19,033,278 ( 0.01%)  static void enqueue (kitten *kitten, unsigned idx) {
 15,861,065 ( 0.01%)    LOG ("enqueue %u", idx);
  9,516,639 ( 0.00%)    kink *links = kitten->links;
 19,033,278 ( 0.01%)    kink *l = links + idx;
  9,516,639 ( 0.00%)    const unsigned last = kitten->queue.last;
  6,344,426 ( 0.00%)    if (last == INVALID)
    166,860 ( 0.00%)      kitten->queue.first = idx;
          .             else
 21,913,486 ( 0.01%)      links[last].next = idx;
  9,516,639 ( 0.00%)    l->prev = last;
  6,344,426 ( 0.00%)    l->next = INVALID;
  9,516,639 ( 0.00%)    kitten->queue.last = idx;
 22,205,491 ( 0.01%)    l->stamp = kitten->queue.stamp++;
 15,861,065 ( 0.01%)    LOG ("stamp %" PRIu64, l->stamp);
  9,516,639 ( 0.00%)  }
          .           
  8,374,830 ( 0.00%)  static void dequeue (kitten *kitten, unsigned idx) {
  6,979,025 ( 0.00%)    LOG ("dequeue %u", idx);
  4,187,415 ( 0.00%)    kink *links = kitten->links;
  8,374,830 ( 0.00%)    kink *l = links + idx;
  4,187,415 ( 0.00%)    const unsigned prev = l->prev;
  4,187,415 ( 0.00%)    const unsigned next = l->next;
  2,791,610 ( 0.00%)    if (prev == INVALID)
    266,460 ( 0.00%)      kitten->queue.first = next;
          .             else
  9,304,330 ( 0.00%)      links[prev].next = next;
  2,791,610 ( 0.00%)    if (next == INVALID)
     96,585 ( 0.00%)      kitten->queue.last = prev;
          .             else
  9,545,270 ( 0.00%)      links[next].prev = prev;
  4,219,610 ( 0.00%)  }
          .           
 12,434,856 ( 0.01%)  static void init_queue (kitten *kitten, size_t old_vars, size_t new_vars) {
 17,764,080 ( 0.01%)    for (size_t idx = old_vars; idx < new_vars; idx++) {
 14,211,264 ( 0.01%)      assert (!kitten->values[2 * idx]);
  7,105,632 ( 0.00%)      assert (kitten->unassigned < UINT_MAX);
  8,882,040 ( 0.00%)      kitten->unassigned++;
 10,658,448 ( 0.00%)      enqueue (kitten, idx);
 97,577,295 ( 0.04%)  => build/../src/kitten.c:enqueue (1,776,408x)
          .             }
  8,882,040 ( 0.00%)    LOG ("initialized decision queue from %zu to %zu", old_vars, new_vars);
 10,658,448 ( 0.00%)    update_search (kitten, kitten->queue.last);
 35,528,160 ( 0.02%)  => build/../src/kitten.c:update_search (1,776,408x)
  5,329,224 ( 0.00%)    check_queue (kitten);
 12,434,856 ( 0.01%)  => build/../src/kitten.c:check_queue (1,776,408x)
  5,329,224 ( 0.00%)  }
          .           
    166,892 ( 0.00%)  static void initialize_kitten (kitten *kitten) {
     83,446 ( 0.00%)    kitten->queue.first = INVALID;
     83,446 ( 0.00%)    kitten->queue.last = INVALID;
     83,446 ( 0.00%)    kitten->inconsistent = INVALID;
     83,446 ( 0.00%)    kitten->failing = INVALID;
     83,446 ( 0.00%)    kitten->queue.search = INVALID;
     83,446 ( 0.00%)    kitten->limits.ticks = UINT64_MAX;
    292,061 ( 0.00%)    kitten->generator = kitten->initialized++;
    125,169 ( 0.00%)  }
          .           
    208,575 ( 0.00%)  static void clear_kitten (kitten *kitten) {
     41,715 ( 0.00%)    size_t bytes = (char *) &kitten->size - (char *) &kitten->status;
    292,005 ( 0.00%)    memset (&kitten->status, 0, bytes);
    876,015 ( 0.00%)  => ???:0x000000000010c5b0 (41,715x)
          .           #ifdef STAND_ALONE_KITTEN
          .             memset (&kitten->statistics, 0, sizeof (statistics));
          .           #endif
    125,145 ( 0.00%)    initialize_kitten (kitten);
  1,084,590 ( 0.00%)  => build/../src/kitten.c:initialize_kitten (41,715x)
    125,145 ( 0.00%)  }
          .           
          .           #define RESIZE1(P) \
          .             do { \
          .               void *OLD_PTR = (P); \
          .               CALLOC ((P), new_size / 2); \
          .               const size_t BYTES = old_vars * sizeof *(P); \
          .               if (BYTES) \
          .                 memcpy ((P), OLD_PTR, BYTES); \
-- line 550 ----------------------------------------
-- line 562 ----------------------------------------
          .               if (BYTES) \
          .                 memcpy ((P), OLD_PTR, BYTES); \
          .               void *NEW_PTR = (P); \
          .               (P) = OLD_PTR; \
          .               DEALLOC ((P), old_size); \
          .               (P) = NEW_PTR; \
          .             } while (0)
          .           
 10,658,448 ( 0.00%)  static void enlarge_internal (kitten *kitten, size_t new_lits) {
  5,329,224 ( 0.00%)    const size_t old_lits = kitten->lits;
  5,329,224 ( 0.00%)    assert (old_lits < new_lits);
  5,329,224 ( 0.00%)    const size_t old_size = kitten->size;
  5,329,224 ( 0.00%)    const unsigned new_vars = new_lits / 2;
  5,329,224 ( 0.00%)    const unsigned old_vars = old_lits / 2;
  5,329,224 ( 0.00%)    if (old_size < new_lits) {
        422 ( 0.00%)      size_t new_size = old_size ? 2 * old_size : 2;
        316 ( 0.00%)      while (new_size <= new_lits)
          8 ( 0.00%)        new_size *= 2;
        365 ( 0.00%)      LOG ("internal literals resized to %zu from %zu (requested %zu)",
          .                    new_size, old_size, new_lits);
          .           
      3,156 ( 0.00%)      RESIZE1 (kitten->marks);
     24,918 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
      1,366 ( 0.00%)  => ???:0x000000000010c650 (65x)
     13,957 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
      3,156 ( 0.00%)      RESIZE1 (kitten->phases);
     22,903 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
      1,366 ( 0.00%)  => ???:0x000000000010c650 (65x)
     14,021 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
      2,864 ( 0.00%)      RESIZE2 (kitten->values);
     28,293 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
      1,933 ( 0.00%)  => ???:0x000000000010c650 (65x)
     14,209 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
      2,864 ( 0.00%)      RESIZE2 (kitten->failed);
     28,429 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
      1,933 ( 0.00%)  => ???:0x000000000010c650 (65x)
     14,368 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
      3,229 ( 0.00%)      RESIZE1 (kitten->vars);
    105,190 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
      5,197 ( 0.00%)  => ???:0x000000000010c650 (65x)
     14,767 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
      3,229 ( 0.00%)      RESIZE1 (kitten->links);
    190,712 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
     24,176 ( 0.00%)  => ???:0x000000000010c650 (65x)
     15,060 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
      3,156 ( 0.00%)      RESIZE2 (kitten->watches);
    533,112 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (73x)
    170,354 ( 0.00%)  => ???:0x000000000010c650 (65x)
     15,369 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (73x)
          .           
        219 ( 0.00%)      kitten->size = new_size;
          .             }
  5,329,224 ( 0.00%)    kitten->lits = new_lits;
 10,658,448 ( 0.00%)    init_queue (kitten, old_vars, new_vars);
246,795,567 ( 0.10%)  => build/../src/kitten.c:init_queue (1,776,408x)
  8,882,040 ( 0.00%)    LOG ("internal literals activated until %zu literals", new_lits);
  1,776,408 ( 0.00%)    return;
  3,552,816 ( 0.00%)  }
          .           
          .           static const char *status_to_string (int status) {
          .             switch (status) {
          .             case 10:
          .               return "formula satisfied";
          .             case 20:
          .               return "formula inconsistent";
          .             case 21:
-- line 605 ----------------------------------------
-- line 654 ----------------------------------------
          .             kitten *kitten;
          .             CALLOC (kitten, 1);
          .             initialize_kitten (kitten);
          .             return kitten;
          .           }
          .           
          .           #else
          .           
         64 ( 0.00%)  kitten *kitten_embedded (struct kissat *kissat) {
         16 ( 0.00%)    if (!kissat)
          .               INVALID_API_USAGE ("'kissat' argument zero");
          .           
          .             kitten *kitten;
          .             struct kitten dummy;
         16 ( 0.00%)    dummy.kissat = kissat;
         16 ( 0.00%)    kitten = &dummy;
         56 ( 0.00%)    CALLOC (kitten, 1);
      2,576 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (8x)
         24 ( 0.00%)    kitten->kissat = kissat;
         24 ( 0.00%)    initialize_kitten (kitten);
        208 ( 0.00%)  => build/../src/kitten.c:initialize_kitten (8x)
          8 ( 0.00%)    return kitten;
         40 ( 0.00%)  }
          .           
          .           #endif
          .           
    250,332 ( 0.00%)  void kitten_track_antecedents (kitten *kitten) {
    250,332 ( 0.00%)    REQUIRE_STATUS (0);
          .           
    166,888 ( 0.00%)    if (kitten->learned)
          .               INVALID_API_USAGE ("can not start tracking antecedents after learning");
          .           
    208,610 ( 0.00%)    LOG ("enabling antecedents tracking");
     83,444 ( 0.00%)    kitten->antecedents = true;
    166,888 ( 0.00%)  }
          .           
    296,380 ( 0.00%)  void kitten_randomize_phases (kitten *kitten) {
    118,552 ( 0.00%)    REQUIRE_INITIALIZED ();
          .           
    296,380 ( 0.00%)    LOG ("randomizing phases");
          .           
    177,828 ( 0.00%)    unsigned char *phases = kitten->phases;
    237,104 ( 0.00%)    const unsigned vars = kitten->size / 2;
          .           
    296,380 ( 0.00%)    uint64_t random = kissat_next_random64 (&kitten->generator);
  1,126,244 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_next_random64 (59,276x)
          .           
     59,276 ( 0.00%)    unsigned i = 0;
    177,828 ( 0.00%)    const unsigned rest = vars & ~63u;
          .           
  1,606,988 ( 0.00%)    while (i != rest) {
  1,826,512 ( 0.00%)      uint64_t *p = (uint64_t *) (phases + i);
  2,283,140 ( 0.00%)      p[0] = (random >> 0) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[1] = (random >> 1) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[2] = (random >> 2) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[3] = (random >> 3) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[4] = (random >> 4) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[5] = (random >> 5) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[6] = (random >> 6) & 0x0101010101010101;
  3,653,024 ( 0.00%)      p[7] = (random >> 7) & 0x0101010101010101;
  2,283,140 ( 0.00%)      random = kissat_next_random64 (&kitten->generator);
  8,675,932 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_next_random64 (456,628x)
    456,628 ( 0.00%)      i += 64;
          .             }
          .           
     59,276 ( 0.00%)    unsigned shift = 0;
    237,104 ( 0.00%)    while (i != vars)
          .               phases[i++] = (random >> shift++) & 1;
    237,104 ( 0.00%)  }
          .           
          .           void kitten_flip_phases (kitten *kitten) {
          .             REQUIRE_INITIALIZED ();
          .           
          .             LOG ("flipping phases");
          .           
          .             unsigned char *phases = kitten->phases;
          .             const unsigned vars = kitten->size / 2;
-- line 726 ----------------------------------------
-- line 739 ----------------------------------------
          .           }
          .           
          .           void kitten_no_ticks_limit (kitten *kitten) {
          .             REQUIRE_INITIALIZED ();
          .             LOG ("forcing no ticks limit");
          .             kitten->limits.ticks = UINT64_MAX;
          .           }
          .           
    443,598 ( 0.00%)  void kitten_set_ticks_limit (kitten *kitten, uint64_t delta) {
    147,866 ( 0.00%)    REQUIRE_INITIALIZED ();
    295,732 ( 0.00%)    const uint64_t current = KITTEN_TICKS;
          .             uint64_t limit;
    295,732 ( 0.00%)    if (UINT64_MAX - delta <= current) {
          .               LOG ("forcing unlimited ticks limit");
          .               limit = UINT64_MAX;
          .             } else {
    295,732 ( 0.00%)      limit = current + delta;
    369,665 ( 0.00%)      LOG ("new limit of %" PRIu64 " ticks after %" PRIu64, limit, delta);
          .             }
          .           
    221,799 ( 0.00%)    kitten->limits.ticks = limit;
    221,799 ( 0.00%)  }
          .           
          .           static void shuffle_unsigned_array (kitten *kitten, size_t size,
    225,477 ( 0.00%)                                      unsigned *a) {
    192,799 ( 0.00%)    for (size_t i = 0; i != size; i++) {
     71,424 ( 0.00%)      const size_t j = kissat_pick_random (&kitten->generator, 0, i);
    350,064 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_pick_random (7,936x)
     23,808 ( 0.00%)      if (j == i)
      4,880 ( 0.00%)        continue;
     18,336 ( 0.00%)      const unsigned first = a[i];
     18,336 ( 0.00%)      const unsigned second = a[j];
     18,336 ( 0.00%)      a[i] = second;
     21,392 ( 0.00%)      a[j] = first;
          .             }
    128,844 ( 0.00%)  }
          .           
    193,266 ( 0.00%)  static void shuffle_unsigned_stack (kitten *kitten, unsigneds *stack) {
    257,688 ( 0.00%)    const size_t size = SIZE_STACK (*stack);
     96,633 ( 0.00%)    unsigned *a = BEGIN_STACK (*stack);
    193,266 ( 0.00%)    shuffle_unsigned_array (kitten, size, a);
  1,073,696 ( 0.00%)  => build/../src/kitten.c:shuffle_unsigned_array (32,211x)
     96,633 ( 0.00%)  }
          .           
  9,443,168 ( 0.00%)  static void shuffle_katches_array (kitten *kitten, size_t size, katch *a) {
  8,327,480 ( 0.00%)    for (size_t i = 0; i != size; i++) {
  3,560,310 ( 0.00%)      const size_t j = kissat_pick_random (&kitten->generator, 0, i);
 19,692,747 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_pick_random (395,590x)
  1,186,770 ( 0.00%)      if (j == i)
    212,531 ( 0.00%)        continue;
  1,098,354 ( 0.00%)      const katch first = a[i];
  1,098,354 ( 0.00%)      const katch second = a[j];
  1,098,354 ( 0.00%)      a[i] = second;
  1,281,413 ( 0.00%)      a[j] = first;
          .             }
  5,396,096 ( 0.00%)  }
          .           
  8,094,144 ( 0.00%)  static void shuffle_katches_stack (kitten *kitten, katches *stack) {
 10,792,192 ( 0.00%)    const size_t size = SIZE_STACK (*stack);
  4,047,072 ( 0.00%)    katch *a = BEGIN_STACK (*stack);
  8,094,144 ( 0.00%)    shuffle_katches_array (kitten, size, a);
 52,395,577 ( 0.02%)  => build/../src/kitten.c:shuffle_katches_array (1,349,024x)
  4,047,072 ( 0.00%)  }
          .           
    161,055 ( 0.00%)  static void shuffle_katches (kitten *kitten) {
    161,055 ( 0.00%)    LOG ("shuffling watch lists");
     96,633 ( 0.00%)    const size_t lits = kitten->lits;
  5,557,151 ( 0.00%)    for (size_t lit = 0; lit != lits; lit++)
 21,584,384 ( 0.01%)      shuffle_katches_stack (kitten, &KATCHES (lit));
 87,470,201 ( 0.04%)  => build/../src/kitten.c:shuffle_katches_stack (1,349,024x)
    128,844 ( 0.00%)  }
          .           
    161,055 ( 0.00%)  static void shuffle_queue (kitten *kitten) {
    161,055 ( 0.00%)    LOG ("shuffling variable decision order");
          .           
    128,844 ( 0.00%)    const unsigned vars = kitten->lits / 2;
  2,859,103 ( 0.00%)    for (unsigned i = 0; i != vars; i++) {
  5,396,096 ( 0.00%)      const unsigned idx = kissat_pick_random (&kitten->generator, 0, vars);
 60,031,568 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/random.h:kissat_pick_random (674,512x)
  3,372,560 ( 0.00%)      dequeue (kitten, idx);
 31,509,095 ( 0.01%)  => build/../src/kitten.c:dequeue (674,512x)
  3,372,560 ( 0.00%)      enqueue (kitten, idx);
 37,098,160 ( 0.02%)  => build/../src/kitten.c:enqueue (674,512x)
          .             }
    193,266 ( 0.00%)    update_search (kitten, kitten->queue.last);
    621,988 ( 0.00%)  => build/../src/kitten.c:update_search (32,211x)
     96,633 ( 0.00%)  }
          .           
    161,055 ( 0.00%)  static void shuffle_units (kitten *kitten) {
    161,055 ( 0.00%)    LOG ("shuffling units");
    193,266 ( 0.00%)    shuffle_unsigned_stack (kitten, &kitten->units);
  1,911,182 ( 0.00%)  => build/../src/kitten.c:shuffle_unsigned_stack (32,211x)
     96,633 ( 0.00%)  }
          .           
    193,266 ( 0.00%)  void kitten_shuffle_clauses (kitten *kitten) {
    193,266 ( 0.00%)    REQUIRE_STATUS (0);
     96,633 ( 0.00%)    shuffle_queue (kitten);
145,001,983 ( 0.06%)  => build/../src/kitten.c:shuffle_queue (32,211x)
     96,633 ( 0.00%)    shuffle_katches (kitten);
115,159,323 ( 0.05%)  => build/../src/kitten.c:shuffle_katches (32,211x)
     96,633 ( 0.00%)    shuffle_units (kitten);
  2,523,191 ( 0.00%)  => build/../src/kitten.c:shuffle_units (32,211x)
    128,844 ( 0.00%)  }
          .           
  1,258,652 ( 0.00%)  static inline unsigned *antecedents (klause *c) {
  1,573,315 ( 0.00%)    assert (is_learned_klause (c));
  3,146,630 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (314,663x)
  2,202,641 ( 0.00%)    return c->lits + c->size;
    629,326 ( 0.00%)  }
          .           
          .           static inline void watch_klause (kitten *kitten, unsigned lit, klause *c,
 96,371,268 ( 0.04%)                                   unsigned ref) {
 68,836,620 ( 0.03%)    ROG (ref, "watching %u in", lit);
192,742,536 ( 0.08%)    katches *watches = &KATCHES (lit);
          .             katch katch;
110,138,592 ( 0.05%)    katch.ref = ref;
          .           #ifdef KITTEN_BLIT
 41,301,972 ( 0.02%)    const unsigned size = c->size;
 99,426,312 ( 0.04%)    assert (lit == c->lits[0] || lit == c->lits[1]);
 96,371,268 ( 0.04%)    const unsigned blit = c->lits[0] ^ c->lits[1] ^ lit;
 41,301,972 ( 0.02%)    const bool binary = size == 2;
 27,534,648 ( 0.01%)    assert (size > 1);
 41,301,972 ( 0.02%)    assert (ref < (1u << 31));
 27,534,648 ( 0.01%)    katch.blit = blit;
 96,371,268 ( 0.04%)    katch.binary = binary;
          .           #else
          .             (void) c;
          .           #endif
179,332,504 ( 0.08%)    PUSH_STACK (*watches, katch);
 13,998,763 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (27,484x)
 41,301,972 ( 0.02%)  }
          .           
 14,033,100 ( 0.01%)  static inline void connect_new_klause (kitten *kitten, unsigned ref) {
 14,033,100 ( 0.01%)    ROG (ref, "new");
          .           
 16,839,720 ( 0.01%)    klause *c = dereference_klause (kitten, ref);
 50,519,160 ( 0.02%)  => build/../src/kitten.c:dereference_klause (2,806,620x)
          .           
 11,226,480 ( 0.00%)    if (!c->size) {
    257,688 ( 0.00%)      if (kitten->inconsistent == INVALID) {
    322,110 ( 0.00%)        ROG (ref, "registering inconsistent empty");
    193,266 ( 0.00%)        kitten->inconsistent = ref;
          .               } else
          .                 ROG (ref, "ignoring inconsistent empty");
 10,968,792 ( 0.00%)    } else if (c->size == 1) {
  1,309,615 ( 0.00%)      ROG (ref, "watching unit");
  3,405,321 ( 0.00%)      PUSH_STACK (kitten->units, ref);
      9,145 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (23x)
          .             } else {
 17,361,925 ( 0.01%)      watch_klause (kitten, c->lits[0], c, ref);
204,454,180 ( 0.09%)  => build/../src/kitten.c:watch_klause (2,480,275x)
 17,361,925 ( 0.01%)      watch_klause (kitten, c->lits[1], c, ref);
215,461,062 ( 0.09%)  => build/../src/kitten.c:watch_klause (2,480,275x)
          .             }
  8,746,205 ( 0.00%)  }
          .           
 14,033,100 ( 0.01%)  static unsigned new_reference (kitten *kitten) {
 22,452,960 ( 0.01%)    size_t ref = SIZE_STACK (kitten->klauses);
  8,419,860 ( 0.00%)    if (ref >= INVALID) {
          .           #ifdef STAND_ALONE_KITTEN
          .               die ("maximum number of literals exhausted");
          .           #else
          .               kissat_fatal ("kitten: maximum number of literals exhausted");
          .           #endif
          .             }
  5,613,240 ( 0.00%)    const unsigned res = (unsigned) ref;
  5,613,240 ( 0.00%)    assert (res != INVALID);
 14,033,100 ( 0.01%)    INC (kitten_ticks);
 42,099,300 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_ticks (2,806,620x)
  2,806,620 ( 0.00%)    return res;
  5,613,240 ( 0.00%)  }
          .           
 14,632,020 ( 0.01%)  static void new_original_klause (kitten *kitten, unsigned id) {
  9,754,680 ( 0.00%)    unsigned res = new_reference (kitten);
104,862,810 ( 0.04%)  => build/../src/kitten.c:new_reference (2,438,670x)
 19,509,360 ( 0.01%)    unsigned size = SIZE_STACK (kitten->klause);
  7,316,010 ( 0.00%)    unsigneds *klauses = &kitten->klauses;
 31,702,918 ( 0.01%)    PUSH_STACK (*klauses, id);
     33,735 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (16x)
 31,702,853 ( 0.01%)    PUSH_STACK (*klauses, size);
     52,632 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (11x)
 29,264,300 ( 0.01%)    PUSH_STACK (*klauses, 0);
     47,539 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (20x)
118,609,129 ( 0.05%)    for (all_stack (unsigned, lit, kitten->klause))
174,985,239 ( 0.07%)      PUSH_STACK (*klauses, lit);
    138,836 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (52x)
 12,193,350 ( 0.01%)    connect_new_klause (kitten, res);
548,550,653 ( 0.23%)  => build/../src/kitten.c:connect_new_klause (2,438,670x)
 24,386,700 ( 0.01%)    kitten->end_original_ref = SIZE_STACK (*klauses);
          .           #ifdef STAND_ALONE_KITTEN
          .             kitten->statistics.original++;
          .           #endif
  7,316,010 ( 0.00%)  }
          .           
  1,052,328 ( 0.00%)  static void enlarge_external (kitten *kitten, size_t eidx) {
    526,164 ( 0.00%)    const size_t old_size = kitten->esize;
    526,164 ( 0.00%)    const unsigned old_evars = kitten->evars;
    526,164 ( 0.00%)    assert (old_evars <= eidx);
    526,164 ( 0.00%)    const unsigned new_evars = eidx + 1;
    526,164 ( 0.00%)    if (old_size <= eidx) {
         80 ( 0.00%)      size_t new_size = old_size ? 2 * old_size : 1;
        403 ( 0.00%)      while (new_size <= eidx)
        113 ( 0.00%)        new_size *= 2;
         80 ( 0.00%)      LOG ("external resizing to %zu variables from %zu (requested %u)",
          .                    new_size, old_size, new_evars);
         48 ( 0.00%)      unsigned *old_import = kitten->import;
        144 ( 0.00%)      CALLOC (kitten->import, new_size);
  1,357,037 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_calloc (16x)
         48 ( 0.00%)      const size_t bytes = old_evars * sizeof *kitten->import;
         32 ( 0.00%)      if (bytes)
         56 ( 0.00%)        memcpy (kitten->import, old_import, bytes);
    100,571 ( 0.00%)  => ???:0x000000000010c650 (8x)
        112 ( 0.00%)      DEALLOC (old_import, old_size);
      2,069 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (16x)
         48 ( 0.00%)      kitten->esize = new_size;
          .             }
    526,164 ( 0.00%)    kitten->evars = new_evars;
    876,940 ( 0.00%)    LOG ("external variables enlarged to %u", new_evars);
    526,164 ( 0.00%)  }
          .           
 81,248,844 ( 0.03%)  static unsigned import_literal (kitten *kitten, unsigned elit) {
 40,624,422 ( 0.02%)    const unsigned eidx = elit / 2;
 67,707,370 ( 0.03%)    if (eidx >= kitten->evars)
    876,940 ( 0.00%)      enlarge_external (kitten, eidx);
  7,073,257 ( 0.00%)  => build/../src/kitten.c:enlarge_external (175,388x)
          .           
 94,790,318 ( 0.04%)    unsigned iidx = kitten->import[eidx];
 27,082,948 ( 0.01%)    if (!iidx) {
 14,211,264 ( 0.01%)      iidx = SIZE_STACK (kitten->export);
 23,094,326 ( 0.01%)      PUSH_STACK (kitten->export, eidx);
     53,341 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (73x)
 15,987,672 ( 0.01%)      kitten->import[eidx] = iidx + 1;
          .             } else
 11,765,066 ( 0.00%)      iidx--;
 81,248,844 ( 0.03%)    unsigned ilit = 2 * iidx + (elit & 1);
 67,707,370 ( 0.03%)    LOG ("imported external literal %u as internal literal %u", elit, ilit);
 67,707,370 ( 0.03%)    const size_t new_lits = (ilit | 1) + (size_t) 1;
 40,624,422 ( 0.02%)    assert (ilit < new_lits);
 94,790,318 ( 0.04%)    assert (ilit / 2 < new_lits / 2);
 54,165,896 ( 0.02%)    if (new_lits > kitten->lits)
  8,882,040 ( 0.00%)      enlarge_internal (kitten, new_lits);
320,892,912 ( 0.14%)  => build/../src/kitten.c:enlarge_internal (1,776,408x)
 13,541,474 ( 0.01%)    return ilit;
 27,082,948 ( 0.01%)  }
          .           
    408,150 ( 0.00%)  static unsigned export_literal (kitten *kitten, unsigned ilit) {
    204,075 ( 0.00%)    const unsigned iidx = ilit / 2;
    680,250 ( 0.00%)    assert (iidx < SIZE_STACK (kitten->export));
  1,156,425 ( 0.00%)    const unsigned eidx = PEEK_STACK (kitten->export, iidx);
    408,150 ( 0.00%)    const unsigned elit = 2 * eidx + (ilit & 1);
     68,025 ( 0.00%)    return elit;
    136,050 ( 0.00%)  }
          .           
  1,839,750 ( 0.00%)  unsigned new_learned_klause (kitten *kitten) {
  1,471,800 ( 0.00%)    unsigned res = new_reference (kitten);
 15,821,850 ( 0.01%)  => build/../src/kitten.c:new_reference (367,950x)
  1,103,850 ( 0.00%)    unsigneds *klauses = &kitten->klauses;
  2,943,600 ( 0.00%)    const size_t size = SIZE_STACK (kitten->klause);
  1,103,850 ( 0.00%)    assert (size <= UINT_MAX);
    367,950 ( 0.00%)    const size_t aux =
  4,415,400 ( 0.00%)        kitten->antecedents ? SIZE_STACK (kitten->resolved) : 0;
  1,103,850 ( 0.00%)    assert (aux <= UINT_MAX);
  4,783,350 ( 0.00%)    PUSH_STACK (*klauses, (unsigned) aux);
  4,783,350 ( 0.00%)    PUSH_STACK (*klauses, (unsigned) size);
  4,415,400 ( 0.00%)    PUSH_STACK (*klauses, LEARNED_FLAG);
  7,811,684 ( 0.00%)    for (all_stack (unsigned, lit, kitten->klause))
  7,674,070 ( 0.00%)      PUSH_STACK (*klauses, lit);
      2,977 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
    735,900 ( 0.00%)    if (aux)
 10,828,957 ( 0.00%)      for (all_stack (unsigned, ref, kitten->resolved))
 13,277,633 ( 0.01%)        PUSH_STACK (*klauses, ref);
    173,174 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (5x)
  1,839,750 ( 0.00%)    connect_new_klause (kitten, res);
 37,952,141 ( 0.02%)  => build/../src/kitten.c:connect_new_klause (367,950x)
    735,900 ( 0.00%)    kitten->learned = true;
          .           #ifdef STAND_ALONE_KITTEN
          .             kitten->statistics.learned++;
          .           #endif
    367,950 ( 0.00%)    return res;
    735,900 ( 0.00%)  }
          .           
    208,575 ( 0.00%)  void kitten_clear (kitten *kitten) {
    208,575 ( 0.00%)    LOG ("clear kitten of size %zu", kitten->size);
          .           
    250,290 ( 0.00%)    assert (EMPTY_STACK (kitten->analyzed));
    250,290 ( 0.00%)    assert (EMPTY_STACK (kitten->klause));
    250,290 ( 0.00%)    assert (EMPTY_STACK (kitten->eclause));
    250,290 ( 0.00%)    assert (EMPTY_STACK (kitten->resolved));
          .           
    166,860 ( 0.00%)    CLEAR_STACK (kitten->assumptions);
    166,860 ( 0.00%)    CLEAR_STACK (kitten->core);
    166,860 ( 0.00%)    CLEAR_STACK (kitten->klause);
    166,860 ( 0.00%)    CLEAR_STACK (kitten->klauses);
    166,860 ( 0.00%)    CLEAR_STACK (kitten->trail);
    166,860 ( 0.00%)    CLEAR_STACK (kitten->units);
          .           
 14,538,144 ( 0.01%)    for (all_kits (kit))
 92,328,756 ( 0.04%)      CLEAR_STACK (KATCHES (kit));
          .           
 10,945,323 ( 0.00%)    while (!EMPTY_STACK (kitten->export))
 35,511,060 ( 0.02%)      kitten->import[POP_STACK (kitten->export)] = 0;
          .           
    125,145 ( 0.00%)    const size_t lits = kitten->size;
    125,145 ( 0.00%)    const unsigned vars = lits / 2;
          .           
          .           #ifndef NDEBUG
 85,218,895 ( 0.04%)    for (unsigned i = 0; i < vars; i++)
148,768,060 ( 0.06%)      assert (!kitten->marks[i]);
          .           #endif
          .           
     83,430 ( 0.00%)    if (vars) {
    250,284 ( 0.00%)      memset (kitten->phases, 0, vars);
  1,848,539 ( 0.00%)  => ???:0x000000000010c5b0 (41,714x)
    250,284 ( 0.00%)      memset (kitten->vars, 0, vars);
  1,848,539 ( 0.00%)  => ???:0x000000000010c5b0 (41,714x)
          .             }
          .           
     83,430 ( 0.00%)    if (lits) {
    250,284 ( 0.00%)      memset (kitten->values, 0, lits);
 26,271,774 ( 0.01%)  => ???:0x000000000010c5b0 (41,714x)
    250,284 ( 0.00%)      memset (kitten->failed, 0, lits);
 26,275,967 ( 0.01%)  => ???:0x000000000010c5b0 (41,714x)
          .             }
          .           
    125,145 ( 0.00%)    clear_kitten (kitten);
  2,753,190 ( 0.00%)  => build/../src/kitten.c:clear_kitten (41,715x)
    125,145 ( 0.00%)  }
          .           
         40 ( 0.00%)  void kitten_release (kitten *kitten) {
        200 ( 0.00%)    RELEASE_STACK (kitten->analyzed);
      1,881 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->assumptions);
      1,386 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->core);
      1,886 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->eclause);
      1,787 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->export);
      2,051 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->klause);
      1,931 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->klauses);
     98,449 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->resolved);
      1,961 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->trail);
      2,071 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
        200 ( 0.00%)    RELEASE_STACK (kitten->units);
      1,645 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
          .           
     53,808 ( 0.00%)    for (size_t lit = 0; lit < kitten->size; lit++)
    709,632 ( 0.00%)      RELEASE_STACK (kitten->watches[lit]);
  1,582,456 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (10,752x)
          .           
          .           #ifndef STAND_ALONE_KITTEN
         24 ( 0.00%)    const size_t lits = kitten->size;
         24 ( 0.00%)    const unsigned vars = lits / 2;
          .           #endif
         64 ( 0.00%)    DEALLOC (kitten->marks, vars);
      1,878 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         64 ( 0.00%)    DEALLOC (kitten->phases, vars);
      1,878 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         64 ( 0.00%)    DEALLOC (kitten->values, lits);
      1,968 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         64 ( 0.00%)    DEALLOC (kitten->failed, lits);
      1,962 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         64 ( 0.00%)    DEALLOC (kitten->vars, vars);
      2,048 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         64 ( 0.00%)    DEALLOC (kitten->links, vars);
      1,949 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         64 ( 0.00%)    DEALLOC (kitten->watches, lits);
    140,035 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
         72 ( 0.00%)    DEALLOC (kitten->import, kitten->esize);
     51,295 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_dealloc (8x)
          .           #ifdef STAND_ALONE_KITTEN
          .             free (kitten);
          .           #else
         56 ( 0.00%)    kissat_free (kitten->kissat, kitten, sizeof *kitten);
      1,608 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/allocate.c:kissat_free (8x)
          .           #endif
         24 ( 0.00%)  }
          .           
  3,621,440 ( 0.00%)  static inline void move_to_front (kitten *kitten, unsigned idx) {
  2,897,152 ( 0.00%)    if (idx == kitten->queue.last)
      2,995 ( 0.00%)      return;
  3,606,465 ( 0.00%)    LOG ("move to front variable %u", idx);
  3,606,465 ( 0.00%)    dequeue (kitten, idx);
 33,797,310 ( 0.01%)  => build/../src/kitten.c:dequeue (721,293x)
  3,606,465 ( 0.00%)    enqueue (kitten, idx);
 39,671,115 ( 0.02%)  => build/../src/kitten.c:enqueue (721,293x)
  6,491,637 ( 0.00%)    assert (kitten->values[2 * idx]);
  1,448,576 ( 0.00%)  }
          .           
 75,809,526 ( 0.03%)  static inline void assign (kitten *kitten, unsigned lit, unsigned reason) {
          .           #ifdef LOGGING
 25,269,842 ( 0.01%)    if (reason == INVALID)
 42,690,210 ( 0.02%)      LOG ("assign %u as decision", lit);
          .             else
 20,484,395 ( 0.01%)      ROG (reason, "assign %u reason", lit);
          .           #endif
 37,904,763 ( 0.02%)    value *values = kitten->values;
 37,904,763 ( 0.02%)    const unsigned not_lit = lit ^ 1;
 75,809,526 ( 0.03%)    assert (!values[lit]);
 75,809,526 ( 0.03%)    assert (!values[not_lit]);
 50,539,684 ( 0.02%)    values[lit] = 1;
 50,539,684 ( 0.02%)    values[not_lit] = -1;
 37,904,763 ( 0.02%)    const unsigned idx = lit / 2;
 37,904,763 ( 0.02%)    const unsigned sign = lit & 1;
 75,809,526 ( 0.03%)    kitten->phases[idx] = sign;
164,254,995 ( 0.07%)    PUSH_STACK (kitten->trail, lit);
     62,024 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (73x)
 75,809,526 ( 0.03%)    kar *v = kitten->vars + idx;
 50,539,684 ( 0.02%)    v->level = kitten->level;
 50,539,684 ( 0.02%)    if (!v->level) {
    537,028 ( 0.00%)      assert (reason != INVALID);
  1,611,084 ( 0.00%)      klause *c = dereference_klause (kitten, reason);
  4,833,252 ( 0.00%)  => build/../src/kitten.c:dereference_klause (268,514x)
  1,074,056 ( 0.00%)      if (c->size > 1) {
    575,372 ( 0.00%)        if (kitten->antecedents) {
  1,869,973 ( 0.00%)          PUSH_STACK (kitten->resolved, reason);
        279 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
  4,599,021 ( 0.00%)          for (all_literals_in_klause (other, c))
  1,251,229 ( 0.00%)            if (other != lit) {
    614,775 ( 0.00%)              const unsigned other_idx = other / 2;
  1,434,475 ( 0.00%)              const unsigned other_ref = kitten->vars[other_idx].reason;
    409,850 ( 0.00%)              assert (other_ref != INVALID);
  2,664,081 ( 0.00%)              PUSH_STACK (kitten->resolved, other_ref);
      1,785 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (4x)
          .                     }
          .                 }
  1,869,959 ( 0.00%)        PUSH_STACK (kitten->klause, lit);
    575,372 ( 0.00%)        reason = new_learned_klause (kitten);
 41,064,220 ( 0.02%)  => build/../src/kitten.c:new_learned_klause (143,843x)
    575,372 ( 0.00%)        CLEAR_STACK (kitten->resolved);
    575,372 ( 0.00%)        CLEAR_STACK (kitten->klause);
          .               }
          .             }
 37,904,763 ( 0.02%)    v->reason = reason;
 50,539,684 ( 0.02%)    assert (kitten->unassigned);
 63,174,605 ( 0.03%)    kitten->unassigned--;
 37,904,763 ( 0.02%)  }
          .           
 61,690,835 ( 0.03%)  static inline unsigned propagate_literal (kitten *kitten, unsigned lit) {
 61,690,835 ( 0.03%)    LOG ("propagating %u", lit);
 37,014,501 ( 0.02%)    value *values = kitten->values;
 74,029,002 ( 0.03%)    assert (values[lit] > 0);
 37,014,501 ( 0.02%)    const unsigned not_lit = lit ^ 1;
111,043,503 ( 0.05%)    katches *watches = kitten->watches + not_lit;
 12,338,167 ( 0.01%)    unsigned conflict = INVALID;
 37,014,501 ( 0.02%)    katch *q = BEGIN_STACK (*watches);
 37,014,501 ( 0.02%)    const katch *const end_watches = END_STACK (*watches);
 24,676,334 ( 0.01%)    katch const *p = q;
 61,690,835 ( 0.03%)    uint64_t ticks = (((char *) end_watches - (char *) q) >> 7) + 1;
119,439,997 ( 0.05%)    while (p != end_watches) {
235,850,690 ( 0.10%)      katch katch = *q++ = *p++;
 70,755,207 ( 0.03%)      const unsigned ref = katch.ref;
          .           #ifdef KITTEN_BLIT
 47,170,138 ( 0.02%)      const unsigned blit = katch.blit;
 70,755,207 ( 0.03%)      assert (blit != not_lit);
117,925,345 ( 0.05%)      const value blit_value = values[blit];
 47,170,138 ( 0.02%)      if (blit_value > 0)
  8,739,758 ( 0.00%)        continue;
 59,381,244 ( 0.03%)      if (katch.binary) {
  2,675,278 ( 0.00%)        if (blit_value < 0) {
    512,380 ( 0.00%)          ROG (ref, "conflict");
    512,380 ( 0.00%)          INC (kitten_conflicts);
  1,537,140 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_conflicts (102,476x)
    204,952 ( 0.00%)          conflict = ref;
    102,476 ( 0.00%)          break;
          .                 } else {
  2,470,326 ( 0.00%)          assert (!blit_value);
  7,410,978 ( 0.00%)          assign (kitten, blit, ref);
154,111,793 ( 0.07%)  => build/../src/kitten.c:assign (1,235,163x)
  1,235,163 ( 0.00%)          continue;
          .                 }
          .               }
          .           #endif
 81,046,032 ( 0.03%)      klause *c = dereference_klause (kitten, ref);
243,138,096 ( 0.10%)  => build/../src/kitten.c:dereference_klause (13,507,672x)
 54,030,688 ( 0.02%)      assert (c->size > 1);
 40,523,016 ( 0.02%)      unsigned *lits = c->lits;
108,061,376 ( 0.05%)      const unsigned other = lits[0] ^ lits[1] ^ not_lit;
 67,538,360 ( 0.03%)      const value other_value = values[other];
 13,507,672 ( 0.01%)      ticks++;
 27,015,344 ( 0.01%)      if (other_value > 0) {
          .           #ifdef KITTEN_BLIT
 10,626,556 ( 0.00%)        q[-1].blit = other;
          .           #endif
  2,656,639 ( 0.00%)        continue;
          .               }
 10,851,033 ( 0.00%)      value replacement_value = -1;
 10,851,033 ( 0.00%)      unsigned replacement = INVALID;
 75,957,231 ( 0.03%)      const unsigned *const end_lits = lits + c->size;
          .               unsigned *r;
115,080,695 ( 0.05%)      for (r = lits + 2; r != end_lits; r++) {
 51,524,892 ( 0.02%)        replacement = *r;
 85,874,820 ( 0.04%)        replacement_value = values[replacement];
 34,349,928 ( 0.01%)        if (replacement_value >= 0)
  8,085,485 ( 0.00%)          break;
          .               }
 21,702,066 ( 0.01%)      if (replacement_value >= 0) {
 16,170,970 ( 0.01%)        assert (replacement != INVALID);
 40,427,425 ( 0.02%)        ROG (ref, "unwatching %u in", not_lit);
 24,256,455 ( 0.01%)        lits[0] = other;
 32,341,940 ( 0.01%)        lits[1] = replacement;
 24,256,455 ( 0.01%)        *r = not_lit;
 48,512,910 ( 0.02%)        watch_klause (kitten, replacement, c, ref);
692,903,528 ( 0.29%)  => build/../src/kitten.c:watch_klause (8,085,485x)
 16,170,970 ( 0.01%)        q--;
  5,531,096 ( 0.00%)      } else if (other_value < 0) {
    600,750 ( 0.00%)        ROG (ref, "conflict");
    600,750 ( 0.00%)        INC (kitten_conflicts);
  1,802,250 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_conflicts (120,150x)
    240,300 ( 0.00%)        conflict = ref;
    120,150 ( 0.00%)        break;
          .               } else {
  5,290,796 ( 0.00%)        assert (!other_value);
 18,517,786 ( 0.01%)        assign (kitten, other, ref);
258,764,186 ( 0.11%)  => build/../src/kitten.c:assign (2,645,398x)
          .               }
          .             }
 49,803,817 ( 0.02%)    while (p != end_watches)
  1,203,064 ( 0.00%)      *q++ = *p++;
157,506,543 ( 0.07%)    SET_END_OF_STACK (*watches, q);
 86,367,169 ( 0.04%)    ADD (kitten_ticks, ticks);
246,763,340 ( 0.10%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_kitten_ticks (12,338,167x)
 12,338,167 ( 0.01%)    return conflict;
 24,676,334 ( 0.01%)  }
          .           
 35,525,760 ( 0.02%)  static inline unsigned propagate (kitten *kitten) {
 35,525,760 ( 0.02%)    assert (kitten->inconsistent == INVALID);
  8,881,440 ( 0.00%)    unsigned propagated = 0;
  8,881,440 ( 0.00%)    unsigned conflict = INVALID;
 93,314,616 ( 0.04%)    while (conflict == INVALID &&
209,969,810 ( 0.09%)           kitten->propagated < SIZE_STACK (kitten->trail)) {
259,101,507 ( 0.11%)      const unsigned lit = PEEK_STACK (kitten->trail, kitten->propagated);
 74,029,002 ( 0.03%)      conflict = propagate_literal (kitten, lit);
4,330,766,218 ( 1.83%)  => build/../src/kitten.c:propagate_literal (12,338,167x)
 61,690,835 ( 0.03%)      kitten->propagated++;
 12,338,167 ( 0.01%)      propagated++;
          .             }
 62,170,080 ( 0.03%)    ADD (kitten_propagations, propagated);
177,628,800 ( 0.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_kitten_propagations (8,881,440x)
  8,881,440 ( 0.00%)    return conflict;
 17,762,880 ( 0.01%)  }
          .           
    791,375 ( 0.00%)  static void bump (kitten *kitten) {
    474,825 ( 0.00%)    value *marks = kitten->marks;
  7,377,054 ( 0.00%)    for (all_stack (unsigned, idx, kitten->analyzed)) {
  2,897,152 ( 0.00%)      marks[idx] = 0;
  3,621,440 ( 0.00%)      move_to_front (kitten, idx);
 98,749,620 ( 0.04%)  => build/../src/kitten.c:move_to_front (724,288x)
          .             }
    474,825 ( 0.00%)    check_queue (kitten);
  1,107,925 ( 0.00%)  => build/../src/kitten.c:check_queue (158,275x)
    474,825 ( 0.00%)  }
          .           
 67,934,040 ( 0.03%)  static inline void unassign (kitten *kitten, value *values, unsigned lit) {
 33,967,020 ( 0.01%)    const unsigned not_lit = lit ^ 1;
 67,934,040 ( 0.03%)    assert (values[lit]);
 67,934,040 ( 0.03%)    assert (values[not_lit]);
 33,967,020 ( 0.01%)    const unsigned idx = lit / 2;
          .           #ifdef LOGGING
 67,934,040 ( 0.03%)    kar *var = kitten->vars + idx;
 45,289,360 ( 0.02%)    kitten->level = var->level;
 56,611,700 ( 0.02%)    LOG ("unassign %u", lit);
          .           #endif
101,901,060 ( 0.04%)    values[lit] = values[not_lit] = 0;
 90,578,720 ( 0.04%)    assert (kitten->unassigned < kitten->lits / 2);
 56,611,700 ( 0.02%)    kitten->unassigned++;
 33,967,020 ( 0.01%)    kink *links = kitten->links;
 67,934,040 ( 0.03%)    kink *link = links + idx;
135,868,080 ( 0.06%)    if (link->stamp > links[kitten->queue.search].stamp)
  1,615,190 ( 0.00%)      update_search (kitten, idx);
  6,460,760 ( 0.00%)  => build/../src/kitten.c:update_search (323,038x)
 33,967,020 ( 0.01%)  }
          .           
    949,650 ( 0.00%)  static void backtrack (kitten *kitten, unsigned jump) {
    474,825 ( 0.00%)    check_queue (kitten);
  1,107,925 ( 0.00%)  => build/../src/kitten.c:check_queue (158,275x)
    633,100 ( 0.00%)    assert (jump < kitten->level);
    791,375 ( 0.00%)    LOG ("back%s to level %u",
          .                  (kitten->level == jump + 1 ? "tracking" : "jumping"), jump);
    474,825 ( 0.00%)    kar *vars = kitten->vars;
    474,825 ( 0.00%)    value *values = kitten->values;
    474,825 ( 0.00%)    unsigneds *trail = &kitten->trail;
 10,765,152 ( 0.00%)    while (!EMPTY_STACK (*trail)) {
 18,299,039 ( 0.01%)      const unsigned lit = TOP_STACK (*trail);
  4,990,647 ( 0.00%)      const unsigned idx = lit / 2;
  9,981,294 ( 0.00%)      const unsigned level = vars[idx].level;
  4,990,647 ( 0.00%)      if (level == jump)
     68,906 ( 0.00%)        break;
 17,541,073 ( 0.01%)      (void) POP_STACK (*trail);
  9,567,858 ( 0.00%)      unassign (kitten, values, lit);
139,104,530 ( 0.06%)  => build/../src/kitten.c:unassign (1,594,643x)
          .             }
  1,582,750 ( 0.00%)    kitten->propagated = SIZE_STACK (*trail);
    474,825 ( 0.00%)    kitten->level = jump;
    474,825 ( 0.00%)    check_queue (kitten);
  1,107,925 ( 0.00%)  => build/../src/kitten.c:check_queue (158,275x)
    474,825 ( 0.00%)  }
          .           
    272,790 ( 0.00%)  void completely_backtrack_to_root_level (kitten *kitten) {
    163,674 ( 0.00%)    check_queue (kitten);
    381,906 ( 0.00%)  => build/../src/kitten.c:check_queue (54,558x)
    272,790 ( 0.00%)    LOG ("completely backtracking to level 0");
    163,674 ( 0.00%)    value *values = kitten->values;
    163,674 ( 0.00%)    unsigneds *trail = &kitten->trail;
          .           #ifndef NDEBUG
    163,674 ( 0.00%)    kar *vars = kitten->vars;
          .           #endif
 68,639,459 ( 0.03%)    for (all_stack (unsigned, lit, *trail)) {
 87,549,273 ( 0.04%)      assert (vars[lit / 2].level);
 58,366,182 ( 0.02%)      unassign (kitten, values, lit);
831,370,320 ( 0.35%)  => build/../src/kitten.c:unassign (9,727,697x)
          .             }
    218,232 ( 0.00%)    CLEAR_STACK (*trail);
    109,116 ( 0.00%)    kitten->propagated = 0;
    109,116 ( 0.00%)    kitten->level = 0;
    163,674 ( 0.00%)    check_queue (kitten);
    381,906 ( 0.00%)  => build/../src/kitten.c:check_queue (54,558x)
    163,674 ( 0.00%)  }
          .           
    949,650 ( 0.00%)  static void analyze (kitten *kitten, unsigned conflict) {
    633,100 ( 0.00%)    assert (kitten->level);
    633,100 ( 0.00%)    assert (kitten->inconsistent == INVALID);
    949,650 ( 0.00%)    assert (EMPTY_STACK (kitten->analyzed));
    949,650 ( 0.00%)    assert (EMPTY_STACK (kitten->resolved));
    949,650 ( 0.00%)    assert (EMPTY_STACK (kitten->klause));
  1,899,300 ( 0.00%)    PUSH_STACK (kitten->klause, INVALID);
    316,550 ( 0.00%)    unsigned reason = conflict;
    474,825 ( 0.00%)    value *marks = kitten->marks;
    474,825 ( 0.00%)    const kar *const vars = kitten->vars;
    474,825 ( 0.00%)    const unsigned level = kitten->level;
    474,825 ( 0.00%)    unsigned const *p = END_STACK (kitten->trail);
    474,825 ( 0.00%)    unsigned open = 0, jump = 0, size = 1, uip;
    280,639 ( 0.00%)    for (;;) {
    877,828 ( 0.00%)      assert (reason != INVALID);
  2,633,484 ( 0.00%)      klause *c = dereference_klause (kitten, reason);
  7,900,452 ( 0.00%)  => build/../src/kitten.c:dereference_klause (438,914x)
    877,828 ( 0.00%)      assert (c);
  2,194,570 ( 0.00%)      ROG (reason, "analyzing");
  5,706,316 ( 0.00%)      PUSH_STACK (kitten->resolved, reason);
     13,527 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (31x)
 17,727,787 ( 0.01%)      for (all_literals_in_klause (lit, c)) {
  4,776,033 ( 0.00%)        const unsigned idx = lit / 2;
  9,552,066 ( 0.00%)        if (marks[idx])
    867,723 ( 0.00%)          continue;
  5,070,016 ( 0.00%)        assert (kitten->values[lit] < 0);
  3,621,440 ( 0.00%)        LOG ("analyzed %u", lit);
  2,897,152 ( 0.00%)        marks[idx] = true;
  9,416,374 ( 0.00%)        PUSH_STACK (kitten->analyzed, idx);
     21,468 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (45x)
  3,621,440 ( 0.00%)        const kar *const v = vars + idx;
  2,172,864 ( 0.00%)        const unsigned tmp = v->level;
  2,172,864 ( 0.00%)        if (tmp < level) {
    856,122 ( 0.00%)          if (tmp > jump) {
    208,224 ( 0.00%)            jump = tmp;
    208,224 ( 0.00%)            if (size > 1) {
    686,543 ( 0.00%)              const unsigned other = PEEK_STACK (kitten->klause, 1);
    686,543 ( 0.00%)              POKE_STACK (kitten->klause, 1, lit);
    105,622 ( 0.00%)              lit = other;
          .                     }
          .                   }
  3,709,862 ( 0.00%)          PUSH_STACK (kitten->klause, lit);
    570,748 ( 0.00%)          size++;
          .                 } else
    438,914 ( 0.00%)          open++;
          .               }
          .               unsigned idx;
          .               do {
  2,109,088 ( 0.00%)        assert (BEGIN_STACK (kitten->trail) < p);
  2,109,088 ( 0.00%)        uip = *--p;
  4,745,448 ( 0.00%)      } while (!marks[idx = uip / 2]);
    877,828 ( 0.00%)      assert (open);
  1,316,742 ( 0.00%)      if (!--open)
    158,275 ( 0.00%)        break;
  1,683,834 ( 0.00%)      reason = vars[idx].reason;
          .             }
    474,825 ( 0.00%)    const unsigned not_uip = uip ^ 1;
    791,375 ( 0.00%)    LOG ("first UIP %u jump level %u size %u", not_uip, jump, size);
  1,582,750 ( 0.00%)    POKE_STACK (kitten->klause, 0, not_uip);
    474,825 ( 0.00%)    bump (kitten);
115,969,041 ( 0.05%)  => build/../src/kitten.c:bump (158,275x)
    633,100 ( 0.00%)    CLEAR_STACK (kitten->analyzed);
    633,100 ( 0.00%)    const unsigned learned_ref = new_learned_klause (kitten);
 66,680,500 ( 0.03%)  => build/../src/kitten.c:new_learned_klause (158,275x)
    633,100 ( 0.00%)    CLEAR_STACK (kitten->resolved);
    633,100 ( 0.00%)    CLEAR_STACK (kitten->klause);
    791,375 ( 0.00%)    backtrack (kitten, jump);
224,805,646 ( 0.10%)  => build/../src/kitten.c:backtrack (158,275x)
    949,650 ( 0.00%)    assign (kitten, not_uip, learned_ref);
 27,140,345 ( 0.01%)  => build/../src/kitten.c:assign (158,275x)
    474,825 ( 0.00%)  }
          .           
     25,425 ( 0.00%)  static void failing (kitten *kitten) {
     20,340 ( 0.00%)    assert (kitten->inconsistent == INVALID);
     30,510 ( 0.00%)    assert (!EMPTY_STACK (kitten->assumptions));
     30,510 ( 0.00%)    assert (EMPTY_STACK (kitten->analyzed));
     30,510 ( 0.00%)    assert (EMPTY_STACK (kitten->resolved));
     30,510 ( 0.00%)    assert (EMPTY_STACK (kitten->klause));
     25,425 ( 0.00%)    LOG ("analyzing failing assumptions");
     15,255 ( 0.00%)    const value *const values = kitten->values;
     15,255 ( 0.00%)    const kar *const vars = kitten->vars;
      5,085 ( 0.00%)    unsigned failed_clashing = INVALID;
      5,085 ( 0.00%)    unsigned first_failed = INVALID;
      5,085 ( 0.00%)    unsigned failed_unit = INVALID;
    120,780 ( 0.00%)    for (all_stack (unsigned, lit, kitten->assumptions)) {
     60,348 ( 0.00%)      if (values[lit] >= 0)
      4,973 ( 0.00%)        continue;
     10,170 ( 0.00%)      if (first_failed == INVALID)
     10,170 ( 0.00%)        first_failed = lit;
     15,255 ( 0.00%)      const unsigned failed_idx = lit / 2;
     25,425 ( 0.00%)      const kar *const failed_var = vars + failed_idx;
     20,340 ( 0.00%)      if (!failed_var->level) {
        238 ( 0.00%)        failed_unit = lit;
        119 ( 0.00%)        break;
          .               }
     29,796 ( 0.00%)      if (failed_clashing == INVALID && failed_var->reason == INVALID)
          .                 failed_clashing = lit;
          .             }
          .             unsigned failed;
     10,170 ( 0.00%)    if (failed_unit != INVALID)
        357 ( 0.00%)      failed = failed_unit;
      9,932 ( 0.00%)    else if (failed_clashing != INVALID)
          .               failed = failed_clashing;
          .             else
      9,932 ( 0.00%)      failed = first_failed;
     10,170 ( 0.00%)    assert (failed != INVALID);
     15,255 ( 0.00%)    const unsigned failed_idx = failed / 2;
     25,425 ( 0.00%)    const kar *const failed_var = vars + failed_idx;
     15,255 ( 0.00%)    const unsigned failed_reason = failed_var->reason;
     25,425 ( 0.00%)    LOG ("first failed assumption %u", failed);
     25,425 ( 0.00%)    kitten->failed[failed] = true;
          .           
     10,170 ( 0.00%)    if (failed_unit != INVALID) {
        952 ( 0.00%)      assert (dereference_klause (kitten, failed_reason)->size == 1);
      2,142 ( 0.00%)  => build/../src/kitten.c:dereference_klause (119x)
        595 ( 0.00%)      LOG ("root-level falsified assumption %u", failed);
        357 ( 0.00%)      kitten->failing = failed_reason;
        595 ( 0.00%)      ROG (kitten->failing, "failing reason");
        238 ( 0.00%)      return;
          .             }
          .           
     14,898 ( 0.00%)    const unsigned not_failed = failed ^ 1;
      9,932 ( 0.00%)    if (failed_clashing != INVALID) {
          .               LOG ("clashing with negated assumption %u", not_failed);
          .               kitten->failed[not_failed] = true;
          .               assert (kitten->failing == INVALID);
          .               return;
          .             }
          .           
     14,898 ( 0.00%)    value *marks = kitten->marks;
     29,796 ( 0.00%)    assert (!marks[failed_idx]);
     19,864 ( 0.00%)    marks[failed_idx] = true;
     64,558 ( 0.00%)    PUSH_STACK (kitten->analyzed, failed_idx);
     64,558 ( 0.00%)    PUSH_STACK (kitten->klause, not_failed);
          .           
    188,946 ( 0.00%)    for (size_t next = 0; next < SIZE_STACK (kitten->analyzed); next++) {
    214,912 ( 0.00%)      const unsigned idx = PEEK_STACK (kitten->analyzed, next);
     80,592 ( 0.00%)      assert (marks[idx]);
     67,160 ( 0.00%)      const kar *var = vars + idx;
     40,296 ( 0.00%)      const unsigned reason = var->reason;
     26,864 ( 0.00%)      if (reason == INVALID) {
     14,898 ( 0.00%)        unsigned lit = 2 * idx;
     29,796 ( 0.00%)        if (values[lit] < 0)
      2,304 ( 0.00%)          lit ^= 1;
     24,830 ( 0.00%)        LOG ("failed assumption %u", lit);
     39,728 ( 0.00%)        assert (!kitten->failed[lit]);
     24,830 ( 0.00%)        kitten->failed[lit] = true;
     14,898 ( 0.00%)        const unsigned not_lit = lit ^ 1;
     69,524 ( 0.00%)        PUSH_STACK (kitten->klause, not_lit);
          .               } else {
     42,330 ( 0.00%)        ROG (reason, "analyzing");
    110,058 ( 0.00%)        PUSH_STACK (kitten->resolved, reason);
     50,796 ( 0.00%)        klause *c = dereference_klause (kitten, reason);
    152,388 ( 0.00%)  => build/../src/kitten.c:dereference_klause (8,466x)
    258,100 ( 0.00%)        for (all_literals_in_klause (other, c)) {
     56,190 ( 0.00%)          const unsigned other_idx = other / 2;
     56,190 ( 0.00%)          if (other_idx == idx)
      8,466 ( 0.00%)            continue;
     61,584 ( 0.00%)          if (marks[other_idx])
      1,798 ( 0.00%)            continue;
     33,864 ( 0.00%)          marks[other_idx] = true;
    110,058 ( 0.00%)          PUSH_STACK (kitten->analyzed, other_idx);
     42,330 ( 0.00%)          LOG ("analyzing final literal %u", other ^ 1);
          .                 }
          .               }
          .             }
          .           
    143,684 ( 0.00%)    for (all_stack (unsigned, idx, kitten->analyzed))
    134,320 ( 0.00%)      assert (marks[idx]), marks[idx] = 0;
     19,864 ( 0.00%)    CLEAR_STACK (kitten->analyzed);
          .           
     39,728 ( 0.00%)    const size_t resolved = SIZE_STACK (kitten->resolved);
      9,932 ( 0.00%)    assert (resolved);
          .           
      9,932 ( 0.00%)    if (resolved == 1) {
     39,116 ( 0.00%)      kitten->failing = PEEK_STACK (kitten->resolved, 0);
     17,780 ( 0.00%)      ROG (kitten->failing, "reusing as core");
          .             } else {
      7,050 ( 0.00%)      kitten->failing = new_learned_klause (kitten);
    699,204 ( 0.00%)  => build/../src/kitten.c:new_learned_klause (1,410x)
      7,050 ( 0.00%)      ROG (kitten->failing, "new core");
          .             }
          .           
     19,864 ( 0.00%)    CLEAR_STACK (kitten->resolved);
     24,830 ( 0.00%)    CLEAR_STACK (kitten->klause);
     10,170 ( 0.00%)  }
          .           
    244,350 ( 0.00%)  static void flush_trail (kitten *kitten) {
    146,610 ( 0.00%)    unsigneds *trail = &kitten->trail;
    244,350 ( 0.00%)    LOG ("flushing %zu root-level literals from trail", SIZE_STACK (*trail));
    195,480 ( 0.00%)    assert (!kitten->level);
     97,740 ( 0.00%)    kitten->propagated = 0;
    195,480 ( 0.00%)    CLEAR_STACK (*trail);
    146,610 ( 0.00%)  }
          .           
 43,011,080 ( 0.02%)  static int decide (kitten *kitten) {
 35,330,122 ( 0.01%)    if (!kitten->level && !EMPTY_STACK (kitten->trail))
    146,610 ( 0.00%)      flush_trail (kitten);
  1,270,620 ( 0.00%)  => build/../src/kitten.c:flush_trail (48,870x)
          .           
 25,806,648 ( 0.01%)    const value *const values = kitten->values;
  8,602,216 ( 0.00%)    unsigned decision = INVALID;
 68,817,728 ( 0.03%)    const size_t assumptions = SIZE_STACK (kitten->assumptions);
 60,133,333 ( 0.03%)    while (kitten->level < assumptions) {
  1,726,641 ( 0.00%)      unsigned assumption = PEEK_STACK (kitten->assumptions, kitten->level);
    411,105 ( 0.00%)      value value = values[assumption];
    164,442 ( 0.00%)      if (value < 0) {
     25,425 ( 0.00%)        LOG ("found failing assumption %u", assumption);
     15,255 ( 0.00%)        failing (kitten);
  3,923,762 ( 0.00%)  => build/../src/kitten.c:failing (5,085x)
     10,170 ( 0.00%)        return 20;
    154,272 ( 0.00%)      } else if (value > 0) {
          .           
         35 ( 0.00%)        kitten->level++;
         35 ( 0.00%)        LOG ("pseudo decision level %u for already satisfied assumption %u",
          .                      kitten->level, assumption);
          .               } else {
    154,258 ( 0.00%)        decision = assumption;
    385,645 ( 0.00%)        LOG ("using assumption %u as decision", decision);
     77,129 ( 0.00%)        break;
          .               }
          .             }
          .           
 34,388,524 ( 0.01%)    if (!kitten->unassigned)
    118,164 ( 0.00%)      return 10;
          .           
 59,766,343 ( 0.03%)    if (KITTEN_TICKS >= kitten->limits.ticks) {
         35 ( 0.00%)      LOG ("ticks limit %" PRIu64 " hit after %" PRIu64 " ticks",
          .                    kitten->limits.ticks, KITTEN_TICKS);
         14 ( 0.00%)      return -1;
          .             }
          .           
          .           #ifndef STAND_ALONE_KITTEN
102,456,504 ( 0.04%)    if (TERMINATED (kitten_terminated_1))
187,836,924 ( 0.08%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/terminate.h:kissat_terminated (8,538,042x)
          .               return -1;
          .           #endif
          .           
 17,076,084 ( 0.01%)    if (decision == INVALID) {
 25,382,742 ( 0.01%)      unsigned idx = kitten->queue.search;
 25,382,742 ( 0.01%)      const kink *const links = kitten->links;
          .               for (;;) {
 50,943,307 ( 0.02%)        assert (idx != INVALID);
158,411,256 ( 0.07%)        if (!values[2 * idx])
  8,460,914 ( 0.00%)          break;
 79,383,451 ( 0.03%)        idx = links[idx].prev;
          .               }
 42,304,570 ( 0.02%)      update_search (kitten, idx);
168,345,779 ( 0.07%)  => build/../src/kitten.c:update_search (8,460,914x)
 59,226,398 ( 0.03%)      const unsigned phase = kitten->phases[idx];
 42,304,570 ( 0.02%)      decision = 2 * idx + phase;
 42,304,570 ( 0.02%)      LOG ("decision %u variable %u phase %u", decision, idx, phase);
          .             }
 42,690,210 ( 0.02%)    INC (kitten_decisions);
128,070,630 ( 0.05%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_decisions (8,538,042x)
 42,690,210 ( 0.02%)    kitten->level++;
 51,228,252 ( 0.02%)    assign (kitten, decision, INVALID);
794,091,023 ( 0.34%)  => build/../src/kitten.c:assign (8,538,042x)
  8,538,042 ( 0.00%)    return 0;
 17,204,432 ( 0.01%)  }
          .           
    386,532 ( 0.00%)  static void inconsistent (kitten *kitten, unsigned ref) {
    128,844 ( 0.00%)    assert (ref != INVALID);
    257,688 ( 0.00%)    assert (kitten->inconsistent == INVALID);
          .           
    322,110 ( 0.00%)    if (!kitten->antecedents) {
          .               kitten->inconsistent = ref;
          .               ROG (ref, "registering inconsistent virtually empty");
          .               return;
          .             }
          .           
    193,266 ( 0.00%)    unsigneds *analyzed = &kitten->analyzed;
    193,266 ( 0.00%)    unsigneds *resolved = &kitten->resolved;
          .           
    386,532 ( 0.00%)    assert (EMPTY_STACK (*analyzed));
    386,532 ( 0.00%)    assert (EMPTY_STACK (*resolved));
          .           
    193,266 ( 0.00%)    value *marks = kitten->marks;
    193,266 ( 0.00%)    const kar *const vars = kitten->vars;
     64,422 ( 0.00%)    unsigned next = 0;
          .           
    164,337 ( 0.00%)    for (;;) {
    457,518 ( 0.00%)      assert (ref != INVALID);
  1,372,554 ( 0.00%)      klause *c = dereference_klause (kitten, ref);
  4,117,662 ( 0.00%)  => build/../src/kitten.c:dereference_klause (228,759x)
    457,518 ( 0.00%)      assert (c);
  1,143,795 ( 0.00%)      ROG (ref, "analyzing inconsistent");
  2,973,867 ( 0.00%)      PUSH_STACK (*resolved, ref);
  5,732,103 ( 0.00%)      for (all_literals_in_klause (lit, c)) {
    986,022 ( 0.00%)        const unsigned idx = lit / 2;
  2,300,718 ( 0.00%)        assert (!vars[idx].level);
  1,972,044 ( 0.00%)        if (marks[idx])
    164,337 ( 0.00%)          continue;
  1,150,359 ( 0.00%)        assert (kitten->values[lit] < 0);
    821,685 ( 0.00%)        LOG ("analyzed %u", lit);
    657,348 ( 0.00%)        marks[idx] = true;
  2,300,732 ( 0.00%)        PUSH_STACK (kitten->analyzed, idx);
        279 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (1x)
          .               }
  2,287,590 ( 0.00%)      if (next == SIZE_STACK (kitten->analyzed))
     64,422 ( 0.00%)        break;
  2,793,729 ( 0.00%)      const unsigned idx = PEEK_STACK (kitten->analyzed, next);
    164,337 ( 0.00%)      next++;
    821,685 ( 0.00%)      const kar *const v = vars + idx;
    657,348 ( 0.00%)      assert (!v->level);
    493,011 ( 0.00%)      ref = v->reason;
          .             }
    386,532 ( 0.00%)    assert (EMPTY_STACK (kitten->klause));
    257,688 ( 0.00%)    ref = new_learned_klause (kitten);
 17,846,112 ( 0.01%)  => build/../src/kitten.c:new_learned_klause (64,422x)
    322,110 ( 0.00%)    ROG (ref, "registering final inconsistent empty");
    193,266 ( 0.00%)    kitten->inconsistent = ref;
          .           
  1,958,916 ( 0.00%)    for (all_stack (unsigned, idx, *analyzed))
    657,348 ( 0.00%)      marks[idx] = 0;
          .           
    257,688 ( 0.00%)    CLEAR_STACK (*analyzed);
    322,110 ( 0.00%)    CLEAR_STACK (*resolved);
    128,844 ( 0.00%)  }
          .           
    642,980 ( 0.00%)  static int propagate_units (kitten *kitten) {
    514,384 ( 0.00%)    if (kitten->inconsistent != INVALID)
          .               return 20;
          .           
    771,576 ( 0.00%)    if (EMPTY_STACK (kitten->units)) {
    514,960 ( 0.00%)      LOG ("no root level unit clauses");
    205,984 ( 0.00%)      return 0;
          .             }
          .           
    128,020 ( 0.00%)    LOG ("propagating %zu root level unit clauses",
          .                  SIZE_STACK (kitten->units));
          .           
     76,812 ( 0.00%)    const value *const values = kitten->values;
          .           
    950,464 ( 0.00%)    for (size_t next = 0; next < SIZE_STACK (kitten->units); next++) {
  1,094,368 ( 0.00%)      const unsigned ref = PEEK_STACK (kitten->units, next);
    136,796 ( 0.00%)      assert (ref != INVALID);
    410,388 ( 0.00%)      klause *c = dereference_klause (kitten, ref);
  1,231,164 ( 0.00%)  => build/../src/kitten.c:dereference_klause (68,398x)
    273,592 ( 0.00%)      assert (c->size == 1);
    341,990 ( 0.00%)      ROG (ref, "propagating unit");
    205,194 ( 0.00%)      const unsigned unit = c->lits[0];
    341,990 ( 0.00%)      const value value = values[unit];
    136,796 ( 0.00%)      if (value > 0)
     20,568 ( 0.00%)        continue;
    116,228 ( 0.00%)      if (value < 0) {
        355 ( 0.00%)        inconsistent (kitten, ref);
     42,183 ( 0.00%)  => build/../src/kitten.c:inconsistent (71x)
        142 ( 0.00%)        return 20;
          .               }
    348,258 ( 0.00%)      assign (kitten, unit, ref);
  7,139,907 ( 0.00%)  => build/../src/kitten.c:assign (58,043x)
    232,172 ( 0.00%)      const unsigned conflict = propagate (kitten);
 40,387,193 ( 0.02%)  => build/../src/kitten.c:propagate (58,043x)
    116,086 ( 0.00%)      if (conflict == INVALID)
     56,598 ( 0.00%)        continue;
      7,225 ( 0.00%)      inconsistent (kitten, conflict);
  1,585,775 ( 0.00%)  => build/../src/kitten.c:inconsistent (1,445x)
      2,890 ( 0.00%)      return 20;
          .             }
     24,088 ( 0.00%)    return 0;
    257,192 ( 0.00%)  }
          .           
          .           /*------------------------------------------------------------------------*/
          .           
 15,410,972 ( 0.01%)  static klause *begin_klauses (kitten *kitten) {
  7,705,486 ( 0.00%)    return (klause *) BEGIN_STACK (kitten->klauses);
  7,705,486 ( 0.00%)  }
          .           
    257,688 ( 0.00%)  static klause *end_original_klauses (kitten *kitten) {
    257,688 ( 0.00%)    return (klause *) (BEGIN_STACK (kitten->klauses) +
    128,844 ( 0.00%)                       kitten->end_original_ref);
    128,844 ( 0.00%)  }
          .           
 15,153,284 ( 0.01%)  static klause *end_klauses (kitten *kitten) {
  7,576,642 ( 0.00%)    return (klause *) END_STACK (kitten->klauses);
  7,576,642 ( 0.00%)  }
          .           
 22,700,346 ( 0.01%)  static klause *next_klause (kitten *kitten, klause *c) {
 18,916,955 ( 0.01%)    assert (begin_klauses (kitten) <= c);
 30,267,128 ( 0.01%)  => build/../src/kitten.c:begin_klauses (3,783,391x)
 18,916,955 ( 0.01%)    assert (c < end_klauses (kitten));
 30,267,128 ( 0.01%)  => build/../src/kitten.c:end_klauses (3,783,391x)
 30,267,128 ( 0.01%)    unsigned *res = c->lits + c->size;
 34,050,519 ( 0.01%)    if (kitten->antecedents && is_learned_klause (c))
 37,833,910 ( 0.02%)  => build/../src/kitten.c:is_learned_klause (3,783,391x)
    276,815 ( 0.00%)      res += c->aux;
  3,783,391 ( 0.00%)    return (klause *) res;
  7,566,782 ( 0.00%)  }
          .           
          .           /*------------------------------------------------------------------------*/
          .           
     24,650 ( 0.00%)  static void reset_core (kitten *kitten) {
     24,650 ( 0.00%)    LOG ("resetting core clauses");
      4,930 ( 0.00%)    size_t reset = 0;
 24,808,692 ( 0.01%)    for (all_klauses (c))
170,773,591 ( 0.07%)  => build/../src/kitten.c:next_klause (2,749,948x)
     39,440 ( 0.00%)  => build/../src/kitten.c:begin_klauses (4,930x)
     39,440 ( 0.00%)  => build/../src/kitten.c:end_klauses (4,930x)
 13,749,740 ( 0.01%)      if (is_core_klause (c))
 27,499,480 ( 0.01%)  => build/../src/kitten.c:is_core_klause (2,749,948x)
    100,592 ( 0.00%)        unset_core_klause (c), reset++;
    301,776 ( 0.00%)  => build/../src/kitten.c:unset_core_klause (25,148x)
     24,650 ( 0.00%)    LOG ("reset %zu core clauses", reset);
     19,720 ( 0.00%)    CLEAR_STACK (kitten->core);
     14,790 ( 0.00%)  }
          .           
    250,360 ( 0.00%)  static void reset_assumptions (kitten *kitten) {
    250,360 ( 0.00%)    LOG ("reset %zu assumptions", SIZE_STACK (kitten->assumptions));
    732,486 ( 0.00%)    while (!EMPTY_STACK (kitten->assumptions)) {
  1,080,135 ( 0.00%)      const unsigned assumption = POP_STACK (kitten->assumptions);
    360,045 ( 0.00%)      kitten->failed[assumption] = false;
          .             }
          .           #ifndef NDEBUG
247,080,592 ( 0.10%)    for (size_t i = 0; i < kitten->size; i++)
394,848,256 ( 0.17%)      assert (!kitten->failed[i]);
          .           #endif
    200,288 ( 0.00%)    CLEAR_STACK (kitten->assumptions);
    200,288 ( 0.00%)    if (kitten->failing != INVALID) {
     24,650 ( 0.00%)      ROG (kitten->failing, "reset failed assumption reason");
      9,860 ( 0.00%)      kitten->failing = INVALID;
          .             }
    150,216 ( 0.00%)  }
          .           
    328,020 ( 0.00%)  static void reset_incremental (kitten *kitten) {
    218,680 ( 0.00%)    if (kitten->level)
    163,674 ( 0.00%)      completely_backtrack_to_root_level (kitten);
1,048,653,134 ( 0.44%)  => build/../src/kitten.c:completely_backtrack_to_root_level (54,558x)
    328,020 ( 0.00%)    if (!EMPTY_STACK (kitten->assumptions))
    200,264 ( 0.00%)      reset_assumptions (kitten);
645,113,888 ( 0.27%)  => build/../src/kitten.c:reset_assumptions (50,066x)
          .             else
     18,416 ( 0.00%)      assert (kitten->failing == INVALID);
    218,680 ( 0.00%)    if (kitten->status == 21)
     14,790 ( 0.00%)      reset_core (kitten);
237,426,141 ( 0.10%)  => build/../src/kitten.c:reset_core (4,930x)
    601,370 ( 0.00%)    UPDATE_STATUS (0);
    218,680 ( 0.00%)  }
          .           
          .           /*------------------------------------------------------------------------*/
          .           
 14,109,276 ( 0.01%)  static bool flip_literal (kitten *kitten, unsigned lit) {
 11,757,730 ( 0.00%)    INC (kitten_flip);
 35,273,190 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_flip (2,351,546x)
  7,054,638 ( 0.00%)    signed char *values = kitten->values;
 14,109,276 ( 0.01%)    assert (values[lit]);
 23,515,460 ( 0.01%)    if (!kitten->vars[lit / 2].level) {
      1,740 ( 0.00%)      LOG ("can not flip root-level assigned literal %u", lit);
        696 ( 0.00%)      return false;
          .             }
 14,107,188 ( 0.01%)    if (values[lit] < 0)
    487,861 ( 0.00%)      lit ^= 1;
 11,755,990 ( 0.00%)    LOG ("trying to flip value of satisfied literal %u", lit);
 14,107,188 ( 0.01%)    assert (values[lit] > 0);
 21,160,782 ( 0.01%)    katches *watches = kitten->watches + lit;
  7,053,594 ( 0.00%)    katch *q = BEGIN_STACK (*watches);
  7,053,594 ( 0.00%)    const katch *const end_watches = END_STACK (*watches);
  4,702,396 ( 0.00%)    katch const *p = q;
 11,755,990 ( 0.00%)    uint64_t ticks = (((char *) end_watches - (char *) q) >> 7) + 1;
  2,351,198 ( 0.00%)    bool res = true;
 15,312,389 ( 0.01%)    while (p != end_watches) {
 32,770,150 ( 0.01%)      const katch katch = *q++ = *p++;
          .           #ifdef KITTEN_BLIT
  6,554,030 ( 0.00%)      const unsigned blit = katch.blit;
  9,831,045 ( 0.00%)      assert (blit != lit);
 16,385,075 ( 0.01%)      const value blit_value = values[blit];
  6,554,030 ( 0.00%)      if (blit_value > 0)
  2,736,554 ( 0.00%)        continue;
          .           #endif
  5,726,214 ( 0.00%)      const unsigned ref = katch.ref;
 11,452,428 ( 0.00%)      klause *c = dereference_klause (kitten, ref);
 34,357,284 ( 0.01%)  => build/../src/kitten.c:dereference_klause (1,908,738x)
  5,726,214 ( 0.00%)      unsigned *lits = c->lits;
 15,269,904 ( 0.01%)      const unsigned other = lits[0] ^ lits[1] ^ lit;
  9,543,690 ( 0.00%)      const value other_value = values[other];
  1,908,738 ( 0.00%)      ticks++;
  3,817,476 ( 0.00%)      if (other_value > 0)
    275,223 ( 0.00%)        continue;
  1,633,515 ( 0.00%)      value replacement_value = -1;
  1,633,515 ( 0.00%)      unsigned replacement = INVALID;
 11,434,605 ( 0.00%)      const unsigned *const end_lits = lits + c->size;
          .               unsigned *r;
 18,432,093 ( 0.01%)      for (r = lits + 2; r != end_lits; r++) {
  5,244,351 ( 0.00%)        replacement = *r;
  5,244,351 ( 0.00%)        assert (replacement != lit);
  8,740,585 ( 0.00%)        replacement_value = values[replacement];
  3,496,234 ( 0.00%)        assert (replacement_value);
  3,496,234 ( 0.00%)        if (replacement_value > 0)
    325,699 ( 0.00%)          break;
          .               }
  3,267,030 ( 0.00%)      if (replacement_value > 0) {
    651,398 ( 0.00%)        assert (replacement != INVALID);
  1,628,495 ( 0.00%)        ROG (ref, "unwatching %u in", lit);
    977,097 ( 0.00%)        lits[0] = other;
  1,302,796 ( 0.00%)        lits[1] = replacement;
    977,097 ( 0.00%)        *r = lit;
  1,954,194 ( 0.00%)        watch_klause (kitten, replacement, c, ref);
 28,213,575 ( 0.01%)  => build/../src/kitten.c:watch_klause (325,699x)
    651,398 ( 0.00%)        q--;
          .               } else {
  2,615,632 ( 0.00%)        assert (replacement_value < 0);
  6,539,080 ( 0.00%)        ROG (ref, "single satisfied");
  2,615,632 ( 0.00%)        res = false;
          .                 break;
          .               }
          .             }
 25,682,976 ( 0.01%)    while (p != end_watches)
 46,896,000 ( 0.02%)      *q++ = *p++;
 28,925,397 ( 0.01%)    SET_END_OF_STACK (*watches, q);
 16,458,386 ( 0.01%)    ADD (kitten_ticks, ticks);
 47,023,960 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_kitten_ticks (2,351,198x)
  4,702,396 ( 0.00%)    if (res) {
  5,216,910 ( 0.00%)      LOG ("flipping value of %u", lit);
  4,173,528 ( 0.00%)      values[lit] = -1;
  3,130,146 ( 0.00%)      const unsigned not_lit = lit ^ 1;
  4,173,528 ( 0.00%)      values[not_lit] = 1;
  6,260,292 ( 0.00%)      INC (kitten_flipped);
 15,650,730 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_flipped (1,043,382x)
          .             } else
  6,539,080 ( 0.00%)      LOG ("failed to flip value of %u", lit);
  2,351,198 ( 0.00%)    return res;
  4,703,092 ( 0.00%)  }
          .           
          .           /*------------------------------------------------------------------------*/
          .           
    486,762 ( 0.00%)  void kitten_assume (kitten *kitten, unsigned elit) {
    162,254 ( 0.00%)    REQUIRE_INITIALIZED ();
    324,508 ( 0.00%)    if (kitten->status)
    164,010 ( 0.00%)      reset_incremental (kitten);
1,933,503,757 ( 0.82%)  => build/../src/kitten.c:reset_incremental (54,670x)
    486,762 ( 0.00%)    const unsigned ilit = import_literal (kitten, elit);
  4,624,239 ( 0.00%)  => build/../src/kitten.c:import_literal (81,127x)
    405,635 ( 0.00%)    LOG ("registering assumption %u", ilit);
  1,054,749 ( 0.00%)    PUSH_STACK (kitten->assumptions, ilit);
      2,051 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (7x)
    243,381 ( 0.00%)  }
          .           
          .           void kitten_clause_with_id_and_exception (kitten *kitten, unsigned id,
          .                                                     size_t size,
          .                                                     const unsigned *elits,
 21,948,030 ( 0.01%)                                            unsigned except) {
  4,877,340 ( 0.00%)    REQUIRE_INITIALIZED ();
  9,754,680 ( 0.00%)    if (kitten->status)
          .               reset_incremental (kitten);
 14,632,020 ( 0.01%)    assert (EMPTY_STACK (kitten->klause));
 12,193,350 ( 0.01%)    const unsigned *const end = elits + size;
 72,262,388 ( 0.03%)    for (const unsigned *p = elits; p != end; p++) {
 43,222,776 ( 0.02%)      const unsigned elit = *p;
 43,222,776 ( 0.02%)      if (elit == except)
    947,245 ( 0.00%)        continue;
 80,762,082 ( 0.03%)      const unsigned ilit = import_literal (kitten, elit);
1,156,535,123 ( 0.49%)  => build/../src/kitten.c:import_literal (13,460,347x)
 67,301,735 ( 0.03%)      assert (ilit < kitten->lits);
 40,381,041 ( 0.02%)      const unsigned iidx = ilit / 2;
 94,222,429 ( 0.04%)      if (kitten->marks[iidx])
          .                 INVALID_API_USAGE ("variable '%u' of literal '%u' occurs twice",
          .                                    elit / 2, elit);
 67,301,735 ( 0.03%)      kitten->marks[iidx] = true;
188,445,572 ( 0.08%)      PUSH_STACK (kitten->klause, ilit);
     24,752 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (51x)
          .             }
 86,811,095 ( 0.04%)    for (unsigned *p = kitten->klause.begin; p != kitten->klause.end; p++)
107,682,776 ( 0.05%)      kitten->marks[*p / 2] = false;
 12,193,350 ( 0.01%)    new_original_klause (kitten, id);
1,135,058,774 ( 0.48%)  => build/../src/kitten.c:new_original_klause (2,438,670x)
  9,754,680 ( 0.00%)    CLEAR_STACK (kitten->klause);
  7,316,010 ( 0.00%)  }
          .           
 10,079,811 ( 0.00%)  void kitten_clause (kitten *kitten, size_t size, unsigned *elits) {
 10,079,811 ( 0.00%)    kitten_clause_with_id_and_exception (kitten, INVALID, size, elits,
1,705,625,240 ( 0.72%)  => build/../src/kitten.c:kitten_clause_with_id_and_exception (1,439,973x)
          .                                                  INVALID);
  4,319,919 ( 0.00%)  }
          .           
          .           void kitten_unit (kitten *kitten, unsigned lit) {
          .             kitten_clause (kitten, 1, &lit);
          .           }
          .           
          .           void kitten_binary (kitten *kitten, unsigned a, unsigned b) {
          .             unsigned clause[2] = {a, b};
          .             kitten_clause (kitten, 2, clause);
          .           }
          .           
          .           #ifdef STAND_ALONE_KITTEN
          .           static volatile bool time_limit_hit;
          .           #endif
          .           
    771,576 ( 0.00%)  int kitten_solve (kitten *kitten) {
    257,192 ( 0.00%)    REQUIRE_INITIALIZED ();
    514,384 ( 0.00%)    if (kitten->status)
          .               reset_incremental (kitten);
    514,384 ( 0.00%)    else if (kitten->level)
          .               completely_backtrack_to_root_level (kitten);
          .           
    642,980 ( 0.00%)    LOG ("starting solving under %zu assumptions",
          .                  SIZE_STACK (kitten->assumptions));
          .           
    642,980 ( 0.00%)    INC (kitten_solved);
  1,928,940 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_solved (128,596x)
          .           
    514,384 ( 0.00%)    int res = propagate_units (kitten);
 58,314,318 ( 0.02%)  => build/../src/kitten.c:propagate_units (128,596x)
 18,032,582 ( 0.01%)    while (!res) {
 35,293,588 ( 0.01%)      const unsigned conflict = propagate (kitten);
5,356,080,562 ( 2.27%)  => build/../src/kitten.c:propagate (8,823,397x)
 17,646,794 ( 0.01%)      if (conflict != INVALID) {
    884,724 ( 0.00%)        if (kitten->level)
    949,650 ( 0.00%)          analyze (kitten, conflict);
555,195,308 ( 0.23%)  => build/../src/kitten.c:analyze (158,275x)
          .                 else {
    314,530 ( 0.00%)          inconsistent (kitten, conflict);
 57,463,380 ( 0.02%)  => build/../src/kitten.c:inconsistent (62,906x)
    125,812 ( 0.00%)          res = 20;
          .                 }
          .               } else
          .           #ifdef STAND_ALONE_KITTEN
          .                   if (time_limit_hit) {
          .                 time_limit_hit = false;
          .                 break;
          .               } else
          .           #endif
 34,408,864 ( 0.01%)        res = decide (kitten);
2,438,772,221 ( 1.03%)  => build/../src/kitten.c:decide (8,602,216x)
          .             }
          .           
    257,192 ( 0.00%)    if (res < 0)
          7 ( 0.00%)      res = 0;
          .           
    257,234 ( 0.00%)    if (!res && !EMPTY_STACK (kitten->assumptions))
         18 ( 0.00%)      reset_assumptions (kitten);
     73,648 ( 0.00%)  => build/../src/kitten.c:reset_assumptions (6x)
          .           
  1,543,152 ( 0.00%)    UPDATE_STATUS (res);
          .           
    257,192 ( 0.00%)    if (res == 10)
    354,492 ( 0.00%)      INC (kitten_sat);
    886,230 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_sat (59,082x)
    139,028 ( 0.00%)    else if (res == 20)
    417,042 ( 0.00%)      INC (kitten_unsat);
  1,042,605 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_unsat (69,507x)
          .             else
         35 ( 0.00%)      INC (kitten_unknown);
        105 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_kitten_unknown (7x)
          .           
    642,980 ( 0.00%)    LOG ("finished solving with result %d", res);
          .           
    128,596 ( 0.00%)    return res;
    385,788 ( 0.00%)  }
          .           
    835,208 ( 0.00%)  int kitten_status (kitten *kitten) { return kitten->status; }
          .           
          .           unsigned kitten_compute_clausal_core (kitten *kitten,
    486,549 ( 0.00%)                                        uint64_t *learned_ptr) {
    417,042 ( 0.00%)    REQUIRE_STATUS (20);
          .           
    347,535 ( 0.00%)    if (!kitten->antecedents)
          .               INVALID_API_USAGE ("antecedents not tracked");
          .           
    347,535 ( 0.00%)    LOG ("computing clausal core");
          .           
    208,521 ( 0.00%)    unsigneds *resolved = &kitten->resolved;
    417,042 ( 0.00%)    assert (EMPTY_STACK (*resolved));
          .           
     69,507 ( 0.00%)    unsigned original = 0;
     69,507 ( 0.00%)    uint64_t learned = 0;
          .           
    208,521 ( 0.00%)    unsigned reason_ref = kitten->inconsistent;
          .           
    139,014 ( 0.00%)    if (reason_ref == INVALID) {
     30,510 ( 0.00%)      assert (!EMPTY_STACK (kitten->assumptions));
     15,255 ( 0.00%)      reason_ref = kitten->failing;
     10,170 ( 0.00%)      if (reason_ref == INVALID) {
          .                 LOG ("assumptions mutually inconsistent");
          .                 goto DONE;
          .               }
          .             }
          .           
    903,591 ( 0.00%)    PUSH_STACK (*resolved, reason_ref);
    208,521 ( 0.00%)    unsigneds *core = &kitten->core;
    417,042 ( 0.00%)    assert (EMPTY_STACK (*core));
          .           
  9,658,470 ( 0.00%)    while (!EMPTY_STACK (*resolved)) {
 23,103,570 ( 0.01%)      const unsigned c_ref = POP_STACK (*resolved);
  3,080,476 ( 0.00%)      if (c_ref == INVALID) {
 11,152,590 ( 0.00%)        const unsigned d_ref = POP_STACK (*resolved);
  3,717,530 ( 0.00%)        ROG (d_ref, "core[%zu]", SIZE_STACK (*core));
  9,666,189 ( 0.00%)        PUSH_STACK (*core, d_ref);
     28,626 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (47x)
  4,461,036 ( 0.00%)        klause *d = dereference_klause (kitten, d_ref);
 13,383,108 ( 0.01%)  => build/../src/kitten.c:dereference_klause (743,506x)
  4,461,036 ( 0.00%)        assert (!is_core_klause (d));
  7,435,060 ( 0.00%)  => build/../src/kitten.c:is_core_klause (743,506x)
  2,230,518 ( 0.00%)        set_core_klause (d);
  8,922,072 ( 0.00%)  => build/../src/kitten.c:set_core_klause (743,506x)
  3,717,530 ( 0.00%)        if (is_learned_klause (d))
  7,435,060 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (743,506x)
    629,326 ( 0.00%)          learned++;
          .                 else
    857,686 ( 0.00%)          original++;
          .               } else {
  4,780,392 ( 0.00%)        klause *c = dereference_klause (kitten, c_ref);
 14,341,176 ( 0.01%)  => build/../src/kitten.c:dereference_klause (796,732x)
  3,983,660 ( 0.00%)        if (is_core_klause (c))
  7,967,320 ( 0.00%)  => build/../src/kitten.c:is_core_klause (796,732x)
     53,226 ( 0.00%)          continue;
  9,665,578 ( 0.00%)        PUSH_STACK (*resolved, c_ref);
  8,922,137 ( 0.00%)        PUSH_STACK (*resolved, INVALID);
      2,921 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (5x)
  3,717,530 ( 0.00%)        ROG (c_ref, "analyzing antecedent core");
  4,461,036 ( 0.00%)        if (!is_learned_klause (c))
  7,435,060 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (743,506x)
    428,843 ( 0.00%)          continue;
 10,841,564 ( 0.00%)        for (all_antecedents (d_ref, c)) {
  8,810,564 ( 0.00%)  => build/../src/kitten.c:antecedents (314,663x)
  5,247,102 ( 0.00%)          klause *d = dereference_klause (kitten, d_ref);
 15,741,306 ( 0.01%)  => build/../src/kitten.c:dereference_klause (874,517x)
  5,974,327 ( 0.00%)          if (!is_core_klause (d))
  8,745,170 ( 0.00%)  => build/../src/kitten.c:is_core_klause (874,517x)
  9,454,016 ( 0.00%)            PUSH_STACK (*resolved, d_ref);
      4,742 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (7x)
          .                 }
          .               }
          .             }
          .           
     69,507 ( 0.00%)  DONE:
          .           
    139,014 ( 0.00%)    if (learned_ptr)
    193,266 ( 0.00%)      *learned_ptr = learned;
          .           
    347,535 ( 0.00%)    LOG ("clausal core of %u original clauses", original);
    347,535 ( 0.00%)    LOG ("clausal core of %" PRIu64 " learned clauses", learned);
          .           #ifdef STAND_ALONE_KITTEN
          .             kitten->statistics.original = original;
          .             kitten->statistics.learned = 0;
          .           #endif
    764,577 ( 0.00%)    UPDATE_STATUS (21);
          .           
     69,507 ( 0.00%)    return original;
    208,521 ( 0.00%)  }
          .           
          .           void kitten_traverse_core_ids (kitten *kitten, void *state,
    257,688 ( 0.00%)                                 void (*traverse) (void *, unsigned)) {
    193,266 ( 0.00%)    REQUIRE_STATUS (21);
          .           
    161,055 ( 0.00%)    LOG ("traversing core of original clauses");
          .           
     32,211 ( 0.00%)    unsigned traversed = 0;
          .           
  2,238,111 ( 0.00%)    for (all_original_klauses (c)) {
 12,755,322 ( 0.01%)  => build/../src/kitten.c:next_klause (205,731x)
    386,532 ( 0.00%)  => build/../src/kitten.c:end_original_klauses (32,211x)
    257,688 ( 0.00%)  => build/../src/kitten.c:begin_klauses (32,211x)
  1,234,386 ( 0.00%)      assert (!is_learned_klause (c));
  2,057,310 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (205,731x)
  1,028,655 ( 0.00%)      if (is_learned_klause (c))
  2,057,310 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (205,731x)
          .                 continue;
  1,234,386 ( 0.00%)      if (!is_core_klause (c))
  2,057,310 ( 0.00%)  => build/../src/kitten.c:is_core_klause (205,731x)
      3,959 ( 0.00%)        continue;
  1,008,860 ( 0.00%)      ROG (reference_klause (kitten, c), "traversing");
  1,412,404 ( 0.00%)      traverse (state, c->aux);
 24,589,294 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/definition.c:traverse_definition_core (201,772x)
    403,544 ( 0.00%)      traversed++;
          .             }
          .           
    161,055 ( 0.00%)    LOG ("traversed %u original core clauses", traversed);
          .             (void) traversed;
          .           
    128,844 ( 0.00%)    assert (kitten->status == 21);
    128,844 ( 0.00%)  }
          .           
          .           void kitten_traverse_core_clauses (kitten *kitten, void *state,
          .                                              void (*traverse) (void *, bool, size_t,
     40,704 ( 0.00%)                                                       const unsigned *)) {
     30,528 ( 0.00%)    REQUIRE_STATUS (21);
          .           
     25,440 ( 0.00%)    LOG ("traversing clausal core");
          .           
      5,088 ( 0.00%)    unsigned traversed = 0;
          .           
    232,971 ( 0.00%)    for (all_stack (unsigned, c_ref, kitten->core)) {
    156,078 ( 0.00%)      klause *c = dereference_klause (kitten, c_ref);
    468,234 ( 0.00%)  => build/../src/kitten.c:dereference_klause (26,013x)
    130,065 ( 0.00%)      assert (is_core_klause (c));
    260,130 ( 0.00%)  => build/../src/kitten.c:is_core_klause (26,013x)
    104,052 ( 0.00%)      const bool learned = is_learned_klause (c);
    260,130 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (26,013x)
     78,039 ( 0.00%)      unsigneds *eclause = &kitten->eclause;
    156,078 ( 0.00%)      assert (EMPTY_STACK (*eclause));
    866,370 ( 0.00%)      for (all_literals_in_klause (ilit, c)) {
    408,150 ( 0.00%)        const unsigned elit = export_literal (kitten, ilit);
  3,061,125 ( 0.00%)  => build/../src/kitten.c:export_literal (68,025x)
    884,787 ( 0.00%)        PUSH_STACK (*eclause, elit);
     13,291 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (33x)
          .               }
    208,104 ( 0.00%)      const size_t size = SIZE_STACK (*eclause);
     78,039 ( 0.00%)      const unsigned *elits = eclause->begin;
    130,065 ( 0.00%)      ROG (reference_klause (kitten, c), "traversing");
    182,091 ( 0.00%)      traverse (state, learned, size, elits);
  3,926,413 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/sweep.c:save_core_clause (25,998x)
     18,333 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/definition.c:traverse_one_sided_core_lemma (15x)
    104,052 ( 0.00%)      CLEAR_STACK (*eclause);
     26,013 ( 0.00%)      traversed++;
          .             }
          .           
     25,440 ( 0.00%)    LOG ("traversed %u core clauses", traversed);
          .             (void) traversed;
          .           
     20,352 ( 0.00%)    assert (kitten->status == 21);
     20,352 ( 0.00%)  }
          .           
    193,266 ( 0.00%)  void kitten_shrink_to_clausal_core (kitten *kitten) {
    193,266 ( 0.00%)    REQUIRE_STATUS (21);
          .           
    161,055 ( 0.00%)    LOG ("shrinking formula to core of original clauses");
          .           
    128,844 ( 0.00%)    CLEAR_STACK (kitten->trail);
          .           
    193,266 ( 0.00%)    kitten->unassigned = kitten->lits / 2;
     64,422 ( 0.00%)    kitten->propagated = 0;
     64,422 ( 0.00%)    kitten->level = 0;
          .           
    193,266 ( 0.00%)    update_search (kitten, kitten->queue.last);
    450,537 ( 0.00%)  => build/../src/kitten.c:update_search (32,211x)
          .           
    225,477 ( 0.00%)    memset (kitten->values, 0, kitten->lits);
    535,380 ( 0.00%)  => ???:0x000000000010c5b0 (32,211x)
          .           
  5,653,784 ( 0.00%)    for (all_kits (lit))
 35,074,624 ( 0.01%)      CLEAR_STACK (KATCHES (lit));
          .           
    128,844 ( 0.00%)    assert (kitten->inconsistent != INVALID);
    225,477 ( 0.00%)    klause *inconsistent = dereference_klause (kitten, kitten->inconsistent);
    579,798 ( 0.00%)  => build/../src/kitten.c:dereference_klause (32,211x)
    161,055 ( 0.00%)    if (is_learned_klause (inconsistent) || inconsistent->size) {
    322,110 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (32,211x)
    161,055 ( 0.00%)      ROG (kitten->inconsistent, "resetting inconsistent");
     96,633 ( 0.00%)      kitten->inconsistent = INVALID;
          .             } else
          .               ROG (kitten->inconsistent, "keeping inconsistent");
          .           
    128,844 ( 0.00%)    CLEAR_STACK (kitten->units);
          .           
    193,266 ( 0.00%)    klause *begin = begin_klauses (kitten), *q = begin;
    257,688 ( 0.00%)  => build/../src/kitten.c:begin_klauses (32,211x)
    128,844 ( 0.00%)    klause const *const end = end_original_klauses (kitten);
    386,532 ( 0.00%)  => build/../src/kitten.c:end_original_klauses (32,211x)
          .           #ifdef LOGGING
     32,211 ( 0.00%)    unsigned original = 0;
          .           #endif
  4,331,826 ( 0.00%)    for (klause *c = begin, *next; c != end; c = next) {
  4,966,272 ( 0.00%)      next = next_klause (kitten, c);
 51,318,144 ( 0.02%)  => build/../src/kitten.c:next_klause (827,712x)
  4,966,272 ( 0.00%)      assert (!is_learned_klause (c));
  8,277,120 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (827,712x)
  4,138,560 ( 0.00%)      if (is_learned_klause (c))
  8,277,120 ( 0.00%)  => build/../src/kitten.c:is_learned_klause (827,712x)
          .                 continue;
  4,966,272 ( 0.00%)      if (!is_core_klause (c))
  8,277,120 ( 0.00%)  => build/../src/kitten.c:is_core_klause (827,712x)
    621,981 ( 0.00%)        continue;
    617,193 ( 0.00%)      unset_core_klause (c);
  2,468,772 ( 0.00%)  => build/../src/kitten.c:unset_core_klause (205,731x)
    822,924 ( 0.00%)      const unsigned dst = (unsigned *) q - (unsigned *) begin;
    617,193 ( 0.00%)      const unsigned size = c->size;
    411,462 ( 0.00%)      if (!size) {
          .                 if (!kitten->inconsistent)
          .                   kitten->inconsistent = dst;
    411,462 ( 0.00%)      } else if (size == 1)
    111,104 ( 0.00%)        PUSH_STACK (kitten->units, dst);
          .               else {
  1,384,565 ( 0.00%)        watch_klause (kitten, c->lits[0], c, dst);
 16,021,395 ( 0.01%)  => build/../src/kitten.c:watch_klause (197,795x)
  1,384,565 ( 0.00%)        watch_klause (kitten, c->lits[1], c, dst);
 16,812,575 ( 0.01%)  => build/../src/kitten.c:watch_klause (197,795x)
          .               }
    617,193 ( 0.00%)      if (c == q)
     93,840 ( 0.00%)        q = next;
          .               else {
    523,353 ( 0.00%)        const size_t bytes = (char *) next - (char *) c;
  1,046,706 ( 0.00%)        memmove (q, c, bytes);
  2,293,116 ( 0.00%)  => ???:0x000000000010c860 (174,451x)
    348,902 ( 0.00%)        q = (klause *) ((char *) q + bytes);
          .               }
          .           #ifdef LOGGING
    411,462 ( 0.00%)      original++;
          .           #endif
          .             }
    483,165 ( 0.00%)    SET_END_OF_STACK (kitten->klauses, (unsigned *) q);
    322,110 ( 0.00%)    kitten->end_original_ref = SIZE_STACK (kitten->klauses);
    161,055 ( 0.00%)    LOG ("end of original clauses at %zu", kitten->end_original_ref);
    161,055 ( 0.00%)    LOG ("%u original clauses left", original);
          .           
    128,844 ( 0.00%)    CLEAR_STACK (kitten->core);
          .           
    354,321 ( 0.00%)    UPDATE_STATUS (0);
    128,844 ( 0.00%)  }
          .           
 91,072,940 ( 0.04%)  signed char kitten_value (kitten *kitten, unsigned elit) {
 78,062,520 ( 0.03%)    REQUIRE_STATUS (10);
 39,031,260 ( 0.02%)    const unsigned eidx = elit / 2;
 65,052,100 ( 0.03%)    if (eidx >= kitten->evars)
          .               return 0;
 91,072,940 ( 0.04%)    unsigned iidx = kitten->import[eidx];
 26,020,840 ( 0.01%)    if (!iidx)
          .               return 0;
 91,072,940 ( 0.04%)    const unsigned ilit = 2 * (iidx - 1) + (elit & 1);
 65,052,100 ( 0.03%)    return kitten->values[ilit];
 39,031,260 ( 0.02%)  }
          .           
    143,085 ( 0.00%)  signed char kitten_fixed (kitten *kitten, unsigned elit) {
     85,851 ( 0.00%)    const unsigned eidx = elit / 2;
    143,085 ( 0.00%)    if (eidx >= kitten->evars)
          .               return 0;
    200,319 ( 0.00%)    unsigned iidx = kitten->import[eidx];
     57,234 ( 0.00%)    if (!iidx)
          .               return 0;
     28,617 ( 0.00%)    iidx--;
    171,702 ( 0.00%)    const unsigned ilit = 2 * iidx + (elit & 1);
    171,702 ( 0.00%)    signed char res = kitten->values[ilit];
     57,234 ( 0.00%)    if (!res)
        136 ( 0.00%)      return 0;
    171,294 ( 0.00%)    kar *v = kitten->vars + iidx;
    114,196 ( 0.00%)    if (v->level)
     57,030 ( 0.00%)      return 0;
         34 ( 0.00%)    return res;
     57,234 ( 0.00%)  }
          .           
 16,460,822 ( 0.01%)  bool kitten_flip_literal (kitten *kitten, unsigned elit) {
 14,109,276 ( 0.01%)    REQUIRE_STATUS (10);
  7,054,638 ( 0.00%)    const unsigned eidx = elit / 2;
 11,757,730 ( 0.00%)    if (eidx >= kitten->evars)
          .               return false;
 16,460,822 ( 0.01%)    unsigned iidx = kitten->import[eidx];
  4,703,092 ( 0.00%)    if (!iidx)
          .               return false;
 16,460,822 ( 0.01%)    const unsigned ilit = 2 * (iidx - 1) + (elit & 1);
 11,757,730 ( 0.00%)    return flip_literal (kitten, ilit);
711,540,456 ( 0.30%)  => build/../src/kitten.c:flip_literal (2,351,546x)
  7,054,638 ( 0.00%)  }
          .           
          .           bool kitten_failed (kitten *kitten, unsigned elit) {
          .             REQUIRE_STATUS (20);
          .             const unsigned eidx = elit / 2;
          .             if (eidx >= kitten->evars)
          .               return false;
          .             unsigned iidx = kitten->import[eidx];
          .             if (!iidx)
-- line 2125 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/ifthenelse.c
--------------------------------------------------------------------------------
Ir                  

         .           #include "ifthenelse.h"
         .           #include "eliminate.h"
         .           #include "gates.h"
         .           #include "inline.h"
         .           
         .           static bool get_ternary_clause (kissat *solver, reference ref, unsigned *p,
17,302,905 ( 0.01%)                                  unsigned *q, unsigned *r) {
11,535,270 ( 0.00%)    clause *clause = kissat_dereference_clause (solver, ref);
262,576,497 ( 0.11%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (1,922,545x)
 9,612,725 ( 0.00%)    if (clause->garbage)
         .               return false;
 5,767,635 ( 0.00%)    const value *const values = solver->values;
 5,767,635 ( 0.00%)    unsigned a = INVALID_LIT, b = INVALID_LIT, c = INVALID_LIT;
 1,922,545 ( 0.00%)    unsigned found = 0;
71,660,973 ( 0.03%)    for (all_literals_in_clause (other, clause)) {
32,880,530 ( 0.01%)      const value value = values[other];
13,152,212 ( 0.01%)      if (value > 0) {
         .                 kissat_eliminate_clause (solver, clause, INVALID_LIT);
         .                 return false;
         .               }
13,152,212 ( 0.01%)      if (value < 0)
     7,610 ( 0.00%)        continue;
19,705,488 ( 0.01%)      if (++found == 1)
 5,767,635 ( 0.00%)        a = other;
 9,291,902 ( 0.00%)      else if (found == 2)
 5,767,635 ( 0.00%)        b = other;
 5,446,812 ( 0.00%)      else if (found == 3)
 5,762,760 ( 0.00%)        c = other;
         .               else
 1,604,972 ( 0.00%)        return false;
         .             }
 2,240,118 ( 0.00%)    if (found != 3)
     3,250 ( 0.00%)      return false;
 2,236,868 ( 0.00%)    assert (a != INVALID_LIT);
 2,236,868 ( 0.00%)    assert (b != INVALID_LIT);
 2,236,868 ( 0.00%)    assert (c != INVALID_LIT);
 3,355,302 ( 0.00%)    *p = a;
 3,355,302 ( 0.00%)    *q = b;
 3,355,302 ( 0.00%)    *r = c;
 1,118,434 ( 0.00%)    return true;
 3,845,090 ( 0.00%)  }
         .           
         .           static bool match_ternary_ref (kissat *solver, reference ref, unsigned a,
 1,422,405 ( 0.00%)                                 unsigned b, unsigned c) {
   948,270 ( 0.00%)    clause *clause = kissat_dereference_clause (solver, ref);
21,532,425 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (158,045x)
   790,225 ( 0.00%)    if (clause->garbage)
         .               return false;
   474,135 ( 0.00%)    const value *const values = solver->values;
   158,045 ( 0.00%)    unsigned found = 0;
 3,659,084 ( 0.00%)    for (all_literals_in_clause (other, clause)) {
 1,324,295 ( 0.00%)      const value value = values[other];
   529,718 ( 0.00%)      if (value > 0) {
         .                 kissat_eliminate_clause (solver, clause, INVALID_LIT);
         .                 return false;
         .               }
   529,718 ( 0.00%)      if (value < 0)
        60 ( 0.00%)        continue;
 1,911,915 ( 0.00%)      if (a != other && b != other && c != other)
   282,802 ( 0.00%)        return false;
   246,796 ( 0.00%)      found++;
         .             }
    33,288 ( 0.00%)    if (found == 3)
    33,280 ( 0.00%)      return true;
         8 ( 0.00%)    solver->resolve_gate = true;
         4 ( 0.00%)    return true;
   316,090 ( 0.00%)  }
         .           
         .           static bool match_ternary_watch (kissat *solver, watch watch, unsigned a,
 1,474,551 ( 0.00%)                                   unsigned b, unsigned c) {
   655,356 ( 0.00%)    if (watch.type.binary) {
    17,382 ( 0.00%)      const unsigned other = watch.binary.lit;
    34,746 ( 0.00%)      if (other != b && other != c)
    11,082 ( 0.00%)        return false;
       506 ( 0.00%)      solver->resolve_gate = true;
       506 ( 0.00%)      return true;
         .             } else {
   474,135 ( 0.00%)      const reference ref = watch.large.ref;
 1,264,360 ( 0.00%)      return match_ternary_ref (solver, ref, a, b, c);
34,192,563 ( 0.01%)  => build/../src/ifthenelse.c:match_ternary_ref (158,045x)
         .             }
   327,678 ( 0.00%)  }
         .           
         .           static inline const watch *find_ternary_clause (kissat *solver,
         .                                                           uint64_t *steps, unsigned a,
   209,832 ( 0.00%)                                                  unsigned b, unsigned c) {
   288,519 ( 0.00%)    watches *watches = &WATCHES (a);
   157,374 ( 0.00%)    const watch *const begin = BEGIN_WATCHES (*watches);
   209,832 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (26,229x)
   157,374 ( 0.00%)    const watch *const end = END_WATCHES (*watches);
   209,832 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (26,229x)
   745,142 ( 0.00%)    for (const watch *p = begin; p != end; p++) {
   819,195 ( 0.00%)      *steps += 1;
 1,802,229 ( 0.00%)      if (match_ternary_watch (solver, *p, a, b, c))
38,452,865 ( 0.02%)  => build/../src/ifthenelse.c:match_ternary_watch (163,839x)
    33,794 ( 0.00%)        return p;
         .             }
     9,332 ( 0.00%)    return 0;
    52,458 ( 0.00%)  }
         .           
         .           bool kissat_find_if_then_else_gate (kissat *solver, unsigned lit,
 1,074,398 ( 0.00%)                                      unsigned negative) {
   330,584 ( 0.00%)    if (!GET_OPTION (ifthenelse))
         .               return false;
   909,106 ( 0.00%)    watches *watches = &WATCHES (lit);
   495,876 ( 0.00%)    const watch *const begin = BEGIN_WATCHES (*watches);
   661,168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_begin_vector (82,646x)
   495,876 ( 0.00%)    const watch *const end = END_WATCHES (*watches);
   661,168 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inlinevector.h:kissat_end_vector (82,646x)
   247,938 ( 0.00%)    if (begin == end)
         .               return false;
    82,646 ( 0.00%)    uint64_t large_clauses = 0;
 4,754,468 ( 0.00%)    for (const watch *p = begin; p != end; p++)
 6,387,888 ( 0.00%)      if (!p->type.binary)
 1,012,075 ( 0.00%)        large_clauses++;
   330,584 ( 0.00%)    const uint64_t limit = GET_OPTION (eliminateocclim);
   330,584 ( 0.00%)    if (large_clauses * large_clauses > limit)
     7,318 ( 0.00%)      return false;
   236,961 ( 0.00%)    const watch *const last = end - 1;
    78,987 ( 0.00%)    uint64_t steps = 0;
 4,457,930 ( 0.00%)    for (const watch *p1 = begin; steps < limit && p1 != last; p1++) {
 1,624,659 ( 0.00%)      watch w1 = *p1;
 2,166,212 ( 0.00%)      if (w1.type.binary)
    74,386 ( 0.00%)        continue;
         .               unsigned a1, b1, c1;
 7,565,400 ( 0.00%)      if (!get_ternary_clause (solver, p1->large.ref, &a1, &b1, &c1))
137,140,399 ( 0.06%)  => build/../src/ifthenelse.c:get_ternary_clause (504,360x)
   223,587 ( 0.00%)        continue;
   842,319 ( 0.00%)      if (b1 == lit)
   592,512 ( 0.00%)        SWAP (unsigned, a1, b1);
   842,319 ( 0.00%)      if (c1 == lit)
   466,056 ( 0.00%)        SWAP (unsigned, a1, c1);
   842,319 ( 0.00%)      assert (a1 == lit);
13,047,001 ( 0.01%)      for (const watch *p2 = p1 + 1; steps < limit && p2 != end; p2++) {
 4,289,394 ( 0.00%)        watch w2 = *p2;
 5,719,192 ( 0.00%)        if (w2.type.binary)
    23,226 ( 0.00%)          continue;
         .                 unsigned a2, b2, c2;
21,272,775 ( 0.01%)        if (!get_ternary_clause (solver, p2->large.ref, &a2, &b2, &c2))
385,528,956 ( 0.16%)  => build/../src/ifthenelse.c:get_ternary_clause (1,418,185x)
 1,161,048 ( 0.00%)          continue;
 2,512,983 ( 0.00%)        if (b2 == lit)
 1,777,842 ( 0.00%)          SWAP (unsigned, a2, b2);
 2,512,983 ( 0.00%)        if (c2 == lit)
 1,325,058 ( 0.00%)          SWAP (unsigned, a2, c2);
 2,512,983 ( 0.00%)        assert (a2 == lit);
15,077,898 ( 0.01%)        if (STRIP (b1) == STRIP (c2))
   364,056 ( 0.00%)          SWAP (unsigned, b2, c2);
15,077,898 ( 0.01%)        if (STRIP (c1) == STRIP (c2))
   233,942 ( 0.00%)          continue;
 6,486,210 ( 0.00%)        const unsigned not_b2 = NOT (b2);
 2,162,070 ( 0.00%)        if (b1 != not_b2)
 1,410,200 ( 0.00%)          continue;
    31,180 ( 0.00%)        solver->resolve_gate = false;
   124,720 ( 0.00%)        const unsigned not_lit = NOT (lit);
   140,310 ( 0.00%)        const unsigned not_c1 = NOT (c1);
         .                 const watch *const p3 =
   140,310 ( 0.00%)            find_ternary_clause (solver, &steps, not_lit, b1, not_c1);
23,731,197 ( 0.01%)  => build/../src/ifthenelse.c:find_ternary_clause (15,590x)
    31,180 ( 0.00%)        if (!p3)
     9,902 ( 0.00%)          continue;
    95,751 ( 0.00%)        const unsigned not_c2 = NOT (c2);
         .                 const watch *const p4 =
    95,751 ( 0.00%)            find_ternary_clause (solver, &steps, not_lit, b2, not_c2);
19,416,581 ( 0.01%)  => build/../src/ifthenelse.c:find_ternary_clause (10,639x)
    21,278 ( 0.00%)        if (!p4)
     4,381 ( 0.00%)          continue;
    43,586 ( 0.00%)        watch w3 = p3 < p4 ? *p3 : *p4;
    43,586 ( 0.00%)        watch w4 = p3 < p4 ? *p4 : *p3;
    25,032 ( 0.00%)        LOGWATCH (lit, w1, "1st if-then-else");
    25,032 ( 0.00%)        LOGWATCH (lit, w2, "2nd if-then-else");
    25,032 ( 0.00%)        LOGWATCH (not_lit, w3, "3rd if-then-else");
    25,032 ( 0.00%)        LOGWATCH (not_lit, w4, "4th if-then-else");
    37,548 ( 0.00%)        LOG ("found if-then-else gate %s = (%s ? %s : %s)", LOGLIT (lit),
         .                      LOGLIT (NOT (b1)), LOGLIT (not_c1), LOGLIT (not_c2));
    25,032 ( 0.00%)        solver->gate_eliminated = GATE_ELIMINATED (if_then_else);
   256,578 ( 0.00%)        PUSH_STACK (solver->gates[negative], w1);
   256,578 ( 0.00%)        PUSH_STACK (solver->gates[negative], w2);
   312,900 ( 0.00%)        PUSH_STACK (solver->gates[!negative], w3);
   312,900 ( 0.00%)        PUSH_STACK (solver->gates[!negative], w4);
    25,032 ( 0.00%)        INC (if_then_else_extracted);
    93,870 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_if_then_else_extracted (6,258x)
    12,516 ( 0.00%)        return true;
         .               }
         .             }
    72,729 ( 0.00%)    return false;
   743,814 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/clause.c
--------------------------------------------------------------------------------
Ir                 

        .           #include "allocate.h"
        .           #include "collect.h"
        .           #include "inline.h"
        .           
        .           #include <string.h>
        .           
        .           static void inc_clause (kissat *solver, bool original, bool redundant,
3,978,250 ( 0.00%)                          bool binary) {
  795,650 ( 0.00%)    if (binary)
  598,575 ( 0.00%)      INC (clauses_binary);
1,795,725 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_binary (119,715x)
  556,220 ( 0.00%)    else if (redundant)
  114,070 ( 0.00%)      INC (clauses_redundant);
  342,210 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_redundant (22,814x)
        .             else
1,021,184 ( 0.00%)      INC (clauses_irredundant);
3,829,440 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_irredundant (255,296x)
1,591,300 ( 0.00%)    INC (clauses_added);
5,967,375 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_added (397,825x)
  795,650 ( 0.00%)    if (original)
  734,564 ( 0.00%)      INC (clauses_original);
2,754,615 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_original (183,641x)
1,193,475 ( 0.00%)  }
        .           
3,010,800 ( 0.00%)  static void dec_clause (kissat *solver, bool redundant, bool binary) {
  602,160 ( 0.00%)    if (binary)
  452,704 ( 0.00%)      DEC (clauses_binary);
1,697,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_dec_clauses_binary (113,176x)
  375,808 ( 0.00%)    else if (redundant)
   65,032 ( 0.00%)      DEC (clauses_redundant);
  243,870 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_dec_clauses_redundant (16,258x)
        .             else
  686,584 ( 0.00%)      DEC (clauses_irredundant);
2,574,690 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_dec_clauses_irredundant (171,646x)
1,032,674 ( 0.00%)  }
        .           
        .           static void init_clause (clause *res, bool redundant, unsigned glue,
2,502,990 ( 0.00%)                           unsigned size) {
        .             assert (size <= UINT_MAX);
1,066,812 ( 0.00%)    assert (redundant || !glue);
        .           
1,390,550 ( 0.00%)    glue = MIN (MAX_GLUE, glue);
        .           
2,781,100 ( 0.00%)    res->glue = glue;
1,112,440 ( 0.00%)    res->garbage = false;
1,112,440 ( 0.00%)    res->quotient = false;
1,112,440 ( 0.00%)    res->reason = false;
2,502,990 ( 0.00%)    res->redundant = redundant;
1,112,440 ( 0.00%)    res->shrunken = false;
1,112,440 ( 0.00%)    res->subsume = false;
1,112,440 ( 0.00%)    res->swept = false;
1,112,440 ( 0.00%)    res->vivify = false;
        .           
1,112,440 ( 0.00%)    res->used = 0;
        .           
  556,220 ( 0.00%)    res->searched = 2;
  834,330 ( 0.00%)    res->size = size;
  834,330 ( 0.00%)  }
        .           
2,501,766 ( 0.00%)  void kissat_connect_referenced (kissat *solver, reference ref) {
1,250,883 ( 0.00%)    watches *all_watches = solver->watches;
2,501,766 ( 0.00%)    clause *c = kissat_dereference_clause (solver, ref);
57,120,909 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_dereference_clause (416,961x)
2,501,766 ( 0.00%)    kissat_inlined_connect_clause (solver, all_watches, c, ref);
412,840,374 ( 0.17%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_inlined_connect_clause (416,961x)
1,250,883 ( 0.00%)  }
        .           
2,950,074 ( 0.00%)  void kissat_connect_clause (kissat *solver, clause *c) {
1,475,037 ( 0.00%)    watches *all_watches = solver->watches;
2,950,074 ( 0.00%)    const reference ref = kissat_reference_clause (solver, c);
55,465,331 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_reference_clause (491,679x)
2,950,074 ( 0.00%)    kissat_inlined_connect_clause (solver, all_watches, c, ref);
412,192,343 ( 0.17%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_inlined_connect_clause (491,679x)
1,475,037 ( 0.00%)  }
        .           
        .           static reference new_binary_clause (kissat *solver, bool original,
        .                                               bool watch, unsigned first,
1,316,865 ( 0.00%)                                      unsigned second) {
  359,145 ( 0.00%)    assert (first != second);
1,077,435 ( 0.00%)    assert (first != NOT (second));
  239,430 ( 0.00%)    if (watch)
  712,992 ( 0.00%)      kissat_watch_binary (solver, first, second);
49,650,578 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_binary (118,832x)
  598,575 ( 0.00%)    kissat_mark_added_literal (solver, first);
6,464,040 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (119,715x)
  598,575 ( 0.00%)    kissat_mark_added_literal (solver, second);
7,332,081 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_added_literal (119,715x)
  718,290 ( 0.00%)    inc_clause (solver, original, false, true);
8,197,326 ( 0.00%)  => build/../src/clause.c:inc_clause (119,715x)
  478,860 ( 0.00%)    if (!original) {
  411,210 ( 0.00%)      CHECK_AND_ADD_BINARY (first, second);
4,163,574,013 ( 1.76%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_binary (41,121x)
  164,484 ( 0.00%)      ADD_BINARY_TO_PROOF (first, second);
        .             }
  119,715 ( 0.00%)    return INVALID_REF;
  239,430 ( 0.00%)  }
        .           
        .           static reference new_large_clause (kissat *solver, bool original,
        .                                              bool redundant, unsigned glue,
3,337,320 ( 0.00%)                                     unsigned size, unsigned *lits) {
  556,220 ( 0.00%)    assert (size > 2);
1,668,660 ( 0.00%)    reference res = kissat_allocate_clause (solver, size);
38,280,585 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/arena.c:kissat_allocate_clause (278,110x)
1,668,660 ( 0.00%)    clause *c = kissat_unchecked_dereference_clause (solver, res);
6,118,420 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_unchecked_dereference_clause (278,110x)
1,668,660 ( 0.00%)    init_clause (c, redundant, glue, size);
21,368,842 ( 0.01%)  => build/../src/clause.c:init_clause (278,110x)
2,224,880 ( 0.00%)    memcpy (c->lits, lits, size * sizeof (unsigned));
4,242,076 ( 0.00%)  => ???:0x000000000010c650 (278,110x)
1,668,660 ( 0.00%)    LOGREF (res, "new");
1,112,440 ( 0.00%)    if (solver->watching)
1,278,610 ( 0.00%)      kissat_watch_reference (solver, lits[0], lits[1], res);
92,961,049 ( 0.04%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_watch_reference (127,861x)
        .             else
  751,245 ( 0.00%)      kissat_connect_clause (solver, c);
180,610,354 ( 0.08%)  => build/../src/clause.c:kissat_connect_clause (150,249x)
  556,220 ( 0.00%)    if (redundant) {
   91,256 ( 0.00%)      if (solver->first_reducible == INVALID_REF)
        4 ( 0.00%)        solver->first_reducible = res;
        .             } else {
1,531,776 ( 0.00%)      kissat_mark_added_literals (solver, size, lits);
76,719,871 ( 0.03%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_added_literals (255,296x)
  765,888 ( 0.00%)      solver->last_irredundant = res;
        .             }
1,668,660 ( 0.00%)    inc_clause (solver, original, redundant, false);
17,870,977 ( 0.01%)  => build/../src/clause.c:inc_clause (278,110x)
1,112,440 ( 0.00%)    if (!original) {
1,557,567 ( 0.00%)      CHECK_AND_ADD_CLAUSE (c);
25,377,712,621 (10.73%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_check_and_add_clause (173,063x)
  692,252 ( 0.00%)      ADD_CLAUSE_TO_PROOF (c);
        .             }
  278,110 ( 0.00%)    return res;
  556,220 ( 0.00%)  }
        .           
        .           static reference new_clause (kissat *solver, bool original, bool redundant,
4,409,628 ( 0.00%)                               unsigned glue, unsigned size, unsigned *lits) {
        .             reference res;
  734,938 ( 0.00%)    if (size == 2)
1,251,026 ( 0.00%)      res = new_binary_clause (solver, original, true, lits[0], lits[1]);
218,797,103 ( 0.09%)  => build/../src/clause.c:new_binary_clause (89,359x)
        .             else
3,059,210 ( 0.00%)      res = new_large_clause (solver, original, redundant, glue, size, lits);
25,840,630,543 (10.93%)  => build/../src/clause.c:new_large_clause (278,110x)
1,102,407 ( 0.00%)    kissat_defrag_watches_if_needed (solver);
45,641,732 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/collect.h:kissat_defrag_watches_if_needed (367,469x)
  367,469 ( 0.00%)    return res;
  734,938 ( 0.00%)  }
        .           
        .           void kissat_new_binary_clause (kissat *solver, unsigned first,
  206,311 ( 0.00%)                                 unsigned second) {
  265,257 ( 0.00%)    (void) new_binary_clause (solver, false, true, first, second);
4,020,023,246 ( 1.70%)  => build/../src/clause.c:new_binary_clause (29,473x)
   88,419 ( 0.00%)  }
        .           
        .           void kissat_new_unwatched_binary_clause (kissat *solver, unsigned first,
    6,181 ( 0.00%)                                           unsigned second) {
    7,947 ( 0.00%)    (void) new_binary_clause (solver, false, false, first, second);
3,432,695 ( 0.00%)  => build/../src/clause.c:new_binary_clause (883x)
    2,649 ( 0.00%)  }
        .           
  918,205 ( 0.00%)  reference kissat_new_original_clause (kissat *solver) {
1,469,128 ( 0.00%)    const unsigned size = SIZE_STACK (solver->clause);
  550,923 ( 0.00%)    unsigned *lits = BEGIN_STACK (solver->clause);
1,101,846 ( 0.00%)    kissat_sort_literals (solver, size, lits);
17,083,968 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/sort.c:kissat_sort_literals (183,641x)
2,020,051 ( 0.00%)    reference res = new_clause (solver, true, false, 0, size, lits);
216,617,847 ( 0.09%)  => build/../src/clause.c:new_clause (183,641x)
  183,641 ( 0.00%)    return res;
  367,282 ( 0.00%)  }
        .           
  801,000 ( 0.00%)  reference kissat_new_irredundant_clause (kissat *solver) {
1,281,600 ( 0.00%)    const unsigned size = SIZE_STACK (solver->clause);
  480,600 ( 0.00%)    unsigned *lits = BEGIN_STACK (solver->clause);
1,602,000 ( 0.00%)    return new_clause (solver, false, false, 0, size, lits);
1,911,745,253 ( 0.81%)  => build/../src/clause.c:new_clause (160,200x)
  320,400 ( 0.00%)  }
        .           
  141,768 ( 0.00%)  reference kissat_new_redundant_clause (kissat *solver, unsigned glue) {
  189,024 ( 0.00%)    const unsigned size = SIZE_STACK (solver->clause);
   70,884 ( 0.00%)    unsigned *lits = BEGIN_STACK (solver->clause);
  259,908 ( 0.00%)    return new_clause (solver, false, true, glue, size, lits);
23,988,365,894 (10.15%)  => build/../src/clause.c:new_clause (23,628x)
   47,256 ( 0.00%)  }
        .           
1,127,424 ( 0.00%)  static void mark_clause_as_garbage (kissat *solver, clause *c) {
1,315,328 ( 0.00%)    assert (!c->garbage);
1,127,424 ( 0.00%)    LOGCLS (c, "garbage");
1,315,328 ( 0.00%)    if (!c->redundant)
1,373,168 ( 0.00%)      kissat_mark_removed_literals (solver, c->size, c->lits);
39,782,762 ( 0.02%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/flags.c:kissat_mark_removed_literals (171,646x)
1,691,136 ( 0.00%)    REMOVE_CHECKER_CLAUSE (c);
666,973,132 ( 0.28%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_clause (187,904x)
  751,616 ( 0.00%)    DELETE_CLAUSE_FROM_PROOF (c);
  751,616 ( 0.00%)    assert (c->size > 2);
1,879,040 ( 0.00%)    dec_clause (solver, c->redundant, false);
6,780,802 ( 0.00%)  => build/../src/clause.c:dec_clause (187,904x)
  751,616 ( 0.00%)    c->garbage = true;
  563,712 ( 0.00%)  }
        .           
1,127,424 ( 0.00%)  void kissat_mark_clause_as_garbage (kissat *solver, clause *c) {
1,315,328 ( 0.00%)    assert (!c->garbage);
  939,520 ( 0.00%)    mark_clause_as_garbage (solver, c);
726,184,104 ( 0.31%)  => build/../src/clause.c:mark_clause_as_garbage (187,904x)
  751,616 ( 0.00%)    size_t bytes = kissat_actual_bytes_of_clause (c);
9,047,874 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_actual_bytes_of_clause (187,904x)
1,127,424 ( 0.00%)    ADD (arena_garbage, bytes);
3,758,080 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_add_arena_garbage (187,904x)
  563,712 ( 0.00%)  }
        .           
1,141,488 ( 0.00%)  clause *kissat_delete_clause (kissat *solver, clause *c) {
1,141,488 ( 0.00%)    LOGCLS (c, "delete");
  760,992 ( 0.00%)    assert (c->size > 2);
  951,240 ( 0.00%)    assert (c->garbage);
  760,992 ( 0.00%)    size_t bytes = kissat_actual_bytes_of_clause (c);
9,161,585 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/clause.h:kissat_actual_bytes_of_clause (190,248x)
1,141,488 ( 0.00%)    SUB (arena_garbage, bytes);
3,234,216 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_sub_arena_garbage (190,248x)
  760,992 ( 0.00%)    INC (clauses_deleted);
2,853,720 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_deleted (190,248x)
  570,744 ( 0.00%)    return (clause *) ((char *) c + bytes);
  380,496 ( 0.00%)  }
        .           
  792,232 ( 0.00%)  void kissat_delete_binary (kissat *solver, unsigned a, unsigned b) {
  679,056 ( 0.00%)    LOGBINARY (a, b, "delete");
  565,880 ( 0.00%)    kissat_mark_removed_literal (solver, a);
4,219,156 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (113,176x)
  565,880 ( 0.00%)    kissat_mark_removed_literal (solver, b);
4,194,808 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/inline.h:kissat_mark_removed_literal (113,176x)
1,131,760 ( 0.00%)    REMOVE_CHECKER_BINARY (a, b);
221,805,891 ( 0.09%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/check.c:kissat_remove_checker_binary (113,176x)
  452,704 ( 0.00%)    DELETE_BINARY_FROM_PROOF (a, b);
  565,880 ( 0.00%)    dec_clause (solver, false, true);
3,961,160 ( 0.00%)  => build/../src/clause.c:dec_clause (113,176x)
  452,704 ( 0.00%)    INC (clauses_deleted);
1,697,640 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/statistics.h:kissat_inc_clauses_deleted (113,176x)
  339,528 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: build/../src/inlineheap.h
--------------------------------------------------------------------------------
Ir                   

-- line 5 ----------------------------------------
          .           #include "internal.h"
          .           #include "logging.h"
          .           
          .           #define HEAP_CHILD(POS) (assert ((POS) < (1u << 31)), (2 * (POS) + 1))
          .           
          .           #define HEAP_PARENT(POS) (assert ((POS) > 0), (((POS) -1) / 2))
          .           
          .           static inline void kissat_bubble_up (kissat *solver, heap *heap,
 42,844,542 ( 0.02%)                                       unsigned idx) {
 21,422,271 ( 0.01%)    unsigned *stack = BEGIN_STACK (heap->stack);
 21,422,271 ( 0.01%)    unsigned *pos = heap->pos;
 42,844,542 ( 0.02%)    unsigned idx_pos = pos[idx];
 21,422,271 ( 0.01%)    const double *const score = heap->score;
 42,844,542 ( 0.02%)    const double idx_score = score[idx];
 41,915,497 ( 0.02%)    while (idx_pos) {
103,931,316 ( 0.04%)      const unsigned parent_pos = HEAP_PARENT (idx_pos);
103,931,316 ( 0.04%)      const unsigned parent = stack[parent_pos];
121,253,202 ( 0.05%)      if (score[parent] >= idx_score)
  7,097,101 ( 0.00%)        break;
 61,348,710 ( 0.03%)      LOG ("heap bubble up: %u@%u = %g swapped with %u@%u = %g", parent,
          .                    parent_pos, score[parent], idx, idx_pos, idx_score);
 61,348,710 ( 0.03%)      stack[idx_pos] = parent;
 61,348,710 ( 0.03%)      pos[parent] = idx_pos;
 20,449,570 ( 0.01%)      idx_pos = parent_pos;
          .             }
 42,844,542 ( 0.02%)    stack[idx_pos] = idx;
 42,844,542 ( 0.02%)    pos[idx] = idx_pos;
          .           #ifndef LOGGING
          .             (void) solver;
          .           #endif
 21,422,271 ( 0.01%)  }
          .           
          .           static inline void kissat_bubble_down (kissat *solver, heap *heap,
 18,071,184 ( 0.01%)                                         unsigned idx) {
  9,035,592 ( 0.00%)    unsigned *stack = BEGIN_STACK (heap->stack);
 24,094,912 ( 0.01%)    const unsigned end = SIZE_STACK (heap->stack);
  9,035,592 ( 0.00%)    unsigned *pos = heap->pos;
 18,071,184 ( 0.01%)    unsigned idx_pos = pos[idx];
  9,035,592 ( 0.00%)    const double *const score = heap->score;
 18,071,184 ( 0.01%)    const double idx_score = score[idx];
  8,094,453 ( 0.00%)    for (;;) {
 77,744,219 ( 0.03%)      unsigned child_pos = HEAP_CHILD (idx_pos);
 33,318,951 ( 0.01%)      if (child_pos >= end)
  4,118,838 ( 0.00%)        break;
 54,281,388 ( 0.02%)      unsigned child = stack[child_pos];
 54,281,388 ( 0.02%)      double child_score = score[child];
 27,140,694 ( 0.01%)      const unsigned sibling_pos = child_pos + 1;
 27,140,694 ( 0.01%)      if (sibling_pos < end) {
 54,209,814 ( 0.02%)        const unsigned sibling = stack[sibling_pos];
 54,209,814 ( 0.02%)        const double sibling_score = score[sibling];
 27,104,907 ( 0.01%)        if (sibling_score > child_score) {
  9,144,528 ( 0.00%)          child = sibling;
  9,144,528 ( 0.00%)          child_pos = sibling_pos;
  9,144,528 ( 0.00%)          child_score = sibling_score;
          .                 }
          .               }
 27,140,694 ( 0.01%)      if (child_score <= idx_score)
    952,445 ( 0.00%)        break;
 48,566,718 ( 0.02%)      LOG ("heap bubble down: %u@%u = %g swapped with %u@%u = %g", child,
          .                    child_pos, score[child], idx, idx_pos, idx_score);
 48,566,718 ( 0.02%)      stack[idx_pos] = child;
 48,566,718 ( 0.02%)      pos[child] = idx_pos;
 16,188,906 ( 0.01%)      idx_pos = child_pos;
          .             }
 18,071,184 ( 0.01%)    stack[idx_pos] = idx;
 18,071,184 ( 0.01%)    pos[idx] = idx_pos;
          .           #ifndef LOGGING
          .             (void) solver;
          .           #endif
  9,035,592 ( 0.00%)  }
          .           
          .           #define HEAP_IMPORT(IDX) \
          .             do { \
          .               assert ((IDX) < UINT_MAX - 1); \
          .               if (heap->vars <= (IDX)) \
          .                 kissat_enlarge_heap (solver, heap, (IDX) + 1); \
          .             } while (0)
          .           
          .           #define CHECK_HEAP_IMPORTED(IDX)
          .           
          .           static inline void kissat_push_heap (kissat *solver, heap *heap,
  4,385,586 ( 0.00%)                                       unsigned idx) {
  4,385,586 ( 0.00%)    LOG ("push heap %u", idx);
  5,847,448 ( 0.00%)    assert (!kissat_heap_contains (heap, idx));
 14,618,620 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (730,931x)
  4,385,586 ( 0.00%)    HEAP_IMPORT (idx);
 10,963,965 ( 0.00%)    heap->pos[idx] = SIZE_STACK (heap->stack);
  9,504,690 ( 0.00%)    PUSH_STACK (heap->stack, idx);
  2,459,525 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/stack.c:kissat_stack_enlarge (199x)
  4,385,586 ( 0.00%)    kissat_bubble_up (solver, heap, idx);
114,139,384 ( 0.05%)  => build/../src/inlineheap.h:kissat_bubble_up (730,931x)
  2,192,793 ( 0.00%)  }
          .           
          .           static inline void kissat_pop_heap (kissat *solver, heap *heap,
     67,404 ( 0.00%)                                      unsigned idx) {
     67,404 ( 0.00%)    LOG ("pop heap %u", idx);
     78,638 ( 0.00%)    assert (kissat_heap_contains (heap, idx));
    235,914 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (11,234x)
    168,510 ( 0.00%)    const unsigned last = POP_STACK (heap->stack);
     67,404 ( 0.00%)    heap->pos[last] = DISCONTAIN;
     33,702 ( 0.00%)    if (last == idx)
          1 ( 0.00%)      return;
     78,631 ( 0.00%)    const unsigned idx_pos = heap->pos[idx];
     67,398 ( 0.00%)    heap->pos[idx] = DISCONTAIN;
    190,961 ( 0.00%)    POKE_STACK (heap->stack, idx_pos, last);
     78,631 ( 0.00%)    heap->pos[last] = idx_pos;
     67,398 ( 0.00%)    kissat_bubble_up (solver, heap, last);
    876,234 ( 0.00%)  => build/../src/inlineheap.h:kissat_bubble_up (11,233x)
     78,631 ( 0.00%)    kissat_bubble_down (solver, heap, last);
  1,523,098 ( 0.00%)  => build/../src/inlineheap.h:kissat_bubble_down (11,233x)
          .           #ifdef CHECK_HEAP
          .             kissat_check_heap (heap);
          .           #endif
     22,468 ( 0.00%)  }
          .           
  2,155,700 ( 0.00%)  static inline unsigned kissat_pop_max_heap (kissat *solver, heap *heap) {
  2,586,840 ( 0.00%)    assert (!EMPTY_STACK (heap->stack));
  1,293,420 ( 0.00%)    unsigneds *stack = &heap->stack;
  1,293,420 ( 0.00%)    unsigned *const begin = BEGIN_STACK (*stack);
  1,293,420 ( 0.00%)    const unsigned idx = *begin;
  3,449,120 ( 0.00%)    assert (!heap->pos[idx]);
  2,586,840 ( 0.00%)    LOG ("pop max heap %u", idx);
  6,467,100 ( 0.00%)    const unsigned last = POP_STACK (*stack);
  1,293,420 ( 0.00%)    unsigned *const pos = heap->pos;
  2,155,700 ( 0.00%)    pos[last] = DISCONTAIN;
  1,293,420 ( 0.00%)    if (last == idx)
          6 ( 0.00%)      return idx;
  2,155,685 ( 0.00%)    pos[idx] = DISCONTAIN;
  1,293,411 ( 0.00%)    *begin = last;
  2,155,685 ( 0.00%)    pos[last] = 0;
  2,586,822 ( 0.00%)    kissat_bubble_down (solver, heap, last);
394,414,559 ( 0.17%)  => build/../src/inlineheap.h:kissat_bubble_down (431,137x)
          .           #ifdef CHECK_HEAP
          .             kissat_check_heap (heap);
          .           #endif
    431,137 ( 0.00%)    return idx;
    862,280 ( 0.00%)  }
          .           
          .           static inline void kissat_adjust_heap (kissat *solver, heap *heap,
  2,248,704 ( 0.00%)                                         unsigned idx) {
  1,124,352 ( 0.00%)    const unsigned new_vars = idx + 1;
  1,124,352 ( 0.00%)    const unsigned old_vars = heap->vars;
  1,124,352 ( 0.00%)    if (new_vars <= old_vars)
     81,536 ( 0.00%)      return;
    879,744 ( 0.00%)    const unsigned old_size = heap->size;
    879,744 ( 0.00%)    if (idx >= old_size) {
        819 ( 0.00%)      size_t new_size = old_size ? 2 * old_size : 1;
        480 ( 0.00%)      while (idx >= new_size)
          .                 new_size *= 2;
        360 ( 0.00%)      assert (new_size < DISCONTAIN);
        840 ( 0.00%)      kissat_resize_heap (solver, heap, new_size);
  5,859,902 ( 0.00%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_resize_heap (120x)
          .             }
  2,345,984 ( 0.00%)    kissat_enlarge_heap (solver, heap, idx + 1);
 27,796,703 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_enlarge_heap (293,248x)
    749,568 ( 0.00%)  }
          .           
          .           static inline void kissat_update_heap (kissat *solver, heap *heap,
166,520,340 ( 0.07%)                                         unsigned idx, double new_score) {
166,520,340 ( 0.07%)    const double old_score = kissat_get_heap_score (heap, idx);
451,172,538 ( 0.19%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_get_heap_score (23,788,620x)
142,731,720 ( 0.06%)    if (old_score == new_score)
 24,131,908 ( 0.01%)      return;
 71,281,899 ( 0.03%)    HEAP_IMPORT (idx);
 12,827,021 ( 0.01%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.c:kissat_enlarge_heap (135,129x)
 70,335,996 ( 0.03%)    LOG ("update heap %u score from %g to %g", idx, old_score, new_score);
 82,058,662 ( 0.03%)    heap->score[idx] = new_score;
 58,613,330 ( 0.02%)    if (!heap->tainted) {
         26 ( 0.00%)      heap->tainted = true;
         78 ( 0.00%)      LOG ("tainted heap");
          .             }
 93,781,328 ( 0.04%)    if (!kissat_heap_contains (heap, idx))
243,421,407 ( 0.10%)  => /home/noc/SatSolver/kissat/kissat_reset/build/../src/heap.h:kissat_heap_contains (11,722,666x)
  2,754,579 ( 0.00%)      return;
 26,904,261 ( 0.01%)    if (new_score > old_score)
 44,790,151 ( 0.02%)      kissat_bubble_up (solver, heap, idx);
767,520,308 ( 0.32%)  => build/../src/inlineheap.h:kissat_bubble_up (6,398,593x)
          .             else
 17,986,458 ( 0.01%)      kissat_bubble_down (solver, heap, idx);
393,716,486 ( 0.17%)  => build/../src/inlineheap.h:kissat_bubble_down (2,569,494x)
          .           #ifdef CHECK_HEAP
          .             kissat_check_heap (heap);
          .           #endif
 47,577,240 ( 0.02%)  }
          .           
          .           #endif

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                       
--------------------------------------------------------------------------------
233,748,944,583 (98.87%)  events annotated

